 0718                     stringcode:	
  1364  0718                     stringdir:	
  1365  0718  3007               	movlw	high stringdir
  1366  0719  008A               	movwf	10
  1367  071A  0804               	movf	4,w
  1368  071B  0A84               	incf	4,f
  1369  071C  0782               	addwf	2,f
  1370  071D                     __stringbase:	
  1371  071D  3400               	retlw	0
  1372  071E                     __end_of__stringtab:	
  1373  071E                     STR_12:	
  1374  071E  343C               	retlw	60	;'<'
  1375  071F  3420               	retlw	32	;' '
  1376  0720  3443               	retlw	67	;'C'
  1377  0721  3441               	retlw	65	;'A'
  1378  0722  344E               	retlw	78	;'N'
  1379  0723  3443               	retlw	67	;'C'
  1380  0724  3445               	retlw	69	;'E'
  1381  0725  344C               	retlw	76	;'L'
  1382  0726  344C               	retlw	76	;'L'
  1383  0727  3445               	retlw	69	;'E'
  1384  0728  3444               	retlw	68	;'D'
  1385  0729  3420               	retlw	32	;' '
  1386  072A  3421               	retlw	33	;'!'
  1387  072B  3421               	retlw	33	;'!'
  1388  072C  3420               	retlw	32	;' '
  1389  072D  343E               	retlw	62	;'>'
  1390  072E  3400               	retlw	0
  1391  072F                     STR_13:	
  1392  072F  343C               	retlw	60	;'<'
  1393  0730  3420               	retlw	32	;' '
  1394  0731  3446               	retlw	70	;'F'
  1395  0732  3449               	retlw	73	;'I'
  1396  0733  344E               	retlw	78	;'N'
  1397  0734  3449               	retlw	73	;'I'
  1398  0735  3453               	retlw	83	;'S'
  1399  0736  3448               	retlw	72	;'H'
  1400  0737  3445               	retlw	69	;'E'
  1401  0738  3444               	retlw	68	;'D'
  1402  0739  3420               	retlw	32	;' '
  1403  073A  3421               	retlw	33	;'!'
  1404  073B  3421               	retlw	33	;'!'
  1405  073C  3421               	retlw	33	;'!'
  1406  073D  3420               	retlw	32	;' '
  1407  073E  343E               	retlw	62	;'>'
  1408  073F  3400               	retlw	0
  1409  0740                     STR_14:	
  1410  0740  343C               	retlw	60	;'<'
  1411  0741  3420               	retlw	32	;' '
  1412  0742  3453               	retlw	83	;'S'
  1413  0743  3445               	retlw	69	;'E'
  1414  0744  3454               	retlw	84	;'T'
  1415  0745  3420               	retlw	32	;' '
  1416  0746  3454               	retlw	84	;'T'
  1417  0747  3449               	retlw	73	;'I'
  1418  0748  344D               	retlw	77	;'M'
  1419  0749  3445               	retlw	69	;'E'
  1420  074A  3420               	retlw	32	;' '
  1421  074B  3421               	retlw	33	;'!'
  1422  074C  3421               	retlw	33	;'!'
  1423  074D  3421               	retlw	33	;'!'
  1424  074E  3420               	retlw	32	;' '
  1425  074F  343E               	retlw	62	;'>'
  1426  0750  3400               	retlw	0
  1427  0751                     STR_16:	
  1428  0751  343C               	retlw	60	;'<'
  1429  0752  3420               	retlw	32	;' '
  1430  0753  3450               	retlw	80	;'P'
  1431  0754  3455               	retlw	85	;'U'
  1432  0755  3454               	retlw	84	;'T'
  1433  0756  3420               	retlw	32	;' '
  1434  0757  3446               	retlw	70	;'F'
  1435  0758  344F               	retlw	79	;'O'
  1436  0759  344F               	retlw	79	;'O'
  1437  075A  3444               	retlw	68	;'D'
  1438  075B  3420               	retlw	32	;' '
  1439  075C  3449               	retlw	73	;'I'
  1440  075D  344E               	retlw	78	;'N'
  1441  075E  3420               	retlw	32	;' '
  1442  075F  3421               	retlw	33	;'!'
  1443  0760  343E               	retlw	62	;'>'
  1444  0761  3400               	retlw	0
  1445  0762                     STR_10:	
  1446  0762  343C               	retlw	60	;'<'
  1447  0763  3420               	retlw	32	;' '
  1448  0764  3443               	retlw	67	;'C'
  1449  0765  3448               	retlw	72	;'H'
  1450  0766  3445               	retlw	69	;'E'
  1451  0767  3443               	retlw	67	;'C'
  1452  0768  344B               	retlw	75	;'K'
  1453  0769  3420               	retlw	32	;' '
  1454  076A  3446               	retlw	70	;'F'
  1455  076B  344F               	retlw	79	;'O'
  1456  076C  344F               	retlw	79	;'O'
  1457  076D  3444               	retlw	68	;'D'
  1458  076E  3420               	retlw	32	;' '
  1459  076F  3421               	retlw	33	;'!'
  1460  0770  3421               	retlw	33	;'!'
  1461  0771  343E               	retlw	62	;'>'
  1462  0772  3400               	retlw	0
  1463  0773                     STR_11:	
  1464  0773  343C               	retlw	60	;'<'
  1465  0774  3420               	retlw	32	;' '
  1466  0775  3443               	retlw	67	;'C'
  1467  0776  344C               	retlw	76	;'L'
  1468  0777  344F               	retlw	79	;'O'
  1469  0778  3453               	retlw	83	;'S'
  1470  0779  3445               	retlw	69	;'E'
  1471  077A  3420               	retlw	32	;' '
  1472  077B  3444               	retlw	68	;'D'
  1473  077C  344F               	retlw	79	;'O'
  1474  077D  344F               	retlw	79	;'O'
  1475  077E  3452               	retlw	82	;'R'
  1476  077F  3420               	retlw	32	;' '
  1477  0780  3421               	retlw	33	;'!'
  1478  0781  3421               	retlw	33	;'!'
  1479  0782  343E               	retlw	62	;'>'
  1480  0783  3400               	retlw	0
  1481  0784                     STR_7:	
  1482  0784  3420               	retlw	32	;' '
  1483  0785  3454               	retlw	84	;'T'
  1484  0786  3449               	retlw	73	;'I'
  1485  0787  344D               	retlw	77	;'M'
  1486  0788  3445               	retlw	69	;'E'
  1487  0789  343A               	retlw	58	;':'
  1488  078A  3430               	retlw	48	;'0'
  1489  078B  3430               	retlw	48	;'0'
  1490  078C  343A               	retlw	58	;':'
  1491  078D  3430               	retlw	48	;'0'
  1492  078E  3430               	retlw	48	;'0'
  1493  078F  343A               	retlw	58	;':'
  1494  0790  3430               	retlw	48	;'0'
  1495  0791  3430               	retlw	48	;'0'
  1496  0792  3420               	retlw	32	;' '
  1497  0793  3420               	retlw	32	;' '
  1498  0794  3400               	retlw	0
  1499  0795                     STR_1:	
  1500  0795  3420               	retlw	32	;' '
  1501  0796  3448               	retlw	72	;'H'
  1502  0797  3445               	retlw	69	;'E'
  1503  0798  3441               	retlw	65	;'A'
  1504  0799  3454               	retlw	84	;'T'
  1505  079A  3420               	retlw	32	;' '
  1506  079B  344C               	retlw	76	;'L'
  1507  079C  3456               	retlw	86	;'V'
  1508  079D  344C               	retlw	76	;'L'
  1509  079E  343A               	retlw	58	;':'
  1510  079F  3420               	retlw	32	;' '
  1511  07A0  3431               	retlw	49	;'1'
  1512  07A1  3420               	retlw	32	;' '
  1513  07A2  3432               	retlw	50	;'2'
  1514  07A3  3420               	retlw	32	;' '
  1515  07A4  3433               	retlw	51	;'3'
  1516  07A5  3400               	retlw	0
  1517  07A6                     STR_4:	
  1518  07A6  344D               	retlw	77	;'M'
  1519  07A7  344F               	retlw	79	;'O'
  1520  07A8  3454               	retlw	84	;'T'
  1521  07A9  344F               	retlw	79	;'O'
  1522  07AA  3452               	retlw	82	;'R'
  1523  07AB  3420               	retlw	32	;' '
  1524  07AC  3450               	retlw	80	;'P'
  1525  07AD  3457               	retlw	87	;'W'
  1526  07AE  3452               	retlw	82	;'R'
  1527  07AF  343A               	retlw	58	;':'
  1528  07B0  3420               	retlw	32	;' '
  1529  07B1  3431               	retlw	49	;'1'
  1530  07B2  3420               	retlw	32	;' '
  1531  07B3  3432               	retlw	50	;'2'
  1532  07B4  3420               	retlw	32	;' '
  1533  07B5  3433               	retlw	51	;'3'
  1534  07B6  3400               	retlw	0
  1535  07B7                     STR_2:	
  1536  07B7  343C               	retlw	60	;'<'
  1537  07B8  3400               	retlw	0
  1538  07B7                     
  1539                           ; #config settings
  1540  0000                     
  1541                           	psect	cinit
  1542  0015                     start_initialization:	
  1543  0015                     __initialization:	
  1544  0015  30D2               	movlw	low (__pdataBANK3+32)
  1545                           
  1546                           ; Initialize objects allocated to BANK3
  1547  0016  1783               	bsf	3,7	;select IRP bank2
  1548  0017  00FD               	movwf	125
  1549  0018  3010               	movlw	high __pidataBANK3
  1550  0019  00FE               	movwf	126
  1551  001A  3000               	movlw	low __pidataBANK3
  1552  001B  00FF               	movwf	127
  1553  001C  30B2               	movlw	low __pdataBANK3
  1554  001D  0084               	movwf	4
  1555  001E  160A  158A  2560  120A  118A  	fcall	init_ram0
  1556                           
  1557                           ;initializer for _CURRENT_DIGIT
  1558  0023  3006               	movlw	6
  1559  0024  00EF               	movwf	__pdataBANK0& (0+127)
  1560                           
  1561                           ; Clear objects allocated to BANK3
  1562  0025  3090               	movlw	low __pbssBANK3
  1563  0026  0084               	movwf	4
  1564  0027  30B2               	movlw	low (__pbssBANK3+34)
  1565  0028  160A  158A  254B   	fcall	clear_ram0
  1566                           
  1567                           ; Clear objects allocated to BANK0
  1568  002B  01EB               	clrf	__pbssBANK0& (0+127)
  1569  002C  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  1570  002D  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  1571  002E  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  1572  002F                     end_of_initialization:	
  1573                           ;End of C runtime variable initialization code
  1574                           
  1575  002F                     __end_of__initialization:	
  1576  002F  0183               	clrf	3
  1577  0030  120A  118A  2FB9   	ljmp	l6728	;jump to C main() function
  1578                           
  1579                           	psect	bssBANK0
  1580  006B                     __pbssBANK0:	
  1581  006B                     _SETTED_TIME:	
  1582  006B                     	ds	3
  1583  006E                     _CONTROL_CURRENT_STATE:	
  1584  006E                     	ds	1
  1585                           
  1586                           	psect	dataBANK0
  1587  006F                     __pdataBANK0:	
  1588  006F                     _CURRENT_DIGIT:	
  1589  006F                     	ds	1
  1590                           
  1591                           	psect	bssBANK3
  1592  0190                     __pbssBANK3:	
  1593  0190                     _HANDLERS_STATES:	
  1594  0190                     	ds	5
  1595  0195                     _CURRENT_TIME:	
  1596  0195                     	ds	3
  1597  0198                     _last_time:	
  1598  0198                     	ds	3
  1599  019B                     _keypad_sapmles:	
  1600  019B                     	ds	3
  1601  019E                     _PRESSED_KEY:	
  1602  019E                     	ds	2
  1603  01A0                     _TICK_COUNTER:	
  1604  01A0                     	ds	2
  1605  01A2                     _LAST_PRESSED_KEY:	
  1606  01A2                     	ds	2
  1607  01A4                     GOTO_NEXT_DIGIT@count_left:	
  1608  01A4                     	ds	1
  1609  01A5                     GOTO_NEXT_DIGIT@count_right:	
  1610  01A5                     	ds	1
  1611  01A6                     CONTROL_UPDATE@control_timer_counter:	
  1612  01A6                     	ds	1
  1613  01A7                     CONTROL_UPDATE@control_shift_counter:	
  1614  01A7                     	ds	1
  1615  01A8                     _HEATER_WORK_STATE:	
  1616  01A8                     	ds	1
  1617  01A9                     _MOTOR_WORK_STATE:	
  1618  01A9                     	ds	1
  1619  01AA                     _TIME_TICKING_TYPE:	
  1620  01AA                     	ds	1
  1621  01AB                     _COUNT_DECISION:	
  1622  01AB                     	ds	1
  1623  01AC                     HEATER_UPDATE@heater_timer_counter:	
  1624  01AC                     	ds	1
  1625  01AD                     HEATER@current_angle:	
  1626  01AD                     	ds	1
  1627  01AE                     MOTOR_UPDATE@motor_timer_counter:	
  1628  01AE                     	ds	1
  1629  01AF                     _current_angle:	
  1630  01AF                     	ds	1
  1631  01B0                     KEYPAD_UPDATE@KEYPAD_TICK_counter:	
  1632  01B0                     	ds	1
  1633  01B1                     SWs_UPDATE@SW_timer_counter:	
  1634  01B1                     	ds	1
  1635                           
  1636                           	psect	dataBANK3
  1637  01B2                     __pdataBANK3:	
  1638  01B2                     _SWs:	
  1639  01B2                     	ds	20
  1640  01C6                     _KEYPAD_info:	
  1641  01C6                     	ds	9
  1642  01CF                     _LEDs:	
  1643  01CF                     	ds	3
  1644                           
  1645                           	psect	inittext
  1646  1D5C                     init_fetch0:	
  1647                           ;	Called with low address in FSR and high address in W
  1648                           
  1649  1D5C  087E               	movf	126,w
  1650  1D5D  008A               	movwf	10
  1651  1D5E  087F               	movf	127,w
  1652  1D5F  0082               	movwf	2
  1653  1D60                     init_ram0:	
  1654                           ;Called with:
  1655                           ;	high address of idata address in btemp 
  1656                           ;	low address of idata address in btemp+1 
  1657                           ;	low address of data in FSR
  1658                           ;	high address + 1 of data in btemp-1
  1659                           
  1660  1D60  255C  160A  158A   	fcall	init_fetch0
  1661  1D63  0080               	movwf	0
  1662  1D64  0A84               	incf	4,f
  1663  1D65  0804               	movf	4,w
  1664  1D66  067D               	xorwf	125,w
  1665  1D67  1903               	btfsc	3,2
  1666  1D68  3400               	retlw	0
  1667  1D69  0AFF               	incf	127,f
  1668  1D6A  1903               	btfsc	3,2
  1669  1D6B  0AFE               	incf	126,f
  1670  1D6C  2D60               	goto	init_ram0
  1671                           
  1672                           	psect	clrtext
  1673  1D4B                     clear_ram0:	
  1674                           ;	Called with FSR containing the base address, and
  1675                           ;	W with the last address+1
  1676                           
  1677  1D4B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1678  1D4C                     clrloop0:	
  1679  1D4C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1680  1D4D  0A84               	incf	4,f	;increment pointer
  1681  1D4E  0604               	xorwf	4,w	;XOR with final address
  1682  1D4F  1903               	btfsc	3,2	;have we reached the end yet?
  1683  1D50  3400               	retlw	0	;all done for this memory range, return
  1684  1D51  0604               	xorwf	4,w	;XOR again to restore value
  1685  1D52  2D4C               	goto	clrloop0	;do the next byte
  1686                           
  1687                           	psect	cstackBANK3
  1688  01D2                     __pcstackBANK3:	
  1689  01D2                     ___fladd@signs:	
  1690                           
  1691                           ; 1 bytes @ 0x0
  1692  01D2                     	ds	1
  1693  01D3                     ___fladd@aexp:	
  1694                           
  1695                           ; 1 bytes @ 0x1
  1696  01D3                     	ds	1
  1697  01D4                     ___fladd@bexp:	
  1698                           
  1699                           ; 1 bytes @ 0x2
  1700  01D4                     	ds	1
  1701  01D5                     ___fladd@grs:	
  1702                           
  1703                           ; 1 bytes @ 0x3
  1704  01D5                     	ds	1
  1705  01D6                     ?___fltol:	
  1706  01D6                     ___fltol@f1:	
  1707                           ; 4 bytes @ 0x4
  1708                           
  1709                           
  1710                           ; 4 bytes @ 0x4
  1711  01D6                     	ds	4
  1712  01DA                     ??___fltol:	
  1713                           
  1714                           ; 1 bytes @ 0x8
  1715  01DA                     	ds	4
  1716  01DE                     ___fltol@sign1:	
  1717                           
  1718                           ; 1 bytes @ 0xC
  1719  01DE                     	ds	1
  1720  01DF                     ___fltol@exp1:	
  1721                           
  1722                           ; 1 bytes @ 0xD
  1723  01DF                     	ds	1
  1724  01E0                     ?_CCP_PWM_PERIOD_LOAD:	
  1725  01E0                     ?_CCP1_PWM_DUTY_CYCLE_LOAD:	
  1726                           ; 1 bytes @ 0xE
  1727                           
  1728  01E0                     ?_CCP2_PWM_DUTY_CYCLE_LOAD:	
  1729                           ; 1 bytes @ 0xE
  1730                           
  1731  01E0                     CCP_PWM_PERIOD_LOAD@PERIOD:	
  1732                           ; 1 bytes @ 0xE
  1733                           
  1734  01E0                     CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  1735                           ; 2 bytes @ 0xE
  1736                           
  1737  01E0                     CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  1738                           ; 2 bytes @ 0xE
  1739                           
  1740                           
  1741                           ; 2 bytes @ 0xE
  1742  01E0                     	ds	2
  1743  01E2                     ??_CCP1_PWM_DUTY_CYCLE_LOAD:	
  1744  01E2                     ??_CCP2_PWM_DUTY_CYCLE_LOAD:	
  1745                           ; 1 bytes @ 0x10
  1746                           
  1747                           
  1748                           ; 1 bytes @ 0x10
  1749  01E2                     	ds	1
  1750  01E3                     CCP_PWM_PERIOD_LOAD@LOAD_VALUE:	
  1751                           
  1752                           ; 2 bytes @ 0x11
  1753  01E3                     	ds	2
  1754  01E5                     _CCP1_PWM_DUTY_CYCLE_LOAD$2214:	
  1755  01E5                     _CCP2_PWM_DUTY_CYCLE_LOAD$2215:	
  1756                           ; 4 bytes @ 0x13
  1757                           
  1758                           
  1759                           ; 4 bytes @ 0x13
  1760  01E5                     	ds	4
  1761  01E9                     CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  1762  01E9                     CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  1763                           ; 2 bytes @ 0x17
  1764                           
  1765                           
  1766                           ; 2 bytes @ 0x17
  1767  01E9                     	ds	2
  1768                           
  1769                           	psect	cstackBANK1
  1770  00A0                     __pcstackBANK1:	
  1771  00A0                     ??_TIMER2_INIT:	
  1772  00A0                     ??_TIMER2_START:	
  1773                           ; 1 bytes @ 0x0
  1774                           
  1775  00A0                     ??_TIMER0_STOP:	
  1776                           ; 1 bytes @ 0x0
  1777                           
  1778  00A0                     ??_TIMER2_STOP:	
  1779                           ; 1 bytes @ 0x0
  1780                           
  1781  00A0                     ??_MOTOR_SET_STATE:	
  1782                           ; 1 bytes @ 0x0
  1783                           
  1784  00A0                     ??_HEATER_SET_STATE:	
  1785                           ; 1 bytes @ 0x0
  1786                           
  1787  00A0                     ??_TIMER0_INIT:	
  1788                           ; 1 bytes @ 0x0
  1789                           
  1790  00A0                     ??_TIMER0_START:	
  1791                           ; 1 bytes @ 0x0
  1792                           
  1793  00A0                     ?_GPIO_PIN_SET_STATE:	
  1794                           ; 1 bytes @ 0x0
  1795                           
  1796  00A0                     ?_GPIO_PORT_SET_STATE:	
  1797                           ; 1 bytes @ 0x0
  1798                           
  1799  00A0                     ??_ENABLE_INTERUPT:	
  1800                           ; 1 bytes @ 0x0
  1801                           
  1802  00A0                     ??_TIME_INIT:	
  1803                           ; 1 bytes @ 0x0
  1804                           
  1805  00A0                     ??_CONTROL_INIT:	
  1806                           ; 1 bytes @ 0x0
  1807                           
  1808  00A0                     ?___bmul:	
  1809                           ; 1 bytes @ 0x0
  1810                           
  1811  00A0                     ?__Umul8_16:	
  1812                           ; 1 bytes @ 0x0
  1813                           
  1814  00A0                     ?___xxtofl:	
  1815                           ; 2 bytes @ 0x0
  1816                           
  1817  00A0                     GPIO_PIN_SET_STATE@GPIO_PIN_NO:	
  1818                           ; 4 bytes @ 0x0
  1819                           
  1820  00A0                     GPIO_PORT_SET_STATE@GPIO_PORT_STATE:	
  1821                           ; 1 bytes @ 0x0
  1822                           
  1823  00A0                     MOTOR_SET_STATE@MOTOR_STATE:	
  1824                           ; 1 bytes @ 0x0
  1825                           
  1826  00A0                     HEATER_SET_STATE@HEATER_STATE:	
  1827                           ; 1 bytes @ 0x0
  1828                           
  1829  00A0                     CONTROL_INIT@count:	
  1830                           ; 1 bytes @ 0x0
  1831                           
  1832  00A0                     ___bmul@multiplicand:	
  1833                           ; 1 bytes @ 0x0
  1834                           
  1835  00A0                     __Umul8_16@multiplicand:	
  1836                           ; 1 bytes @ 0x0
  1837                           
  1838  00A0                     ___xxtofl@val:	
  1839                           ; 1 bytes @ 0x0
  1840                           
  1841                           
  1842                           ; 4 bytes @ 0x0
  1843  00A0                     	ds	1
  1844  00A1                     ??_GPIO_PORT_SET_STATE:	
  1845  00A1                     ??___bmul:	
  1846                           ; 1 bytes @ 0x1
  1847                           
  1848  00A1                     GPIO_PIN_SET_STATE@GPIO_PIN_STATE:	
  1849                           ; 1 bytes @ 0x1
  1850                           
  1851  00A1                     ___bmul@product:	
  1852                           ; 1 bytes @ 0x1
  1853                           
  1854                           
  1855                           ; 1 bytes @ 0x1
  1856  00A1                     	ds	1
  1857  00A2                     ??_GPIO_PIN_SET_STATE:	
  1858  00A2                     ___bmul@multiplier:	
  1859                           ; 1 bytes @ 0x2
  1860                           
  1861                           
  1862                           ; 1 bytes @ 0x2
  1863  00A2                     	ds	1
  1864  00A3                     ?_GPIO_PIN_INIT:	
  1865  00A3                     ??__Umul8_16:	
  1866                           ; 1 bytes @ 0x3
  1867                           
  1868  00A3                     GPIO_PIN_INIT@GPIO_PIN_NO:	
  1869                           ; 1 bytes @ 0x3
  1870                           
  1871  00A3                     __Umul8_16@product:	
  1872                           ; 1 bytes @ 0x3
  1873                           
  1874                           
  1875                           ; 2 bytes @ 0x3
  1876  00A3                     	ds	1
  1877  00A4                     ??___xxtofl:	
  1878  00A4                     GPIO_PIN_INIT@GPIO_DIRECTION:	
  1879                           ; 1 bytes @ 0x4
  1880                           
  1881  00A4                     GPIO_PORT_SET_STATE@GPIO_PORTx:	
  1882                           ; 1 bytes @ 0x4
  1883                           
  1884                           
  1885                           ; 1 bytes @ 0x4
  1886  00A4                     	ds	1
  1887  00A5                     ??_GPIO_PIN_INIT:	
  1888  00A5                     __Umul8_16@multiplier:	
  1889                           ; 1 bytes @ 0x5
  1890                           
  1891                           
  1892                           ; 1 bytes @ 0x5
  1893  00A5                     	ds	1
  1894  00A6                     __Umul8_16@word_mpld:	
  1895                           
  1896                           ; 2 bytes @ 0x6
  1897  00A6                     	ds	2
  1898  00A8                     ___xxtofl@sign:	
  1899                           
  1900                           ; 1 bytes @ 0x8
  1901  00A8                     	ds	1
  1902  00A9                     ___xxtofl@exp:	
  1903                           
  1904                           ; 1 bytes @ 0x9
  1905  00A9                     	ds	1
  1906  00AA                     GPIO_PIN_SET_STATE@GPIO_PORTx:	
  1907  00AA                     ___xxtofl@arg:	
  1908                           ; 1 bytes @ 0xA
  1909                           
  1910                           
  1911                           ; 4 bytes @ 0xA
  1912  00AA                     	ds	1
  1913  00AB                     ??_LCD_SND_COMMAND:	
  1914  00AB                     LCD_SND_COMMAND@command:	
  1915                           ; 1 bytes @ 0xB
  1916                           
  1917                           
  1918                           ; 1 bytes @ 0xB
  1919  00AB                     	ds	3
  1920  00AE                     ?___fldiv:	
  1921  00AE                     ___fldiv@a:	
  1922                           ; 4 bytes @ 0xE
  1923                           
  1924                           
  1925                           ; 4 bytes @ 0xE
  1926  00AE                     	ds	3
  1927  00B1                     GPIO_PIN_INIT@GPIO_PORTx:	
  1928                           
  1929                           ; 1 bytes @ 0x11
  1930  00B1                     	ds	1
  1931  00B2                     ??_CCP1_INIT:	
  1932  00B2                     ??_CCP2_INIT:	
  1933                           ; 1 bytes @ 0x12
  1934                           
  1935  00B2                     ??_SWs_INIT:	
  1936                           ; 1 bytes @ 0x12
  1937                           
  1938  00B2                     ??_LEDs_INIT:	
  1939                           ; 1 bytes @ 0x12
  1940                           
  1941  00B2                     ??_LCD_INIT:	
  1942                           ; 1 bytes @ 0x12
  1943                           
  1944  00B2                     ??_KEYPAD_INIT:	
  1945                           ; 1 bytes @ 0x12
  1946                           
  1947  00B2                     LEDs_INIT@counter:	
  1948                           ; 1 bytes @ 0x12
  1949                           
  1950  00B2                     KEYPAD_INIT@counter:	
  1951                           ; 1 bytes @ 0x12
  1952                           
  1953  00B2                     ___fldiv@b:	
  1954                           ; 1 bytes @ 0x12
  1955                           
  1956                           
  1957                           ; 4 bytes @ 0x12
  1958  00B2                     	ds	1
  1959  00B3                     SWs_INIT@Samples_Counter:	
  1960                           
  1961                           ; 1 bytes @ 0x13
  1962  00B3                     	ds	1
  1963  00B4                     SWs_INIT@SW_Counter:	
  1964                           
  1965                           ; 1 bytes @ 0x14
  1966  00B4                     	ds	2
  1967  00B6                     ??___fldiv:	
  1968                           
  1969                           ; 1 bytes @ 0x16
  1970  00B6                     	ds	4
  1971  00BA                     ___fldiv@rem:	
  1972                           
  1973                           ; 4 bytes @ 0x1A
  1974  00BA                     	ds	4
  1975  00BE                     ___fldiv@sign:	
  1976                           
  1977                           ; 1 bytes @ 0x1E
  1978  00BE                     	ds	1
  1979  00BF                     ___fldiv@new_exp:	
  1980                           
  1981                           ; 2 bytes @ 0x1F
  1982  00BF                     	ds	2
  1983  00C1                     ___fldiv@grs:	
  1984                           
  1985                           ; 4 bytes @ 0x21
  1986  00C1                     	ds	4
  1987  00C5                     ___fldiv@bexp:	
  1988                           
  1989                           ; 1 bytes @ 0x25
  1990  00C5                     	ds	1
  1991  00C6                     ___fldiv@aexp:	
  1992                           
  1993                           ; 1 bytes @ 0x26
  1994  00C6                     	ds	1
  1995  00C7                     ?___flmul:	
  1996  00C7                     ___flmul@b:	
  1997                           ; 4 bytes @ 0x27
  1998                           
  1999                           
  2000                           ; 4 bytes @ 0x27
  2001  00C7                     	ds	4
  2002  00CB                     ___flmul@a:	
  2003                           
  2004                           ; 4 bytes @ 0x2B
  2005  00CB                     	ds	4
  2006  00CF                     ??___flmul:	
  2007                           
  2008                           ; 1 bytes @ 0x2F
  2009  00CF                     	ds	4
  2010  00D3                     ___flmul@sign:	
  2011                           
  2012                           ; 1 bytes @ 0x33
  2013  00D3                     	ds	1
  2014  00D4                     ___flmul@aexp:	
  2015                           
  2016                           ; 1 bytes @ 0x34
  2017  00D4                     	ds	1
  2018  00D5                     ___flmul@grs:	
  2019                           
  2020                           ; 4 bytes @ 0x35
  2021  00D5                     	ds	4
  2022  00D9                     ___flmul@bexp:	
  2023                           
  2024                           ; 1 bytes @ 0x39
  2025  00D9                     	ds	1
  2026  00DA                     ___flmul@prod:	
  2027                           
  2028                           ; 4 bytes @ 0x3A
  2029  00DA                     	ds	4
  2030  00DE                     ___flmul@temp:	
  2031                           
  2032                           ; 2 bytes @ 0x3E
  2033  00DE                     	ds	2
  2034  00E0                     ?___fladd:	
  2035  00E0                     ___fladd@b:	
  2036                           ; 4 bytes @ 0x40
  2037                           
  2038                           
  2039                           ; 4 bytes @ 0x40
  2040  00E0                     	ds	4
  2041  00E4                     ___fladd@a:	
  2042                           
  2043                           ; 4 bytes @ 0x44
  2044  00E4                     	ds	4
  2045  00E8                     ??___fladd:	
  2046                           
  2047                           ; 1 bytes @ 0x48
  2048  00E8                     	ds	8
  2049  00F0                     ??_CCP_PWM_PERIOD_LOAD:	
  2050  00F0                     ??_MOTOR_INIT:	
  2051                           ; 1 bytes @ 0x50
  2052                           
  2053  00F0                     ??_HEATER_INIT:	
  2054                           ; 1 bytes @ 0x50
  2055                           
  2056  00F0                     ??_main:	
  2057                           ; 1 bytes @ 0x50
  2058                           
  2059                           
  2060                           	psect	cstackCOMMON
  2061  0070                     __pcstackCOMMON:	
  2062                           ; 1 bytes @ 0x50
  2063                           
  2064  0070                     ?_TIMER2_INIT:	
  2065  0070                     ?_TIMER2_START:	
  2066                           ; 1 bytes @ 0x0
  2067                           
  2068  0070                     ?_TIMER0_STOP:	
  2069                           ; 1 bytes @ 0x0
  2070                           
  2071  0070                     ?_TIMER2_STOP:	
  2072                           ; 1 bytes @ 0x0
  2073                           
  2074  0070                     ?_LCD_SND_COMMAND:	
  2075                           ; 1 bytes @ 0x0
  2076                           
  2077  0070                     ?_LCD_SEND_CHARACTER:	
  2078                           ; 1 bytes @ 0x0
  2079                           
  2080  0070                     ?_MOTOR_SET_STATE:	
  2081                           ; 1 bytes @ 0x0
  2082                           
  2083  0070                     ?_HEATER_SET_STATE:	
  2084                           ; 1 bytes @ 0x0
  2085                           
  2086  0070                     ?_UPDATE_LCD_SECONDS:	
  2087                           ; 1 bytes @ 0x0
  2088                           
  2089  0070                     ?_UPDATE_LCD_MINUTES:	
  2090                           ; 1 bytes @ 0x0
  2091                           
  2092  0070                     ?_UPDATE_LCD_HOURS:	
  2093                           ; 1 bytes @ 0x0
  2094                           
  2095  0070                     ?_DISP_SHOW_TIME:	
  2096                           ; 1 bytes @ 0x0
  2097                           
  2098  0070                     ?_SET_TIME_HANDLER:	
  2099                           ; 1 bytes @ 0x0
  2100                           
  2101  0070                     ?_SET_HEATING_HANDLER:	
  2102                           ; 1 bytes @ 0x0
  2103                           
  2104  0070                     ?_SET_ROTOR_PWR_HANDLER:	
  2105                           ; 1 bytes @ 0x0
  2106                           
  2107  0070                     ?_HEATING_HANDLER:	
  2108                           ; 1 bytes @ 0x0
  2109                           
  2110  0070                     ?_FINISH_HANDLER:	
  2111                           ; 1 bytes @ 0x0
  2112                           
  2113  0070                     ?_DEFAULT_HANDLER:	
  2114                           ; 1 bytes @ 0x0
  2115                           
  2116  0070                     ?_SET_TIME_HANDLER_ON_WORK:	
  2117                           ; 1 bytes @ 0x0
  2118                           
  2119  0070                     ?_SET_HEATING_HANDLER_ON_WORK:	
  2120                           ; 1 bytes @ 0x0
  2121                           
  2122  0070                     ?_SET_ROTOR_PWR_HANDLER_ON_WORK:	
  2123                           ; 1 bytes @ 0x0
  2124                           
  2125  0070                     ?_STOP_HEATING:	
  2126                           ; 1 bytes @ 0x0
  2127                           
  2128  0070                     ?_INCREMENT_THIS:	
  2129                           ; 1 bytes @ 0x0
  2130                           
  2131  0070                     ?_GOTO_NEXT_DIGIT:	
  2132                           ; 1 bytes @ 0x0
  2133                           
  2134  0070                     ?_CCP1_INIT:	
  2135                           ; 1 bytes @ 0x0
  2136                           
  2137  0070                     ?_CCP2_INIT:	
  2138                           ; 1 bytes @ 0x0
  2139                           
  2140  0070                     ?_TIMER0_INIT:	
  2141                           ; 1 bytes @ 0x0
  2142                           
  2143  0070                     ?_TIMER0_UPDATE:	
  2144                           ; 1 bytes @ 0x0
  2145                           
  2146  0070                     ??_TIMER0_UPDATE:	
  2147                           ; 1 bytes @ 0x0
  2148                           
  2149  0070                     ?_TIMER0_START:	
  2150                           ; 1 bytes @ 0x0
  2151                           
  2152  0070                     ?_SWs_UPDATE:	
  2153                           ; 1 bytes @ 0x0
  2154                           
  2155  0070                     ?_SW_GET_STATE:	
  2156                           ; 1 bytes @ 0x0
  2157                           
  2158  0070                     ?_SWs_INIT:	
  2159                           ; 1 bytes @ 0x0
  2160                           
  2161  0070                     ?_LEDs_INIT:	
  2162                           ; 1 bytes @ 0x0
  2163                           
  2164  0070                     ?_LCD_INIT:	
  2165                           ; 1 bytes @ 0x0
  2166                           
  2167  0070                     ?_LCD_CLEAR:	
  2168                           ; 1 bytes @ 0x0
  2169                           
  2170  0070                     ?_START_BLINKING_AT:	
  2171                           ; 1 bytes @ 0x0
  2172                           
  2173  0070                     ?_STOP_BLINKING:	
  2174                           ; 1 bytes @ 0x0
  2175                           
  2176  0070                     ?_KEYPAD_INIT:	
  2177                           ; 1 bytes @ 0x0
  2178                           
  2179  0070                     ?_KEYPAD_UPDATE:	
  2180                           ; 1 bytes @ 0x0
  2181                           
  2182  0070                     ?_MOTOR_INIT:	
  2183                           ; 1 bytes @ 0x0
  2184                           
  2185  0070                     ?_MOTOR_UPDATE:	
  2186                           ; 1 bytes @ 0x0
  2187                           
  2188  0070                     ?_HEATER_INIT:	
  2189                           ; 1 bytes @ 0x0
  2190                           
  2191  0070                     ?_HEATER_UPDATE:	
  2192                           ; 1 bytes @ 0x0
  2193                           
  2194  0070                     ?_ENABLE_INTERUPT:	
  2195                           ; 1 bytes @ 0x0
  2196                           
  2197  0070                     ?_DISP_HEATER_DATA:	
  2198                           ; 1 bytes @ 0x0
  2199                           
  2200  0070                     ?_DISP_MOTOR_DATA:	
  2201                           ; 1 bytes @ 0x0
  2202                           
  2203  0070                     ?_DISP_STATMENT:	
  2204                           ; 1 bytes @ 0x0
  2205                           
  2206  0070                     ?_TIME_INIT:	
  2207                           ; 1 bytes @ 0x0
  2208                           
  2209  0070                     ?_TIME_CONTINUE:	
  2210                           ; 1 bytes @ 0x0
  2211                           
  2212  0070                     ??_TIME_CONTINUE:	
  2213                           ; 1 bytes @ 0x0
  2214                           
  2215  0070                     ?_TIME_STOP:	
  2216                           ; 1 bytes @ 0x0
  2217                           
  2218  0070                     ??_TIME_STOP:	
  2219                           ; 1 bytes @ 0x0
  2220                           
  2221  0070                     ?_TIME_UPDATE:	
  2222                           ; 1 bytes @ 0x0
  2223                           
  2224  0070                     ??_TIME_UPDATE:	
  2225                           ; 1 bytes @ 0x0
  2226                           
  2227  0070                     ?_TIME_START_AT:	
  2228                           ; 1 bytes @ 0x0
  2229                           
  2230  0070                     ?_CONTROL_INIT:	
  2231                           ; 1 bytes @ 0x0
  2232                           
  2233  0070                     ?_CONTROL_UPDATE:	
  2234                           ; 1 bytes @ 0x0
  2235                           
  2236  0070                     ?_SYS_UPDATE:	
  2237                           ; 1 bytes @ 0x0
  2238                           
  2239  0070                     ?_main:	
  2240                           ; 1 bytes @ 0x0
  2241                           
  2242  0070                     ?___lbdiv:	
  2243                           ; 1 bytes @ 0x0
  2244                           
  2245  0070                     ?___lbmod:	
  2246                           ; 1 bytes @ 0x0
  2247                           
  2248  0070                     ?i1_GPIO_PORT_SET_STATE:	
  2249                           ; 1 bytes @ 0x0
  2250                           
  2251  0070                     ?i1_LCD_SND_COMMAND:	
  2252                           ; 1 bytes @ 0x0
  2253                           
  2254  0070                     ?i1_MOTOR_SET_STATE:	
  2255                           ; 1 bytes @ 0x0
  2256                           
  2257  0070                     ??i1_MOTOR_SET_STATE:	
  2258                           ; 1 bytes @ 0x0
  2259                           
  2260  0070                     ?i1_HEATER_SET_STATE:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0070                     ??i1_HEATER_SET_STATE:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0070                     ?i1___bmul:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0070                     ?_KEYPAD_GET_PRESSED_KEY:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0070                     ?___lwdiv:	
  2273                           ; 2 bytes @ 0x0
  2274                           
  2275  0070                     ?___lwmod:	
  2276                           ; 2 bytes @ 0x0
  2277                           
  2278  0070                     ?i1__Umul8_16:	
  2279                           ; 2 bytes @ 0x0
  2280                           
  2281  0070                     ?_TIME_GET:	
  2282                           ; 2 bytes @ 0x0
  2283                           
  2284  0070                     ?i1___xxtofl:	
  2285                           ; 3 bytes @ 0x0
  2286                           
  2287  0070                     TIME_START_AT@START_MINUTES:	
  2288                           ; 4 bytes @ 0x0
  2289                           
  2290  0070                     ___lbdiv@divisor:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ___lbmod@divisor:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     i1MOTOR_SET_STATE@MOTOR_STATE:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     i1HEATER_SET_STATE@HEATER_STATE:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     i1__Umul8_16@multiplicand:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     i1___bmul@multiplicand:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     ___lwdiv@divisor:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     ___lwmod@divisor:	
  2315                           ; 2 bytes @ 0x0
  2316                           
  2317  0070                     i1___xxtofl@val:	
  2318                           ; 2 bytes @ 0x0
  2319                           
  2320                           
  2321                           ; 4 bytes @ 0x0
  2322  0070                     	ds	1
  2323  0071                     ??___lbdiv:	
  2324  0071                     ??___lbmod:	
  2325                           ; 1 bytes @ 0x1
  2326                           
  2327  0071                     ??i1_GPIO_PORT_SET_STATE:	
  2328                           ; 1 bytes @ 0x1
  2329                           
  2330  0071                     ??i1___bmul:	
  2331                           ; 1 bytes @ 0x1
  2332                           
  2333  0071                     TIME_START_AT@START_HOURS:	
  2334                           ; 1 bytes @ 0x1
  2335                           
  2336  0071                     ___lbdiv@dividend:	
  2337                           ; 1 bytes @ 0x1
  2338                           
  2339  0071                     i1___bmul@multiplier:	
  2340                           ; 1 bytes @ 0x1
  2341                           
  2342                           
  2343                           ; 1 bytes @ 0x1
  2344  0071                     	ds	1
  2345  0072                     ??_KEYPAD_GET_PRESSED_KEY:	
  2346  0072                     TIME_START_AT@COUNTING_TYPE:	
  2347                           ; 1 bytes @ 0x2
  2348                           
  2349  0072                     ___lbdiv@counter:	
  2350                           ; 1 bytes @ 0x2
  2351                           
  2352  0072                     ___lbmod@dividend:	
  2353                           ; 1 bytes @ 0x2
  2354                           
  2355  0072                     i1___bmul@product:	
  2356                           ; 1 bytes @ 0x2
  2357                           
  2358  0072                     KEYPAD_GET_PRESSED_KEY@ret:	
  2359                           ; 1 bytes @ 0x2
  2360                           
  2361  0072                     ___lwdiv@dividend:	
  2362                           ; 2 bytes @ 0x2
  2363                           
  2364  0072                     ___lwmod@dividend:	
  2365                           ; 2 bytes @ 0x2
  2366                           
  2367                           
  2368                           ; 2 bytes @ 0x2
  2369  0072                     	ds	1
  2370  0073                     ?_GPIO_PIN_GET_STATE:	
  2371  0073                     ??_SW_GET_STATE:	
  2372                           ; 1 bytes @ 0x3
  2373                           
  2374  0073                     ??_TIME_GET:	
  2375                           ; 1 bytes @ 0x3
  2376                           
  2377  0073                     ??_TIME_START_AT:	
  2378                           ; 1 bytes @ 0x3
  2379                           
  2380  0073                     ?i1_GPIO_PIN_SET_STATE:	
  2381                           ; 1 bytes @ 0x3
  2382                           
  2383  0073                     ??i1__Umul8_16:	
  2384                           ; 1 bytes @ 0x3
  2385                           
  2386  0073                     GPIO_PIN_GET_STATE@GPIO_PIN_NO:	
  2387                           ; 1 bytes @ 0x3
  2388                           
  2389  0073                     SW_GET_STATE@SW_NO:	
  2390                           ; 1 bytes @ 0x3
  2391                           
  2392  0073                     TIME_START_AT@START_SECONDS:	
  2393                           ; 1 bytes @ 0x3
  2394                           
  2395  0073                     ___lbdiv@quotient:	
  2396                           ; 1 bytes @ 0x3
  2397                           
  2398  0073                     ___lbmod@counter:	
  2399                           ; 1 bytes @ 0x3
  2400                           
  2401  0073                     i1GPIO_PIN_SET_STATE@GPIO_PIN_NO:	
  2402                           ; 1 bytes @ 0x3
  2403                           
  2404  0073                     i1__Umul8_16@product:	
  2405                           ; 1 bytes @ 0x3
  2406                           
  2407                           
  2408                           ; 2 bytes @ 0x3
  2409  0073                     	ds	1
  2410  0074                     ??_GPIO_PIN_GET_STATE:	
  2411  0074                     ??___lwdiv:	
  2412                           ; 1 bytes @ 0x4
  2413                           
  2414  0074                     ??___lwmod:	
  2415                           ; 1 bytes @ 0x4
  2416                           
  2417  0074                     ??i1___xxtofl:	
  2418                           ; 1 bytes @ 0x4
  2419                           
  2420  0074                     SW_GET_STATE@ret:	
  2421                           ; 1 bytes @ 0x4
  2422                           
  2423  0074                     ___lbmod@rem:	
  2424                           ; 1 bytes @ 0x4
  2425                           
  2426  0074                     ___lwmod@counter:	
  2427                           ; 1 bytes @ 0x4
  2428                           
  2429  0074                     i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE:	
  2430                           ; 1 bytes @ 0x4
  2431                           
  2432  0074                     i1GPIO_PORT_SET_STATE@GPIO_PORTx:	
  2433                           ; 1 bytes @ 0x4
  2434                           
  2435  0074                     ___lwdiv@quotient:	
  2436                           ; 1 bytes @ 0x4
  2437                           
  2438                           
  2439                           ; 2 bytes @ 0x4
  2440  0074                     	ds	1
  2441  0075                     ??i1_GPIO_PIN_SET_STATE:	
  2442  0075                     i1__Umul8_16@multiplier:	
  2443                           ; 1 bytes @ 0x5
  2444                           
  2445                           
  2446                           ; 1 bytes @ 0x5
  2447  0075                     	ds	1
  2448  0076                     ___lwdiv@counter:	
  2449  0076                     i1__Umul8_16@word_mpld:	
  2450                           ; 1 bytes @ 0x6
  2451                           
  2452                           
  2453                           ; 2 bytes @ 0x6
  2454  0076                     	ds	1
  2455  0077                     ?_utoa:	
  2456  0077                     utoa@val:	
  2457                           ; 1 bytes @ 0x7
  2458                           
  2459                           
  2460                           ; 2 bytes @ 0x7
  2461  0077                     	ds	1
  2462  0078                     GPIO_PIN_GET_STATE@GPIO_PORTx:	
  2463  0078                     i1___xxtofl@sign:	
  2464                           ; 1 bytes @ 0x8
  2465                           
  2466                           
  2467                           ; 1 bytes @ 0x8
  2468  0078                     	ds	1
  2469  0079                     GPIO_PIN_GET_STATE@ret:	
  2470  0079                     i1___xxtofl@exp:	
  2471                           ; 1 bytes @ 0x9
  2472                           
  2473  0079                     utoa@base:	
  2474                           ; 1 bytes @ 0x9
  2475                           
  2476                           
  2477                           ; 2 bytes @ 0x9
  2478  0079                     	ds	1
  2479  007A                     ??_SWs_UPDATE:	
  2480  007A                     i1___xxtofl@arg:	
  2481                           ; 1 bytes @ 0xA
  2482                           
  2483                           
  2484                           ; 4 bytes @ 0xA
  2485  007A                     	ds	1
  2486  007B                     ??_itoa:	
  2487  007B                     ??_utoa:	
  2488                           ; 1 bytes @ 0xB
  2489                           
  2490                           
  2491                           ; 1 bytes @ 0xB
  2492  007B                     	ds	1
  2493  007C                     itoa@buf:	
  2494                           
  2495                           ; 1 bytes @ 0xC
  2496  007C                     	ds	1
  2497  007D                     i1GPIO_PIN_SET_STATE@GPIO_PORTx:	
  2498                           
  2499                           ; 1 bytes @ 0xD
  2500  007D                     	ds	1
  2501  007E                     ??_LCD_SEND_CHARACTER:	
  2502  007E                     ??_UPDATE_LCD_SECONDS:	
  2503                           ; 1 bytes @ 0xE
  2504                           
  2505  007E                     ??_UPDATE_LCD_MINUTES:	
  2506                           ; 1 bytes @ 0xE
  2507                           
  2508  007E                     ??_UPDATE_LCD_HOURS:	
  2509                           ; 1 bytes @ 0xE
  2510                           
  2511  007E                     ??_DISP_SHOW_TIME:	
  2512                           ; 1 bytes @ 0xE
  2513                           
  2514  007E                     ??_DEFAULT_HANDLER:	
  2515                           ; 1 bytes @ 0xE
  2516                           
  2517  007E                     ??_SET_TIME_HANDLER_ON_WORK:	
  2518                           ; 1 bytes @ 0xE
  2519                           
  2520  007E                     ??_STOP_HEATING:	
  2521                           ; 1 bytes @ 0xE
  2522                           
  2523  007E                     ??_LED_SET_STATE:	
  2524                           ; 1 bytes @ 0xE
  2525                           
  2526  007E                     ??_LCD_SEND_A_STRING:	
  2527                           ; 1 bytes @ 0xE
  2528                           
  2529  007E                     ??_LCD_SEND_A_NUMBER:	
  2530                           ; 1 bytes @ 0xE
  2531                           
  2532  007E                     ??_LCD_CLEAR:	
  2533                           ; 1 bytes @ 0xE
  2534                           
  2535  007E                     ??_START_BLINKING_AT:	
  2536                           ; 1 bytes @ 0xE
  2537                           
  2538  007E                     ??_STOP_BLINKING:	
  2539                           ; 1 bytes @ 0xE
  2540                           
  2541  007E                     ??_MOTOR_UPDATE:	
  2542                           ; 1 bytes @ 0xE
  2543                           
  2544  007E                     ??_HEATER_UPDATE:	
  2545                           ; 1 bytes @ 0xE
  2546                           
  2547  007E                     ??_DISP_UPDATE_TIME:	
  2548                           ; 1 bytes @ 0xE
  2549                           
  2550  007E                     ??_DISP_UPDATE_TIME_UNIT_AT:	
  2551                           ; 1 bytes @ 0xE
  2552                           
  2553  007E                     ??_DISP_SHOW_TIME_AT:	
  2554                           ; 1 bytes @ 0xE
  2555                           
  2556  007E                     ??_DISP_HEATER_DATA:	
  2557                           ; 1 bytes @ 0xE
  2558                           
  2559  007E                     ??_DISP_MOTOR_DATA:	
  2560                           ; 1 bytes @ 0xE
  2561                           
  2562  007E                     ??_DISP_STATMENT:	
  2563                           ; 1 bytes @ 0xE
  2564                           
  2565  007E                     ??i1_LCD_SND_COMMAND:	
  2566                           ; 1 bytes @ 0xE
  2567                           
  2568                           
  2569                           	psect	cstackBANK0
  2570  0020                     __pcstackBANK0:	
  2571                           ; 1 bytes @ 0xE
  2572                           
  2573  0020                     ?_LED_SET_STATE:	
  2574  0020                     ??_KEYPAD_UPDATE:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0020                     ?i1___fldiv:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0020                     LED_SET_STATE@LED_STATE:	
  2581                           ; 4 bytes @ 0x0
  2582                           
  2583  0020                     LCD_SEND_CHARACTER@character:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0020                     i1LCD_SND_COMMAND@command:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0020                     utoa@v:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0020                     i1___fldiv@a:	
  2593                           ; 2 bytes @ 0x0
  2594                           
  2595                           
  2596                           ; 4 bytes @ 0x0
  2597  0020                     	ds	1
  2598  0021                     ?_LCD_SEND_A_STRING:	
  2599  0021                     ?_LCD_SET_CURSOR:	
  2600                           ; 1 bytes @ 0x1
  2601                           
  2602  0021                     SWs_UPDATE@samples_counter:	
  2603                           ; 1 bytes @ 0x1
  2604                           
  2605  0021                     LCD_SET_CURSOR@row:	
  2606                           ; 1 bytes @ 0x1
  2607                           
  2608  0021                     KEYPAD_UPDATE@KEY_STATE:	
  2609                           ; 1 bytes @ 0x1
  2610                           
  2611  0021                     LCD_SEND_A_STRING@string:	
  2612                           ; 1 bytes @ 0x1
  2613                           
  2614                           
  2615                           ; 2 bytes @ 0x1
  2616  0021                     	ds	1
  2617  0022                     ??_LCD_SET_CURSOR:	
  2618  0022                     SWs_UPDATE@sw_counter:	
  2619                           ; 1 bytes @ 0x2
  2620                           
  2621  0022                     LED_SET_STATE@LED_NO:	
  2622                           ; 1 bytes @ 0x2
  2623                           
  2624  0022                     KEYPAD_UPDATE@KEYPAD_counter:	
  2625                           ; 1 bytes @ 0x2
  2626                           
  2627  0022                     utoa@c:	
  2628                           ; 1 bytes @ 0x2
  2629                           
  2630                           
  2631                           ; 1 bytes @ 0x2
  2632  0022                     	ds	1
  2633  0023                     KEYPAD_UPDATE@ROW_counter:	
  2634  0023                     utoa@buf:	
  2635                           ; 1 bytes @ 0x3
  2636                           
  2637                           
  2638                           ; 1 bytes @ 0x3
  2639  0023                     	ds	1
  2640  0024                     ?_itoa:	
  2641  0024                     LCD_SET_CURSOR@coloum:	
  2642                           ; 1 bytes @ 0x4
  2643                           
  2644  0024                     KEYPAD_UPDATE@COL_counter:	
  2645                           ; 1 bytes @ 0x4
  2646                           
  2647  0024                     itoa@val:	
  2648                           ; 1 bytes @ 0x4
  2649                           
  2650  0024                     i1___fldiv@b:	
  2651                           ; 2 bytes @ 0x4
  2652                           
  2653                           
  2654                           ; 4 bytes @ 0x4
  2655  0024                     	ds	1
  2656  0025                     START_BLINKING_AT@BLINKED:	
  2657  0025                     DISP_STATMENT@statment:	
  2658                           ; 1 bytes @ 0x5
  2659                           
  2660                           
  2661                           ; 1 bytes @ 0x5
  2662  0025                     	ds	1
  2663  0026                     ??_FINISH_HANDLER:	
  2664  0026                     ??_SET_HEATING_HANDLER_ON_WORK:	
  2665                           ; 1 bytes @ 0x6
  2666                           
  2667  0026                     ??_SET_ROTOR_PWR_HANDLER_ON_WORK:	
  2668                           ; 1 bytes @ 0x6
  2669                           
  2670  0026                     ??_GOTO_NEXT_DIGIT:	
  2671                           ; 1 bytes @ 0x6
  2672                           
  2673  0026                     itoa@base:	
  2674                           ; 1 bytes @ 0x6
  2675                           
  2676                           
  2677                           ; 2 bytes @ 0x6
  2678  0026                     	ds	2
  2679  0028                     ??_SET_HEATING_HANDLER:	
  2680  0028                     ?_LCD_SEND_A_NUMBER:	
  2681                           ; 1 bytes @ 0x8
  2682                           
  2683  0028                     ??i1___fldiv:	
  2684                           ; 1 bytes @ 0x8
  2685                           
  2686  0028                     GOTO_NEXT_DIGIT@KEY:	
  2687                           ; 1 bytes @ 0x8
  2688                           
  2689  0028                     LCD_SEND_A_NUMBER@x:	
  2690                           ; 1 bytes @ 0x8
  2691                           
  2692  0028                     SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY:	
  2693                           ; 2 bytes @ 0x8
  2694                           
  2695                           
  2696                           ; 2 bytes @ 0x8
  2697  0028                     	ds	2
  2698  002A                     ??_SET_ROTOR_PWR_HANDLER:	
  2699  002A                     LCD_SEND_A_NUMBER@string:	
  2700                           ; 1 bytes @ 0xA
  2701                           
  2702                           
  2703                           ; 6 bytes @ 0xA
  2704  002A                     	ds	2
  2705  002C                     i1___fldiv@rem:	
  2706                           
  2707                           ; 4 bytes @ 0xC
  2708  002C                     	ds	4
  2709  0030                     ?_DISP_UPDATE_TIME_UNIT_AT:	
  2710  0030                     DISP_UPDATE_TIME_UNIT_AT@NUMBER:	
  2711                           ; 1 bytes @ 0x10
  2712                           
  2713  0030                     UPDATE_LCD_SECONDS@SECONDS:	
  2714                           ; 1 bytes @ 0x10
  2715                           
  2716  0030                     UPDATE_LCD_MINUTES@MINUTES:	
  2717                           ; 1 bytes @ 0x10
  2718                           
  2719  0030                     UPDATE_LCD_HOURS@HOURS:	
  2720                           ; 1 bytes @ 0x10
  2721                           
  2722  0030                     i1___fldiv@sign:	
  2723                           ; 1 bytes @ 0x10
  2724                           
  2725                           
  2726                           ; 1 bytes @ 0x10
  2727  0030                     	ds	1
  2728  0031                     ?_DISP_UPDATE_TIME:	
  2729  0031                     ?_DISP_SHOW_TIME_AT:	
  2730                           ; 1 bytes @ 0x11
  2731                           
  2732  0031                     DISP_UPDATE_TIME_UNIT_AT@UNIT:	
  2733                           ; 1 bytes @ 0x11
  2734                           
  2735  0031                     i1___fldiv@new_exp:	
  2736                           ; 1 bytes @ 0x11
  2737                           
  2738  0031                     DISP_UPDATE_TIME@time:	
  2739                           ; 2 bytes @ 0x11
  2740                           
  2741  0031                     DISP_SHOW_TIME_AT@START_TIME:	
  2742                           ; 3 bytes @ 0x11
  2743                           
  2744                           
  2745                           ; 3 bytes @ 0x11
  2746  0031                     	ds	1
  2747  0032                     ??_INCREMENT_THIS:	
  2748                           
  2749                           ; 1 bytes @ 0x12
  2750  0032                     	ds	1
  2751  0033                     i1___fldiv@grs:	
  2752                           
  2753                           ; 4 bytes @ 0x13
  2754  0033                     	ds	1
  2755  0034                     ??_HEATING_HANDLER:	
  2756  0034                     INCREMENT_THIS@KEY:	
  2757                           ; 1 bytes @ 0x14
  2758                           
  2759                           
  2760                           ; 1 bytes @ 0x14
  2761  0034                     	ds	1
  2762  0035                     ??_SET_TIME_HANDLER:	
  2763                           
  2764                           ; 1 bytes @ 0x15
  2765  0035                     	ds	1
  2766  0036                     HEATING_HANDLER@current_time:	
  2767                           
  2768                           ; 3 bytes @ 0x16
  2769  0036                     	ds	1
  2770  0037                     i1___fldiv@bexp:	
  2771                           
  2772                           ; 1 bytes @ 0x17
  2773  0037                     	ds	1
  2774  0038                     i1___fldiv@aexp:	
  2775                           
  2776                           ; 1 bytes @ 0x18
  2777  0038                     	ds	1
  2778  0039                     ??_CONTROL_UPDATE:	
  2779  0039                     ?i1___flmul:	
  2780                           ; 1 bytes @ 0x19
  2781                           
  2782  0039                     i1___flmul@b:	
  2783                           ; 4 bytes @ 0x19
  2784                           
  2785                           
  2786                           ; 4 bytes @ 0x19
  2787  0039                     	ds	4
  2788  003D                     i1___flmul@a:	
  2789                           
  2790                           ; 4 bytes @ 0x1D
  2791  003D                     	ds	4
  2792  0041                     ??i1___flmul:	
  2793                           
  2794                           ; 1 bytes @ 0x21
  2795  0041                     	ds	4
  2796  0045                     i1___flmul@sign:	
  2797                           
  2798                           ; 1 bytes @ 0x25
  2799  0045                     	ds	1
  2800  0046                     i1___flmul@aexp:	
  2801                           
  2802                           ; 1 bytes @ 0x26
  2803  0046                     	ds	1
  2804  0047                     i1___flmul@grs:	
  2805                           
  2806                           ; 4 bytes @ 0x27
  2807  0047                     	ds	4
  2808  004B                     i1___flmul@bexp:	
  2809                           
  2810                           ; 1 bytes @ 0x2B
  2811  004B                     	ds	1
  2812  004C                     i1___flmul@prod:	
  2813                           
  2814                           ; 4 bytes @ 0x2C
  2815  004C                     	ds	4
  2816  0050                     i1___flmul@temp:	
  2817                           
  2818                           ; 2 bytes @ 0x30
  2819  0050                     	ds	2
  2820  0052                     ?i1___fltol:	
  2821  0052                     i1___fltol@f1:	
  2822                           ; 4 bytes @ 0x32
  2823                           
  2824                           
  2825                           ; 4 bytes @ 0x32
  2826  0052                     	ds	4
  2827  0056                     ??i1___fltol:	
  2828                           
  2829                           ; 1 bytes @ 0x36
  2830  0056                     	ds	4
  2831  005A                     i1___fltol@sign1:	
  2832                           
  2833                           ; 1 bytes @ 0x3A
  2834  005A                     	ds	1
  2835  005B                     i1___fltol@exp1:	
  2836                           
  2837                           ; 1 bytes @ 0x3B
  2838  005B                     	ds	1
  2839  005C                     ?i1_CCP1_PWM_DUTY_CYCLE_LOAD:	
  2840  005C                     ?i1_CCP2_PWM_DUTY_CYCLE_LOAD:	
  2841                           ; 1 bytes @ 0x3C
  2842                           
  2843  005C                     i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  2844                           ; 1 bytes @ 0x3C
  2845                           
  2846  005C                     i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  2847                           ; 2 bytes @ 0x3C
  2848                           
  2849                           
  2850                           ; 2 bytes @ 0x3C
  2851  005C                     	ds	2
  2852  005E                     ??i1_CCP1_PWM_DUTY_CYCLE_LOAD:	
  2853  005E                     ??i1_CCP2_PWM_DUTY_CYCLE_LOAD:	
  2854                           ; 1 bytes @ 0x3E
  2855                           
  2856                           
  2857                           ; 1 bytes @ 0x3E
  2858  005E                     	ds	3
  2859  0061                     i1_CCP1_PWM_DUTY_CYCLE_LOAD$2352:	
  2860  0061                     i1_CCP2_PWM_DUTY_CYCLE_LOAD$2353:	
  2861                           ; 4 bytes @ 0x41
  2862                           
  2863                           
  2864                           ; 4 bytes @ 0x41
  2865  0061                     	ds	4
  2866  0065                     i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  2867  0065                     i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  2868                           ; 2 bytes @ 0x45
  2869                           
  2870                           
  2871                           ; 2 bytes @ 0x45
  2872  0065                     	ds	2
  2873  0067                     ??_SYS_UPDATE:	
  2874                           
  2875                           ; 1 bytes @ 0x47
  2876  0067                     	ds	4
  2877                           
  2878                           	psect	maintext
  2879  07B9                     __pmaintext:	
  2880 ;;
  2881 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2882 ;;
  2883 ;; *************** function _main *****************
  2884 ;; Defined at:
  2885 ;;		line 52 in file "MICROWAVE.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;		None
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;		None
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      void 
  2892 ;; Registers used:
  2893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2894 ;; Tracked objects:
  2895 ;;		On entry : B00/0
  2896 ;;		On exit  : 200/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2899 ;;      Params:         0       0       0       0       0
  2900 ;;      Locals:         0       0       0       0       0
  2901 ;;      Temps:          0       0       0       0       0
  2902 ;;      Totals:         0       0       0       0       0
  2903 ;;Total ram usage:        0 bytes
  2904 ;; Hardware stack levels required when called:   14
  2905 ;; This function calls:
  2906 ;;		_CONTROL_INIT
  2907 ;;		_ENABLE_INTERUPT
  2908 ;;		_HEATER_INIT
  2909 ;;		_KEYPAD_INIT
  2910 ;;		_LCD_INIT
  2911 ;;		_LEDs_INIT
  2912 ;;		_MOTOR_INIT
  2913 ;;		_SWs_INIT
  2914 ;;		_TIMER0_INIT
  2915 ;;		_TIMER0_START
  2916 ;;		_TIME_INIT
  2917 ;; This function is called by:
  2918 ;;		Startup code after reset
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _main
  2924  07B9                     _main:	
  2925  07B9                     l6728:	
  2926                           ;incstack = 0
  2927 ;; hardware stack exceeded
  2928                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2929                           
  2930                           
  2931                           ;MICROWAVE.c: 56:     TIME_INIT ();
  2932  07B9  160A  158A  2553  120A  118A  	fcall	_TIME_INIT
  2933                           
  2934                           ;MICROWAVE.c: 57:     MOTOR_INIT();
  2935  07BE  160A  118A  2032  120A  118A  	fcall	_MOTOR_INIT
  2936                           
  2937                           ;MICROWAVE.c: 58:     HEATER_INIT();
  2938  07C3  160A  118A  2047  120A  118A  	fcall	_HEATER_INIT
  2939                           
  2940                           ;MICROWAVE.c: 60:     LCD_INIT();
  2941  07C8  120A  118A  24FA  120A  118A  	fcall	_LCD_INIT
  2942                           
  2943                           ;MICROWAVE.c: 61:     SWs_INIT();
  2944  07CD  120A  118A  2424  120A  118A  	fcall	_SWs_INIT
  2945                           
  2946                           ;MICROWAVE.c: 62:    LEDs_INIT();
  2947  07D2  120A  118A  2487  120A  118A  	fcall	_LEDs_INIT
  2948                           
  2949                           ;MICROWAVE.c: 63:     TIMER0_INIT();
  2950  07D7  120A  158A  2000  120A  118A  	fcall	_TIMER0_INIT
  2951                           
  2952                           ;MICROWAVE.c: 64:     KEYPAD_INIT();
  2953  07DC  120A  118A  24B7  120A  118A  	fcall	_KEYPAD_INIT
  2954                           
  2955                           ;MICROWAVE.c: 65:     CONTROL_INIT();
  2956  07E1  160A  158A  256D  120A  118A  	fcall	_CONTROL_INIT
  2957                           
  2958                           ;MICROWAVE.c: 66:     ENABLE_INTERUPT();
  2959  07E6  160A  158A  2544  120A  118A  	fcall	_ENABLE_INTERUPT
  2960                           
  2961                           ;MICROWAVE.c: 68:    TIMER0_START();
  2962  07EB  160A  158A  2547  120A  118A  	fcall	_TIMER0_START
  2963  07F0                     l937:	
  2964                           ;MICROWAVE.c: 70:     while(1)
  2965                           
  2966                           
  2967                           ;MICROWAVE.c: 71:     {;MICROWAVE.c: 78:     }
  2968  07F0  2FF0               	goto	l937
  2969  07F1                     __end_of_main:	
  2970                           
  2971                           	psect	text1
  2972  1D53                     __ptext1:	
  2973 ;; *************** function _TIME_INIT *****************
  2974 ;; Defined at:
  2975 ;;		line 32 in file "TIME.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;		None
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;		None
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  1    wreg      void 
  2982 ;; Registers used:
  2983 ;;		status,2
  2984 ;; Tracked objects:
  2985 ;;		On entry : B00/0
  2986 ;;		On exit  : B00/300
  2987 ;;		Unchanged: 800/0
  2988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2989 ;;      Params:         0       0       0       0       0
  2990 ;;      Locals:         0       0       0       0       0
  2991 ;;      Temps:          0       0       0       0       0
  2992 ;;      Totals:         0       0       0       0       0
  2993 ;;Total ram usage:        0 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; Hardware stack levels required when called:   10
  2996 ;; This function calls:
  2997 ;;		Nothing
  2998 ;; This function is called by:
  2999 ;;		_main
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           
  3004                           ;psect for function _TIME_INIT
  3005  1D53                     _TIME_INIT:	
  3006                           
  3007                           ;TIME.c: 34:  TICK_COUNTER = 0 ;
  3008                           
  3009                           ;incstack = 0
  3010 ;; hardware stack exceeded
  3011                           ; Regs used in _TIME_INIT: [status,2]
  3012  1D53  1683               	bsf	3,5	;RP0=1, select bank3
  3013  1D54  1703               	bsf	3,6	;RP1=1, select bank3
  3014  1D55  01A0               	clrf	_TICK_COUNTER^(0+384)
  3015  1D56  01A1               	clrf	(_TICK_COUNTER+1)^(0+384)
  3016                           
  3017                           ;TIME.c: 35:  COUNT_DECISION = NO ;
  3018  1D57  01AB               	clrf	_COUNT_DECISION^(0+384)
  3019                           
  3020                           ;TIME.c: 36:  CURRENT_TIME.HOURS = 0;
  3021  1D58  0197               	clrf	(_CURRENT_TIME^(0+384)+2)
  3022                           
  3023                           ;TIME.c: 37: CURRENT_TIME.MINUTES = 0;
  3024  1D59  0196               	clrf	(_CURRENT_TIME^(0+384)+1)
  3025                           
  3026                           ;TIME.c: 38: CURRENT_TIME.SECONDS = 0;
  3027  1D5A  0195               	clrf	_CURRENT_TIME^(0+384)
  3028  1D5B  0008               	return
  3029  1D5C                     __end_of_TIME_INIT:	
  3030                           
  3031                           	psect	text2
  3032  1D47                     __ptext2:	
  3033 ;; *************** function _TIMER0_START *****************
  3034 ;; Defined at:
  3035 ;;		line 80 in file "TIMR0.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;		None
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;		None
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      void 
  3042 ;; Registers used:
  3043 ;;		None
  3044 ;; Tracked objects:
  3045 ;;		On entry : B00/B00
  3046 ;;		On exit  : B00/900
  3047 ;;		Unchanged: 800/0
  3048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3049 ;;      Params:         0       0       0       0       0
  3050 ;;      Locals:         0       0       0       0       0
  3051 ;;      Temps:          0       0       0       0       0
  3052 ;;      Totals:         0       0       0       0       0
  3053 ;;Total ram usage:        0 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:   10
  3056 ;; This function calls:
  3057 ;;		Nothing
  3058 ;; This function is called by:
  3059 ;;		_main
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           
  3064                           ;psect for function _TIMER0_START
  3065  1D47                     _TIMER0_START:	
  3066                           
  3067                           ;TIMR0.c: 82:  ( T0SE =( TIMER0_INTERNAL &0x01)); (T0CS = ( TIMER0_INTERNAL >>1));
  3068                           
  3069                           ;incstack = 0
  3070 ;; hardware stack exceeded
  3071                           ; Regs used in _TIMER0_START: []
  3072  1D47  1303               	bcf	3,6	;RP1=0, select bank1
  3073  1D48  1201               	bcf	1,4	;volatile
  3074  1D49  1281               	bcf	1,5	;volatile
  3075  1D4A  0008               	return
  3076  1D4B                     __end_of_TIMER0_START:	
  3077                           
  3078                           	psect	text3
  3079  0800                     __ptext3:	
  3080 ;; *************** function _TIMER0_INIT *****************
  3081 ;; Defined at:
  3082 ;;		line 29 in file "TIMR0.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;		None
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;		None
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      void 
  3089 ;; Registers used:
  3090 ;;		wreg, status,2, status,0, pclath, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : B00/900
  3093 ;;		On exit  : B00/900
  3094 ;;		Unchanged: 800/0
  3095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3096 ;;      Params:         0       0       0       0       0
  3097 ;;      Locals:         0       0       0       0       0
  3098 ;;      Temps:          0       0       0       0       0
  3099 ;;      Totals:         0       0       0       0       0
  3100 ;;Total ram usage:        0 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:   11
  3103 ;; This function calls:
  3104 ;;		_TIMER0_STOP
  3105 ;; This function is called by:
  3106 ;;		_main
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           
  3111                           ;psect for function _TIMER0_INIT
  3112  0800                     _TIMER0_INIT:	
  3113                           
  3114                           ;TIMR0.c: 32:  ( PSA = GPIO_PIN_OFF); (OPTION_REGbits.PS = TIMER0_CLK_256 );
  3115                           
  3116                           ;incstack = 0
  3117 ;; hardware stack exceeded
  3118                           ; Regs used in _TIMER0_INIT: [wreg+status,2+status,0+pclath+cstack]
  3119  0800  1181               	bcf	1,3	;volatile
  3120  0801  3007               	movlw	7
  3121  0802  0481               	iorwf	1,f	;volatile
  3122                           
  3123                           ;TIMR0.c: 34:  (TMR0IE = TIMER0_INTERUPT_BASED );
  3124  0803  168B               	bsf	11,5	;volatile
  3125                           
  3126                           ;TIMR0.c: 36:     (TMR0 = ((tWORD)((256) - ( (5)* ((double) (8 * 1000) / ( 4 * 256 ) ) )
      +                          )) );
  3127  0804  30D8               	movlw	216
  3128  0805  1283               	bcf	3,5	;RP0=0, select bank0
  3129  0806  0081               	movwf	1	;volatile
  3130                           
  3131                           ;TIMR0.c: 37:  TIMER0_STOP();
  3132  0807  2808               	ljmp	l6030
  3133  0808                     __end_of_TIMER0_INIT:	
  3134  0808                     __ptext4:	
  3135 ;; *************** function _TIMER0_STOP *****************
  3136 ;; Defined at:
  3137 ;;		line 84 in file "TIMR0.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;		None
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		None
  3146 ;; Tracked objects:
  3147 ;;		On entry : B00/800
  3148 ;;		On exit  : B00/900
  3149 ;;		Unchanged: 800/0
  3150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3151 ;;      Params:         0       0       0       0       0
  3152 ;;      Locals:         0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0
  3154 ;;      Totals:         0       0       0       0       0
  3155 ;;Total ram usage:        0 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:   10
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_TIMER0_INIT
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           
  3166                           ;psect for function _TIMER0_STOP
  3167  0808                     _TIMER0_STOP:	
  3168  0808                     l6030:	
  3169                           ;incstack = 0
  3170 ;; hardware stack exceeded
  3171                           ; Regs used in _TIMER0_STOP: []
  3172                           
  3173                           
  3174                           ;TIMR0.c: 86:     ( T0SE =( TIMER0_EXTERNAL_RISING_EDGE &0x01)); (T0CS = ( TIMER0_EXTERN
      +                          AL_RISING_EDGE >>1));
  3175  0808  1683               	bsf	3,5	;RP0=1, select bank1
  3176  0809  1601               	bsf	1,4	;volatile
  3177  080A  1281               	bcf	1,5	;volatile
  3178  080B  0008               	return
  3179  080C                     __end_of_TIMER0_STOP:	
  3180                           
  3181                           	psect	text5
  3182  0424                     __ptext5:	
  3183 ;; *************** function _SWs_INIT *****************
  3184 ;; Defined at:
  3185 ;;		line 131 in file "SW.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;  SW_Counter      1   20[BANK1 ] unsigned char 
  3190 ;;  Samples_Coun    1   19[BANK1 ] unsigned char 
  3191 ;;  ret             1    0        enum E865
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      enum E865
  3194 ;; Registers used:
  3195 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/300
  3198 ;;		On exit  : B00/900
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3201 ;;      Params:         0       0       0       0       0
  3202 ;;      Locals:         0       0       3       0       0
  3203 ;;      Temps:          0       0       0       0       0
  3204 ;;      Totals:         0       0       3       0       0
  3205 ;;Total ram usage:        3 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:   11
  3208 ;; This function calls:
  3209 ;;		_GPIO_PIN_INIT
  3210 ;;		___bmul
  3211 ;; This function is called by:
  3212 ;;		_main
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           
  3217                           ;psect for function _SWs_INIT
  3218  0424                     _SWs_INIT:	
  3219                           
  3220                           ;SW.c: 134:  tbyte SW_Counter ;;SW.c: 135:  tbyte Samples_Counter;;SW.c: 136:  for (SW_C
      +                          ounter =0 ; SW_Counter < 4 ; SW_Counter++)
  3221                           
  3222                           ;incstack = 0
  3223 ;; hardware stack exceeded
  3224                           ; Regs used in _SWs_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3225  0424  1683               	bsf	3,5	;RP0=1, select bank1
  3226  0425  1303               	bcf	3,6	;RP1=0, select bank1
  3227  0426  01B4               	clrf	SWs_INIT@SW_Counter^(0+128)
  3228  0427                     l6386:	
  3229                           
  3230                           ;SW.c: 137:  {;SW.c: 139:   GPIO_PIN_INIT ( SWs[SW_Counter].SW_PORT, SWs[SW_Counter].SW_
      +                          PIN , GPIO_PIN_IN );
  3231  0427  3005               	movlw	5
  3232  0428  00A0               	movwf	___bmul@multiplicand^(0+128)
  3233  0429  0834               	movf	SWs_INIT@SW_Counter^(0+128),w
  3234  042A  245D  120A  118A   	fcall	___bmul
  3235  042D  3EB3               	addlw	(low ((_SWs| (0+256)+1)))& (0+255)
  3236  042E  0084               	movwf	4
  3237  042F  1783               	bsf	3,7	;select IRP bank3
  3238  0430  0800               	movf	0,w
  3239  0431  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3240  0432  3005               	movlw	5
  3241  0433  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3242  0434  0AA4               	incf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128),f
  3243  0435  00A0               	movwf	___bmul@multiplicand^(0+128)
  3244  0436  0834               	movf	SWs_INIT@SW_Counter^(0+128),w
  3245  0437  245D  120A  118A   	fcall	___bmul
  3246  043A  3EB2               	addlw	(low (_SWs| (0+256)))& (0+255)
  3247  043B  0084               	movwf	4
  3248  043C  1783               	bsf	3,7	;select IRP bank3
  3249  043D  0800               	movf	0,w
  3250  043E  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3251                           
  3252                           ;SW.c: 141:     SWs[SW_Counter].SW_STATE = SW_RELEASED ;
  3253  0441  3005               	movlw	5
  3254  0442  00A0               	movwf	___bmul@multiplicand^(0+128)
  3255  0443  0834               	movf	SWs_INIT@SW_Counter^(0+128),w
  3256  0444  245D  120A  118A   	fcall	___bmul
  3257  0447  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  3258  0448  0084               	movwf	4
  3259  0449  3002               	movlw	2
  3260  044A  1783               	bsf	3,7	;select IRP bank3
  3261  044B  0080               	movwf	0
  3262                           
  3263                           ;SW.c: 143:   for (Samples_Counter =0 ; Samples_Counter < 2 ; Samples_Counter++)
  3264  044C  01B3               	clrf	SWs_INIT@Samples_Counter^(0+128)
  3265  044D                     l6394:	
  3266                           
  3267                           ;SW.c: 144:   {;SW.c: 146:    SWs->SW_SAMPLES[Samples_Counter] = (1) ;
  3268  044D  0833               	movf	SWs_INIT@Samples_Counter^(0+128),w
  3269  044E  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  3270  044F  0084               	movwf	4
  3271  0450  3002               	movlw	2
  3272  0451  0180               	clrf	0
  3273  0452  0A80               	incf	0,f
  3274                           
  3275                           ;SW.c: 147:   }
  3276  0453  0AB3               	incf	SWs_INIT@Samples_Counter^(0+128),f
  3277  0454  0233               	subwf	SWs_INIT@Samples_Counter^(0+128),w
  3278  0455  1C03               	skipc
  3279  0456  2C4D               	goto	l6394
  3280  0457  3004               	movlw	4
  3281                           
  3282                           ;SW.c: 148:  }
  3283  0458  0AB4               	incf	SWs_INIT@SW_Counter^(0+128),f
  3284  0459  0234               	subwf	SWs_INIT@SW_Counter^(0+128),w
  3285  045A  1803               	btfsc	3,0
  3286  045B  0008               	return
  3287  045C  2C27               	goto	l6386
  3288  045D                     __end_of_SWs_INIT:	
  3289  045D                     __ptext6:	
  3290 ;; *************** function ___bmul *****************
  3291 ;; Defined at:
  3292 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  multiplier      1    wreg     unsigned char 
  3295 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  multiplier      1    2[BANK1 ] unsigned char 
  3298 ;;  product         1    1[BANK1 ] unsigned char 
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  1    wreg      unsigned char 
  3301 ;; Registers used:
  3302 ;;		wreg, status,2, status,0
  3303 ;; Tracked objects:
  3304 ;;		On entry : 300/100
  3305 ;;		On exit  : 300/100
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3308 ;;      Params:         0       0       1       0       0
  3309 ;;      Locals:         0       0       2       0       0
  3310 ;;      Temps:          0       0       0       0       0
  3311 ;;      Totals:         0       0       3       0       0
  3312 ;;Total ram usage:        3 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; Hardware stack levels required when called:   10
  3315 ;; This function calls:
  3316 ;;		Nothing
  3317 ;; This function is called by:
  3318 ;;		_SWs_UPDATE
  3319 ;;		_SW_GET_STATE
  3320 ;;		_SWs_INIT
  3321 ;;		_LED_SET_STATE
  3322 ;;		_INCREMENT_THIS
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           
  3327                           ;psect for function ___bmul
  3328  045D                     ___bmul:	
  3329                           
  3330                           ;incstack = 0
  3331 ;; hardware stack exceeded
  3332                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3333                           ;___bmul@multiplier stored from wreg
  3334  045D  00A2               	movwf	___bmul@multiplier^(0+128)
  3335  045E  01A1               	clrf	___bmul@product^(0+128)
  3336  045F  0820               	movf	___bmul@multiplicand^(0+128),w
  3337  0460  1822               	btfsc	___bmul@multiplier^(0+128),0
  3338  0461  07A1               	addwf	___bmul@product^(0+128),f
  3339  0462  1003               	clrc
  3340  0463  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3341  0464  0820               	movf	___bmul@multiplicand^(0+128),w
  3342  0465  18A2               	btfsc	___bmul@multiplier^(0+128),1
  3343  0466  07A1               	addwf	___bmul@product^(0+128),f
  3344  0467  1003               	clrc
  3345  0468  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3346  0469  0820               	movf	___bmul@multiplicand^(0+128),w
  3347  046A  1922               	btfsc	___bmul@multiplier^(0+128),2
  3348  046B  07A1               	addwf	___bmul@product^(0+128),f
  3349  046C  1003               	clrc
  3350  046D  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3351  046E  0820               	movf	___bmul@multiplicand^(0+128),w
  3352  046F  19A2               	btfsc	___bmul@multiplier^(0+128),3
  3353  0470  07A1               	addwf	___bmul@product^(0+128),f
  3354  0471  1003               	clrc
  3355  0472  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3356  0473  0820               	movf	___bmul@multiplicand^(0+128),w
  3357  0474  1A22               	btfsc	___bmul@multiplier^(0+128),4
  3358  0475  07A1               	addwf	___bmul@product^(0+128),f
  3359  0476  1003               	clrc
  3360  0477  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3361  0478  0820               	movf	___bmul@multiplicand^(0+128),w
  3362  0479  1AA2               	btfsc	___bmul@multiplier^(0+128),5
  3363  047A  07A1               	addwf	___bmul@product^(0+128),f
  3364  047B  1003               	clrc
  3365  047C  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3366  047D  0820               	movf	___bmul@multiplicand^(0+128),w
  3367  047E  1B22               	btfsc	___bmul@multiplier^(0+128),6
  3368  047F  07A1               	addwf	___bmul@product^(0+128),f
  3369  0480  1003               	clrc
  3370  0481  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3371  0482  0820               	movf	___bmul@multiplicand^(0+128),w
  3372  0483  1BA2               	btfsc	___bmul@multiplier^(0+128),7
  3373  0484  07A1               	addwf	___bmul@product^(0+128),f
  3374  0485  0821               	movf	___bmul@product^(0+128),w
  3375  0486  0008               	return
  3376  0487                     __end_of___bmul:	
  3377  0487                     __ptext11:	
  3378 ;; *************** function _LEDs_INIT *****************
  3379 ;; Defined at:
  3380 ;;		line 29 in file "LED.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;		None
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  counter         1   18[BANK1 ] unsigned char 
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3389 ;; Tracked objects:
  3390 ;;		On entry : B00/900
  3391 ;;		On exit  : B00/900
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3394 ;;      Params:         0       0       0       0       0
  3395 ;;      Locals:         0       0       1       0       0
  3396 ;;      Temps:          0       0       0       0       0
  3397 ;;      Totals:         0       0       1       0       0
  3398 ;;Total ram usage:        1 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:   11
  3401 ;; This function calls:
  3402 ;;		_GPIO_PIN_INIT
  3403 ;;		_GPIO_PIN_SET_STATE
  3404 ;; This function is called by:
  3405 ;;		_main
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           
  3410                           ;psect for function _LEDs_INIT
  3411  0487                     _LEDs_INIT:	
  3412                           
  3413                           ;LED.c: 31:  tbyte counter ;;LED.c: 32:  for (counter =0 ; counter < 1 ; counter++)
  3414                           
  3415                           ;incstack = 0
  3416 ;; hardware stack exceeded
  3417                           ; Regs used in _LEDs_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3418  0487  01B2               	clrf	LEDs_INIT@counter^(0+128)
  3419  0488                     l6410:	
  3420                           
  3421                           ;LED.c: 33:  {;LED.c: 35:   GPIO_PIN_INIT ( LEDs[counter].LED_PORT, LEDs[counter].LED_PI
      +                          N , GPIO_PIN_OUT );
  3422  0488  0832               	movf	LEDs_INIT@counter^(0+128),w
  3423  0489  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3424  048A  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3425  048B  3ED0               	addlw	(low ((_LEDs| (0+256)+1)))& (0+255)
  3426  048C  0084               	movwf	4
  3427  048D  0800               	movf	0,w
  3428  048E  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3429  048F  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3430  0490  0832               	movf	LEDs_INIT@counter^(0+128),w
  3431  0491  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3432  0492  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3433  0493  3ECF               	addlw	(low (_LEDs| (0+256)))& (0+255)
  3434  0494  0084               	movwf	4
  3435  0495  0800               	movf	0,w
  3436  0496  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3437                           
  3438                           ;LED.c: 36:   GPIO_PIN_SET_STATE ( LEDs[counter].LED_PORT , LEDs[counter].LED_PIN , LED_
      +                          OFF );
  3439  0499  0832               	movf	LEDs_INIT@counter^(0+128),w
  3440  049A  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3441  049B  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3442  049C  3ED0               	addlw	(low ((_LEDs| (0+256)+1)))& (0+255)
  3443  049D  0084               	movwf	4
  3444  049E  1783               	bsf	3,7	;select IRP bank3
  3445  049F  0800               	movf	0,w
  3446  04A0  00A0               	movwf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3447  04A1  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3448  04A2  0832               	movf	LEDs_INIT@counter^(0+128),w
  3449  04A3  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3450  04A4  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3451  04A5  3ECF               	addlw	(low (_LEDs| (0+256)))& (0+255)
  3452  04A6  0084               	movwf	4
  3453  04A7  0800               	movf	0,w
  3454  04A8  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3455                           
  3456                           ;LED.c: 37:         LEDs[counter].LED_STATE = LED_OFF ;
  3457  04AB  0832               	movf	LEDs_INIT@counter^(0+128),w
  3458  04AC  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3459  04AD  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3460  04AE  3ED1               	addlw	(low ((_LEDs| (0+256)+2)))& (0+255)
  3461  04AF  0084               	movwf	4
  3462  04B0  1783               	bsf	3,7	;select IRP bank3
  3463  04B1  0180               	clrf	0
  3464                           
  3465                           ;LED.c: 39:  }
  3466  04B2  0AB2               	incf	LEDs_INIT@counter^(0+128),f
  3467  04B3  0832               	movf	LEDs_INIT@counter^(0+128),w
  3468  04B4  1D03               	btfss	3,2
  3469  04B5  0008               	return
  3470  04B6  2C88               	goto	l6410
  3471  04B7                     __end_of_LEDs_INIT:	
  3472  04B7                     __ptext15:	
  3473 ;; *************** function _KEYPAD_INIT *****************
  3474 ;; Defined at:
  3475 ;;		line 12 in file "Keypad.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;  counter         1   18[BANK1 ] unsigned char 
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  1    wreg      void 
  3482 ;; Registers used:
  3483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : B00/900
  3486 ;;		On exit  : B00/B00
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3489 ;;      Params:         0       0       0       0       0
  3490 ;;      Locals:         0       0       1       0       0
  3491 ;;      Temps:          0       0       0       0       0
  3492 ;;      Totals:         0       0       1       0       0
  3493 ;;Total ram usage:        1 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:   11
  3496 ;; This function calls:
  3497 ;;		_GPIO_PIN_INIT
  3498 ;;		_GPIO_PIN_SET_STATE
  3499 ;; This function is called by:
  3500 ;;		_main
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           
  3505                           ;psect for function _KEYPAD_INIT
  3506  04B7                     _KEYPAD_INIT:	
  3507                           
  3508                           ;Keypad.c: 14:  tbyte counter = 0 ;
  3509                           
  3510                           ;incstack = 0
  3511 ;; hardware stack exceeded
  3512                           ; Regs used in _KEYPAD_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3513  04B7  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3514                           
  3515                           ;Keypad.c: 15:  for (counter = 0 ; counter <4 ; counter++ )
  3516  04B8  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3517  04B9                     l6430:	
  3518                           
  3519                           ;Keypad.c: 16:  {;Keypad.c: 17:   GPIO_PIN_INIT(KEYPAD_info.KEYPAD_ROW_RORT , KEYPAD_inf
      +                          o.KEYPAD_ROW_PIN[counter] , GPIO_PIN_OUT);
  3520  04B9  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3521  04BA  3EC8               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
  3522  04BB  0084               	movwf	4
  3523  04BC  1783               	bsf	3,7	;select IRP bank3
  3524  04BD  0800               	movf	0,w
  3525  04BE  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3526  04BF  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3527  04C0  1703               	bsf	3,6	;RP1=1, select bank3
  3528  04C1  0846               	movf	_KEYPAD_info^(0+384),w
  3529  04C2  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3530                           
  3531                           ;Keypad.c: 18:   GPIO_PIN_SET_STATE(KEYPAD_info.KEYPAD_ROW_RORT , KEYPAD_info.KEYPAD_ROW
      +                          _PIN[counter] , (1));
  3532  04C5  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3533  04C6  3EC8               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
  3534  04C7  0084               	movwf	4
  3535  04C8  1783               	bsf	3,7	;select IRP bank3
  3536  04C9  0800               	movf	0,w
  3537  04CA  00A0               	movwf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3538  04CB  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3539  04CC  0AA1               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),f
  3540  04CD  1703               	bsf	3,6	;RP1=1, select bank3
  3541  04CE  0846               	movf	_KEYPAD_info^(0+384),w
  3542  04CF  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3543  04D2  3004               	movlw	4
  3544                           
  3545                           ;Keypad.c: 19:  }
  3546  04D3  0AB2               	incf	KEYPAD_INIT@counter^(0+128),f
  3547  04D4  0232               	subwf	KEYPAD_INIT@counter^(0+128),w
  3548  04D5  1C03               	skipc
  3549  04D6  2CB9               	goto	l6430
  3550                           
  3551                           ;Keypad.c: 20:  for (counter = 0 ; counter <3 ; counter++ )
  3552  04D7  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3553  04D8                     l6442:	
  3554                           
  3555                           ;Keypad.c: 21:  {;Keypad.c: 22:   GPIO_PIN_INIT(KEYPAD_info.KEYPAD_COL_PORT , KEYPAD_inf
      +                          o.KEYPAD_COL_PIN[counter] , GPIO_PIN_IN);
  3556  04D8  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3557  04D9  3ECC               	addlw	(low ((_KEYPAD_info| (0+256)+6)))& (0+255)
  3558  04DA  0084               	movwf	4
  3559  04DB  1783               	bsf	3,7	;select IRP bank3
  3560  04DC  0800               	movf	0,w
  3561  04DD  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3562  04DE  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3563  04DF  0AA4               	incf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128),f
  3564  04E0  1703               	bsf	3,6	;RP1=1, select bank3
  3565  04E1  0847               	movf	(_KEYPAD_info^(0+384)+1),w
  3566  04E2  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3567  04E5  3003               	movlw	3
  3568                           
  3569                           ;Keypad.c: 23:  }
  3570  04E6  0AB2               	incf	KEYPAD_INIT@counter^(0+128),f
  3571  04E7  0232               	subwf	KEYPAD_INIT@counter^(0+128),w
  3572  04E8  1C03               	skipc
  3573  04E9  2CD8               	goto	l6442
  3574                           
  3575                           ;Keypad.c: 24:  for (counter = 0 ; counter <3 ; counter++ )
  3576  04EA  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3577  04EB                     l6454:	
  3578                           
  3579                           ;Keypad.c: 25:  {;Keypad.c: 26:   keypad_sapmles[counter] = NO_KEY;
  3580  04EB  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3581  04EC  3E9B               	addlw	(low (_keypad_sapmles| (0+256)))& (0+255)
  3582  04ED  0084               	movwf	4
  3583  04EE  300C               	movlw	12
  3584  04EF  1783               	bsf	3,7	;select IRP bank3
  3585  04F0  0080               	movwf	0
  3586  04F1  3003               	movlw	3
  3587                           
  3588                           ;Keypad.c: 27:  }
  3589  04F2  0AB2               	incf	KEYPAD_INIT@counter^(0+128),f
  3590  04F3  0232               	subwf	KEYPAD_INIT@counter^(0+128),w
  3591  04F4  1C03               	skipc
  3592  04F5  2CEB               	goto	l6454
  3593                           
  3594                           ;Keypad.c: 28:  LAST_PRESSED_KEY.KEYPAD_NO = NO_KEY;
  3595  04F6  300C               	movlw	12
  3596  04F7  1703               	bsf	3,6	;RP1=1, select bank3
  3597  04F8  00A2               	movwf	_LAST_PRESSED_KEY^(0+384)
  3598  04F9  0008               	return
  3599  04FA                     __end_of_KEYPAD_INIT:	
  3600  04FA                     __ptext12:	
  3601 ;; *************** function _LCD_INIT *****************
  3602 ;; Defined at:
  3603 ;;		line 27 in file "LCD.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;		None
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;		None
  3608 ;; Return value:  Size  Location     Type
  3609 ;;                  1    wreg      void 
  3610 ;; Registers used:
  3611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3612 ;; Tracked objects:
  3613 ;;		On entry : 300/300
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3617 ;;      Params:         0       0       0       0       0
  3618 ;;      Locals:         0       0       0       0       0
  3619 ;;      Temps:          0       0       1       0       0
  3620 ;;      Totals:         0       0       1       0       0
  3621 ;;Total ram usage:        1 bytes
  3622 ;; Hardware stack levels used:    1
  3623 ;; Hardware stack levels required when called:   12
  3624 ;; This function calls:
  3625 ;;		_GPIO_PIN_INIT
  3626 ;;		_GPIO_PIN_SET_STATE
  3627 ;;		_LCD_SND_COMMAND
  3628 ;; This function is called by:
  3629 ;;		_main
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           
  3634                           ;psect for function _LCD_INIT
  3635  04FA                     _LCD_INIT:	
  3636                           
  3637                           ;LCD.c: 30:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_4 , GPIO_PORT_OUT);
  3638                           
  3639                           ;incstack = 0
  3640 ;; hardware stack exceeded
  3641                           ; Regs used in _LCD_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3642  04FA  3004               	movlw	4
  3643  04FB  1303               	bcf	3,6	;RP1=0, select bank1
  3644  04FC  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3645  04FD  3008               	movlw	8
  3646  04FE  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3647  04FF  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3648                           
  3649                           ;LCD.c: 31:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_5 , GPIO_PORT_OUT);
  3650  0502  3005               	movlw	5
  3651  0503  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3652  0504  3008               	movlw	8
  3653  0505  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3654  0506  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3655                           
  3656                           ;LCD.c: 32:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_6 , GPIO_PORT_OUT);
  3657  0509  3006               	movlw	6
  3658  050A  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3659  050B  3008               	movlw	8
  3660  050C  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3661  050D  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3662                           
  3663                           ;LCD.c: 33:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_7 , GPIO_PORT_OUT);
  3664  0510  3007               	movlw	7
  3665  0511  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3666  0512  3008               	movlw	8
  3667  0513  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3668  0514  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3669                           
  3670                           ;LCD.c: 39:         GPIO_PIN_INIT((0x0009) , 2 , GPIO_PIN_OUT );
  3671  0517  3002               	movlw	2
  3672  0518  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3673  0519  3009               	movlw	9
  3674  051A  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3675  051B  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3676  051E  3009               	movlw	9
  3677                           
  3678                           ;LCD.c: 40:         GPIO_PIN_INIT((0x0009) , 1 , GPIO_PIN_OUT );
  3679  051F  01A3               	clrf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3680  0520  0AA3               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),f
  3681  0521  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3682  0522  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3683  0525  3009               	movlw	9
  3684                           
  3685                           ;LCD.c: 41:         GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
  3686  0526  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3687  0527  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3688  0528  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3689  0529  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3690                           
  3691                           ;LCD.c: 43:         _delay((unsigned long)((2)*(((8 * 1000) * 1000)/4000.0)));
  3692  052C  2D2D               	nop2	;2 cycle nop
  3693                           
  3694                           ;LCD.c: 45:         LCD_SND_COMMAND(0x33);
  3695  052D  3033               	movlw	51
  3696  052E  2582  120A  118A   	fcall	_LCD_SND_COMMAND
  3697                           
  3698                           ;LCD.c: 46:         LCD_SND_COMMAND(0x32);
  3699  0531  3032               	movlw	50
  3700  0532  2582  120A  118A   	fcall	_LCD_SND_COMMAND
  3701                           
  3702                           ;LCD.c: 49:   LCD_SND_COMMAND(0x28);
  3703  0535  3028               	movlw	40
  3704  0536  2582  120A  118A   	fcall	_LCD_SND_COMMAND
  3705                           
  3706                           ;LCD.c: 54:     LCD_SND_COMMAND(0x0c);
  3707  0539  300C               	movlw	12
  3708  053A  2582  120A  118A   	fcall	_LCD_SND_COMMAND
  3709                           
  3710                           ;LCD.c: 55:     LCD_SND_COMMAND(0x01);
  3711  053D  3001               	movlw	1
  3712  053E  2582  120A  118A   	fcall	_LCD_SND_COMMAND
  3713                           
  3714                           ;LCD.c: 56:     _delay((unsigned long)((10)*(((8 * 1000) * 1000)/4000.0)));
  3715  0541  3002               	movlw	2
  3716  0542  1683               	bsf	3,5	;RP0=1, select bank1
  3717  0543  1303               	bcf	3,6	;RP1=0, select bank1
  3718  0544  00B2               	movwf	??_LCD_INIT^(0+128)
  3719  0545                     u6857:	
  3720  0545  0BB2               	decfsz	??_LCD_INIT^(0+128),f
  3721  0546  2D45               	goto	u6857
  3722  0547  2D48               	nop2
  3723  0548  0008               	return
  3724  0549                     __end_of_LCD_INIT:	
  3725  0549                     __ptext31:	
  3726 ;; *************** function _GPIO_PIN_INIT *****************
  3727 ;; Defined at:
  3728 ;;		line 18 in file "GPIO.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;  GPIO_PORTx      1    wreg     unsigned char 
  3731 ;;  GPIO_PIN_NO     1    3[BANK1 ] enum E875
  3732 ;;  GPIO_DIRECTI    1    4[BANK1 ] enum E885
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;  GPIO_PORTx      1   17[BANK1 ] unsigned char 
  3735 ;;  ret             1    0        enum E865
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      enum E865
  3738 ;; Registers used:
  3739 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3740 ;; Tracked objects:
  3741 ;;		On entry : 100/900
  3742 ;;		On exit  : 300/100
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3745 ;;      Params:         0       0       2       0       0
  3746 ;;      Locals:         0       0       2       0       0
  3747 ;;      Temps:          0       0      11       0       0
  3748 ;;      Totals:         0       0      15       0       0
  3749 ;;Total ram usage:       15 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:   10
  3752 ;; This function calls:
  3753 ;;		Nothing
  3754 ;; This function is called by:
  3755 ;;		_CCP1_INIT
  3756 ;;		_CCP2_INIT
  3757 ;;		_SWs_INIT
  3758 ;;		_LEDs_INIT
  3759 ;;		_LCD_INIT
  3760 ;;		_KEYPAD_INIT
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           
  3765                           ;psect for function _GPIO_PIN_INIT
  3766  0549                     _GPIO_PIN_INIT:	
  3767                           
  3768                           ;incstack = 0
  3769 ;; hardware stack exceeded
  3770                           ; Regs used in _GPIO_PIN_INIT: [wreg-fsr0h+status,2+status,0]
  3771                           ;GPIO_PIN_INIT@GPIO_PORTx stored from wreg
  3772  0549  1303               	bcf	3,6	;RP1=0, select bank1
  3773  054A  00B1               	movwf	GPIO_PIN_INIT@GPIO_PORTx^(0+128)
  3774                           
  3775                           ;GPIO.c: 21:   ( ((*((volatile unsigned char* )( GPIO_PORTx + (0x80) )))) = ((((*((volat
      +                          ile unsigned char* )( GPIO_PORTx + (0x80) )))) & (~(1<< GPIO_PIN_NO)) ) | (GPIO_DIRECTIO
      +                          N << GPIO_PIN_NO)) );
  3776  054B  0824               	movf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128),w
  3777  054C  00A5               	movwf	??_GPIO_PIN_INIT^(0+128)
  3778  054D  0A23               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),w
  3779  054E  2D51               	goto	u4124
  3780  054F                     u4125:	
  3781  054F  1003               	clrc
  3782  0550  0DA5               	rlf	??_GPIO_PIN_INIT^(0+128),f
  3783  0551                     u4124:	
  3784  0551  3EFF               	addlw	-1
  3785  0552  1D03               	skipz
  3786  0553  2D4F               	goto	u4125
  3787  0554  0831               	movf	GPIO_PIN_INIT@GPIO_PORTx^(0+128),w
  3788  0555  00A6               	movwf	(??_GPIO_PIN_INIT+1)^(0+128)
  3789  0556  01A7               	clrf	((??_GPIO_PIN_INIT+1)^(0+128)+1)
  3790  0557  3E80               	addlw	128
  3791  0558  00A8               	movwf	(??_GPIO_PIN_INIT+3)^(0+128)
  3792  0559  0827               	movf	(??_GPIO_PIN_INIT+2)^(0+128),w
  3793  055A  1803               	skipnc
  3794  055B  3E01               	addlw	1
  3795  055C  00A9               	movwf	(??_GPIO_PIN_INIT+4)^(0+128)
  3796  055D  0828               	movf	(??_GPIO_PIN_INIT+3)^(0+128),w
  3797  055E  0084               	movwf	4
  3798  055F  1783               	bsf	3,7
  3799  0560  1C29               	btfss	(??_GPIO_PIN_INIT+4)^(0+128),0
  3800  0561  1383               	bcf	3,7
  3801  0562  3001               	movlw	1
  3802  0563  00AA               	movwf	(??_GPIO_PIN_INIT+5)^(0+128)
  3803  0564  0A23               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),w
  3804  0565  2D68               	goto	u4134
  3805  0566                     u4135:	
  3806  0566  1003               	clrc
  3807  0567  0DAA               	rlf	(??_GPIO_PIN_INIT+5)^(0+128),f
  3808  0568                     u4134:	
  3809  0568  3EFF               	addlw	-1
  3810  0569  1D03               	skipz
  3811  056A  2D66               	goto	u4135
  3812  056B  082A               	movf	(??_GPIO_PIN_INIT+5)^(0+128),w
  3813  056C  3AFF               	xorlw	255
  3814  056D  0500               	andwf	0,w
  3815  056E  0425               	iorwf	??_GPIO_PIN_INIT^(0+128),w
  3816  056F  00AB               	movwf	(??_GPIO_PIN_INIT+6)^(0+128)
  3817  0570  0831               	movf	GPIO_PIN_INIT@GPIO_PORTx^(0+128),w
  3818  0571  00AC               	movwf	(??_GPIO_PIN_INIT+7)^(0+128)
  3819  0572  01AD               	clrf	((??_GPIO_PIN_INIT+7)^(0+128)+1)
  3820  0573  3E80               	addlw	128
  3821  0574  00AE               	movwf	(??_GPIO_PIN_INIT+9)^(0+128)
  3822  0575  082D               	movf	(??_GPIO_PIN_INIT+8)^(0+128),w
  3823  0576  1803               	skipnc
  3824  0577  3E01               	addlw	1
  3825  0578  3E00               	addlw	0
  3826  0579  00AF               	movwf	(??_GPIO_PIN_INIT+10)^(0+128)
  3827  057A  082E               	movf	(??_GPIO_PIN_INIT+9)^(0+128),w
  3828  057B  0084               	movwf	4
  3829  057C  1783               	bsf	3,7
  3830  057D  1C2F               	btfss	(??_GPIO_PIN_INIT+10)^(0+128),0
  3831  057E  1383               	bcf	3,7
  3832  057F  082B               	movf	(??_GPIO_PIN_INIT+6)^(0+128),w
  3833  0580  0080               	movwf	0
  3834  0581  0008               	return
  3835  0582                     __end_of_GPIO_PIN_INIT:	
  3836  0582                     __ptext13:	
  3837 ;; *************** function _LCD_SND_COMMAND *****************
  3838 ;; Defined at:
  3839 ;;		line 171 in file "LCD.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;  command         1    wreg     unsigned char 
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;  command         1   11[BANK1 ] unsigned char 
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  1    wreg      void 
  3846 ;; Registers used:
  3847 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/100
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3853 ;;      Params:         0       0       0       0       0
  3854 ;;      Locals:         0       0       1       0       0
  3855 ;;      Temps:          0       0       0       0       0
  3856 ;;      Totals:         0       0       1       0       0
  3857 ;;Total ram usage:        1 bytes
  3858 ;; Hardware stack levels used:    1
  3859 ;; Hardware stack levels required when called:   11
  3860 ;; This function calls:
  3861 ;;		_GPIO_PIN_SET_STATE
  3862 ;;		_GPIO_PORT_SET_STATE
  3863 ;; This function is called by:
  3864 ;;		_LCD_INIT
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           
  3869                           ;psect for function _LCD_SND_COMMAND
  3870  0582                     _LCD_SND_COMMAND:	
  3871                           
  3872                           ;incstack = 0
  3873 ;; hardware stack exceeded
  3874                           ; Regs used in _LCD_SND_COMMAND: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3875                           ;LCD_SND_COMMAND@command stored from wreg
  3876  0582  1683               	bsf	3,5	;RP0=1, select bank1
  3877  0583  1303               	bcf	3,6	;RP1=0, select bank1
  3878  0584  00AB               	movwf	LCD_SND_COMMAND@command^(0+128)
  3879                           
  3880                           ;LCD.c: 171: static void LCD_SND_COMMAND ( tbyte command);LCD.c: 172: {;LCD.c: 174:  GPI
      +                          O_PORT_SET_STATE((0x0008) , (command &0xf0) );
  3881  0585  00A0               	movwf	GPIO_PORT_SET_STATE@GPIO_PORT_STATE^(0+128)
  3882  0586  30F0               	movlw	240
  3883  0587  05A0               	andwf	GPIO_PORT_SET_STATE@GPIO_PORT_STATE^(0+128),f
  3884  0588  3008               	movlw	8
  3885  0589  25E6  120A  118A   	fcall	_GPIO_PORT_SET_STATE
  3886                           
  3887                           ;LCD.c: 176:  GPIO_PIN_SET_STATE((0x0009) , 2 , GPIO_PIN_OFF);
  3888  058C  3002               	movlw	2
  3889  058D  00A0               	movwf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3890  058E  3009               	movlw	9
  3891  058F  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3892  0590  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3893  0593  3009               	movlw	9
  3894                           
  3895                           ;LCD.c: 178:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
  3896  0594  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3897  0595  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3898  0596  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3899  0597  0AA1               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),f
  3900  0598  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3901                           
  3902                           ;LCD.c: 179:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
  3903                           ;LCD.c: 181:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
  3904  059B  1683               	bsf	3,5	;RP0=1, select bank1
  3905  059C  1303               	bcf	3,6	;RP1=0, select bank1
  3906  059D  3009               	movlw	9
  3907  059E  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3908  059F  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3909  05A0  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3910  05A1  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3911                           
  3912                           ;LCD.c: 182:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
  3913                           ;LCD.c: 184:  GPIO_PORT_SET_STATE((0x0008) , (command <<4) );
  3914  05A4  1683               	bsf	3,5	;RP0=1, select bank1
  3915  05A5  1303               	bcf	3,6	;RP1=0, select bank1
  3916  05A6  0E2B               	swapf	LCD_SND_COMMAND@command^(0+128),w
  3917  05A7  39F0               	andlw	240
  3918  05A8  00A0               	movwf	GPIO_PORT_SET_STATE@GPIO_PORT_STATE^(0+128)
  3919  05A9  3008               	movlw	8
  3920  05AA  25E6  120A  118A   	fcall	_GPIO_PORT_SET_STATE
  3921  05AD  3009               	movlw	9
  3922                           
  3923                           ;LCD.c: 186:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
  3924  05AE  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3925  05AF  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3926  05B0  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3927  05B1  0AA1               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),f
  3928  05B2  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3929                           
  3930                           ;LCD.c: 187:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
  3931                           ;LCD.c: 189:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
  3932  05B5  1683               	bsf	3,5	;RP0=1, select bank1
  3933  05B6  1303               	bcf	3,6	;RP1=0, select bank1
  3934  05B7  3009               	movlw	9
  3935  05B8  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3936  05B9  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3937  05BA  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3938  05BB  2DBC               	ljmp	_GPIO_PIN_SET_STATE
  3939  05BC                     __end_of_LCD_SND_COMMAND:	
  3940                           ;LCD.c: 190:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
  3941                           
  3942  05BC                     __ptext16:	
  3943 ;; *************** function _GPIO_PIN_SET_STATE *****************
  3944 ;; Defined at:
  3945 ;;		line 31 in file "GPIO.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;  GPIO_PORTx      1    wreg     unsigned char 
  3948 ;;  GPIO_PIN_NO     1    0[BANK1 ] enum E875
  3949 ;;  GPIO_PIN_STA    1    1[BANK1 ] enum E891
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  GPIO_PORTx      1   10[BANK1 ] unsigned char 
  3952 ;;  ret             1    0        enum E865
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      enum E865
  3955 ;; Registers used:
  3956 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3957 ;; Tracked objects:
  3958 ;;		On entry : 100/900
  3959 ;;		On exit  : 300/100
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3962 ;;      Params:         0       0       2       0       0
  3963 ;;      Locals:         0       0       2       0       0
  3964 ;;      Temps:          0       0       7       0       0
  3965 ;;      Totals:         0       0      11       0       0
  3966 ;;Total ram usage:       11 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:   10
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_LEDs_INIT
  3973 ;;		_LCD_INIT
  3974 ;;		_LCD_SND_COMMAND
  3975 ;;		_KEYPAD_INIT
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           
  3980                           ;psect for function _GPIO_PIN_SET_STATE
  3981  05BC                     _GPIO_PIN_SET_STATE:	
  3982                           
  3983                           ;incstack = 0
  3984 ;; hardware stack exceeded
  3985                           ; Regs used in _GPIO_PIN_SET_STATE: [wreg-fsr0h+status,2+status,0]
  3986                           ;GPIO_PIN_SET_STATE@GPIO_PORTx stored from wreg
  3987  05BC  1303               	bcf	3,6	;RP1=0, select bank1
  3988  05BD  00AA               	movwf	GPIO_PIN_SET_STATE@GPIO_PORTx^(0+128)
  3989                           
  3990                           ;GPIO.c: 34:   ( (*((volatile unsigned char* )( GPIO_PORTx + (0x00) ))) = (((*((volatile
      +                           unsigned char* )( GPIO_PORTx + (0x00) ))) & (~(1<< GPIO_PIN_NO)) ) | (GPIO_PIN_STATE <<
      +                           GPIO_PIN_NO)) );
  3991  05BE  0821               	movf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),w
  3992  05BF  00A2               	movwf	??_GPIO_PIN_SET_STATE^(0+128)
  3993  05C0  0A20               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),w
  3994  05C1  2DC4               	goto	u4144
  3995  05C2                     u4145:	
  3996  05C2  1003               	clrc
  3997  05C3  0DA2               	rlf	??_GPIO_PIN_SET_STATE^(0+128),f
  3998  05C4                     u4144:	
  3999  05C4  3EFF               	addlw	-1
  4000  05C5  1D03               	skipz
  4001  05C6  2DC2               	goto	u4145
  4002  05C7  082A               	movf	GPIO_PIN_SET_STATE@GPIO_PORTx^(0+128),w
  4003  05C8  00A3               	movwf	(??_GPIO_PIN_SET_STATE+1)^(0+128)
  4004  05C9  01A4               	clrf	((??_GPIO_PIN_SET_STATE+1)^(0+128)+1)
  4005  05CA  0084               	movwf	4
  4006  05CB  1783               	bsf	3,7
  4007  05CC  1C24               	btfss	(??_GPIO_PIN_SET_STATE+2)^(0+128),0
  4008  05CD  1383               	bcf	3,7
  4009  05CE  3001               	movlw	1
  4010  05CF  00A5               	movwf	(??_GPIO_PIN_SET_STATE+3)^(0+128)
  4011  05D0  0A20               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),w
  4012  05D1  2DD4               	goto	u4154
  4013  05D2                     u4155:	
  4014  05D2  1003               	clrc
  4015  05D3  0DA5               	rlf	(??_GPIO_PIN_SET_STATE+3)^(0+128),f
  4016  05D4                     u4154:	
  4017  05D4  3EFF               	addlw	-1
  4018  05D5  1D03               	skipz
  4019  05D6  2DD2               	goto	u4155
  4020  05D7  0825               	movf	(??_GPIO_PIN_SET_STATE+3)^(0+128),w
  4021  05D8  3AFF               	xorlw	255
  4022  05D9  0500               	andwf	0,w
  4023  05DA  0422               	iorwf	??_GPIO_PIN_SET_STATE^(0+128),w
  4024  05DB  00A6               	movwf	(??_GPIO_PIN_SET_STATE+4)^(0+128)
  4025  05DC  082A               	movf	GPIO_PIN_SET_STATE@GPIO_PORTx^(0+128),w
  4026  05DD  00A7               	movwf	(??_GPIO_PIN_SET_STATE+5)^(0+128)
  4027  05DE  01A8               	clrf	((??_GPIO_PIN_SET_STATE+5)^(0+128)+1)
  4028  05DF  0084               	movwf	4
  4029  05E0  1783               	bsf	3,7
  4030  05E1  1C28               	btfss	(??_GPIO_PIN_SET_STATE+6)^(0+128),0
  4031  05E2  1383               	bcf	3,7
  4032  05E3  0826               	movf	(??_GPIO_PIN_SET_STATE+4)^(0+128),w
  4033  05E4  0080               	movwf	0
  4034  05E5  0008               	return
  4035  05E6                     __end_of_GPIO_PIN_SET_STATE:	
  4036  05E6                     __ptext14:	
  4037 ;; *************** function _GPIO_PORT_SET_STATE *****************
  4038 ;; Defined at:
  4039 ;;		line 38 in file "GPIO.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;  GPIO_PORTx      1    wreg     unsigned char 
  4042 ;;  GPIO_PORT_ST    1    0[BANK1 ] enum E891
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  GPIO_PORTx      1    4[BANK1 ] unsigned char 
  4045 ;;  ret             1    0        enum E865
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      enum E865
  4048 ;; Registers used:
  4049 ;;		wreg, fsr0l, fsr0h, status,2
  4050 ;; Tracked objects:
  4051 ;;		On entry : 300/100
  4052 ;;		On exit  : 300/100
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4055 ;;      Params:         0       0       1       0       0
  4056 ;;      Locals:         0       0       2       0       0
  4057 ;;      Temps:          0       0       2       0       0
  4058 ;;      Totals:         0       0       5       0       0
  4059 ;;Total ram usage:        5 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:   10
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_LCD_SND_COMMAND
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           
  4070                           ;psect for function _GPIO_PORT_SET_STATE
  4071  05E6                     _GPIO_PORT_SET_STATE:	
  4072                           
  4073                           ;incstack = 0
  4074 ;; hardware stack exceeded
  4075                           ; Regs used in _GPIO_PORT_SET_STATE: [wreg-fsr0h+status,2]
  4076                           ;GPIO_PORT_SET_STATE@GPIO_PORTx stored from wreg
  4077  05E6  00A4               	movwf	GPIO_PORT_SET_STATE@GPIO_PORTx^(0+128)
  4078                           
  4079                           ;GPIO.c: 41:   (*((volatile unsigned char* )( GPIO_PORTx + (0x00) ))) = GPIO_PORT_STATE 
      +                          ;
  4080  05E7  00A1               	movwf	??_GPIO_PORT_SET_STATE^(0+128)
  4081  05E8  01A2               	clrf	(??_GPIO_PORT_SET_STATE^(0+128)+1)
  4082  05E9  0084               	movwf	4
  4083  05EA  1783               	bsf	3,7
  4084  05EB  1C22               	btfss	(??_GPIO_PORT_SET_STATE+1)^(0+128),0
  4085  05EC  1383               	bcf	3,7
  4086  05ED  0820               	movf	GPIO_PORT_SET_STATE@GPIO_PORT_STATE^(0+128),w
  4087  05EE  0080               	movwf	0
  4088  05EF  0008               	return
  4089  05F0                     __end_of_GPIO_PORT_SET_STATE:	
  4090                           
  4091                           	psect	text10
  4092  1020                     __ptext10:	
  4093 ;; *************** function _CCP1_INIT *****************
  4094 ;; Defined at:
  4095 ;;		line 24 in file "CCP.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;		None
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;		None
  4100 ;; Return value:  Size  Location     Type
  4101 ;;                  1    wreg      void 
  4102 ;; Registers used:
  4103 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4104 ;; Tracked objects:
  4105 ;;		On entry : B00/300
  4106 ;;		On exit  : 300/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4109 ;;      Params:         0       0       0       0       0
  4110 ;;      Locals:         0       0       0       0       0
  4111 ;;      Temps:          0       0       0       0       0
  4112 ;;      Totals:         0       0       0       0       0
  4113 ;;Total ram usage:        0 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:   12
  4116 ;; This function calls:
  4117 ;;		_GPIO_PIN_INIT
  4118 ;;		_TIMER2_INIT
  4119 ;;		_TIMER2_START
  4120 ;; This function is called by:
  4121 ;;		_MOTOR_INIT
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           
  4126                           ;psect for function _CCP1_INIT
  4127  1020                     _CCP1_INIT:	
  4128                           
  4129                           ;CCP.c: 39:  {;CCP.c: 40:   TIMER2_INIT();
  4130                           
  4131                           ;incstack = 0
  4132 ;; hardware stack exceeded
  4133                           ; Regs used in _CCP1_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4134  1020  27E4  160A  118A   	fcall	_TIMER2_INIT
  4135                           
  4136                           ;CCP.c: 41:         TIMER2_START();
  4137  1023  27F2               	fcall	_TIMER2_START
  4138                           
  4139                           ;CCP.c: 42:   GPIO_PIN_INIT( (0x0007), GPIO_PIN_2, GPIO_PIN_OUT );
  4140  1024  3002               	movlw	2
  4141  1025  1683               	bsf	3,5	;RP0=1, select bank1
  4142  1026  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  4143  1027  3007               	movlw	7
  4144  1028  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  4145  1029  120A  118A  2549   	fcall	_GPIO_PIN_INIT
  4146                           
  4147                           ;CCP.c: 43:  };CCP.c: 55:  (CCP1CONbits.CCP1M = 12 ) ;
  4148  102C  1283               	bcf	3,5	;RP0=0, select bank0
  4149  102D  0817               	movf	23,w	;volatile
  4150  102E  39F0               	andlw	-16
  4151  102F  380C               	iorlw	12
  4152  1030  0097               	movwf	23	;volatile
  4153  1031  0008               	return
  4154  1032                     __end_of_CCP1_INIT:	
  4155  1032                     __ptext7:	
  4156 ;; *************** function _MOTOR_INIT *****************
  4157 ;; Defined at:
  4158 ;;		line 26 in file "MOTOR.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;		None
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;		None
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  1    wreg      void 
  4165 ;; Registers used:
  4166 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4167 ;; Tracked objects:
  4168 ;;		On entry : B00/300
  4169 ;;		On exit  : 300/300
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4172 ;;      Params:         0       0       0       0       0
  4173 ;;      Locals:         0       0       0       0       0
  4174 ;;      Temps:          0       0       0       0       0
  4175 ;;      Totals:         0       0       0       0       0
  4176 ;;Total ram usage:        0 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:   13
  4179 ;; This function calls:
  4180 ;;		_CCP1_INIT
  4181 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  4182 ;;		_CCP_PWM_PERIOD_LOAD
  4183 ;;		_MOTOR_SET_STATE
  4184 ;; This function is called by:
  4185 ;;		_main
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function _MOTOR_INIT
  4191  1032                     _MOTOR_INIT:	
  4192                           
  4193                           ;MOTOR.c: 29:     CCP1_INIT ( );
  4194                           
  4195                           ;incstack = 0
  4196 ;; hardware stack exceeded
  4197                           ; Regs used in _MOTOR_INIT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4198  1032  2020  160A  118A   	fcall	_CCP1_INIT
  4199                           
  4200                           ;MOTOR.c: 31:     CCP_PWM_PERIOD_LOAD( 10 );
  4201  1035  300A               	movlw	10
  4202  1036  1683               	bsf	3,5	;RP0=1, select bank3
  4203  1037  1703               	bsf	3,6	;RP1=1, select bank3
  4204  1038  00E0               	movwf	CCP_PWM_PERIOD_LOAD@PERIOD^(0+384)
  4205  1039  01E1               	clrf	(CCP_PWM_PERIOD_LOAD@PERIOD+1)^(0+384)
  4206  103A  205C  160A  118A   	fcall	_CCP_PWM_PERIOD_LOAD
  4207                           
  4208                           ;MOTOR.c: 33:     CCP1_PWM_DUTY_CYCLE_LOAD(0);
  4209  103D  1703               	bsf	3,6	;RP1=1, select bank3
  4210  103E  01E0               	clrf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384)
  4211  103F  01E1               	clrf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384)
  4212  1040  227B  160A  118A   	fcall	_CCP1_PWM_DUTY_CYCLE_LOAD
  4213                           
  4214                           ;MOTOR.c: 35:     MOTOR_SET_STATE(0);
  4215  1043  3000               	movlw	0
  4216  1044  27FB               	fcall	_MOTOR_SET_STATE
  4217                           
  4218                           ;MOTOR.c: 37:     current_angle = 0 ;
  4219  1045  01AF               	clrf	_current_angle^(0+384)
  4220  1046  0008               	return
  4221  1047                     __end_of_MOTOR_INIT:	
  4222  1047                     __ptext17:	
  4223 ;; *************** function _HEATER_INIT *****************
  4224 ;; Defined at:
  4225 ;;		line 26 in file "HEATER.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;		None
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 300/300
  4236 ;;		On exit  : 300/300
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4239 ;;      Params:         0       0       0       0       0
  4240 ;;      Locals:         0       0       0       0       0
  4241 ;;      Temps:          0       0       0       0       0
  4242 ;;      Totals:         0       0       0       0       0
  4243 ;;Total ram usage:        0 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:   13
  4246 ;; This function calls:
  4247 ;;		_CCP2_INIT
  4248 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  4249 ;;		_CCP_PWM_PERIOD_LOAD
  4250 ;;		_HEATER_SET_STATE
  4251 ;; This function is called by:
  4252 ;;		_main
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           
  4257                           ;psect for function _HEATER_INIT
  4258  1047                     _HEATER_INIT:	
  4259                           
  4260                           ;HEATER.c: 29:     CCP2_INIT ( );
  4261                           
  4262                           ;incstack = 0
  4263 ;; hardware stack exceeded
  4264                           ; Regs used in _HEATER_INIT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4265  1047  27D2  160A  118A   	fcall	_CCP2_INIT
  4266                           
  4267                           ;HEATER.c: 31:     CCP_PWM_PERIOD_LOAD( 10 );
  4268  104A  300A               	movlw	10
  4269  104B  1683               	bsf	3,5	;RP0=1, select bank3
  4270  104C  1703               	bsf	3,6	;RP1=1, select bank3
  4271  104D  00E0               	movwf	CCP_PWM_PERIOD_LOAD@PERIOD^(0+384)
  4272  104E  01E1               	clrf	(CCP_PWM_PERIOD_LOAD@PERIOD+1)^(0+384)
  4273  104F  205C  160A  118A   	fcall	_CCP_PWM_PERIOD_LOAD
  4274                           
  4275                           ;HEATER.c: 33:     CCP2_PWM_DUTY_CYCLE_LOAD(0);
  4276  1052  1703               	bsf	3,6	;RP1=1, select bank3
  4277  1053  01E0               	clrf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384)
  4278  1054  01E1               	clrf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384)
  4279  1055  2306  160A  118A   	fcall	_CCP2_PWM_DUTY_CYCLE_LOAD
  4280                           
  4281                           ;HEATER.c: 35:     HEATER_SET_STATE(0);
  4282  1058  3000               	movlw	0
  4283  1059  27F6               	fcall	_HEATER_SET_STATE
  4284                           
  4285                           ;HEATER.c: 37:     current_angle = 0 ;
  4286  105A  01AD               	clrf	HEATER@current_angle^(0+384)
  4287  105B  0008               	return
  4288  105C                     __end_of_HEATER_INIT:	
  4289  105C                     __ptext19:	
  4290 ;; *************** function _CCP_PWM_PERIOD_LOAD *****************
  4291 ;; Defined at:
  4292 ;;		line 186 in file "CCP.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;  PERIOD          2   14[BANK3 ] unsigned int 
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;  LOAD_VALUE      2   17[BANK3 ] unsigned int 
  4297 ;;  ret             1    0        enum E865
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      enum E865
  4300 ;; Registers used:
  4301 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4302 ;; Tracked objects:
  4303 ;;		On entry : 300/300
  4304 ;;		On exit  : 300/100
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4307 ;;      Params:         0       0       0       2       0
  4308 ;;      Locals:         0       0       0       3       0
  4309 ;;      Temps:          0       0       0       0       0
  4310 ;;      Totals:         0       0       0       5       0
  4311 ;;Total ram usage:        5 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; Hardware stack levels required when called:   12
  4314 ;; This function calls:
  4315 ;;		___fladd
  4316 ;;		___flmul
  4317 ;;		___fltol
  4318 ;;		___xxtofl
  4319 ;; This function is called by:
  4320 ;;		_MOTOR_INIT
  4321 ;;		_HEATER_INIT
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           
  4326                           ;psect for function _CCP_PWM_PERIOD_LOAD
  4327  105C                     _CCP_PWM_PERIOD_LOAD:	
  4328                           
  4329                           ;CCP.c: 190:     tPWM_CYCLE LOAD_VALUE = ((PERIOD * ((double) (8 * 1000) / ( 4 * 256 ) )
      +                          )-1);
  4330                           
  4331                           ;incstack = 0
  4332 ;; hardware stack exceeded
  4333                           ; Regs used in _CCP_PWM_PERIOD_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4334  105C  0860               	movf	CCP_PWM_PERIOD_LOAD@PERIOD^(0+384),w
  4335  105D  1303               	bcf	3,6	;RP1=0, select bank1
  4336  105E  00A0               	movwf	___xxtofl@val^(0+128)
  4337  105F  1703               	bsf	3,6	;RP1=1, select bank3
  4338  1060  0861               	movf	(CCP_PWM_PERIOD_LOAD@PERIOD+1)^(0+384),w
  4339  1061  1303               	bcf	3,6	;RP1=0, select bank1
  4340  1062  00A1               	movwf	(___xxtofl@val^(0+128)+1)
  4341  1063  3000               	movlw	0
  4342  1064  01A2               	clrf	(___xxtofl@val^(0+128)+2)
  4343  1065  01A3               	clrf	(___xxtofl@val^(0+128)+3)
  4344  1066  25F0  160A  118A   	fcall	___xxtofl
  4345  1069  0823               	movf	(?___xxtofl+3)^(0+128),w
  4346  106A  00CE               	movwf	(___flmul@a+3)^(0+128)
  4347  106B  0822               	movf	(?___xxtofl+2)^(0+128),w
  4348  106C  00CD               	movwf	(___flmul@a+2)^(0+128)
  4349  106D  0821               	movf	(?___xxtofl+1)^(0+128),w
  4350  106E  00CC               	movwf	(___flmul@a+1)^(0+128)
  4351  106F  0820               	movf	?___xxtofl^(0+128),w
  4352  1070  00CB               	movwf	___flmul@a^(0+128)
  4353  1071  3040               	movlw	64
  4354  1072  00CA               	movwf	(___flmul@b+3)^(0+128)
  4355  1073  30FA               	movlw	250
  4356  1074  00C9               	movwf	(___flmul@b+2)^(0+128)
  4357  1075  01C8               	clrf	(___flmul@b+1)^(0+128)
  4358  1076  01C7               	clrf	___flmul@b^(0+128)
  4359  1077  2391  160A  118A   	fcall	___flmul
  4360  107A  084A               	movf	(?___flmul+3)^(0+128),w
  4361  107B  00E7               	movwf	(___fladd@a+3)^(0+128)
  4362  107C  0849               	movf	(?___flmul+2)^(0+128),w
  4363  107D  00E6               	movwf	(___fladd@a+2)^(0+128)
  4364  107E  0848               	movf	(?___flmul+1)^(0+128),w
  4365  107F  00E5               	movwf	(___fladd@a+1)^(0+128)
  4366  1080  0847               	movf	?___flmul^(0+128),w
  4367  1081  00E4               	movwf	___fladd@a^(0+128)
  4368  1082  30BF               	movlw	191
  4369  1083  00E3               	movwf	(___fladd@b+3)^(0+128)
  4370  1084  3080               	movlw	128
  4371  1085  00E2               	movwf	(___fladd@b+2)^(0+128)
  4372  1086  01E1               	clrf	(___fladd@b+1)^(0+128)
  4373  1087  01E0               	clrf	___fladd@b^(0+128)
  4374  1088  20A3  160A  118A   	fcall	___fladd
  4375  108B  1303               	bcf	3,6	;RP1=0, select bank1
  4376  108C  0863               	movf	(?___fladd+3)^(0+128),w
  4377  108D  1703               	bsf	3,6	;RP1=1, select bank3
  4378  108E  00D9               	movwf	(___fltol@f1+3)^(0+384)
  4379  108F  1303               	bcf	3,6	;RP1=0, select bank1
  4380  1090  0862               	movf	(?___fladd+2)^(0+128),w
  4381  1091  1703               	bsf	3,6	;RP1=1, select bank3
  4382  1092  00D8               	movwf	(___fltol@f1+2)^(0+384)
  4383  1093  1303               	bcf	3,6	;RP1=0, select bank1
  4384  1094  0861               	movf	(?___fladd+1)^(0+128),w
  4385  1095  1703               	bsf	3,6	;RP1=1, select bank3
  4386  1096  00D7               	movwf	(___fltol@f1+1)^(0+384)
  4387  1097  1303               	bcf	3,6	;RP1=0, select bank1
  4388  1098  0860               	movf	?___fladd^(0+128),w
  4389  1099  1703               	bsf	3,6	;RP1=1, select bank3
  4390  109A  00D6               	movwf	___fltol@f1^(0+384)
  4391  109B  2783               	fcall	___fltol
  4392  109C  0857               	movf	(?___fltol+1)^(0+384),w
  4393  109D  00E4               	movwf	(CCP_PWM_PERIOD_LOAD@LOAD_VALUE+1)^(0+384)
  4394  109E  0856               	movf	?___fltol^(0+384),w
  4395  109F  00E3               	movwf	CCP_PWM_PERIOD_LOAD@LOAD_VALUE^(0+384)
  4396                           
  4397                           ;CCP.c: 192:     (PR2 = LOAD_VALUE);
  4398  10A0  1303               	bcf	3,6	;RP1=0, select bank1
  4399  10A1  0092               	movwf	18	;volatile
  4400  10A2  0008               	return
  4401  10A3                     __end_of_CCP_PWM_PERIOD_LOAD:	
  4402  10A3                     __ptext20:	
  4403 ;; *************** function ___fladd *****************
  4404 ;; Defined at:
  4405 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;  b               4   64[BANK1 ] enum E865
  4408 ;;  a               4   68[BANK1 ] enum E865
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;  grs             1    3[BANK3 ] unsigned char 
  4411 ;;  bexp            1    2[BANK3 ] unsigned char 
  4412 ;;  aexp            1    1[BANK3 ] unsigned char 
  4413 ;;  signs           1    0[BANK3 ] unsigned char 
  4414 ;; Return value:  Size  Location     Type
  4415 ;;                  4   64[BANK1 ] unsigned char 
  4416 ;; Registers used:
  4417 ;;		wreg, status,2, status,0, btemp+1
  4418 ;; Tracked objects:
  4419 ;;		On entry : 300/100
  4420 ;;		On exit  : 100/100
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4423 ;;      Params:         0       0       8       0       0
  4424 ;;      Locals:         0       0       0       4       0
  4425 ;;      Temps:          0       0       8       0       0
  4426 ;;      Totals:         0       0      16       4       0
  4427 ;;Total ram usage:       20 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; Hardware stack levels required when called:   10
  4430 ;; This function calls:
  4431 ;;		Nothing
  4432 ;; This function is called by:
  4433 ;;		_CCP_PWM_PERIOD_LOAD
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           
  4438                           ;psect for function ___fladd
  4439  10A3                     ___fladd:	
  4440                           
  4441                           ;incstack = 0
  4442 ;; hardware stack exceeded
  4443                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
  4444  10A3  0863               	movf	(___fladd@b^(0+128)+3),w
  4445  10A4  1703               	bsf	3,6	;RP1=1, select bank3
  4446  10A5  00D2               	movwf	___fladd@signs^(0+384)
  4447  10A6  3080               	movlw	128
  4448  10A7  05D2               	andwf	___fladd@signs^(0+384),f
  4449  10A8  1303               	bcf	3,6	;RP1=0, select bank1
  4450  10A9  1003               	clrc
  4451  10AA  0D63               	rlf	(___fladd@b^(0+128)+3),w
  4452  10AB  1703               	bsf	3,6	;RP1=1, select bank3
  4453  10AC  00D4               	movwf	___fladd@bexp^(0+384)
  4454  10AD  1303               	bcf	3,6	;RP1=0, select bank1
  4455  10AE  1FE2               	btfss	(___fladd@b^(0+128)+2),7
  4456  10AF  28B2               	goto	l5172
  4457  10B0  1703               	bsf	3,6	;RP1=1, select bank3
  4458  10B1  1454               	bsf	___fladd@bexp^(0+384),0
  4459  10B2                     l5172:	
  4460  10B2  1703               	bsf	3,6	;RP1=1, select bank3
  4461  10B3  0854               	movf	___fladd@bexp^(0+384),w
  4462  10B4  1903               	btfsc	3,2
  4463  10B5  28C1               	goto	l1485
  4464  10B6  0F54               	incfsz	___fladd@bexp^(0+384),w
  4465  10B7  28BD               	goto	l1486
  4466  10B8  1303               	bcf	3,6	;RP1=0, select bank1
  4467  10B9  01E0               	clrf	___fladd@b^(0+128)
  4468  10BA  01E1               	clrf	(___fladd@b+1)^(0+128)
  4469  10BB  01E2               	clrf	(___fladd@b+2)^(0+128)
  4470  10BC  01E3               	clrf	(___fladd@b+3)^(0+128)
  4471  10BD                     l1486:	
  4472  10BD  1303               	bcf	3,6	;RP1=0, select bank1
  4473  10BE  17E2               	bsf	(___fladd@b^(0+128)+2),7
  4474  10BF  01E3               	clrf	(___fladd@b^(0+128)+3)
  4475  10C0  28C6               	goto	l5180
  4476  10C1                     l1485:	
  4477  10C1  1303               	bcf	3,6	;RP1=0, select bank1
  4478  10C2  01E0               	clrf	___fladd@b^(0+128)
  4479  10C3  01E1               	clrf	(___fladd@b+1)^(0+128)
  4480  10C4  01E2               	clrf	(___fladd@b+2)^(0+128)
  4481  10C5  01E3               	clrf	(___fladd@b+3)^(0+128)
  4482  10C6                     l5180:	
  4483  10C6  0867               	movf	(___fladd@a^(0+128)+3),w
  4484  10C7  1703               	bsf	3,6	;RP1=1, select bank3
  4485  10C8  00D3               	movwf	___fladd@aexp^(0+384)
  4486  10C9  3080               	movlw	128
  4487  10CA  05D3               	andwf	___fladd@aexp^(0+384),f
  4488  10CB  0853               	movf	___fladd@aexp^(0+384),w
  4489  10CC  0652               	xorwf	___fladd@signs^(0+384),w
  4490  10CD  1D03               	btfss	3,2
  4491  10CE  1752               	bsf	___fladd@signs^(0+384),6
  4492  10CF  1303               	bcf	3,6	;RP1=0, select bank1
  4493  10D0  1003               	clrc
  4494  10D1  0D67               	rlf	(___fladd@a^(0+128)+3),w
  4495  10D2  1703               	bsf	3,6	;RP1=1, select bank3
  4496  10D3  00D3               	movwf	___fladd@aexp^(0+384)
  4497  10D4  1303               	bcf	3,6	;RP1=0, select bank1
  4498  10D5  1FE6               	btfss	(___fladd@a^(0+128)+2),7
  4499  10D6  28D9               	goto	l5194
  4500  10D7  1703               	bsf	3,6	;RP1=1, select bank3
  4501  10D8  1453               	bsf	___fladd@aexp^(0+384),0
  4502  10D9                     l5194:	
  4503  10D9  1703               	bsf	3,6	;RP1=1, select bank3
  4504  10DA  0853               	movf	___fladd@aexp^(0+384),w
  4505  10DB  1903               	btfsc	3,2
  4506  10DC  28E8               	goto	l1490
  4507  10DD  0F53               	incfsz	___fladd@aexp^(0+384),w
  4508  10DE  28E4               	goto	l1491
  4509  10DF  1303               	bcf	3,6	;RP1=0, select bank1
  4510  10E0  01E4               	clrf	___fladd@a^(0+128)
  4511  10E1  01E5               	clrf	(___fladd@a+1)^(0+128)
  4512  10E2  01E6               	clrf	(___fladd@a+2)^(0+128)
  4513  10E3  01E7               	clrf	(___fladd@a+3)^(0+128)
  4514  10E4                     l1491:	
  4515  10E4  1303               	bcf	3,6	;RP1=0, select bank1
  4516  10E5  17E6               	bsf	(___fladd@a^(0+128)+2),7
  4517  10E6  01E7               	clrf	(___fladd@a^(0+128)+3)
  4518  10E7  28ED               	goto	l5202
  4519  10E8                     l1490:	
  4520  10E8  1303               	bcf	3,6	;RP1=0, select bank1
  4521  10E9  01E4               	clrf	___fladd@a^(0+128)
  4522  10EA  01E5               	clrf	(___fladd@a+1)^(0+128)
  4523  10EB  01E6               	clrf	(___fladd@a+2)^(0+128)
  4524  10EC  01E7               	clrf	(___fladd@a+3)^(0+128)
  4525  10ED                     l5202:	
  4526  10ED  1703               	bsf	3,6	;RP1=1, select bank3
  4527  10EE  0854               	movf	___fladd@bexp^(0+384),w
  4528  10EF  0253               	subwf	___fladd@aexp^(0+384),w
  4529  10F0  1803               	skipnc
  4530  10F1  2925               	goto	l5238
  4531  10F2  1F52               	btfss	___fladd@signs^(0+384),6
  4532  10F3  28F6               	goto	l5208
  4533  10F4  3080               	movlw	128
  4534  10F5  06D2               	xorwf	___fladd@signs^(0+384),f
  4535  10F6                     l5208:	
  4536  10F6  0854               	movf	___fladd@bexp^(0+384),w
  4537  10F7  00D5               	movwf	___fladd@grs^(0+384)
  4538  10F8  0853               	movf	___fladd@aexp^(0+384),w
  4539  10F9  00D4               	movwf	___fladd@bexp^(0+384)
  4540  10FA  0855               	movf	___fladd@grs^(0+384),w
  4541  10FB  00D3               	movwf	___fladd@aexp^(0+384)
  4542  10FC  1303               	bcf	3,6	;RP1=0, select bank1
  4543  10FD  0860               	movf	___fladd@b^(0+128),w
  4544  10FE  1703               	bsf	3,6	;RP1=1, select bank3
  4545  10FF  00D5               	movwf	___fladd@grs^(0+384)
  4546  1100  1303               	bcf	3,6	;RP1=0, select bank1
  4547  1101  0864               	movf	___fladd@a^(0+128),w
  4548  1102  00E0               	movwf	___fladd@b^(0+128)
  4549  1103  1703               	bsf	3,6	;RP1=1, select bank3
  4550  1104  0855               	movf	___fladd@grs^(0+384),w
  4551  1105  1303               	bcf	3,6	;RP1=0, select bank1
  4552  1106  00E4               	movwf	___fladd@a^(0+128)
  4553  1107  0861               	movf	(___fladd@b^(0+128)+1),w
  4554  1108  1703               	bsf	3,6	;RP1=1, select bank3
  4555  1109  00D5               	movwf	___fladd@grs^(0+384)
  4556  110A  1303               	bcf	3,6	;RP1=0, select bank1
  4557  110B  0865               	movf	(___fladd@a^(0+128)+1),w
  4558  110C  00E1               	movwf	(___fladd@b^(0+128)+1)
  4559  110D  1703               	bsf	3,6	;RP1=1, select bank3
  4560  110E  0855               	movf	___fladd@grs^(0+384),w
  4561  110F  1303               	bcf	3,6	;RP1=0, select bank1
  4562  1110  00E5               	movwf	(___fladd@a^(0+128)+1)
  4563  1111  0862               	movf	(___fladd@b^(0+128)+2),w
  4564  1112  1703               	bsf	3,6	;RP1=1, select bank3
  4565  1113  00D5               	movwf	___fladd@grs^(0+384)
  4566  1114  1303               	bcf	3,6	;RP1=0, select bank1
  4567  1115  0866               	movf	(___fladd@a^(0+128)+2),w
  4568  1116  00E2               	movwf	(___fladd@b^(0+128)+2)
  4569  1117  1703               	bsf	3,6	;RP1=1, select bank3
  4570  1118  0855               	movf	___fladd@grs^(0+384),w
  4571  1119  1303               	bcf	3,6	;RP1=0, select bank1
  4572  111A  00E6               	movwf	(___fladd@a^(0+128)+2)
  4573  111B  0863               	movf	(___fladd@b^(0+128)+3),w
  4574  111C  1703               	bsf	3,6	;RP1=1, select bank3
  4575  111D  00D5               	movwf	___fladd@grs^(0+384)
  4576  111E  1303               	bcf	3,6	;RP1=0, select bank1
  4577  111F  0867               	movf	(___fladd@a^(0+128)+3),w
  4578  1120  00E3               	movwf	(___fladd@b^(0+128)+3)
  4579  1121  1703               	bsf	3,6	;RP1=1, select bank3
  4580  1122  0855               	movf	___fladd@grs^(0+384),w
  4581  1123  1303               	bcf	3,6	;RP1=0, select bank1
  4582  1124  00E7               	movwf	(___fladd@a^(0+128)+3)
  4583  1125                     l5238:	
  4584  1125  1703               	bsf	3,6	;RP1=1, select bank3
  4585  1126  01D5               	clrf	___fladd@grs^(0+384)
  4586  1127  0853               	movf	___fladd@aexp^(0+384),w
  4587  1128  1303               	bcf	3,6	;RP1=0, select bank1
  4588  1129  00E8               	movwf	??___fladd^(0+128)
  4589  112A  01E9               	clrf	(??___fladd^(0+128)+1)
  4590  112B  0869               	movf	(??___fladd+1)^(0+128),w
  4591  112C  00EB               	movwf	((??___fladd+2)^(0+128)+1)
  4592  112D  1703               	bsf	3,6	;RP1=1, select bank3
  4593  112E  0854               	movf	___fladd@bexp^(0+384),w
  4594  112F  1303               	bcf	3,6	;RP1=0, select bank1
  4595  1130  0268               	subwf	??___fladd^(0+128),w
  4596  1131  00EA               	movwf	(??___fladd+2)^(0+128)
  4597  1132  1C03               	skipc
  4598  1133  03EB               	decf	((??___fladd+2)^(0+128)+1),f
  4599  1134  086B               	movf	(??___fladd+3)^(0+128),w
  4600  1135  3A80               	xorlw	128
  4601  1136  00FF               	movwf	127
  4602  1137  3080               	movlw	128
  4603  1138  027F               	subwf	127,w
  4604  1139  1D03               	skipz
  4605  113A  293D               	goto	u4555
  4606  113B  301A               	movlw	26
  4607  113C  026A               	subwf	(??___fladd+2)^(0+128),w
  4608  113D                     u4555:	
  4609  113D  1C03               	skipc
  4610  113E  296B               	goto	l5254
  4611  113F  1683               	bsf	3,5	;RP0=1, select bank1
  4612  1140  1303               	bcf	3,6	;RP1=0, select bank1
  4613  1141  0863               	movf	(___fladd@b+3)^(0+128),w
  4614  1142  0462               	iorwf	(___fladd@b+2)^(0+128),w
  4615  1143  0461               	iorwf	(___fladd@b+1)^(0+128),w
  4616  1144  0460               	iorwf	___fladd@b^(0+128),w
  4617  1145  1903               	btfsc	3,2
  4618  1146  2949               	goto	u4560
  4619  1147  3001               	movlw	1
  4620  1148  294A               	goto	u4570
  4621  1149                     u4560:	
  4622  1149  3000               	movlw	0
  4623  114A                     u4570:	
  4624  114A  1703               	bsf	3,6	;RP1=1, select bank3
  4625  114B  00D5               	movwf	___fladd@grs^(0+384)
  4626  114C  1303               	bcf	3,6	;RP1=0, select bank1
  4627  114D  01E0               	clrf	___fladd@b^(0+128)
  4628  114E  01E1               	clrf	(___fladd@b+1)^(0+128)
  4629  114F  01E2               	clrf	(___fladd@b+2)^(0+128)
  4630  1150  01E3               	clrf	(___fladd@b+3)^(0+128)
  4631  1151  1703               	bsf	3,6	;RP1=1, select bank3
  4632  1152  0853               	movf	___fladd@aexp^(0+384),w
  4633  1153  00D4               	movwf	___fladd@bexp^(0+384)
  4634  1154  2971               	goto	l1496
  4635  1155                     l1498:	
  4636  1155  1C55               	btfss	___fladd@grs^(0+384),0
  4637  1156  295C               	goto	l1499
  4638  1157  1003               	clrc
  4639  1158  0C55               	rrf	___fladd@grs^(0+384),w
  4640  1159  3801               	iorlw	1
  4641  115A  00D5               	movwf	___fladd@grs^(0+384)
  4642  115B  295E               	goto	l1500
  4643  115C                     l1499:	
  4644  115C  1003               	clrc
  4645  115D  0CD5               	rrf	___fladd@grs^(0+384),f
  4646  115E                     l1500:	
  4647  115E  1303               	bcf	3,6	;RP1=0, select bank1
  4648  115F  1C60               	btfss	___fladd@b^(0+128),0
  4649  1160  2963               	goto	l5250
  4650  1161  1703               	bsf	3,6	;RP1=1, select bank3
  4651  1162  17D5               	bsf	___fladd@grs^(0+384),7
  4652  1163                     l5250:	
  4653  1163  1303               	bcf	3,6	;RP1=0, select bank1
  4654  1164  0D63               	rlf	(___fladd@b+3)^(0+128),w
  4655  1165  0CE3               	rrf	(___fladd@b+3)^(0+128),f
  4656  1166  0CE2               	rrf	(___fladd@b+2)^(0+128),f
  4657  1167  0CE1               	rrf	(___fladd@b+1)^(0+128),f
  4658  1168  0CE0               	rrf	___fladd@b^(0+128),f
  4659  1169  1703               	bsf	3,6	;RP1=1, select bank3
  4660  116A  0AD4               	incf	___fladd@bexp^(0+384),f
  4661  116B                     l5254:	
  4662  116B  1683               	bsf	3,5	;RP0=1, select bank3
  4663  116C  1703               	bsf	3,6	;RP1=1, select bank3
  4664  116D  0853               	movf	___fladd@aexp^(0+384),w
  4665  116E  0254               	subwf	___fladd@bexp^(0+384),w
  4666  116F  1C03               	skipc
  4667  1170  2955               	goto	l1498
  4668  1171                     l1496:	
  4669  1171  1B52               	btfsc	___fladd@signs^(0+384),6
  4670  1172  29AB               	goto	l5274
  4671  1173  0854               	movf	___fladd@bexp^(0+384),w
  4672  1174  1D03               	btfss	3,2
  4673  1175  297C               	goto	l5260
  4674  1176  1303               	bcf	3,6	;RP1=0, select bank1
  4675  1177  01E0               	clrf	?___fladd^(0+128)
  4676  1178  01E1               	clrf	(?___fladd+1)^(0+128)
  4677  1179  01E2               	clrf	(?___fladd+2)^(0+128)
  4678  117A  01E3               	clrf	(?___fladd+3)^(0+128)
  4679  117B  0008               	return
  4680  117C                     l5260:	
  4681  117C  1303               	bcf	3,6	;RP1=0, select bank1
  4682  117D  0864               	movf	___fladd@a^(0+128),w
  4683  117E  07E0               	addwf	___fladd@b^(0+128),f
  4684  117F  0865               	movf	(___fladd@a+1)^(0+128),w
  4685  1180  1103               	clrz
  4686  1181  1803               	skipnc
  4687  1182  3E01               	addlw	1
  4688  1183  1D03               	btfss	3,2
  4689  1184  07E1               	addwf	(___fladd@b+1)^(0+128),f
  4690  1185  0866               	movf	(___fladd@a+2)^(0+128),w
  4691  1186  1103               	clrz
  4692  1187  1803               	skipnc
  4693  1188  3E01               	addlw	1
  4694  1189  1D03               	btfss	3,2
  4695  118A  07E2               	addwf	(___fladd@b+2)^(0+128),f
  4696  118B  0867               	movf	(___fladd@a+3)^(0+128),w
  4697  118C  1103               	clrz
  4698  118D  1803               	skipnc
  4699  118E  3E01               	addlw	1
  4700  118F  1D03               	btfss	3,2
  4701  1190  07E3               	addwf	(___fladd@b+3)^(0+128),f
  4702  1191  1C63               	btfss	(___fladd@b+3)^(0+128),0
  4703  1192  2A36               	goto	l5304
  4704  1193  1703               	bsf	3,6	;RP1=1, select bank3
  4705  1194  1C55               	btfss	___fladd@grs^(0+384),0
  4706  1195  299B               	goto	l1507
  4707  1196  1003               	clrc
  4708  1197  0C55               	rrf	___fladd@grs^(0+384),w
  4709  1198  3801               	iorlw	1
  4710  1199  00D5               	movwf	___fladd@grs^(0+384)
  4711  119A  299D               	goto	l1508
  4712  119B                     l1507:	
  4713  119B  1003               	clrc
  4714  119C  0CD5               	rrf	___fladd@grs^(0+384),f
  4715  119D                     l1508:	
  4716  119D  1303               	bcf	3,6	;RP1=0, select bank1
  4717  119E  1C60               	btfss	___fladd@b^(0+128),0
  4718  119F  29A2               	goto	l5270
  4719  11A0  1703               	bsf	3,6	;RP1=1, select bank3
  4720  11A1  17D5               	bsf	___fladd@grs^(0+384),7
  4721  11A2                     l5270:	
  4722  11A2  1303               	bcf	3,6	;RP1=0, select bank1
  4723  11A3  0D63               	rlf	(___fladd@b+3)^(0+128),w
  4724  11A4  0CE3               	rrf	(___fladd@b+3)^(0+128),f
  4725  11A5  0CE2               	rrf	(___fladd@b+2)^(0+128),f
  4726  11A6  0CE1               	rrf	(___fladd@b+1)^(0+128),f
  4727  11A7  0CE0               	rrf	___fladd@b^(0+128),f
  4728  11A8  1703               	bsf	3,6	;RP1=1, select bank3
  4729  11A9  0AD4               	incf	___fladd@bexp^(0+384),f
  4730  11AA  2A36               	goto	l5304
  4731  11AB                     l5274:	
  4732  11AB  1303               	bcf	3,6	;RP1=0, select bank1
  4733  11AC  0863               	movf	(___fladd@b+3)^(0+128),w
  4734  11AD  3A80               	xorlw	128
  4735  11AE  00FF               	movwf	127
  4736  11AF  0867               	movf	(___fladd@a+3)^(0+128),w
  4737  11B0  3A80               	xorlw	128
  4738  11B1  027F               	subwf	127,w
  4739  11B2  1D03               	skipz
  4740  11B3  29BE               	goto	u4673
  4741  11B4  0866               	movf	(___fladd@a+2)^(0+128),w
  4742  11B5  0262               	subwf	(___fladd@b+2)^(0+128),w
  4743  11B6  1D03               	skipz
  4744  11B7  29BE               	goto	u4673
  4745  11B8  0865               	movf	(___fladd@a+1)^(0+128),w
  4746  11B9  0261               	subwf	(___fladd@b+1)^(0+128),w
  4747  11BA  1D03               	skipz
  4748  11BB  29BE               	goto	u4673
  4749  11BC  0864               	movf	___fladd@a^(0+128),w
  4750  11BD  0260               	subwf	___fladd@b^(0+128),w
  4751  11BE                     u4673:	
  4752  11BE  1803               	skipnc
  4753  11BF  2A00               	goto	l5284
  4754  11C0  30FF               	movlw	255
  4755  11C1  00E8               	movwf	??___fladd^(0+128)
  4756  11C2  00E9               	movwf	(??___fladd^(0+128)+1)
  4757  11C3  00EA               	movwf	(??___fladd^(0+128)+2)
  4758  11C4  00EB               	movwf	(??___fladd^(0+128)+3)
  4759  11C5  0864               	movf	___fladd@a^(0+128),w
  4760  11C6  00EC               	movwf	(??___fladd+4)^(0+128)
  4761  11C7  0865               	movf	(___fladd@a+1)^(0+128),w
  4762  11C8  00ED               	movwf	((??___fladd+4)^(0+128)+1)
  4763  11C9  0866               	movf	(___fladd@a+2)^(0+128),w
  4764  11CA  00EE               	movwf	((??___fladd+4)^(0+128)+2)
  4765  11CB  0867               	movf	(___fladd@a+3)^(0+128),w
  4766  11CC  00EF               	movwf	((??___fladd+4)^(0+128)+3)
  4767  11CD  0860               	movf	___fladd@b^(0+128),w
  4768  11CE  02EC               	subwf	(??___fladd+4)^(0+128),f
  4769  11CF  0861               	movf	(___fladd@b+1)^(0+128),w
  4770  11D0  1C03               	skipc
  4771  11D1  0F61               	incfsz	(___fladd@b+1)^(0+128),w
  4772  11D2  02ED               	subwf	((??___fladd+4)^(0+128)+1),f
  4773  11D3  0862               	movf	(___fladd@b+2)^(0+128),w
  4774  11D4  1C03               	skipc
  4775  11D5  0F62               	incfsz	(___fladd@b+2)^(0+128),w
  4776  11D6  02EE               	subwf	((??___fladd+4)^(0+128)+2),f
  4777  11D7  0863               	movf	(___fladd@b+3)^(0+128),w
  4778  11D8  1C03               	skipc
  4779  11D9  0F63               	incfsz	(___fladd@b+3)^(0+128),w
  4780  11DA  02EF               	subwf	((??___fladd+4)^(0+128)+3),f
  4781  11DB  086C               	movf	(??___fladd+4)^(0+128),w
  4782  11DC  07E8               	addwf	??___fladd^(0+128),f
  4783  11DD  086D               	movf	(??___fladd+5)^(0+128),w
  4784  11DE  1803               	skipnc
  4785  11DF  0F6D               	incfsz	(??___fladd+5)^(0+128),w
  4786  11E0  07E9               	addwf	(??___fladd^(0+128)+1),f
  4787  11E1  086E               	movf	(??___fladd+6)^(0+128),w
  4788  11E2  1803               	skipnc
  4789  11E3  0F6E               	incfsz	(??___fladd+6)^(0+128),w
  4790  11E4  07EA               	addwf	(??___fladd^(0+128)+2),f
  4791  11E5  086F               	movf	(??___fladd+7)^(0+128),w
  4792  11E6  1803               	skipnc
  4793  11E7  0A6F               	incf	(??___fladd+7)^(0+128),w
  4794  11E8  07EB               	addwf	(??___fladd^(0+128)+3),f
  4795  11E9  086B               	movf	(??___fladd+3)^(0+128),w
  4796  11EA  00E3               	movwf	(___fladd@b+3)^(0+128)
  4797  11EB  086A               	movf	(??___fladd+2)^(0+128),w
  4798  11EC  00E2               	movwf	(___fladd@b+2)^(0+128)
  4799  11ED  0869               	movf	(??___fladd+1)^(0+128),w
  4800  11EE  00E1               	movwf	(___fladd@b+1)^(0+128)
  4801  11EF  0868               	movf	??___fladd^(0+128),w
  4802  11F0  00E0               	movwf	___fladd@b^(0+128)
  4803  11F1  3080               	movlw	128
  4804  11F2  1703               	bsf	3,6	;RP1=1, select bank3
  4805  11F3  06D2               	xorwf	___fladd@signs^(0+384),f
  4806  11F4  09D5               	comf	___fladd@grs^(0+384),f
  4807  11F5  0FD5               	incfsz	___fladd@grs^(0+384),f
  4808  11F6  2A0E               	goto	l1513
  4809  11F7  1303               	bcf	3,6	;RP1=0, select bank1
  4810  11F8  0AE0               	incf	___fladd@b^(0+128),f
  4811  11F9  1903               	skipnz
  4812  11FA  0AE1               	incf	(___fladd@b+1)^(0+128),f
  4813  11FB  1903               	skipnz
  4814  11FC  0AE2               	incf	(___fladd@b+2)^(0+128),f
  4815  11FD  1903               	skipnz
  4816  11FE  0AE3               	incf	(___fladd@b+3)^(0+128),f
  4817  11FF  2A0E               	goto	l1513
  4818  1200                     l5284:	
  4819  1200  0864               	movf	___fladd@a^(0+128),w
  4820  1201  02E0               	subwf	___fladd@b^(0+128),f
  4821  1202  0865               	movf	(___fladd@a+1)^(0+128),w
  4822  1203  1C03               	skipc
  4823  1204  0F65               	incfsz	(___fladd@a+1)^(0+128),w
  4824  1205  02E1               	subwf	(___fladd@b+1)^(0+128),f
  4825  1206  0866               	movf	(___fladd@a+2)^(0+128),w
  4826  1207  1C03               	skipc
  4827  1208  0F66               	incfsz	(___fladd@a+2)^(0+128),w
  4828  1209  02E2               	subwf	(___fladd@b+2)^(0+128),f
  4829  120A  0867               	movf	(___fladd@a+3)^(0+128),w
  4830  120B  1C03               	skipc
  4831  120C  0F67               	incfsz	(___fladd@a+3)^(0+128),w
  4832  120D  02E3               	subwf	(___fladd@b+3)^(0+128),f
  4833  120E                     l1513:	
  4834  120E  1303               	bcf	3,6	;RP1=0, select bank1
  4835  120F  0863               	movf	(___fladd@b+3)^(0+128),w
  4836  1210  0462               	iorwf	(___fladd@b+2)^(0+128),w
  4837  1211  0461               	iorwf	(___fladd@b+1)^(0+128),w
  4838  1212  0460               	iorwf	___fladd@b^(0+128),w
  4839  1213  1D03               	skipz
  4840  1214  2A33               	goto	l5302
  4841  1215  1703               	bsf	3,6	;RP1=1, select bank3
  4842  1216  0855               	movf	___fladd@grs^(0+384),w
  4843  1217  1D03               	btfss	3,2
  4844  1218  2A33               	goto	l5302
  4845  1219  1303               	bcf	3,6	;RP1=0, select bank1
  4846  121A  01E0               	clrf	?___fladd^(0+128)
  4847  121B  01E1               	clrf	(?___fladd+1)^(0+128)
  4848  121C  01E2               	clrf	(?___fladd+2)^(0+128)
  4849  121D  01E3               	clrf	(?___fladd+3)^(0+128)
  4850  121E  0008               	return
  4851  121F                     l5290:	
  4852  121F  1003               	clrc
  4853  1220  0DE0               	rlf	___fladd@b^(0+128),f
  4854  1221  0DE1               	rlf	(___fladd@b+1)^(0+128),f
  4855  1222  0DE2               	rlf	(___fladd@b+2)^(0+128),f
  4856  1223  0DE3               	rlf	(___fladd@b+3)^(0+128),f
  4857  1224  1703               	bsf	3,6	;RP1=1, select bank3
  4858  1225  1FD5               	btfss	___fladd@grs^(0+384),7
  4859  1226  2A29               	goto	l1517
  4860  1227  1303               	bcf	3,6	;RP1=0, select bank1
  4861  1228  1460               	bsf	___fladd@b^(0+128),0
  4862  1229                     l1517:	
  4863  1229  1703               	bsf	3,6	;RP1=1, select bank3
  4864  122A  1C55               	btfss	___fladd@grs^(0+384),0
  4865  122B  2A2E               	goto	l1518
  4866  122C  1403               	setc
  4867  122D  2A2F               	goto	L1
  4868  122E                     l1518:	
  4869  122E  1003               	clrc
  4870  122F                     L1:	
  4871  122F  0DD5               	rlf	___fladd@grs^(0+384),f
  4872  1230  0854               	movf	___fladd@bexp^(0+384),w
  4873  1231  1D03               	btfss	3,2
  4874  1232  03D4               	decf	___fladd@bexp^(0+384),f
  4875  1233                     l5302:	
  4876  1233  1303               	bcf	3,6	;RP1=0, select bank1
  4877  1234  1FE2               	btfss	(___fladd@b+2)^(0+128),7
  4878  1235  2A1F               	goto	l5290
  4879  1236                     l5304:	
  4880  1236  1703               	bsf	3,6	;RP1=1, select bank3
  4881  1237  01D3               	clrf	___fladd@aexp^(0+384)
  4882  1238  1FD5               	btfss	___fladd@grs^(0+384),7
  4883  1239  2A44               	goto	l5314
  4884  123A  0855               	movf	___fladd@grs^(0+384),w
  4885  123B  397F               	andlw	127
  4886  123C  1D03               	btfss	3,2
  4887  123D  2A41               	goto	l5310
  4888  123E  1303               	bcf	3,6	;RP1=0, select bank1
  4889  123F  1C60               	btfss	___fladd@b^(0+128),0
  4890  1240  2A44               	goto	l5314
  4891  1241                     l5310:	
  4892  1241  1703               	bsf	3,6	;RP1=1, select bank3
  4893  1242  01D3               	clrf	___fladd@aexp^(0+384)
  4894  1243  0AD3               	incf	___fladd@aexp^(0+384),f
  4895  1244                     l5314:	
  4896  1244  1703               	bsf	3,6	;RP1=1, select bank3
  4897  1245  0853               	movf	___fladd@aexp^(0+384),w
  4898  1246  1903               	btfsc	3,2
  4899  1247  2A5A               	goto	l5326
  4900  1248  1303               	bcf	3,6	;RP1=0, select bank1
  4901  1249  0AE0               	incf	___fladd@b^(0+128),f
  4902  124A  1903               	skipnz
  4903  124B  0AE1               	incf	(___fladd@b+1)^(0+128),f
  4904  124C  1903               	skipnz
  4905  124D  0AE2               	incf	(___fladd@b+2)^(0+128),f
  4906  124E  1903               	skipnz
  4907  124F  0AE3               	incf	(___fladd@b+3)^(0+128),f
  4908  1250  1C63               	btfss	(___fladd@b+3)^(0+128),0
  4909  1251  2A5A               	goto	l5326
  4910  1252  0D63               	rlf	(___fladd@b+3)^(0+128),w
  4911  1253  0CE3               	rrf	(___fladd@b+3)^(0+128),f
  4912  1254  0CE2               	rrf	(___fladd@b+2)^(0+128),f
  4913  1255  0CE1               	rrf	(___fladd@b+1)^(0+128),f
  4914  1256  0CE0               	rrf	___fladd@b^(0+128),f
  4915  1257  1703               	bsf	3,6	;RP1=1, select bank3
  4916  1258  0F54               	incfsz	___fladd@bexp^(0+384),w
  4917  1259  0AD4               	incf	___fladd@bexp^(0+384),f
  4918  125A                     l5326:	
  4919  125A  1703               	bsf	3,6	;RP1=1, select bank3
  4920  125B  0A54               	incf	___fladd@bexp^(0+384),w
  4921  125C  1D03               	btfss	3,2
  4922  125D  0854               	movf	___fladd@bexp^(0+384),w
  4923  125E  1D03               	btfss	3,2
  4924  125F  2A69               	goto	l5334
  4925  1260  1303               	bcf	3,6	;RP1=0, select bank1
  4926  1261  01E0               	clrf	___fladd@b^(0+128)
  4927  1262  01E1               	clrf	(___fladd@b+1)^(0+128)
  4928  1263  01E2               	clrf	(___fladd@b+2)^(0+128)
  4929  1264  01E3               	clrf	(___fladd@b+3)^(0+128)
  4930  1265  1703               	bsf	3,6	;RP1=1, select bank3
  4931  1266  0854               	movf	___fladd@bexp^(0+384),w
  4932  1267  1903               	btfsc	3,2
  4933  1268  01D2               	clrf	___fladd@signs^(0+384)
  4934  1269                     l5334:	
  4935  1269  1C54               	btfss	___fladd@bexp^(0+384),0
  4936  126A  2A6E               	goto	l1533
  4937  126B  1303               	bcf	3,6	;RP1=0, select bank1
  4938  126C  17E2               	bsf	(___fladd@b^(0+128)+2),7
  4939  126D  2A70               	goto	l5338
  4940  126E                     l1533:	
  4941  126E  1303               	bcf	3,6	;RP1=0, select bank1
  4942  126F  13E2               	bcf	(___fladd@b^(0+128)+2),7
  4943  1270                     l5338:	
  4944  1270  1703               	bsf	3,6	;RP1=1, select bank3
  4945  1271  1003               	clrc
  4946  1272  0C54               	rrf	___fladd@bexp^(0+384),w
  4947  1273  1303               	bcf	3,6	;RP1=0, select bank1
  4948  1274  00E3               	movwf	(___fladd@b^(0+128)+3)
  4949  1275  1703               	bsf	3,6	;RP1=1, select bank3
  4950  1276  1FD2               	btfss	___fladd@signs^(0+384),7
  4951  1277  0008               	return
  4952  1278  1303               	bcf	3,6	;RP1=0, select bank1
  4953  1279  17E3               	bsf	(___fladd@b^(0+128)+3),7
  4954  127A  0008               	return
  4955  127B                     __end_of___fladd:	
  4956  127B                     __ptext9:	
  4957 ;; *************** function _CCP1_PWM_DUTY_CYCLE_LOAD *****************
  4958 ;; Defined at:
  4959 ;;		line 196 in file "CCP.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  DUTY_CYCLE      2   14[BANK3 ] unsigned int 
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;  DUTY_VALUE      2   23[BANK3 ] unsigned int 
  4964 ;;  ret             1    0        enum E865
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  1    wreg      enum E865
  4967 ;; Registers used:
  4968 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4969 ;; Tracked objects:
  4970 ;;		On entry : 300/300
  4971 ;;		On exit  : 300/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4974 ;;      Params:         0       0       0       2       0
  4975 ;;      Locals:         0       0       0       7       0
  4976 ;;      Temps:          0       0       0       2       0
  4977 ;;      Totals:         0       0       0      11       0
  4978 ;;Total ram usage:       11 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; Hardware stack levels required when called:   12
  4981 ;; This function calls:
  4982 ;;		___fldiv
  4983 ;;		___flmul
  4984 ;;		___fltol
  4985 ;;		___xxtofl
  4986 ;; This function is called by:
  4987 ;;		_MOTOR_INIT
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _CCP1_PWM_DUTY_CYCLE_LOAD
  4993  127B                     _CCP1_PWM_DUTY_CYCLE_LOAD:	
  4994                           
  4995                           ;CCP.c: 199:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 201:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
  4996                           
  4997                           ;incstack = 0
  4998 ;; hardware stack exceeded
  4999                           ; Regs used in _CCP1_PWM_DUTY_CYCLE_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5000  127B  0860               	movf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384),w
  5001  127C  1303               	bcf	3,6	;RP1=0, select bank1
  5002  127D  00A0               	movwf	___xxtofl@val^(0+128)
  5003  127E  1703               	bsf	3,6	;RP1=1, select bank3
  5004  127F  0861               	movf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384),w
  5005  1280  1303               	bcf	3,6	;RP1=0, select bank1
  5006  1281  00A1               	movwf	(___xxtofl@val^(0+128)+1)
  5007  1282  3000               	movlw	0
  5008  1283  01A2               	clrf	(___xxtofl@val^(0+128)+2)
  5009  1284  01A3               	clrf	(___xxtofl@val^(0+128)+3)
  5010  1285  25F0  160A  118A   	fcall	___xxtofl
  5011  1288  0823               	movf	(?___xxtofl+3)^(0+128),w
  5012  1289  00B5               	movwf	(___fldiv@b+3)^(0+128)
  5013  128A  0822               	movf	(?___xxtofl+2)^(0+128),w
  5014  128B  00B4               	movwf	(___fldiv@b+2)^(0+128)
  5015  128C  0821               	movf	(?___xxtofl+1)^(0+128),w
  5016  128D  00B3               	movwf	(___fldiv@b+1)^(0+128)
  5017  128E  0820               	movf	?___xxtofl^(0+128),w
  5018  128F  00B2               	movwf	___fldiv@b^(0+128)
  5019  1290  3043               	movlw	67
  5020  1291  00B1               	movwf	(___fldiv@a+3)^(0+128)
  5021  1292  3034               	movlw	52
  5022  1293  00B0               	movwf	(___fldiv@a+2)^(0+128)
  5023  1294  01AF               	clrf	(___fldiv@a+1)^(0+128)
  5024  1295  01AE               	clrf	___fldiv@a^(0+128)
  5025  1296  2662  160A  118A   	fcall	___fldiv
  5026  1299  0831               	movf	(?___fldiv+3)^(0+128),w
  5027  129A  00CE               	movwf	(___flmul@a+3)^(0+128)
  5028  129B  0830               	movf	(?___fldiv+2)^(0+128),w
  5029  129C  00CD               	movwf	(___flmul@a+2)^(0+128)
  5030  129D  082F               	movf	(?___fldiv+1)^(0+128),w
  5031  129E  00CC               	movwf	(___flmul@a+1)^(0+128)
  5032  129F  082E               	movf	?___fldiv^(0+128),w
  5033  12A0  00CB               	movwf	___flmul@a^(0+128)
  5034  12A1  3041               	movlw	65
  5035  12A2  00CA               	movwf	(___flmul@b+3)^(0+128)
  5036  12A3  3020               	movlw	32
  5037  12A4  00C9               	movwf	(___flmul@b+2)^(0+128)
  5038  12A5  01C8               	clrf	(___flmul@b+1)^(0+128)
  5039  12A6  01C7               	clrf	___flmul@b^(0+128)
  5040  12A7  2391  160A  118A   	fcall	___flmul
  5041  12AA  084A               	movf	(?___flmul+3)^(0+128),w
  5042  12AB  1703               	bsf	3,6	;RP1=1, select bank3
  5043  12AC  00E8               	movwf	(_CCP1_PWM_DUTY_CYCLE_LOAD$2214+3)^(0+384)
  5044  12AD  1303               	bcf	3,6	;RP1=0, select bank1
  5045  12AE  0849               	movf	(?___flmul+2)^(0+128),w
  5046  12AF  1703               	bsf	3,6	;RP1=1, select bank3
  5047  12B0  00E7               	movwf	(_CCP1_PWM_DUTY_CYCLE_LOAD$2214+2)^(0+384)
  5048  12B1  1303               	bcf	3,6	;RP1=0, select bank1
  5049  12B2  0848               	movf	(?___flmul+1)^(0+128),w
  5050  12B3  1703               	bsf	3,6	;RP1=1, select bank3
  5051  12B4  00E6               	movwf	(_CCP1_PWM_DUTY_CYCLE_LOAD$2214+1)^(0+384)
  5052  12B5  1303               	bcf	3,6	;RP1=0, select bank1
  5053  12B6  0847               	movf	?___flmul^(0+128),w
  5054  12B7  1703               	bsf	3,6	;RP1=1, select bank3
  5055  12B8  00E5               	movwf	_CCP1_PWM_DUTY_CYCLE_LOAD$2214^(0+384)
  5056                           
  5057                           ;CCP.c: 199:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 201:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
  5058  12B9  0868               	movf	(_CCP1_PWM_DUTY_CYCLE_LOAD$2214+3)^(0+384),w
  5059  12BA  1303               	bcf	3,6	;RP1=0, select bank1
  5060  12BB  00CE               	movwf	(___flmul@a+3)^(0+128)
  5061  12BC  1703               	bsf	3,6	;RP1=1, select bank3
  5062  12BD  0867               	movf	(_CCP1_PWM_DUTY_CYCLE_LOAD$2214+2)^(0+384),w
  5063  12BE  1303               	bcf	3,6	;RP1=0, select bank1
  5064  12BF  00CD               	movwf	(___flmul@a+2)^(0+128)
  5065  12C0  1703               	bsf	3,6	;RP1=1, select bank3
  5066  12C1  0866               	movf	(_CCP1_PWM_DUTY_CYCLE_LOAD$2214+1)^(0+384),w
  5067  12C2  1303               	bcf	3,6	;RP1=0, select bank1
  5068  12C3  00CC               	movwf	(___flmul@a+1)^(0+128)
  5069  12C4  1703               	bsf	3,6	;RP1=1, select bank3
  5070  12C5  0865               	movf	_CCP1_PWM_DUTY_CYCLE_LOAD$2214^(0+384),w
  5071  12C6  1303               	bcf	3,6	;RP1=0, select bank1
  5072  12C7  00CB               	movwf	___flmul@a^(0+128)
  5073  12C8  3041               	movlw	65
  5074  12C9  00CA               	movwf	(___flmul@b+3)^(0+128)
  5075  12CA  30FA               	movlw	250
  5076  12CB  00C9               	movwf	(___flmul@b+2)^(0+128)
  5077  12CC  01C8               	clrf	(___flmul@b+1)^(0+128)
  5078  12CD  01C7               	clrf	___flmul@b^(0+128)
  5079  12CE  2391  160A  118A   	fcall	___flmul
  5080  12D1  084A               	movf	(?___flmul+3)^(0+128),w
  5081  12D2  1703               	bsf	3,6	;RP1=1, select bank3
  5082  12D3  00D9               	movwf	(___fltol@f1+3)^(0+384)
  5083  12D4  1303               	bcf	3,6	;RP1=0, select bank1
  5084  12D5  0849               	movf	(?___flmul+2)^(0+128),w
  5085  12D6  1703               	bsf	3,6	;RP1=1, select bank3
  5086  12D7  00D8               	movwf	(___fltol@f1+2)^(0+384)
  5087  12D8  1303               	bcf	3,6	;RP1=0, select bank1
  5088  12D9  0848               	movf	(?___flmul+1)^(0+128),w
  5089  12DA  1703               	bsf	3,6	;RP1=1, select bank3
  5090  12DB  00D7               	movwf	(___fltol@f1+1)^(0+384)
  5091  12DC  1303               	bcf	3,6	;RP1=0, select bank1
  5092  12DD  0847               	movf	?___flmul^(0+128),w
  5093  12DE  1703               	bsf	3,6	;RP1=1, select bank3
  5094  12DF  00D6               	movwf	___fltol@f1^(0+384)
  5095  12E0  2783               	fcall	___fltol
  5096  12E1  0857               	movf	(?___fltol+1)^(0+384),w
  5097  12E2  00EA               	movwf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384)
  5098  12E3  0856               	movf	?___fltol^(0+384),w
  5099  12E4  00E9               	movwf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384)
  5100                           
  5101                           ;CCP.c: 203:  (CCPR1L =((tbyte)(DUTY_VALUE >>2))); ( CCP1CON =((CCP1CON & 0b11001111)| (
      +                          (DUTY_VALUE&0x0003)<<4)));
  5102  12E5  086A               	movf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384),w
  5103  12E6  00E3               	movwf	(??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)+1)
  5104  12E7  0869               	movf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  5105  12E8  00E2               	movwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)
  5106  12E9  1003               	clrc
  5107  12EA  0CE3               	rrf	(??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  5108  12EB  0CE2               	rrf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),f
  5109  12EC  1003               	clrc
  5110  12ED  0CE3               	rrf	(??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  5111  12EE  0CE2               	rrf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),f
  5112  12EF  0862               	movf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),w
  5113  12F0  1283               	bcf	3,5	;RP0=0, select bank0
  5114  12F1  1303               	bcf	3,6	;RP1=0, select bank0
  5115  12F2  0095               	movwf	21	;volatile
  5116  12F3  1683               	bsf	3,5	;RP0=1, select bank3
  5117  12F4  1703               	bsf	3,6	;RP1=1, select bank3
  5118  12F5  0869               	movf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  5119  12F6  3903               	andlw	3
  5120  12F7  00E2               	movwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)
  5121  12F8  0E62               	swapf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),w
  5122  12F9  39F0               	andlw	240
  5123  12FA  00E2               	movwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)
  5124  12FB  1283               	bcf	3,5	;RP0=0, select bank0
  5125  12FC  1303               	bcf	3,6	;RP1=0, select bank0
  5126  12FD  0817               	movf	23,w	;volatile
  5127  12FE  39CF               	andlw	207
  5128  12FF  1683               	bsf	3,5	;RP0=1, select bank3
  5129  1300  1703               	bsf	3,6	;RP1=1, select bank3
  5130  1301  0462               	iorwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),w
  5131  1302  1283               	bcf	3,5	;RP0=0, select bank0
  5132  1303  1303               	bcf	3,6	;RP1=0, select bank0
  5133  1304  0097               	movwf	23	;volatile
  5134  1305  0008               	return
  5135  1306                     __end_of_CCP1_PWM_DUTY_CYCLE_LOAD:	
  5136  1306                     __ptext21:	
  5137 ;; *************** function _CCP2_PWM_DUTY_CYCLE_LOAD *****************
  5138 ;; Defined at:
  5139 ;;		line 207 in file "CCP.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  DUTY_CYCLE      2   14[BANK3 ] unsigned int 
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;  DUTY_VALUE      2   23[BANK3 ] unsigned int 
  5144 ;;  ret             1    0        enum E865
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  1    wreg      enum E865
  5147 ;; Registers used:
  5148 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5149 ;; Tracked objects:
  5150 ;;		On entry : 300/300
  5151 ;;		On exit  : 300/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5154 ;;      Params:         0       0       0       2       0
  5155 ;;      Locals:         0       0       0       7       0
  5156 ;;      Temps:          0       0       0       2       0
  5157 ;;      Totals:         0       0       0      11       0
  5158 ;;Total ram usage:       11 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:   12
  5161 ;; This function calls:
  5162 ;;		___fldiv
  5163 ;;		___flmul
  5164 ;;		___fltol
  5165 ;;		___xxtofl
  5166 ;; This function is called by:
  5167 ;;		_HEATER_INIT
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           
  5172                           ;psect for function _CCP2_PWM_DUTY_CYCLE_LOAD
  5173  1306                     _CCP2_PWM_DUTY_CYCLE_LOAD:	
  5174                           
  5175                           ;CCP.c: 210:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 211:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
  5176                           
  5177                           ;incstack = 0
  5178 ;; hardware stack exceeded
  5179                           ; Regs used in _CCP2_PWM_DUTY_CYCLE_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5180  1306  0860               	movf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384),w
  5181  1307  1303               	bcf	3,6	;RP1=0, select bank1
  5182  1308  00A0               	movwf	___xxtofl@val^(0+128)
  5183  1309  1703               	bsf	3,6	;RP1=1, select bank3
  5184  130A  0861               	movf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384),w
  5185  130B  1303               	bcf	3,6	;RP1=0, select bank1
  5186  130C  00A1               	movwf	(___xxtofl@val^(0+128)+1)
  5187  130D  3000               	movlw	0
  5188  130E  01A2               	clrf	(___xxtofl@val^(0+128)+2)
  5189  130F  01A3               	clrf	(___xxtofl@val^(0+128)+3)
  5190  1310  25F0  160A  118A   	fcall	___xxtofl
  5191  1313  0823               	movf	(?___xxtofl+3)^(0+128),w
  5192  1314  00B5               	movwf	(___fldiv@b+3)^(0+128)
  5193  1315  0822               	movf	(?___xxtofl+2)^(0+128),w
  5194  1316  00B4               	movwf	(___fldiv@b+2)^(0+128)
  5195  1317  0821               	movf	(?___xxtofl+1)^(0+128),w
  5196  1318  00B3               	movwf	(___fldiv@b+1)^(0+128)
  5197  1319  0820               	movf	?___xxtofl^(0+128),w
  5198  131A  00B2               	movwf	___fldiv@b^(0+128)
  5199  131B  3043               	movlw	67
  5200  131C  00B1               	movwf	(___fldiv@a+3)^(0+128)
  5201  131D  3034               	movlw	52
  5202  131E  00B0               	movwf	(___fldiv@a+2)^(0+128)
  5203  131F  01AF               	clrf	(___fldiv@a+1)^(0+128)
  5204  1320  01AE               	clrf	___fldiv@a^(0+128)
  5205  1321  2662  160A  118A   	fcall	___fldiv
  5206  1324  0831               	movf	(?___fldiv+3)^(0+128),w
  5207  1325  00CE               	movwf	(___flmul@a+3)^(0+128)
  5208  1326  0830               	movf	(?___fldiv+2)^(0+128),w
  5209  1327  00CD               	movwf	(___flmul@a+2)^(0+128)
  5210  1328  082F               	movf	(?___fldiv+1)^(0+128),w
  5211  1329  00CC               	movwf	(___flmul@a+1)^(0+128)
  5212  132A  082E               	movf	?___fldiv^(0+128),w
  5213  132B  00CB               	movwf	___flmul@a^(0+128)
  5214  132C  3041               	movlw	65
  5215  132D  00CA               	movwf	(___flmul@b+3)^(0+128)
  5216  132E  3020               	movlw	32
  5217  132F  00C9               	movwf	(___flmul@b+2)^(0+128)
  5218  1330  01C8               	clrf	(___flmul@b+1)^(0+128)
  5219  1331  01C7               	clrf	___flmul@b^(0+128)
  5220  1332  2391  160A  118A   	fcall	___flmul
  5221  1335  084A               	movf	(?___flmul+3)^(0+128),w
  5222  1336  1703               	bsf	3,6	;RP1=1, select bank3
  5223  1337  00E8               	movwf	(_CCP2_PWM_DUTY_CYCLE_LOAD$2215+3)^(0+384)
  5224  1338  1303               	bcf	3,6	;RP1=0, select bank1
  5225  1339  0849               	movf	(?___flmul+2)^(0+128),w
  5226  133A  1703               	bsf	3,6	;RP1=1, select bank3
  5227  133B  00E7               	movwf	(_CCP2_PWM_DUTY_CYCLE_LOAD$2215+2)^(0+384)
  5228  133C  1303               	bcf	3,6	;RP1=0, select bank1
  5229  133D  0848               	movf	(?___flmul+1)^(0+128),w
  5230  133E  1703               	bsf	3,6	;RP1=1, select bank3
  5231  133F  00E6               	movwf	(_CCP2_PWM_DUTY_CYCLE_LOAD$2215+1)^(0+384)
  5232  1340  1303               	bcf	3,6	;RP1=0, select bank1
  5233  1341  0847               	movf	?___flmul^(0+128),w
  5234  1342  1703               	bsf	3,6	;RP1=1, select bank3
  5235  1343  00E5               	movwf	_CCP2_PWM_DUTY_CYCLE_LOAD$2215^(0+384)
  5236                           
  5237                           ;CCP.c: 210:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 211:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
  5238  1344  0868               	movf	(_CCP2_PWM_DUTY_CYCLE_LOAD$2215+3)^(0+384),w
  5239  1345  1303               	bcf	3,6	;RP1=0, select bank1
  5240  1346  00CE               	movwf	(___flmul@a+3)^(0+128)
  5241  1347  1703               	bsf	3,6	;RP1=1, select bank3
  5242  1348  0867               	movf	(_CCP2_PWM_DUTY_CYCLE_LOAD$2215+2)^(0+384),w
  5243  1349  1303               	bcf	3,6	;RP1=0, select bank1
  5244  134A  00CD               	movwf	(___flmul@a+2)^(0+128)
  5245  134B  1703               	bsf	3,6	;RP1=1, select bank3
  5246  134C  0866               	movf	(_CCP2_PWM_DUTY_CYCLE_LOAD$2215+1)^(0+384),w
  5247  134D  1303               	bcf	3,6	;RP1=0, select bank1
  5248  134E  00CC               	movwf	(___flmul@a+1)^(0+128)
  5249  134F  1703               	bsf	3,6	;RP1=1, select bank3
  5250  1350  0865               	movf	_CCP2_PWM_DUTY_CYCLE_LOAD$2215^(0+384),w
  5251  1351  1303               	bcf	3,6	;RP1=0, select bank1
  5252  1352  00CB               	movwf	___flmul@a^(0+128)
  5253  1353  3041               	movlw	65
  5254  1354  00CA               	movwf	(___flmul@b+3)^(0+128)
  5255  1355  30FA               	movlw	250
  5256  1356  00C9               	movwf	(___flmul@b+2)^(0+128)
  5257  1357  01C8               	clrf	(___flmul@b+1)^(0+128)
  5258  1358  01C7               	clrf	___flmul@b^(0+128)
  5259  1359  2391  160A  118A   	fcall	___flmul
  5260  135C  084A               	movf	(?___flmul+3)^(0+128),w
  5261  135D  1703               	bsf	3,6	;RP1=1, select bank3
  5262  135E  00D9               	movwf	(___fltol@f1+3)^(0+384)
  5263  135F  1303               	bcf	3,6	;RP1=0, select bank1
  5264  1360  0849               	movf	(?___flmul+2)^(0+128),w
  5265  1361  1703               	bsf	3,6	;RP1=1, select bank3
  5266  1362  00D8               	movwf	(___fltol@f1+2)^(0+384)
  5267  1363  1303               	bcf	3,6	;RP1=0, select bank1
  5268  1364  0848               	movf	(?___flmul+1)^(0+128),w
  5269  1365  1703               	bsf	3,6	;RP1=1, select bank3
  5270  1366  00D7               	movwf	(___fltol@f1+1)^(0+384)
  5271  1367  1303               	bcf	3,6	;RP1=0, select bank1
  5272  1368  0847               	movf	?___flmul^(0+128),w
  5273  1369  1703               	bsf	3,6	;RP1=1, select bank3
  5274  136A  00D6               	movwf	___fltol@f1^(0+384)
  5275  136B  2783               	fcall	___fltol
  5276  136C  0857               	movf	(?___fltol+1)^(0+384),w
  5277  136D  00EA               	movwf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384)
  5278  136E  0856               	movf	?___fltol^(0+384),w
  5279  136F  00E9               	movwf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384)
  5280                           
  5281                           ;CCP.c: 213:  (CCPR2L =((tbyte)(DUTY_VALUE >>2))); ( CCP2CON =((CCP2CON & 0b11001111)| (
      +                          (DUTY_VALUE&0x0003)<<4)));
  5282  1370  086A               	movf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384),w
  5283  1371  00E3               	movwf	(??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)+1)
  5284  1372  0869               	movf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  5285  1373  00E2               	movwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)
  5286  1374  1003               	clrc
  5287  1375  0CE3               	rrf	(??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  5288  1376  0CE2               	rrf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),f
  5289  1377  1003               	clrc
  5290  1378  0CE3               	rrf	(??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  5291  1379  0CE2               	rrf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),f
  5292  137A  0862               	movf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),w
  5293  137B  1283               	bcf	3,5	;RP0=0, select bank0
  5294  137C  1303               	bcf	3,6	;RP1=0, select bank0
  5295  137D  009B               	movwf	27	;volatile
  5296  137E  1683               	bsf	3,5	;RP0=1, select bank3
  5297  137F  1703               	bsf	3,6	;RP1=1, select bank3
  5298  1380  0869               	movf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  5299  1381  3903               	andlw	3
  5300  1382  00E2               	movwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)
  5301  1383  0E62               	swapf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),w
  5302  1384  39F0               	andlw	240
  5303  1385  00E2               	movwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)
  5304  1386  1283               	bcf	3,5	;RP0=0, select bank0
  5305  1387  1303               	bcf	3,6	;RP1=0, select bank0
  5306  1388  081D               	movf	29,w	;volatile
  5307  1389  39CF               	andlw	207
  5308  138A  1683               	bsf	3,5	;RP0=1, select bank3
  5309  138B  1703               	bsf	3,6	;RP1=1, select bank3
  5310  138C  0462               	iorwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),w
  5311  138D  1283               	bcf	3,5	;RP0=0, select bank0
  5312  138E  1303               	bcf	3,6	;RP1=0, select bank0
  5313  138F  009D               	movwf	29	;volatile
  5314  1390  0008               	return
  5315  1391                     __end_of_CCP2_PWM_DUTY_CYCLE_LOAD:	
  5316  1391                     __ptext24:	
  5317 ;; *************** function ___flmul *****************
  5318 ;; Defined at:
  5319 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  b               4   39[BANK1 ] long 
  5322 ;;  a               4   43[BANK1 ] long 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  prod            4   58[BANK1 ] struct .
  5325 ;;  grs             4   53[BANK1 ] unsigned long 
  5326 ;;  temp            2   62[BANK1 ] struct .
  5327 ;;  bexp            1   57[BANK1 ] unsigned char 
  5328 ;;  aexp            1   52[BANK1 ] unsigned char 
  5329 ;;  sign            1   51[BANK1 ] unsigned char 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  4   39[BANK1 ] unsigned char 
  5332 ;; Registers used:
  5333 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 300/100
  5336 ;;		On exit  : 300/100
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5339 ;;      Params:         0       0       8       0       0
  5340 ;;      Locals:         0       0      13       0       0
  5341 ;;      Temps:          0       0       4       0       0
  5342 ;;      Totals:         0       0      25       0       0
  5343 ;;Total ram usage:       25 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:   11
  5346 ;; This function calls:
  5347 ;;		__Umul8_16
  5348 ;; This function is called by:
  5349 ;;		_CCP_PWM_PERIOD_LOAD
  5350 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  5351 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           
  5356                           ;psect for function ___flmul
  5357  1391                     ___flmul:	
  5358                           
  5359                           ;incstack = 0
  5360 ;; hardware stack exceeded
  5361                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5362  1391  084A               	movf	(___flmul@b^(0+128)+3),w
  5363  1392  00D3               	movwf	___flmul@sign^(0+128)
  5364  1393  3080               	movlw	128
  5365  1394  05D3               	andwf	___flmul@sign^(0+128),f
  5366  1395  1003               	clrc
  5367  1396  0D4A               	rlf	(___flmul@b^(0+128)+3),w
  5368  1397  00D9               	movwf	___flmul@bexp^(0+128)
  5369  1398  1BC9               	btfsc	(___flmul@b^(0+128)+2),7
  5370  1399  1459               	bsf	___flmul@bexp^(0+128),0
  5371  139A  0859               	movf	___flmul@bexp^(0+128),w
  5372  139B  1903               	btfsc	3,2
  5373  139C  2BA5               	goto	l1578
  5374  139D  0F59               	incfsz	___flmul@bexp^(0+128),w
  5375  139E  2BA3               	goto	l1579
  5376  139F  01C7               	clrf	___flmul@b^(0+128)
  5377  13A0  01C8               	clrf	(___flmul@b+1)^(0+128)
  5378  13A1  01C9               	clrf	(___flmul@b+2)^(0+128)
  5379  13A2  01CA               	clrf	(___flmul@b+3)^(0+128)
  5380  13A3                     l1579:	
  5381  13A3  17C9               	bsf	(___flmul@b^(0+128)+2),7
  5382  13A4  2BA9               	goto	l5500
  5383  13A5                     l1578:	
  5384  13A5  01C7               	clrf	___flmul@b^(0+128)
  5385  13A6  01C8               	clrf	(___flmul@b+1)^(0+128)
  5386  13A7  01C9               	clrf	(___flmul@b+2)^(0+128)
  5387  13A8  01CA               	clrf	(___flmul@b+3)^(0+128)
  5388  13A9                     l5500:	
  5389  13A9  084E               	movf	(___flmul@a^(0+128)+3),w
  5390  13AA  3980               	andlw	128
  5391  13AB  06D3               	xorwf	___flmul@sign^(0+128),f
  5392  13AC  1003               	clrc
  5393  13AD  0D4E               	rlf	(___flmul@a^(0+128)+3),w
  5394  13AE  00D4               	movwf	___flmul@aexp^(0+128)
  5395  13AF  1BCD               	btfsc	(___flmul@a^(0+128)+2),7
  5396  13B0  1454               	bsf	___flmul@aexp^(0+128),0
  5397  13B1  0854               	movf	___flmul@aexp^(0+128),w
  5398  13B2  1903               	btfsc	3,2
  5399  13B3  2BBC               	goto	l1582
  5400  13B4  0F54               	incfsz	___flmul@aexp^(0+128),w
  5401  13B5  2BBA               	goto	l1583
  5402  13B6  01CB               	clrf	___flmul@a^(0+128)
  5403  13B7  01CC               	clrf	(___flmul@a+1)^(0+128)
  5404  13B8  01CD               	clrf	(___flmul@a+2)^(0+128)
  5405  13B9  01CE               	clrf	(___flmul@a+3)^(0+128)
  5406  13BA                     l1583:	
  5407  13BA  17CD               	bsf	(___flmul@a^(0+128)+2),7
  5408  13BB  2BC0               	goto	l5512
  5409  13BC                     l1582:	
  5410  13BC  01CB               	clrf	___flmul@a^(0+128)
  5411  13BD  01CC               	clrf	(___flmul@a+1)^(0+128)
  5412  13BE  01CD               	clrf	(___flmul@a+2)^(0+128)
  5413  13BF  01CE               	clrf	(___flmul@a+3)^(0+128)
  5414  13C0                     l5512:	
  5415  13C0  0854               	movf	___flmul@aexp^(0+128),w
  5416  13C1  1D03               	btfss	3,2
  5417  13C2  0859               	movf	___flmul@bexp^(0+128),w
  5418  13C3  1D03               	btfss	3,2
  5419  13C4  2BCA               	goto	l5516
  5420  13C5  01C7               	clrf	?___flmul^(0+128)
  5421  13C6  01C8               	clrf	(?___flmul+1)^(0+128)
  5422  13C7  01C9               	clrf	(?___flmul+2)^(0+128)
  5423  13C8  01CA               	clrf	(?___flmul+3)^(0+128)
  5424  13C9  0008               	return
  5425  13CA                     l5516:	
  5426  13CA  0847               	movf	___flmul@b^(0+128),w
  5427  13CB  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5428  13CC  084D               	movf	(___flmul@a^(0+128)+2),w
  5429  13CD  2590  160A  118A   	fcall	__Umul8_16
  5430  13D0  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5431  13D1  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5432  13D2  0820               	movf	?__Umul8_16^(0+128),w
  5433  13D3  00DE               	movwf	___flmul@temp^(0+128)
  5434  13D4  00D5               	movwf	___flmul@grs^(0+128)
  5435  13D5  01D6               	clrf	(___flmul@grs+1)^(0+128)
  5436  13D6  01D7               	clrf	(___flmul@grs+2)^(0+128)
  5437  13D7  01D8               	clrf	(___flmul@grs+3)^(0+128)
  5438  13D8  085F               	movf	(___flmul@temp^(0+128)+1),w
  5439  13D9  00DA               	movwf	___flmul@prod^(0+128)
  5440  13DA  01DB               	clrf	(___flmul@prod+1)^(0+128)
  5441  13DB  01DC               	clrf	(___flmul@prod+2)^(0+128)
  5442  13DC  01DD               	clrf	(___flmul@prod+3)^(0+128)
  5443  13DD  0848               	movf	(___flmul@b^(0+128)+1),w
  5444  13DE  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5445  13DF  084C               	movf	(___flmul@a^(0+128)+1),w
  5446  13E0  2590  160A  118A   	fcall	__Umul8_16
  5447  13E3  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5448  13E4  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5449  13E5  0820               	movf	?__Umul8_16^(0+128),w
  5450  13E6  00DE               	movwf	___flmul@temp^(0+128)
  5451  13E7  07D5               	addwf	___flmul@grs^(0+128),f
  5452  13E8  3001               	movlw	1
  5453  13E9  1803               	skipnc
  5454  13EA  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5455  13EB  1803               	skipnc
  5456  13EC  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5457  13ED  1803               	skipnc
  5458  13EE  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5459  13EF  085F               	movf	(___flmul@temp^(0+128)+1),w
  5460  13F0  07DA               	addwf	___flmul@prod^(0+128),f
  5461  13F1  3001               	movlw	1
  5462  13F2  1803               	skipnc
  5463  13F3  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5464  13F4  1803               	skipnc
  5465  13F5  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5466  13F6  1803               	skipnc
  5467  13F7  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5468  13F8  0849               	movf	(___flmul@b^(0+128)+2),w
  5469  13F9  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5470  13FA  084B               	movf	___flmul@a^(0+128),w
  5471  13FB  2590  160A  118A   	fcall	__Umul8_16
  5472  13FE  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5473  13FF  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5474  1400  0820               	movf	?__Umul8_16^(0+128),w
  5475  1401  00DE               	movwf	___flmul@temp^(0+128)
  5476  1402  07D5               	addwf	___flmul@grs^(0+128),f
  5477  1403  3001               	movlw	1
  5478  1404  1803               	skipnc
  5479  1405  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5480  1406  1803               	skipnc
  5481  1407  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5482  1408  1803               	skipnc
  5483  1409  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5484  140A  085F               	movf	(___flmul@temp^(0+128)+1),w
  5485  140B  07DA               	addwf	___flmul@prod^(0+128),f
  5486  140C  3001               	movlw	1
  5487  140D  1803               	skipnc
  5488  140E  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5489  140F  1803               	skipnc
  5490  1410  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5491  1411  1803               	skipnc
  5492  1412  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5493  1413  0857               	movf	(___flmul@grs+2)^(0+128),w
  5494  1414  00D8               	movwf	(___flmul@grs+3)^(0+128)
  5495  1415  0856               	movf	(___flmul@grs+1)^(0+128),w
  5496  1416  00D7               	movwf	(___flmul@grs+2)^(0+128)
  5497  1417  0855               	movf	___flmul@grs^(0+128),w
  5498  1418  00D6               	movwf	(___flmul@grs+1)^(0+128)
  5499  1419  01D5               	clrf	___flmul@grs^(0+128)
  5500  141A  0848               	movf	(___flmul@b^(0+128)+1),w
  5501  141B  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5502  141C  084B               	movf	___flmul@a^(0+128),w
  5503  141D  2590  160A  118A   	fcall	__Umul8_16
  5504  1420  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5505  1421  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5506  1422  0820               	movf	?__Umul8_16^(0+128),w
  5507  1423  00DE               	movwf	___flmul@temp^(0+128)
  5508  1424  00CF               	movwf	??___flmul^(0+128)
  5509  1425  085F               	movf	(___flmul@temp+1)^(0+128),w
  5510  1426  00D0               	movwf	(??___flmul^(0+128)+1)
  5511  1427  01D1               	clrf	(??___flmul^(0+128)+2)
  5512  1428  01D2               	clrf	(??___flmul^(0+128)+3)
  5513  1429  084F               	movf	??___flmul^(0+128),w
  5514  142A  07D5               	addwf	___flmul@grs^(0+128),f
  5515  142B  0850               	movf	(??___flmul+1)^(0+128),w
  5516  142C  1103               	clrz
  5517  142D  1803               	skipnc
  5518  142E  3E01               	addlw	1
  5519  142F  1D03               	btfss	3,2
  5520  1430  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5521  1431  0851               	movf	(??___flmul+2)^(0+128),w
  5522  1432  1103               	clrz
  5523  1433  1803               	skipnc
  5524  1434  3E01               	addlw	1
  5525  1435  1D03               	btfss	3,2
  5526  1436  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5527  1437  0852               	movf	(??___flmul+3)^(0+128),w
  5528  1438  1103               	clrz
  5529  1439  1803               	skipnc
  5530  143A  3E01               	addlw	1
  5531  143B  1D03               	btfss	3,2
  5532  143C  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5533  143D  0847               	movf	___flmul@b^(0+128),w
  5534  143E  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5535  143F  084C               	movf	(___flmul@a^(0+128)+1),w
  5536  1440  2590  160A  118A   	fcall	__Umul8_16
  5537  1443  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5538  1444  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5539  1445  0820               	movf	?__Umul8_16^(0+128),w
  5540  1446  00DE               	movwf	___flmul@temp^(0+128)
  5541  1447  00CF               	movwf	??___flmul^(0+128)
  5542  1448  085F               	movf	(___flmul@temp+1)^(0+128),w
  5543  1449  00D0               	movwf	(??___flmul^(0+128)+1)
  5544  144A  01D1               	clrf	(??___flmul^(0+128)+2)
  5545  144B  01D2               	clrf	(??___flmul^(0+128)+3)
  5546  144C  084F               	movf	??___flmul^(0+128),w
  5547  144D  07D5               	addwf	___flmul@grs^(0+128),f
  5548  144E  0850               	movf	(??___flmul+1)^(0+128),w
  5549  144F  1103               	clrz
  5550  1450  1803               	skipnc
  5551  1451  3E01               	addlw	1
  5552  1452  1D03               	btfss	3,2
  5553  1453  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5554  1454  0851               	movf	(??___flmul+2)^(0+128),w
  5555  1455  1103               	clrz
  5556  1456  1803               	skipnc
  5557  1457  3E01               	addlw	1
  5558  1458  1D03               	btfss	3,2
  5559  1459  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5560  145A  0852               	movf	(??___flmul+3)^(0+128),w
  5561  145B  1103               	clrz
  5562  145C  1803               	skipnc
  5563  145D  3E01               	addlw	1
  5564  145E  1D03               	btfss	3,2
  5565  145F  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5566  1460  0857               	movf	(___flmul@grs+2)^(0+128),w
  5567  1461  00D8               	movwf	(___flmul@grs+3)^(0+128)
  5568  1462  0856               	movf	(___flmul@grs+1)^(0+128),w
  5569  1463  00D7               	movwf	(___flmul@grs+2)^(0+128)
  5570  1464  0855               	movf	___flmul@grs^(0+128),w
  5571  1465  00D6               	movwf	(___flmul@grs+1)^(0+128)
  5572  1466  01D5               	clrf	___flmul@grs^(0+128)
  5573  1467  0847               	movf	___flmul@b^(0+128),w
  5574  1468  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5575  1469  084B               	movf	___flmul@a^(0+128),w
  5576  146A  2590  160A  118A   	fcall	__Umul8_16
  5577  146D  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5578  146E  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5579  146F  0820               	movf	?__Umul8_16^(0+128),w
  5580  1470  00DE               	movwf	___flmul@temp^(0+128)
  5581  1471  00CF               	movwf	??___flmul^(0+128)
  5582  1472  085F               	movf	(___flmul@temp+1)^(0+128),w
  5583  1473  00D0               	movwf	(??___flmul^(0+128)+1)
  5584  1474  01D1               	clrf	(??___flmul^(0+128)+2)
  5585  1475  01D2               	clrf	(??___flmul^(0+128)+3)
  5586  1476  084F               	movf	??___flmul^(0+128),w
  5587  1477  07D5               	addwf	___flmul@grs^(0+128),f
  5588  1478  0850               	movf	(??___flmul+1)^(0+128),w
  5589  1479  1103               	clrz
  5590  147A  1803               	skipnc
  5591  147B  3E01               	addlw	1
  5592  147C  1D03               	btfss	3,2
  5593  147D  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5594  147E  0851               	movf	(??___flmul+2)^(0+128),w
  5595  147F  1103               	clrz
  5596  1480  1803               	skipnc
  5597  1481  3E01               	addlw	1
  5598  1482  1D03               	btfss	3,2
  5599  1483  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5600  1484  0852               	movf	(??___flmul+3)^(0+128),w
  5601  1485  1103               	clrz
  5602  1486  1803               	skipnc
  5603  1487  3E01               	addlw	1
  5604  1488  1D03               	btfss	3,2
  5605  1489  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5606  148A  0848               	movf	(___flmul@b^(0+128)+1),w
  5607  148B  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5608  148C  084D               	movf	(___flmul@a^(0+128)+2),w
  5609  148D  2590  160A  118A   	fcall	__Umul8_16
  5610  1490  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5611  1491  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5612  1492  0820               	movf	?__Umul8_16^(0+128),w
  5613  1493  00DE               	movwf	___flmul@temp^(0+128)
  5614  1494  00CF               	movwf	??___flmul^(0+128)
  5615  1495  085F               	movf	(___flmul@temp+1)^(0+128),w
  5616  1496  00D0               	movwf	(??___flmul^(0+128)+1)
  5617  1497  01D1               	clrf	(??___flmul^(0+128)+2)
  5618  1498  01D2               	clrf	(??___flmul^(0+128)+3)
  5619  1499  084F               	movf	??___flmul^(0+128),w
  5620  149A  07DA               	addwf	___flmul@prod^(0+128),f
  5621  149B  0850               	movf	(??___flmul+1)^(0+128),w
  5622  149C  1103               	clrz
  5623  149D  1803               	skipnc
  5624  149E  3E01               	addlw	1
  5625  149F  1D03               	btfss	3,2
  5626  14A0  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5627  14A1  0851               	movf	(??___flmul+2)^(0+128),w
  5628  14A2  1103               	clrz
  5629  14A3  1803               	skipnc
  5630  14A4  3E01               	addlw	1
  5631  14A5  1D03               	btfss	3,2
  5632  14A6  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5633  14A7  0852               	movf	(??___flmul+3)^(0+128),w
  5634  14A8  1103               	clrz
  5635  14A9  1803               	skipnc
  5636  14AA  3E01               	addlw	1
  5637  14AB  1D03               	btfss	3,2
  5638  14AC  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5639  14AD  0849               	movf	(___flmul@b^(0+128)+2),w
  5640  14AE  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5641  14AF  084C               	movf	(___flmul@a^(0+128)+1),w
  5642  14B0  2590  160A  118A   	fcall	__Umul8_16
  5643  14B3  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5644  14B4  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5645  14B5  0820               	movf	?__Umul8_16^(0+128),w
  5646  14B6  00DE               	movwf	___flmul@temp^(0+128)
  5647  14B7  00CF               	movwf	??___flmul^(0+128)
  5648  14B8  085F               	movf	(___flmul@temp+1)^(0+128),w
  5649  14B9  00D0               	movwf	(??___flmul^(0+128)+1)
  5650  14BA  01D1               	clrf	(??___flmul^(0+128)+2)
  5651  14BB  01D2               	clrf	(??___flmul^(0+128)+3)
  5652  14BC  084F               	movf	??___flmul^(0+128),w
  5653  14BD  07DA               	addwf	___flmul@prod^(0+128),f
  5654  14BE  0850               	movf	(??___flmul+1)^(0+128),w
  5655  14BF  1103               	clrz
  5656  14C0  1803               	skipnc
  5657  14C1  3E01               	addlw	1
  5658  14C2  1D03               	btfss	3,2
  5659  14C3  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5660  14C4  0851               	movf	(??___flmul+2)^(0+128),w
  5661  14C5  1103               	clrz
  5662  14C6  1803               	skipnc
  5663  14C7  3E01               	addlw	1
  5664  14C8  1D03               	btfss	3,2
  5665  14C9  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5666  14CA  0852               	movf	(??___flmul+3)^(0+128),w
  5667  14CB  1103               	clrz
  5668  14CC  1803               	skipnc
  5669  14CD  3E01               	addlw	1
  5670  14CE  1D03               	btfss	3,2
  5671  14CF  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5672  14D0  0849               	movf	(___flmul@b^(0+128)+2),w
  5673  14D1  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5674  14D2  084D               	movf	(___flmul@a^(0+128)+2),w
  5675  14D3  2590  160A  118A   	fcall	__Umul8_16
  5676  14D6  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5677  14D7  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5678  14D8  0820               	movf	?__Umul8_16^(0+128),w
  5679  14D9  00DE               	movwf	___flmul@temp^(0+128)
  5680  14DA  00CF               	movwf	??___flmul^(0+128)
  5681  14DB  085F               	movf	(___flmul@temp+1)^(0+128),w
  5682  14DC  00D0               	movwf	(??___flmul^(0+128)+1)
  5683  14DD  01D1               	clrf	(??___flmul^(0+128)+2)
  5684  14DE  01D2               	clrf	(??___flmul^(0+128)+3)
  5685  14DF  0851               	movf	(??___flmul^(0+128)+2),w
  5686  14E0  00D2               	movwf	(??___flmul^(0+128)+3)
  5687  14E1  0850               	movf	(??___flmul^(0+128)+1),w
  5688  14E2  00D1               	movwf	(??___flmul^(0+128)+2)
  5689  14E3  084F               	movf	??___flmul^(0+128),w
  5690  14E4  00D0               	movwf	(??___flmul^(0+128)+1)
  5691  14E5  01CF               	clrf	??___flmul^(0+128)
  5692  14E6  084F               	movf	??___flmul^(0+128),w
  5693  14E7  07DA               	addwf	___flmul@prod^(0+128),f
  5694  14E8  0850               	movf	(??___flmul+1)^(0+128),w
  5695  14E9  1103               	clrz
  5696  14EA  1803               	skipnc
  5697  14EB  3E01               	addlw	1
  5698  14EC  1D03               	btfss	3,2
  5699  14ED  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5700  14EE  0851               	movf	(??___flmul+2)^(0+128),w
  5701  14EF  1103               	clrz
  5702  14F0  1803               	skipnc
  5703  14F1  3E01               	addlw	1
  5704  14F2  1D03               	btfss	3,2
  5705  14F3  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5706  14F4  0852               	movf	(??___flmul+3)^(0+128),w
  5707  14F5  1103               	clrz
  5708  14F6  1803               	skipnc
  5709  14F7  3E01               	addlw	1
  5710  14F8  1D03               	btfss	3,2
  5711  14F9  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5712  14FA  0858               	movf	(___flmul@grs^(0+128)+3),w
  5713  14FB  07DA               	addwf	___flmul@prod^(0+128),f
  5714  14FC  3001               	movlw	1
  5715  14FD  1803               	skipnc
  5716  14FE  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5717  14FF  1803               	skipnc
  5718  1500  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5719  1501  1803               	skipnc
  5720  1502  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5721  1503  0857               	movf	(___flmul@grs+2)^(0+128),w
  5722  1504  00D8               	movwf	(___flmul@grs+3)^(0+128)
  5723  1505  0856               	movf	(___flmul@grs+1)^(0+128),w
  5724  1506  00D7               	movwf	(___flmul@grs+2)^(0+128)
  5725  1507  0855               	movf	___flmul@grs^(0+128),w
  5726  1508  00D6               	movwf	(___flmul@grs+1)^(0+128)
  5727  1509  01D5               	clrf	___flmul@grs^(0+128)
  5728  150A  0859               	movf	___flmul@bexp^(0+128),w
  5729  150B  00DE               	movwf	___flmul@temp^(0+128)
  5730  150C  01DF               	clrf	(___flmul@temp+1)^(0+128)
  5731  150D  0854               	movf	___flmul@aexp^(0+128),w
  5732  150E  07DE               	addwf	___flmul@temp^(0+128),f
  5733  150F  1803               	skipnc
  5734  1510  0ADF               	incf	(___flmul@temp+1)^(0+128),f
  5735  1511  3082               	movlw	-126
  5736  1512                     L2:	
  5737  1512  07DE               	addwf	___flmul@temp^(0+128),f
  5738  1513  1C03               	skipc
  5739  1514  03DF               	decf	(___flmul@temp+1)^(0+128),f
  5740  1515  1BDC               	btfsc	(___flmul@prod+2)^(0+128),7
  5741  1516  2D25               	goto	l5564
  5742  1517  1003               	clrc
  5743  1518  0DDA               	rlf	___flmul@prod^(0+128),f
  5744  1519  0DDB               	rlf	(___flmul@prod+1)^(0+128),f
  5745  151A  0DDC               	rlf	(___flmul@prod+2)^(0+128),f
  5746  151B  0DDD               	rlf	(___flmul@prod+3)^(0+128),f
  5747  151C  1BD8               	btfsc	(___flmul@grs+3)^(0+128),7
  5748  151D  145A               	bsf	___flmul@prod^(0+128),0
  5749  151E  30FF               	movlw	-1
  5750  151F  1003               	clrc
  5751  1520  0DD5               	rlf	___flmul@grs^(0+128),f
  5752  1521  0DD6               	rlf	(___flmul@grs+1)^(0+128),f
  5753  1522  0DD7               	rlf	(___flmul@grs+2)^(0+128),f
  5754  1523  0DD8               	rlf	(___flmul@grs+3)^(0+128),f
  5755  1524  2D12               	goto	L2
  5756  1525                     l5564:	
  5757  1525  01D4               	clrf	___flmul@aexp^(0+128)
  5758  1526  1FD8               	btfss	(___flmul@grs+3)^(0+128),7
  5759  1527  2D3B               	goto	l5574
  5760  1528  0855               	movf	___flmul@grs^(0+128),w
  5761  1529  00CF               	movwf	??___flmul^(0+128)
  5762  152A  0856               	movf	(___flmul@grs+1)^(0+128),w
  5763  152B  00D0               	movwf	(??___flmul^(0+128)+1)
  5764  152C  0857               	movf	(___flmul@grs+2)^(0+128),w
  5765  152D  00D1               	movwf	(??___flmul^(0+128)+2)
  5766  152E  307F               	movlw	127
  5767  152F  0558               	andwf	(___flmul@grs+3)^(0+128),w
  5768  1530  00D2               	movwf	(??___flmul^(0+128)+3)
  5769  1531  0852               	movf	(??___flmul+3)^(0+128),w
  5770  1532  0451               	iorwf	(??___flmul+2)^(0+128),w
  5771  1533  0450               	iorwf	(??___flmul+1)^(0+128),w
  5772  1534  044F               	iorwf	??___flmul^(0+128),w
  5773  1535  1903               	skipnz
  5774  1536  185A               	btfsc	___flmul@prod^(0+128),0
  5775  1537  2D39               	goto	l5570
  5776  1538  2D3B               	goto	l5574
  5777  1539                     l5570:	
  5778  1539  01D4               	clrf	___flmul@aexp^(0+128)
  5779  153A  0AD4               	incf	___flmul@aexp^(0+128),f
  5780  153B                     l5574:	
  5781  153B  0854               	movf	___flmul@aexp^(0+128),w
  5782  153C  1903               	btfsc	3,2
  5783  153D  2D4F               	goto	l5584
  5784  153E  0ADA               	incf	___flmul@prod^(0+128),f
  5785  153F  1903               	skipnz
  5786  1540  0ADB               	incf	(___flmul@prod+1)^(0+128),f
  5787  1541  1903               	skipnz
  5788  1542  0ADC               	incf	(___flmul@prod+2)^(0+128),f
  5789  1543  1903               	skipnz
  5790  1544  0ADD               	incf	(___flmul@prod+3)^(0+128),f
  5791  1545  1C5D               	btfss	(___flmul@prod+3)^(0+128),0
  5792  1546  2D4F               	goto	l5584
  5793  1547  0D5D               	rlf	(___flmul@prod+3)^(0+128),w
  5794  1548  0CDD               	rrf	(___flmul@prod+3)^(0+128),f
  5795  1549  0CDC               	rrf	(___flmul@prod+2)^(0+128),f
  5796  154A  0CDB               	rrf	(___flmul@prod+1)^(0+128),f
  5797  154B  0CDA               	rrf	___flmul@prod^(0+128),f
  5798  154C  0ADE               	incf	___flmul@temp^(0+128),f
  5799  154D  1903               	skipnz
  5800  154E  0ADF               	incf	(___flmul@temp+1)^(0+128),f
  5801  154F                     l5584:	
  5802  154F  085F               	movf	(___flmul@temp+1)^(0+128),w
  5803  1550  3A80               	xorlw	128
  5804  1551  00FF               	movwf	127
  5805  1552  3080               	movlw	128
  5806  1553  027F               	subwf	127,w
  5807  1554  1D03               	skipz
  5808  1555  2D58               	goto	u5325
  5809  1556  30FF               	movlw	255
  5810  1557  025E               	subwf	___flmul@temp^(0+128),w
  5811  1558                     u5325:	
  5812  1558  1C03               	skipc
  5813  1559  2D63               	goto	l5588
  5814  155A  307F               	movlw	127
  5815  155B  1683               	bsf	3,5	;RP0=1, select bank1
  5816  155C  1303               	bcf	3,6	;RP1=0, select bank1
  5817  155D  00DD               	movwf	(___flmul@prod+3)^(0+128)
  5818  155E  3080               	movlw	128
  5819  155F  00DC               	movwf	(___flmul@prod+2)^(0+128)
  5820  1560  01DB               	clrf	(___flmul@prod+1)^(0+128)
  5821  1561  01DA               	clrf	___flmul@prod^(0+128)
  5822  1562  2D85               	goto	l1600
  5823  1563                     l5588:	
  5824  1563  1683               	bsf	3,5	;RP0=1, select bank1
  5825  1564  1303               	bcf	3,6	;RP1=0, select bank1
  5826  1565  085F               	movf	(___flmul@temp+1)^(0+128),w
  5827  1566  3A80               	xorlw	128
  5828  1567  00FF               	movwf	127
  5829  1568  3080               	movlw	128
  5830  1569  027F               	subwf	127,w
  5831  156A  1D03               	skipz
  5832  156B  2D6E               	goto	u5335
  5833  156C  3001               	movlw	1
  5834  156D  025E               	subwf	___flmul@temp^(0+128),w
  5835  156E                     u5335:	
  5836  156E  1803               	skipnc
  5837  156F  2D78               	goto	l5594
  5838  1570  1683               	bsf	3,5	;RP0=1, select bank1
  5839  1571  1303               	bcf	3,6	;RP1=0, select bank1
  5840  1572  01DA               	clrf	___flmul@prod^(0+128)
  5841  1573  01DB               	clrf	(___flmul@prod+1)^(0+128)
  5842  1574  01DC               	clrf	(___flmul@prod+2)^(0+128)
  5843  1575  01DD               	clrf	(___flmul@prod+3)^(0+128)
  5844  1576  01D3               	clrf	___flmul@sign^(0+128)
  5845  1577  2D85               	goto	l1600
  5846  1578                     l5594:	
  5847  1578  1683               	bsf	3,5	;RP0=1, select bank1
  5848  1579  1303               	bcf	3,6	;RP1=0, select bank1
  5849  157A  085E               	movf	___flmul@temp^(0+128),w
  5850  157B  00D9               	movwf	___flmul@bexp^(0+128)
  5851  157C  307F               	movlw	127
  5852  157D  05DC               	andwf	(___flmul@prod+2)^(0+128),f
  5853  157E  3000               	movlw	0
  5854  157F  01DD               	clrf	(___flmul@prod+3)^(0+128)
  5855  1580  1859               	btfsc	___flmul@bexp^(0+128),0
  5856  1581  17DC               	bsf	(___flmul@prod^(0+128)+2),7
  5857  1582  1003               	clrc
  5858  1583  0C59               	rrf	___flmul@bexp^(0+128),w
  5859  1584  00DD               	movwf	(___flmul@prod^(0+128)+3)
  5860  1585                     l1600:	
  5861  1585  0853               	movf	___flmul@sign^(0+128),w
  5862  1586  04DD               	iorwf	(___flmul@prod^(0+128)+3),f
  5863  1587  085D               	movf	(___flmul@prod+3)^(0+128),w
  5864  1588  00CA               	movwf	(?___flmul+3)^(0+128)
  5865  1589  085C               	movf	(___flmul@prod+2)^(0+128),w
  5866  158A  00C9               	movwf	(?___flmul+2)^(0+128)
  5867  158B  085B               	movf	(___flmul@prod+1)^(0+128),w
  5868  158C  00C8               	movwf	(?___flmul+1)^(0+128)
  5869  158D  085A               	movf	___flmul@prod^(0+128),w
  5870  158E  00C7               	movwf	?___flmul^(0+128)
  5871  158F  0008               	return
  5872  1590                     __end_of___flmul:	
  5873  1590                     __ptext25:	
  5874 ;; *************** function __Umul8_16 *****************
  5875 ;; Defined at:
  5876 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;  multiplier      1    wreg     unsigned char 
  5879 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  5880 ;; Auto vars:     Size  Location     Type
  5881 ;;  multiplier      1    5[BANK1 ] unsigned char 
  5882 ;;  word_mpld       2    6[BANK1 ] unsigned int 
  5883 ;;  product         2    3[BANK1 ] unsigned int 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  2    0[BANK1 ] unsigned int 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0
  5888 ;; Tracked objects:
  5889 ;;		On entry : 300/100
  5890 ;;		On exit  : 300/100
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5893 ;;      Params:         0       0       3       0       0
  5894 ;;      Locals:         0       0       5       0       0
  5895 ;;      Temps:          0       0       0       0       0
  5896 ;;      Totals:         0       0       8       0       0
  5897 ;;Total ram usage:        8 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:   10
  5900 ;; This function calls:
  5901 ;;		Nothing
  5902 ;; This function is called by:
  5903 ;;		___flmul
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           
  5908                           ;psect for function __Umul8_16
  5909  1590                     __Umul8_16:	
  5910                           
  5911                           ;incstack = 0
  5912 ;; hardware stack exceeded
  5913                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  5914                           ;__Umul8_16@multiplier stored from wreg
  5915  1590  00A5               	movwf	__Umul8_16@multiplier^(0+128)
  5916  1591  01A3               	clrf	__Umul8_16@product^(0+128)
  5917  1592  01A4               	clrf	(__Umul8_16@product+1)^(0+128)
  5918  1593  0820               	movf	__Umul8_16@multiplicand^(0+128),w
  5919  1594  00A6               	movwf	__Umul8_16@word_mpld^(0+128)
  5920  1595  01A7               	clrf	(__Umul8_16@word_mpld+1)^(0+128)
  5921  1596  1C25               	btfss	__Umul8_16@multiplier^(0+128),0
  5922  1597  2D9E               	goto	l4830
  5923  1598  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5924  1599  07A3               	addwf	__Umul8_16@product^(0+128),f
  5925  159A  1803               	skipnc
  5926  159B  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5927  159C  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5928  159D  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5929  159E                     l4830:	
  5930  159E  1003               	clrc
  5931  159F  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5932  15A0  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5933  15A1  1CA5               	btfss	__Umul8_16@multiplier^(0+128),1
  5934  15A2  2DA9               	goto	l4836
  5935  15A3  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5936  15A4  07A3               	addwf	__Umul8_16@product^(0+128),f
  5937  15A5  1803               	skipnc
  5938  15A6  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5939  15A7  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5940  15A8  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5941  15A9                     l4836:	
  5942  15A9  1003               	clrc
  5943  15AA  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5944  15AB  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5945  15AC  1D25               	btfss	__Umul8_16@multiplier^(0+128),2
  5946  15AD  2DB4               	goto	l4842
  5947  15AE  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5948  15AF  07A3               	addwf	__Umul8_16@product^(0+128),f
  5949  15B0  1803               	skipnc
  5950  15B1  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5951  15B2  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5952  15B3  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5953  15B4                     l4842:	
  5954  15B4  1003               	clrc
  5955  15B5  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5956  15B6  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5957  15B7  1DA5               	btfss	__Umul8_16@multiplier^(0+128),3
  5958  15B8  2DBF               	goto	l4848
  5959  15B9  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5960  15BA  07A3               	addwf	__Umul8_16@product^(0+128),f
  5961  15BB  1803               	skipnc
  5962  15BC  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5963  15BD  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5964  15BE  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5965  15BF                     l4848:	
  5966  15BF  1003               	clrc
  5967  15C0  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5968  15C1  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5969  15C2  1E25               	btfss	__Umul8_16@multiplier^(0+128),4
  5970  15C3  2DCA               	goto	l4854
  5971  15C4  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5972  15C5  07A3               	addwf	__Umul8_16@product^(0+128),f
  5973  15C6  1803               	skipnc
  5974  15C7  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5975  15C8  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5976  15C9  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5977  15CA                     l4854:	
  5978  15CA  1003               	clrc
  5979  15CB  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5980  15CC  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5981  15CD  1EA5               	btfss	__Umul8_16@multiplier^(0+128),5
  5982  15CE  2DD5               	goto	l4860
  5983  15CF  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5984  15D0  07A3               	addwf	__Umul8_16@product^(0+128),f
  5985  15D1  1803               	skipnc
  5986  15D2  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5987  15D3  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5988  15D4  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5989  15D5                     l4860:	
  5990  15D5  1003               	clrc
  5991  15D6  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5992  15D7  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5993  15D8  1F25               	btfss	__Umul8_16@multiplier^(0+128),6
  5994  15D9  2DE0               	goto	l4866
  5995  15DA  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5996  15DB  07A3               	addwf	__Umul8_16@product^(0+128),f
  5997  15DC  1803               	skipnc
  5998  15DD  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5999  15DE  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  6000  15DF  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  6001  15E0                     l4866:	
  6002  15E0  1003               	clrc
  6003  15E1  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  6004  15E2  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  6005  15E3  1FA5               	btfss	__Umul8_16@multiplier^(0+128),7
  6006  15E4  2DEB               	goto	l1665
  6007  15E5  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  6008  15E6  07A3               	addwf	__Umul8_16@product^(0+128),f
  6009  15E7  1803               	skipnc
  6010  15E8  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  6011  15E9  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  6012  15EA  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  6013  15EB                     l1665:	
  6014  15EB  0824               	movf	(__Umul8_16@product+1)^(0+128),w
  6015  15EC  00A1               	movwf	(?__Umul8_16+1)^(0+128)
  6016  15ED  0823               	movf	__Umul8_16@product^(0+128),w
  6017  15EE  00A0               	movwf	?__Umul8_16^(0+128)
  6018  15EF  0008               	return
  6019  15F0                     __end_of__Umul8_16:	
  6020  15F0                     __ptext22:	
  6021 ;; *************** function ___xxtofl *****************
  6022 ;; Defined at:
  6023 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;  sign            1    wreg     unsigned char 
  6026 ;;  val             4    0[BANK1 ] long 
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;  sign            1    8[BANK1 ] unsigned char 
  6029 ;;  arg             4   10[BANK1 ] unsigned long 
  6030 ;;  exp             1    9[BANK1 ] unsigned char 
  6031 ;; Return value:  Size  Location     Type
  6032 ;;                  4    0[BANK1 ] unsigned char 
  6033 ;; Registers used:
  6034 ;;		wreg, status,2, status,0
  6035 ;; Tracked objects:
  6036 ;;		On entry : 300/100
  6037 ;;		On exit  : 300/100
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6040 ;;      Params:         0       0       4       0       0
  6041 ;;      Locals:         0       0       6       0       0
  6042 ;;      Temps:          0       0       4       0       0
  6043 ;;      Totals:         0       0      14       0       0
  6044 ;;Total ram usage:       14 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:   10
  6047 ;; This function calls:
  6048 ;;		Nothing
  6049 ;; This function is called by:
  6050 ;;		_CCP_PWM_PERIOD_LOAD
  6051 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  6052 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           
  6057                           ;psect for function ___xxtofl
  6058  15F0                     ___xxtofl:	
  6059                           
  6060                           ;incstack = 0
  6061 ;; hardware stack exceeded
  6062                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  6063                           ;___xxtofl@sign stored from wreg
  6064  15F0  00A8               	movwf	___xxtofl@sign^(0+128)
  6065  15F1  0828               	movf	___xxtofl@sign^(0+128),w
  6066  15F2  1D03               	btfss	3,2
  6067  15F3  1FA3               	btfss	(___xxtofl@val+3)^(0+128),7
  6068  15F4  2E05               	goto	l5612
  6069  15F5  0920               	comf	___xxtofl@val^(0+128),w
  6070  15F6  00AA               	movwf	___xxtofl@arg^(0+128)
  6071  15F7  0921               	comf	(___xxtofl@val^(0+128)+1),w
  6072  15F8  00AB               	movwf	(___xxtofl@arg+1)^(0+128)
  6073  15F9  0922               	comf	(___xxtofl@val^(0+128)+2),w
  6074  15FA  00AC               	movwf	(___xxtofl@arg+2)^(0+128)
  6075  15FB  0923               	comf	(___xxtofl@val^(0+128)+3),w
  6076  15FC  00AD               	movwf	(___xxtofl@arg+3)^(0+128)
  6077  15FD  0AAA               	incf	___xxtofl@arg^(0+128),f
  6078  15FE  1903               	skipnz
  6079  15FF  0AAB               	incf	(___xxtofl@arg+1)^(0+128),f
  6080  1600  1903               	skipnz
  6081  1601  0AAC               	incf	(___xxtofl@arg+2)^(0+128),f
  6082  1602  1903               	skipnz
  6083  1603  0AAD               	incf	(___xxtofl@arg+3)^(0+128),f
  6084  1604  2E0D               	goto	l1626
  6085  1605                     l5612:	
  6086  1605  0823               	movf	(___xxtofl@val+3)^(0+128),w
  6087  1606  00AD               	movwf	(___xxtofl@arg+3)^(0+128)
  6088  1607  0822               	movf	(___xxtofl@val+2)^(0+128),w
  6089  1608  00AC               	movwf	(___xxtofl@arg+2)^(0+128)
  6090  1609  0821               	movf	(___xxtofl@val+1)^(0+128),w
  6091  160A  00AB               	movwf	(___xxtofl@arg+1)^(0+128)
  6092  160B  0820               	movf	___xxtofl@val^(0+128),w
  6093  160C  00AA               	movwf	___xxtofl@arg^(0+128)
  6094  160D                     l1626:	
  6095  160D  0823               	movf	(___xxtofl@val+3)^(0+128),w
  6096  160E  0422               	iorwf	(___xxtofl@val+2)^(0+128),w
  6097  160F  0421               	iorwf	(___xxtofl@val+1)^(0+128),w
  6098  1610  0420               	iorwf	___xxtofl@val^(0+128),w
  6099  1611  1D03               	skipz
  6100  1612  2E18               	goto	l5616
  6101  1613  01A0               	clrf	?___xxtofl^(0+128)
  6102  1614  01A1               	clrf	(?___xxtofl+1)^(0+128)
  6103  1615  01A2               	clrf	(?___xxtofl+2)^(0+128)
  6104  1616  01A3               	clrf	(?___xxtofl+3)^(0+128)
  6105  1617  0008               	return
  6106  1618                     l5616:	
  6107  1618  3096               	movlw	150
  6108  1619  00A9               	movwf	___xxtofl@exp^(0+128)
  6109  161A                     l5620:	
  6110  161A  30FE               	movlw	254
  6111  161B  052D               	andwf	(___xxtofl@arg+3)^(0+128),w
  6112  161C  1903               	btfsc	3,2
  6113  161D  2E32               	goto	l5624
  6114  161E  0AA9               	incf	___xxtofl@exp^(0+128),f
  6115  161F  1003               	clrc
  6116  1620  0CAD               	rrf	(___xxtofl@arg+3)^(0+128),f
  6117  1621  0CAC               	rrf	(___xxtofl@arg+2)^(0+128),f
  6118  1622  0CAB               	rrf	(___xxtofl@arg+1)^(0+128),f
  6119  1623  0CAA               	rrf	___xxtofl@arg^(0+128),f
  6120  1624  2E1A               	goto	l5620
  6121  1625                     l5622:	
  6122  1625  0AA9               	incf	___xxtofl@exp^(0+128),f
  6123  1626  0AAA               	incf	___xxtofl@arg^(0+128),f
  6124  1627  1903               	skipnz
  6125  1628  0AAB               	incf	(___xxtofl@arg+1)^(0+128),f
  6126  1629  1903               	skipnz
  6127  162A  0AAC               	incf	(___xxtofl@arg+2)^(0+128),f
  6128  162B  1903               	skipnz
  6129  162C  0AAD               	incf	(___xxtofl@arg+3)^(0+128),f
  6130  162D  1003               	clrc
  6131  162E  0CAD               	rrf	(___xxtofl@arg+3)^(0+128),f
  6132  162F  0CAC               	rrf	(___xxtofl@arg+2)^(0+128),f
  6133  1630  0CAB               	rrf	(___xxtofl@arg+1)^(0+128),f
  6134  1631  0CAA               	rrf	___xxtofl@arg^(0+128),f
  6135  1632                     l5624:	
  6136  1632  30FF               	movlw	255
  6137  1633  052D               	andwf	(___xxtofl@arg+3)^(0+128),w
  6138  1634  1903               	btfsc	3,2
  6139  1635  2E41               	goto	l5628
  6140  1636  2E25               	goto	l5622
  6141  1637                     l5630:	
  6142  1637  3002               	movlw	2
  6143  1638  0229               	subwf	___xxtofl@exp^(0+128),w
  6144  1639  1C03               	btfss	3,0
  6145  163A  2E43               	goto	l1639
  6146  163B  03A9               	decf	___xxtofl@exp^(0+128),f
  6147  163C  1003               	clrc
  6148  163D  0DAA               	rlf	___xxtofl@arg^(0+128),f
  6149  163E  0DAB               	rlf	(___xxtofl@arg+1)^(0+128),f
  6150  163F  0DAC               	rlf	(___xxtofl@arg+2)^(0+128),f
  6151  1640  0DAD               	rlf	(___xxtofl@arg+3)^(0+128),f
  6152  1641                     l5628:	
  6153  1641  1FAC               	btfss	(___xxtofl@arg+2)^(0+128),7
  6154  1642  2E37               	goto	l5630
  6155  1643                     l1639:	
  6156  1643  1C29               	btfss	___xxtofl@exp^(0+128),0
  6157  1644  13AC               	bcf	(___xxtofl@arg^(0+128)+2),7
  6158  1645  1003               	clrc
  6159  1646  0CA9               	rrf	___xxtofl@exp^(0+128),f
  6160  1647  0829               	movf	___xxtofl@exp^(0+128),w
  6161  1648  00A7               	movwf	(??___xxtofl^(0+128)+3)
  6162  1649  01A6               	clrf	(??___xxtofl^(0+128)+2)
  6163  164A  01A5               	clrf	(??___xxtofl^(0+128)+1)
  6164  164B  01A4               	clrf	??___xxtofl^(0+128)
  6165  164C  0824               	movf	??___xxtofl^(0+128),w
  6166  164D  04AA               	iorwf	___xxtofl@arg^(0+128),f
  6167  164E  0825               	movf	(??___xxtofl+1)^(0+128),w
  6168  164F  04AB               	iorwf	(___xxtofl@arg+1)^(0+128),f
  6169  1650  0826               	movf	(??___xxtofl+2)^(0+128),w
  6170  1651  04AC               	iorwf	(___xxtofl@arg+2)^(0+128),f
  6171  1652  0827               	movf	(??___xxtofl+3)^(0+128),w
  6172  1653  04AD               	iorwf	(___xxtofl@arg+3)^(0+128),f
  6173  1654  0828               	movf	___xxtofl@sign^(0+128),w
  6174  1655  1D03               	btfss	3,2
  6175  1656  1FA3               	btfss	(___xxtofl@val+3)^(0+128),7
  6176  1657  2E59               	goto	l5642
  6177  1658  17AD               	bsf	(___xxtofl@arg^(0+128)+3),7
  6178  1659                     l5642:	
  6179  1659  082D               	movf	(___xxtofl@arg+3)^(0+128),w
  6180  165A  00A3               	movwf	(?___xxtofl+3)^(0+128)
  6181  165B  082C               	movf	(___xxtofl@arg+2)^(0+128),w
  6182  165C  00A2               	movwf	(?___xxtofl+2)^(0+128)
  6183  165D  082B               	movf	(___xxtofl@arg+1)^(0+128),w
  6184  165E  00A1               	movwf	(?___xxtofl+1)^(0+128)
  6185  165F  082A               	movf	___xxtofl@arg^(0+128),w
  6186  1660  00A0               	movwf	?___xxtofl^(0+128)
  6187  1661  0008               	return
  6188  1662                     __end_of___xxtofl:	
  6189  1662                     __ptext26:	
  6190 ;; *************** function ___fldiv *****************
  6191 ;; Defined at:
  6192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;  a               4   14[BANK1 ] unsigned int 
  6195 ;;  b               4   18[BANK1 ] unsigned int 
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;  grs             4   33[BANK1 ] unsigned long 
  6198 ;;  rem             4   26[BANK1 ] unsigned long 
  6199 ;;  new_exp         2   31[BANK1 ] int 
  6200 ;;  aexp            1   38[BANK1 ] unsigned char 
  6201 ;;  bexp            1   37[BANK1 ] unsigned char 
  6202 ;;  sign            1   30[BANK1 ] unsigned char 
  6203 ;; Return value:  Size  Location     Type
  6204 ;;                  4   14[BANK1 ] unsigned char 
  6205 ;; Registers used:
  6206 ;;		wreg, status,2, status,0, btemp+1
  6207 ;; Tracked objects:
  6208 ;;		On entry : 300/100
  6209 ;;		On exit  : 300/100
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6212 ;;      Params:         0       0       8       0       0
  6213 ;;      Locals:         0       0      13       0       0
  6214 ;;      Temps:          0       0       4       0       0
  6215 ;;      Totals:         0       0      25       0       0
  6216 ;;Total ram usage:       25 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; Hardware stack levels required when called:   10
  6219 ;; This function calls:
  6220 ;;		Nothing
  6221 ;; This function is called by:
  6222 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  6223 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           
  6228                           ;psect for function ___fldiv
  6229  1662                     ___fldiv:	
  6230                           
  6231                           ;incstack = 0
  6232 ;; hardware stack exceeded
  6233                           ; Regs used in ___fldiv: [wreg+status,2+status,0+btemp+1]
  6234  1662  0835               	movf	(___fldiv@b^(0+128)+3),w
  6235  1663  00BE               	movwf	___fldiv@sign^(0+128)
  6236  1664  3080               	movlw	128
  6237  1665  05BE               	andwf	___fldiv@sign^(0+128),f
  6238  1666  1003               	clrc
  6239  1667  0D35               	rlf	(___fldiv@b^(0+128)+3),w
  6240  1668  00C5               	movwf	___fldiv@bexp^(0+128)
  6241  1669  1BB4               	btfsc	(___fldiv@b^(0+128)+2),7
  6242  166A  1445               	bsf	___fldiv@bexp^(0+128),0
  6243  166B  0845               	movf	___fldiv@bexp^(0+128),w
  6244  166C  1903               	btfsc	3,2
  6245  166D  2E77               	goto	l1542
  6246  166E  0F45               	incfsz	___fldiv@bexp^(0+128),w
  6247  166F  2E74               	goto	l1543
  6248  1670  01B2               	clrf	___fldiv@b^(0+128)
  6249  1671  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6250  1672  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6251  1673  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6252  1674                     l1543:	
  6253  1674  17B4               	bsf	(___fldiv@b^(0+128)+2),7
  6254  1675  01B5               	clrf	(___fldiv@b^(0+128)+3)
  6255  1676  2E7B               	goto	l5362
  6256  1677                     l1542:	
  6257  1677  01B2               	clrf	___fldiv@b^(0+128)
  6258  1678  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6259  1679  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6260  167A  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6261  167B                     l5362:	
  6262  167B  0831               	movf	(___fldiv@a^(0+128)+3),w
  6263  167C  3980               	andlw	128
  6264  167D  06BE               	xorwf	___fldiv@sign^(0+128),f
  6265  167E  1003               	clrc
  6266  167F  0D31               	rlf	(___fldiv@a^(0+128)+3),w
  6267  1680  00C6               	movwf	___fldiv@aexp^(0+128)
  6268  1681  1BB0               	btfsc	(___fldiv@a^(0+128)+2),7
  6269  1682  1446               	bsf	___fldiv@aexp^(0+128),0
  6270  1683  0846               	movf	___fldiv@aexp^(0+128),w
  6271  1684  1903               	btfsc	3,2
  6272  1685  2E8F               	goto	l1546
  6273  1686  0F46               	incfsz	___fldiv@aexp^(0+128),w
  6274  1687  2E8C               	goto	l1547
  6275  1688  01AE               	clrf	___fldiv@a^(0+128)
  6276  1689  01AF               	clrf	(___fldiv@a+1)^(0+128)
  6277  168A  01B0               	clrf	(___fldiv@a+2)^(0+128)
  6278  168B  01B1               	clrf	(___fldiv@a+3)^(0+128)
  6279  168C                     l1547:	
  6280  168C  17B0               	bsf	(___fldiv@a^(0+128)+2),7
  6281  168D  01B1               	clrf	(___fldiv@a^(0+128)+3)
  6282  168E  2E93               	goto	l5376
  6283  168F                     l1546:	
  6284  168F  01AE               	clrf	___fldiv@a^(0+128)
  6285  1690  01AF               	clrf	(___fldiv@a+1)^(0+128)
  6286  1691  01B0               	clrf	(___fldiv@a+2)^(0+128)
  6287  1692  01B1               	clrf	(___fldiv@a+3)^(0+128)
  6288  1693                     l5376:	
  6289  1693  0831               	movf	(___fldiv@a+3)^(0+128),w
  6290  1694  0430               	iorwf	(___fldiv@a+2)^(0+128),w
  6291  1695  042F               	iorwf	(___fldiv@a+1)^(0+128),w
  6292  1696  042E               	iorwf	___fldiv@a^(0+128),w
  6293  1697  1D03               	skipz
  6294  1698  2EAC               	goto	l5388
  6295  1699  3080               	movlw	128
  6296  169A  01B2               	clrf	___fldiv@b^(0+128)
  6297  169B  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6298  169C  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6299  169D  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6300  169E  04B4               	iorwf	(___fldiv@b^(0+128)+2),f
  6301  169F  307F               	movlw	127
  6302  16A0  04B5               	iorwf	((___fldiv@b+1)^(0+128)+2),f
  6303  16A1                     L3:	
  6304  16A1  083E               	movf	___fldiv@sign^(0+128),w
  6305  16A2  04B5               	iorwf	(___fldiv@b^(0+128)+3),f
  6306  16A3  0835               	movf	(___fldiv@b+3)^(0+128),w
  6307  16A4  00B1               	movwf	(?___fldiv+3)^(0+128)
  6308  16A5  0834               	movf	(___fldiv@b+2)^(0+128),w
  6309  16A6  00B0               	movwf	(?___fldiv+2)^(0+128)
  6310  16A7  0833               	movf	(___fldiv@b+1)^(0+128),w
  6311  16A8  00AF               	movwf	(?___fldiv+1)^(0+128)
  6312  16A9  0832               	movf	___fldiv@b^(0+128),w
  6313  16AA  00AE               	movwf	?___fldiv^(0+128)
  6314  16AB  0008               	return
  6315  16AC                     l5388:	
  6316  16AC  0845               	movf	___fldiv@bexp^(0+128),w
  6317  16AD  1D03               	btfss	3,2
  6318  16AE  2EB4               	goto	l5396
  6319  16AF  01AE               	clrf	?___fldiv^(0+128)
  6320  16B0  01AF               	clrf	(?___fldiv+1)^(0+128)
  6321  16B1  01B0               	clrf	(?___fldiv+2)^(0+128)
  6322  16B2  01B1               	clrf	(?___fldiv+3)^(0+128)
  6323  16B3  0008               	return
  6324  16B4                     l5396:	
  6325  16B4  0845               	movf	___fldiv@bexp^(0+128),w
  6326  16B5  00BF               	movwf	___fldiv@new_exp^(0+128)
  6327  16B6  01C0               	clrf	(___fldiv@new_exp+1)^(0+128)
  6328  16B7  0846               	movf	___fldiv@aexp^(0+128),w
  6329  16B8  02BF               	subwf	___fldiv@new_exp^(0+128),f
  6330  16B9  1C03               	skipc
  6331  16BA  03C0               	decf	(___fldiv@new_exp+1)^(0+128),f
  6332  16BB  307F               	movlw	127
  6333  16BC  07BF               	addwf	___fldiv@new_exp^(0+128),f
  6334  16BD  1803               	skipnc
  6335  16BE  0AC0               	incf	(___fldiv@new_exp+1)^(0+128),f
  6336  16BF  0835               	movf	(___fldiv@b+3)^(0+128),w
  6337  16C0  00BD               	movwf	(___fldiv@rem+3)^(0+128)
  6338  16C1  0834               	movf	(___fldiv@b+2)^(0+128),w
  6339  16C2  00BC               	movwf	(___fldiv@rem+2)^(0+128)
  6340  16C3  0833               	movf	(___fldiv@b+1)^(0+128),w
  6341  16C4  00BB               	movwf	(___fldiv@rem+1)^(0+128)
  6342  16C5  0832               	movf	___fldiv@b^(0+128),w
  6343  16C6  00BA               	movwf	___fldiv@rem^(0+128)
  6344  16C7  01B2               	clrf	___fldiv@b^(0+128)
  6345  16C8  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6346  16C9  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6347  16CA  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6348  16CB  01C1               	clrf	___fldiv@grs^(0+128)
  6349  16CC  01C2               	clrf	(___fldiv@grs+1)^(0+128)
  6350  16CD  01C3               	clrf	(___fldiv@grs+2)^(0+128)
  6351  16CE  01C4               	clrf	(___fldiv@grs+3)^(0+128)
  6352  16CF  01C6               	clrf	___fldiv@aexp^(0+128)
  6353  16D0                     l5422:	
  6354  16D0  301A               	movlw	26
  6355  16D1  0246               	subwf	___fldiv@aexp^(0+128),w
  6356  16D2  1803               	btfsc	3,0
  6357  16D3  2F09               	goto	l5424
  6358  16D4  0846               	movf	___fldiv@aexp^(0+128),w
  6359  16D5  1903               	btfsc	3,2
  6360  16D6  2EE8               	goto	l5414
  6361  16D7  1003               	clrc
  6362  16D8  0DBA               	rlf	___fldiv@rem^(0+128),f
  6363  16D9  0DBB               	rlf	(___fldiv@rem+1)^(0+128),f
  6364  16DA  0DBC               	rlf	(___fldiv@rem+2)^(0+128),f
  6365  16DB  0DBD               	rlf	(___fldiv@rem+3)^(0+128),f
  6366  16DC  1003               	clrc
  6367  16DD  0DB2               	rlf	___fldiv@b^(0+128),f
  6368  16DE  0DB3               	rlf	(___fldiv@b+1)^(0+128),f
  6369  16DF  0DB4               	rlf	(___fldiv@b+2)^(0+128),f
  6370  16E0  0DB5               	rlf	(___fldiv@b+3)^(0+128),f
  6371  16E1  1BC4               	btfsc	(___fldiv@grs+3)^(0+128),7
  6372  16E2  1432               	bsf	___fldiv@b^(0+128),0
  6373  16E3  1003               	clrc
  6374  16E4  0DC1               	rlf	___fldiv@grs^(0+128),f
  6375  16E5  0DC2               	rlf	(___fldiv@grs+1)^(0+128),f
  6376  16E6  0DC3               	rlf	(___fldiv@grs+2)^(0+128),f
  6377  16E7  0DC4               	rlf	(___fldiv@grs+3)^(0+128),f
  6378  16E8                     l5414:	
  6379  16E8  0831               	movf	(___fldiv@a+3)^(0+128),w
  6380  16E9  023D               	subwf	(___fldiv@rem+3)^(0+128),w
  6381  16EA  1D03               	skipz
  6382  16EB  2EF6               	goto	u4985
  6383  16EC  0830               	movf	(___fldiv@a+2)^(0+128),w
  6384  16ED  023C               	subwf	(___fldiv@rem+2)^(0+128),w
  6385  16EE  1D03               	skipz
  6386  16EF  2EF6               	goto	u4985
  6387  16F0  082F               	movf	(___fldiv@a+1)^(0+128),w
  6388  16F1  023B               	subwf	(___fldiv@rem+1)^(0+128),w
  6389  16F2  1D03               	skipz
  6390  16F3  2EF6               	goto	u4985
  6391  16F4  082E               	movf	___fldiv@a^(0+128),w
  6392  16F5  023A               	subwf	___fldiv@rem^(0+128),w
  6393  16F6                     u4985:	
  6394  16F6  1C03               	skipc
  6395  16F7  2F07               	goto	l5420
  6396  16F8  1744               	bsf	(___fldiv@grs^(0+128)+3),6
  6397  16F9  082E               	movf	___fldiv@a^(0+128),w
  6398  16FA  02BA               	subwf	___fldiv@rem^(0+128),f
  6399  16FB  082F               	movf	(___fldiv@a+1)^(0+128),w
  6400  16FC  1C03               	skipc
  6401  16FD  0F2F               	incfsz	(___fldiv@a+1)^(0+128),w
  6402  16FE  02BB               	subwf	(___fldiv@rem+1)^(0+128),f
  6403  16FF  0830               	movf	(___fldiv@a+2)^(0+128),w
  6404  1700  1C03               	skipc
  6405  1701  0F30               	incfsz	(___fldiv@a+2)^(0+128),w
  6406  1702  02BC               	subwf	(___fldiv@rem+2)^(0+128),f
  6407  1703  0831               	movf	(___fldiv@a+3)^(0+128),w
  6408  1704  1C03               	skipc
  6409  1705  0F31               	incfsz	(___fldiv@a+3)^(0+128),w
  6410  1706  02BD               	subwf	(___fldiv@rem+3)^(0+128),f
  6411  1707                     l5420:	
  6412  1707  0AC6               	incf	___fldiv@aexp^(0+128),f
  6413  1708  2ED0               	goto	l5422
  6414  1709                     l5424:	
  6415  1709  083D               	movf	(___fldiv@rem+3)^(0+128),w
  6416  170A  043C               	iorwf	(___fldiv@rem+2)^(0+128),w
  6417  170B  043B               	iorwf	(___fldiv@rem+1)^(0+128),w
  6418  170C  043A               	iorwf	___fldiv@rem^(0+128),w
  6419  170D  1D03               	btfss	3,2
  6420  170E  1441               	bsf	___fldiv@grs^(0+128),0
  6421  170F                     l5438:	
  6422  170F  1BB4               	btfsc	(___fldiv@b+2)^(0+128),7
  6423  1710  2F22               	goto	l5440
  6424  1711  1003               	clrc
  6425  1712  0DB2               	rlf	___fldiv@b^(0+128),f
  6426  1713  0DB3               	rlf	(___fldiv@b+1)^(0+128),f
  6427  1714  0DB4               	rlf	(___fldiv@b+2)^(0+128),f
  6428  1715  0DB5               	rlf	(___fldiv@b+3)^(0+128),f
  6429  1716  1BC4               	btfsc	(___fldiv@grs+3)^(0+128),7
  6430  1717  1432               	bsf	___fldiv@b^(0+128),0
  6431  1718  30FF               	movlw	-1
  6432  1719  1003               	clrc
  6433  171A  0DC1               	rlf	___fldiv@grs^(0+128),f
  6434  171B  0DC2               	rlf	(___fldiv@grs+1)^(0+128),f
  6435  171C  0DC3               	rlf	(___fldiv@grs+2)^(0+128),f
  6436  171D  0DC4               	rlf	(___fldiv@grs+3)^(0+128),f
  6437  171E  07BF               	addwf	___fldiv@new_exp^(0+128),f
  6438  171F  1C03               	skipc
  6439  1720  03C0               	decf	(___fldiv@new_exp+1)^(0+128),f
  6440  1721  2F0F               	goto	l5438
  6441  1722                     l5440:	
  6442  1722  01C6               	clrf	___fldiv@aexp^(0+128)
  6443  1723  1FC4               	btfss	(___fldiv@grs+3)^(0+128),7
  6444  1724  2F38               	goto	l5450
  6445  1725  0841               	movf	___fldiv@grs^(0+128),w
  6446  1726  00B6               	movwf	??___fldiv^(0+128)
  6447  1727  0842               	movf	(___fldiv@grs+1)^(0+128),w
  6448  1728  00B7               	movwf	(??___fldiv^(0+128)+1)
  6449  1729  0843               	movf	(___fldiv@grs+2)^(0+128),w
  6450  172A  00B8               	movwf	(??___fldiv^(0+128)+2)
  6451  172B  307F               	movlw	127
  6452  172C  0544               	andwf	(___fldiv@grs+3)^(0+128),w
  6453  172D  00B9               	movwf	(??___fldiv^(0+128)+3)
  6454  172E  0839               	movf	(??___fldiv+3)^(0+128),w
  6455  172F  0438               	iorwf	(??___fldiv+2)^(0+128),w
  6456  1730  0437               	iorwf	(??___fldiv+1)^(0+128),w
  6457  1731  0436               	iorwf	??___fldiv^(0+128),w
  6458  1732  1903               	skipnz
  6459  1733  1832               	btfsc	___fldiv@b^(0+128),0
  6460  1734  2F36               	goto	l5446
  6461  1735  2F38               	goto	l5450
  6462  1736                     l5446:	
  6463  1736  01C6               	clrf	___fldiv@aexp^(0+128)
  6464  1737  0AC6               	incf	___fldiv@aexp^(0+128),f
  6465  1738                     l5450:	
  6466  1738  0846               	movf	___fldiv@aexp^(0+128),w
  6467  1739  1903               	btfsc	3,2
  6468  173A  2F4C               	goto	l5460
  6469  173B  0AB2               	incf	___fldiv@b^(0+128),f
  6470  173C  1903               	skipnz
  6471  173D  0AB3               	incf	(___fldiv@b+1)^(0+128),f
  6472  173E  1903               	skipnz
  6473  173F  0AB4               	incf	(___fldiv@b+2)^(0+128),f
  6474  1740  1903               	skipnz
  6475  1741  0AB5               	incf	(___fldiv@b+3)^(0+128),f
  6476  1742  1C35               	btfss	(___fldiv@b+3)^(0+128),0
  6477  1743  2F4C               	goto	l5460
  6478  1744  0D35               	rlf	(___fldiv@b+3)^(0+128),w
  6479  1745  0CB5               	rrf	(___fldiv@b+3)^(0+128),f
  6480  1746  0CB4               	rrf	(___fldiv@b+2)^(0+128),f
  6481  1747  0CB3               	rrf	(___fldiv@b+1)^(0+128),f
  6482  1748  0CB2               	rrf	___fldiv@b^(0+128),f
  6483  1749  0ABF               	incf	___fldiv@new_exp^(0+128),f
  6484  174A  1903               	skipnz
  6485  174B  0AC0               	incf	(___fldiv@new_exp+1)^(0+128),f
  6486  174C                     l5460:	
  6487  174C  0840               	movf	(___fldiv@new_exp+1)^(0+128),w
  6488  174D  3A80               	xorlw	128
  6489  174E  00FF               	movwf	127
  6490  174F  3080               	movlw	128
  6491  1750  027F               	subwf	127,w
  6492  1751  1D03               	skipz
  6493  1752  2F55               	goto	u5085
  6494  1753  30FF               	movlw	255
  6495  1754  023F               	subwf	___fldiv@new_exp^(0+128),w
  6496  1755                     u5085:	
  6497  1755  1C03               	skipc
  6498  1756  2F60               	goto	l5466
  6499  1757  30FF               	movlw	255
  6500  1758  1683               	bsf	3,5	;RP0=1, select bank1
  6501  1759  1303               	bcf	3,6	;RP1=0, select bank1
  6502  175A  00BF               	movwf	___fldiv@new_exp^(0+128)
  6503  175B  01C0               	clrf	(___fldiv@new_exp+1)^(0+128)
  6504  175C  01B2               	clrf	___fldiv@b^(0+128)
  6505  175D  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6506  175E  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6507  175F  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6508  1760                     l5466:	
  6509  1760  1683               	bsf	3,5	;RP0=1, select bank1
  6510  1761  1303               	bcf	3,6	;RP1=0, select bank1
  6511  1762  0840               	movf	(___fldiv@new_exp+1)^(0+128),w
  6512  1763  3A80               	xorlw	128
  6513  1764  00FF               	movwf	127
  6514  1765  3080               	movlw	128
  6515  1766  027F               	subwf	127,w
  6516  1767  1D03               	skipz
  6517  1768  2F6B               	goto	u5095
  6518  1769  3001               	movlw	1
  6519  176A  023F               	subwf	___fldiv@new_exp^(0+128),w
  6520  176B                     u5095:	
  6521  176B  1803               	skipnc
  6522  176C  2F76               	goto	l5472
  6523  176D  1683               	bsf	3,5	;RP0=1, select bank1
  6524  176E  1303               	bcf	3,6	;RP1=0, select bank1
  6525  176F  01BF               	clrf	___fldiv@new_exp^(0+128)
  6526  1770  01C0               	clrf	(___fldiv@new_exp+1)^(0+128)
  6527  1771  01B2               	clrf	___fldiv@b^(0+128)
  6528  1772  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6529  1773  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6530  1774  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6531  1775  01BE               	clrf	___fldiv@sign^(0+128)
  6532  1776                     l5472:	
  6533  1776  1683               	bsf	3,5	;RP0=1, select bank1
  6534  1777  1303               	bcf	3,6	;RP1=0, select bank1
  6535  1778  083F               	movf	___fldiv@new_exp^(0+128),w
  6536  1779  00C5               	movwf	___fldiv@bexp^(0+128)
  6537  177A  1C45               	btfss	___fldiv@bexp^(0+128),0
  6538  177B  2F7E               	goto	l1571
  6539  177C  17B4               	bsf	(___fldiv@b^(0+128)+2),7
  6540  177D  2F7F               	goto	l5478
  6541  177E                     l1571:	
  6542  177E  13B4               	bcf	(___fldiv@b^(0+128)+2),7
  6543  177F                     l5478:	
  6544  177F  1003               	clrc
  6545  1780  0C45               	rrf	___fldiv@bexp^(0+128),w
  6546  1781  00B5               	movwf	(___fldiv@b^(0+128)+3)
  6547  1782  2EA1               	goto	L3
  6548  1783                     __end_of___fldiv:	
  6549  1783                     __ptext23:	
  6550 ;; *************** function ___fltol *****************
  6551 ;; Defined at:
  6552 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;  f1              4    4[BANK3 ] unsigned char 
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;  exp1            1   13[BANK3 ] unsigned char 
  6557 ;;  sign1           1   12[BANK3 ] unsigned char 
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  4    4[BANK3 ] long 
  6560 ;; Registers used:
  6561 ;;		wreg, status,2, status,0
  6562 ;; Tracked objects:
  6563 ;;		On entry : 300/300
  6564 ;;		On exit  : 300/300
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6567 ;;      Params:         0       0       0       4       0
  6568 ;;      Locals:         0       0       0       2       0
  6569 ;;      Temps:          0       0       0       4       0
  6570 ;;      Totals:         0       0       0      10       0
  6571 ;;Total ram usage:       10 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:   10
  6574 ;; This function calls:
  6575 ;;		Nothing
  6576 ;; This function is called by:
  6577 ;;		_CCP_PWM_PERIOD_LOAD
  6578 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  6579 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  6580 ;; This function uses a non-reentrant model
  6581 ;;
  6582                           
  6583                           
  6584                           ;psect for function ___fltol
  6585  1783                     ___fltol:	
  6586                           
  6587                           ;incstack = 0
  6588 ;; hardware stack exceeded
  6589                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  6590  1783  1003               	clrc
  6591  1784  0D58               	rlf	(___fltol@f1+2)^(0+384),w
  6592  1785  0D59               	rlf	(___fltol@f1+3)^(0+384),w
  6593  1786  00DF               	movwf	___fltol@exp1^(0+384)
  6594  1787  085F               	movf	___fltol@exp1^(0+384),w
  6595  1788  1D03               	btfss	3,2
  6596  1789  2F8F               	goto	l5132
  6597  178A                     l5130:	
  6598  178A  01D6               	clrf	?___fltol^(0+384)
  6599  178B  01D7               	clrf	(?___fltol+1)^(0+384)
  6600  178C  01D8               	clrf	(?___fltol+2)^(0+384)
  6601  178D  01D9               	clrf	(?___fltol+3)^(0+384)
  6602  178E  0008               	return
  6603  178F                     l5132:	
  6604  178F  0856               	movf	___fltol@f1^(0+384),w
  6605  1790  00DA               	movwf	??___fltol^(0+384)
  6606  1791  0857               	movf	(___fltol@f1+1)^(0+384),w
  6607  1792  00DB               	movwf	(??___fltol^(0+384)+1)
  6608  1793  0858               	movf	(___fltol@f1+2)^(0+384),w
  6609  1794  00DC               	movwf	(??___fltol^(0+384)+2)
  6610  1795  0859               	movf	(___fltol@f1+3)^(0+384),w
  6611  1796  00DD               	movwf	(??___fltol^(0+384)+3)
  6612  1797  301F               	movlw	31
  6613  1798                     u4395:	
  6614  1798  1003               	clrc
  6615  1799  0CDD               	rrf	(??___fltol^(0+384)+3),f
  6616  179A  0CDC               	rrf	(??___fltol^(0+384)+2),f
  6617  179B  0CDB               	rrf	(??___fltol^(0+384)+1),f
  6618  179C  0CDA               	rrf	??___fltol^(0+384),f
  6619  179D  3EFF               	addlw	-1
  6620  179E  1D03               	skipz
  6621  179F  2F98               	goto	u4395
  6622  17A0  085A               	movf	??___fltol^(0+384),w
  6623  17A1  00DE               	movwf	___fltol@sign1^(0+384)
  6624  17A2  3096               	movlw	150
  6625  17A3  17D8               	bsf	(___fltol@f1^(0+384)+2),7
  6626  17A4  01D9               	clrf	(___fltol@f1+3)^(0+384)
  6627  17A5  02DF               	subwf	___fltol@exp1^(0+384),f
  6628  17A6  1FDF               	btfss	___fltol@exp1^(0+384),7
  6629  17A7  2FB5               	goto	l5150
  6630  17A8  085F               	movf	___fltol@exp1^(0+384),w
  6631  17A9  3A80               	xorlw	128
  6632  17AA  3E97               	addlw	151
  6633  17AB  1C03               	btfss	3,0
  6634  17AC  2F8A               	goto	l5130
  6635  17AD                     l5146:	
  6636  17AD  1003               	clrc
  6637  17AE  0CD9               	rrf	(___fltol@f1+3)^(0+384),f
  6638  17AF  0CD8               	rrf	(___fltol@f1+2)^(0+384),f
  6639  17B0  0CD7               	rrf	(___fltol@f1+1)^(0+384),f
  6640  17B1  0CD6               	rrf	___fltol@f1^(0+384),f
  6641  17B2  0FDF               	incfsz	___fltol@exp1^(0+384),f
  6642  17B3  2FAD               	goto	l5146
  6643  17B4  2FC3               	goto	l5158
  6644  17B5                     l5150:	
  6645  17B5  3020               	movlw	32
  6646  17B6  025F               	subwf	___fltol@exp1^(0+384),w
  6647  17B7  1803               	btfsc	3,0
  6648  17B8  2F8A               	goto	l5130
  6649  17B9                     l5156:	
  6650  17B9  085F               	movf	___fltol@exp1^(0+384),w
  6651  17BA  1903               	btfsc	3,2
  6652  17BB  2FC3               	goto	l5158
  6653  17BC  1003               	clrc
  6654  17BD  0DD6               	rlf	___fltol@f1^(0+384),f
  6655  17BE  0DD7               	rlf	(___fltol@f1+1)^(0+384),f
  6656  17BF  0DD8               	rlf	(___fltol@f1+2)^(0+384),f
  6657  17C0  0DD9               	rlf	(___fltol@f1+3)^(0+384),f
  6658  17C1  03DF               	decf	___fltol@exp1^(0+384),f
  6659  17C2  2FB9               	goto	l5156
  6660  17C3                     l5158:	
  6661  17C3  085E               	movf	___fltol@sign1^(0+384),w
  6662  17C4  1903               	btfsc	3,2
  6663  17C5  0008               	return
  6664  17C6  09D6               	comf	___fltol@f1^(0+384),f
  6665  17C7  09D7               	comf	(___fltol@f1+1)^(0+384),f
  6666  17C8  09D8               	comf	(___fltol@f1+2)^(0+384),f
  6667  17C9  09D9               	comf	(___fltol@f1+3)^(0+384),f
  6668  17CA  0AD6               	incf	___fltol@f1^(0+384),f
  6669  17CB  1903               	skipnz
  6670  17CC  0AD7               	incf	(___fltol@f1+1)^(0+384),f
  6671  17CD  1903               	skipnz
  6672  17CE  0AD8               	incf	(___fltol@f1+2)^(0+384),f
  6673  17CF  1903               	skipnz
  6674  17D0  0AD9               	incf	(___fltol@f1+3)^(0+384),f
  6675  17D1  0008               	return
  6676  17D2                     __end_of___fltol:	
  6677  17D2                     __ptext27:	
  6678 ;; *************** function _CCP2_INIT *****************
  6679 ;; Defined at:
  6680 ;;		line 59 in file "CCP.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;		None
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;		None
  6685 ;; Return value:  Size  Location     Type
  6686 ;;                  1    wreg      void 
  6687 ;; Registers used:
  6688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6689 ;; Tracked objects:
  6690 ;;		On entry : 300/300
  6691 ;;		On exit  : 300/0
  6692 ;;		Unchanged: 0/0
  6693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6694 ;;      Params:         0       0       0       0       0
  6695 ;;      Locals:         0       0       0       0       0
  6696 ;;      Temps:          0       0       0       0       0
  6697 ;;      Totals:         0       0       0       0       0
  6698 ;;Total ram usage:        0 bytes
  6699 ;; Hardware stack levels used:    1
  6700 ;; Hardware stack levels required when called:   12
  6701 ;; This function calls:
  6702 ;;		_GPIO_PIN_INIT
  6703 ;;		_TIMER2_INIT
  6704 ;;		_TIMER2_START
  6705 ;; This function is called by:
  6706 ;;		_HEATER_INIT
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           
  6711                           ;psect for function _CCP2_INIT
  6712  17D2                     _CCP2_INIT:	
  6713                           
  6714                           ;CCP.c: 74:  {;CCP.c: 75:   TIMER2_INIT();
  6715                           
  6716                           ;incstack = 0
  6717 ;; hardware stack exceeded
  6718                           ; Regs used in _CCP2_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6719  17D2  27E4  160A  118A   	fcall	_TIMER2_INIT
  6720                           
  6721                           ;CCP.c: 76:         TIMER2_START();
  6722  17D5  27F2               	fcall	_TIMER2_START
  6723                           
  6724                           ;CCP.c: 77:   GPIO_PIN_INIT( (0x0007), GPIO_PIN_1, GPIO_PIN_OUT );
  6725  17D6  1683               	bsf	3,5	;RP0=1, select bank1
  6726  17D7  3007               	movlw	7
  6727  17D8  01A3               	clrf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  6728  17D9  0AA3               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),f
  6729  17DA  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  6730  17DB  120A  118A  2549   	fcall	_GPIO_PIN_INIT
  6731                           
  6732                           ;CCP.c: 78:  };CCP.c: 90:  (CCP2CONbits.CCP2M = 12 ) ;
  6733  17DE  1283               	bcf	3,5	;RP0=0, select bank0
  6734  17DF  081D               	movf	29,w	;volatile
  6735  17E0  39F0               	andlw	-16
  6736  17E1  380C               	iorlw	12
  6737  17E2  009D               	movwf	29	;volatile
  6738  17E3  0008               	return
  6739  17E4                     __end_of_CCP2_INIT:	
  6740  17E4                     __ptext29:	
  6741 ;; *************** function _TIMER2_INIT *****************
  6742 ;; Defined at:
  6743 ;;		line 32 in file "TIMR2.c"
  6744 ;; Parameters:    Size  Location     Type
  6745 ;;		None
  6746 ;; Auto vars:     Size  Location     Type
  6747 ;;		None
  6748 ;; Return value:  Size  Location     Type
  6749 ;;                  1    wreg      void 
  6750 ;; Registers used:
  6751 ;;		wreg, status,2, status,0, pclath, cstack
  6752 ;; Tracked objects:
  6753 ;;		On entry : 300/300
  6754 ;;		On exit  : 300/0
  6755 ;;		Unchanged: 0/0
  6756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6757 ;;      Params:         0       0       0       0       0
  6758 ;;      Locals:         0       0       0       0       0
  6759 ;;      Temps:          0       0       0       0       0
  6760 ;;      Totals:         0       0       0       0       0
  6761 ;;Total ram usage:        0 bytes
  6762 ;; Hardware stack levels used:    1
  6763 ;; Hardware stack levels required when called:   11
  6764 ;; This function calls:
  6765 ;;		_TIMER2_STOP
  6766 ;; This function is called by:
  6767 ;;		_CCP1_INIT
  6768 ;;		_CCP2_INIT
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772                           
  6773                           ;psect for function _TIMER2_INIT
  6774  17E4                     _TIMER2_INIT:	
  6775                           
  6776                           ;TIMR2.c: 35:  ( T2CONbits.T2CKPS = TIMER2_PRE_CLK_16 );
  6777                           
  6778                           ;incstack = 0
  6779 ;; hardware stack exceeded
  6780                           ; Regs used in _TIMER2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6781  17E4  1283               	bcf	3,5	;RP0=0, select bank0
  6782  17E5  1303               	bcf	3,6	;RP1=0, select bank0
  6783  17E6  0812               	movf	18,w	;volatile
  6784  17E7  39FC               	andlw	-4
  6785  17E8  3802               	iorlw	2
  6786  17E9  0092               	movwf	18	;volatile
  6787                           
  6788                           ;TIMR2.c: 37:  (T2CONbits.TOUTPS = TIMER2_POST_CLK_16 );
  6789  17EA  3078               	movlw	120
  6790  17EB  0492               	iorwf	18,f	;volatile
  6791                           
  6792                           ;TIMR2.c: 39:  ( TMR2IE = TIMER2_POLLING_BASED );
  6793  17EC  1683               	bsf	3,5	;RP0=1, select bank1
  6794  17ED  108C               	bcf	12,1	;volatile
  6795                           
  6796                           ;TIMR2.c: 41:  (TMR2 = ((256) - ((0) * ((double) (8 * 1000) / ( 4 * 256 ) ) )) );
  6797  17EE  3000               	movlw	0
  6798  17EF  1283               	bcf	3,5	;RP0=0, select bank0
  6799  17F0  0191               	clrf	17	;volatile
  6800                           
  6801                           ;TIMR2.c: 42:     TIMER2_STOP();
  6802  17F1  2FF4               	ljmp	l4726
  6803  17F2                     __end_of_TIMER2_INIT:	
  6804  17F2                     __ptext28:	
  6805 ;; *************** function _TIMER2_START *****************
  6806 ;; Defined at:
  6807 ;;		line 54 in file "TIMR2.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;		None
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;		None
  6812 ;; Return value:  Size  Location     Type
  6813 ;;                  1    wreg      void 
  6814 ;; Registers used:
  6815 ;;		None
  6816 ;; Tracked objects:
  6817 ;;		On entry : 300/0
  6818 ;;		On exit  : 300/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6821 ;;      Params:         0       0       0       0       0
  6822 ;;      Locals:         0       0       0       0       0
  6823 ;;      Temps:          0       0       0       0       0
  6824 ;;      Totals:         0       0       0       0       0
  6825 ;;Total ram usage:        0 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; Hardware stack levels required when called:   10
  6828 ;; This function calls:
  6829 ;;		Nothing
  6830 ;; This function is called by:
  6831 ;;		_CCP1_INIT
  6832 ;;		_CCP2_INIT
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           
  6837                           ;psect for function _TIMER2_START
  6838  17F2                     _TIMER2_START:	
  6839                           
  6840                           ;TIMR2.c: 56:     ( TMR2ON = GPIO_PIN_ON );
  6841                           
  6842                           ;incstack = 0
  6843 ;; hardware stack exceeded
  6844                           ; Regs used in _TIMER2_START: []
  6845  17F2  1512               	bsf	18,2	;volatile
  6846  17F3  0008               	return
  6847  17F4                     __end_of_TIMER2_START:	
  6848  17F4                     __ptext30:	
  6849 ;; *************** function _TIMER2_STOP *****************
  6850 ;; Defined at:
  6851 ;;		line 58 in file "TIMR2.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		None
  6860 ;; Tracked objects:
  6861 ;;		On entry : 300/0
  6862 ;;		On exit  : 300/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6865 ;;      Params:         0       0       0       0       0
  6866 ;;      Locals:         0       0       0       0       0
  6867 ;;      Temps:          0       0       0       0       0
  6868 ;;      Totals:         0       0       0       0       0
  6869 ;;Total ram usage:        0 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:   10
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		_TIMER2_INIT
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           
  6880                           ;psect for function _TIMER2_STOP
  6881  17F4                     _TIMER2_STOP:	
  6882  17F4                     l4726:	
  6883                           ;incstack = 0
  6884 ;; hardware stack exceeded
  6885                           ; Regs used in _TIMER2_STOP: []
  6886                           
  6887                           
  6888                           ;TIMR2.c: 60:     ( TMR2ON = GPIO_PIN_OFF );
  6889  17F4  1112               	bcf	18,2	;volatile
  6890  17F5  0008               	return
  6891  17F6                     __end_of_TIMER2_STOP:	
  6892  17F6                     __ptext18:	
  6893 ;; *************** function _HEATER_SET_STATE *****************
  6894 ;; Defined at:
  6895 ;;		line 71 in file "HEATER.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;  HEATER_STATE    1    wreg     unsigned char 
  6898 ;; Auto vars:     Size  Location     Type
  6899 ;;  HEATER_STATE    1    0[BANK1 ] unsigned char 
  6900 ;; Return value:  Size  Location     Type
  6901 ;;                  1    wreg      void 
  6902 ;; Registers used:
  6903 ;;		wreg
  6904 ;; Tracked objects:
  6905 ;;		On entry : 300/0
  6906 ;;		On exit  : 300/300
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6909 ;;      Params:         0       0       0       0       0
  6910 ;;      Locals:         0       0       1       0       0
  6911 ;;      Temps:          0       0       0       0       0
  6912 ;;      Totals:         0       0       1       0       0
  6913 ;;Total ram usage:        1 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; Hardware stack levels required when called:   10
  6916 ;; This function calls:
  6917 ;;		Nothing
  6918 ;; This function is called by:
  6919 ;;		_HEATER_INIT
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           
  6924                           ;psect for function _HEATER_SET_STATE
  6925  17F6                     _HEATER_SET_STATE:	
  6926                           
  6927                           ;incstack = 0
  6928 ;; hardware stack exceeded
  6929                           ; Regs used in _HEATER_SET_STATE: [wreg]
  6930                           ;HEATER_SET_STATE@HEATER_STATE stored from wreg
  6931  17F6  1683               	bsf	3,5	;RP0=1, select bank1
  6932  17F7  00A0               	movwf	HEATER_SET_STATE@HEATER_STATE^(0+128)
  6933                           
  6934                           ;HEATER.c: 71: void HEATER_SET_STATE (tHEATER_STATE HEATER_STATE);HEATER.c: 72: {;HEATER
      +                          .c: 73:     DESIRED_HEAT = HEATER_STATE ;
  6935  17F8  1703               	bsf	3,6	;RP1=1, select bank3
  6936  17F9  00EB               	movwf	_DESIRED_HEAT^(0+384)
  6937  17FA  0008               	return
  6938  17FB                     __end_of_HEATER_SET_STATE:	
  6939  17FB                     __ptext8:	
  6940 ;; *************** function _MOTOR_SET_STATE *****************
  6941 ;; Defined at:
  6942 ;;		line 71 in file "MOTOR.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  MOTOR_STATE     1    wreg     unsigned char 
  6945 ;; Auto vars:     Size  Location     Type
  6946 ;;  MOTOR_STATE     1    0[BANK1 ] unsigned char 
  6947 ;; Return value:  Size  Location     Type
  6948 ;;                  1    wreg      void 
  6949 ;; Registers used:
  6950 ;;		wreg
  6951 ;; Tracked objects:
  6952 ;;		On entry : 300/0
  6953 ;;		On exit  : 300/300
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6956 ;;      Params:         0       0       0       0       0
  6957 ;;      Locals:         0       0       1       0       0
  6958 ;;      Temps:          0       0       0       0       0
  6959 ;;      Totals:         0       0       1       0       0
  6960 ;;Total ram usage:        1 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:   10
  6963 ;; This function calls:
  6964 ;;		Nothing
  6965 ;; This function is called by:
  6966 ;;		_MOTOR_INIT
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           
  6971                           ;psect for function _MOTOR_SET_STATE
  6972  17FB                     _MOTOR_SET_STATE:	
  6973                           
  6974                           ;incstack = 0
  6975 ;; hardware stack exceeded
  6976                           ; Regs used in _MOTOR_SET_STATE: [wreg]
  6977                           ;MOTOR_SET_STATE@MOTOR_STATE stored from wreg
  6978  17FB  1683               	bsf	3,5	;RP0=1, select bank1
  6979  17FC  00A0               	movwf	MOTOR_SET_STATE@MOTOR_STATE^(0+128)
  6980                           
  6981                           ;MOTOR.c: 71: void MOTOR_SET_STATE (tMOTOR_STATE MOTOR_STATE);MOTOR.c: 72: {;MOTOR.c: 73
      +                          :     DESIRED_SPEED = MOTOR_STATE ;
  6982  17FD  1703               	bsf	3,6	;RP1=1, select bank3
  6983  17FE  00EC               	movwf	_DESIRED_SPEED^(0+384)
  6984  17FF  0008               	return
  6985  1800                     __end_of_MOTOR_SET_STATE:	
  6986                           
  6987                           	psect	text32
  6988  1D44                     __ptext32:	
  6989 ;; *************** function _ENABLE_INTERUPT *****************
  6990 ;; Defined at:
  6991 ;;		line 21 in file "util.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;		None
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;		None
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  1    wreg      void 
  6998 ;; Registers used:
  6999 ;;		None
  7000 ;; Tracked objects:
  7001 ;;		On entry : B00/B00
  7002 ;;		On exit  : B00/B00
  7003 ;;		Unchanged: B00/0
  7004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7005 ;;      Params:         0       0       0       0       0
  7006 ;;      Locals:         0       0       0       0       0
  7007 ;;      Temps:          0       0       0       0       0
  7008 ;;      Totals:         0       0       0       0       0
  7009 ;;Total ram usage:        0 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:   10
  7012 ;; This function calls:
  7013 ;;		Nothing
  7014 ;; This function is called by:
  7015 ;;		_main
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           
  7020                           ;psect for function _ENABLE_INTERUPT
  7021  1D44                     _ENABLE_INTERUPT:	
  7022                           
  7023                           ;util.c: 23:     PEIE=1 ;
  7024                           
  7025                           ;incstack = 0
  7026 ;; hardware stack exceeded
  7027                           ; Regs used in _ENABLE_INTERUPT: []
  7028  1D44  170B               	bsf	11,6	;volatile
  7029                           
  7030                           ;util.c: 24:     GIE=1;
  7031  1D45  178B               	bsf	11,7	;volatile
  7032  1D46  0008               	return
  7033  1D47                     __end_of_ENABLE_INTERUPT:	
  7034                           
  7035                           	psect	text33
  7036  1D6D                     __ptext33:	
  7037 ;; *************** function _CONTROL_INIT *****************
  7038 ;; Defined at:
  7039 ;;		line 65 in file "CONTROL.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;		None
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  count           1    0[BANK1 ] unsigned char 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;                  1    wreg      void 
  7046 ;; Registers used:
  7047 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7048 ;; Tracked objects:
  7049 ;;		On entry : B00/B00
  7050 ;;		On exit  : B00/B00
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7053 ;;      Params:         0       0       0       0       0
  7054 ;;      Locals:         0       0       1       0       0
  7055 ;;      Temps:          0       0       0       0       0
  7056 ;;      Totals:         0       0       1       0       0
  7057 ;;Total ram usage:        1 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:   10
  7060 ;; This function calls:
  7061 ;;		Nothing
  7062 ;; This function is called by:
  7063 ;;		_main
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           
  7068                           ;psect for function _CONTROL_INIT
  7069  1D6D                     _CONTROL_INIT:	
  7070                           
  7071                           ;CONTROL.c: 67:     tbyte count = 0 ;
  7072                           
  7073                           ;incstack = 0
  7074 ;; hardware stack exceeded
  7075                           ; Regs used in _CONTROL_INIT: [wreg-fsr0h+status,2+status,0]
  7076  1D6D  1303               	bcf	3,6	;RP1=0, select bank1
  7077  1D6E  01A0               	clrf	CONTROL_INIT@count^(0+128)
  7078  1D6F                     l6668:	
  7079                           
  7080                           ;CONTROL.c: 69:     {;CONTROL.c: 70:         HANDLERS_STATES[count] = FIRST_TIME;
  7081  1D6F  0820               	movf	CONTROL_INIT@count^(0+128),w
  7082  1D70  3E90               	addlw	(low (_HANDLERS_STATES| (0+256)))& (0+255)
  7083  1D71  0084               	movwf	4
  7084  1D72  3005               	movlw	5
  7085  1D73  0180               	clrf	0
  7086                           
  7087                           ;CONTROL.c: 71:     }
  7088  1D74  0AA0               	incf	CONTROL_INIT@count^(0+128),f
  7089  1D75  0220               	subwf	CONTROL_INIT@count^(0+128),w
  7090  1D76  1C03               	skipc
  7091  1D77  2D6F               	goto	l6668
  7092                           
  7093                           ;CONTROL.c: 72:     CONTROL_CURRENT_STATE = SET_TIME ;
  7094  1D78  1283               	bcf	3,5	;RP0=0, select bank0
  7095  1D79  301E               	movlw	30
  7096  1D7A  01EE               	clrf	_CONTROL_CURRENT_STATE
  7097                           
  7098                           ;CONTROL.c: 73:     SETTED_TIME.HOURS = 0;
  7099  1D7B  01ED               	clrf	_SETTED_TIME+2
  7100                           
  7101                           ;CONTROL.c: 74:     SETTED_TIME.MINUTES = 0;
  7102  1D7C  01EC               	clrf	_SETTED_TIME+1
  7103                           
  7104                           ;CONTROL.c: 75:     SETTED_TIME.SECONDS = 0;
  7105  1D7D  01EB               	clrf	_SETTED_TIME
  7106                           
  7107                           ;CONTROL.c: 76:     MOTOR_WORK_STATE = 30 ;
  7108  1D7E  1683               	bsf	3,5	;RP0=1, select bank3
  7109  1D7F  1703               	bsf	3,6	;RP1=1, select bank3
  7110  1D80  00A9               	movwf	_MOTOR_WORK_STATE^(0+384)
  7111                           
  7112                           ;CONTROL.c: 77:     HEATER_WORK_STATE = 166 ;
  7113  1D81  30A6               	movlw	166
  7114  1D82  00A8               	movwf	_HEATER_WORK_STATE^(0+384)
  7115  1D83  0008               	return
  7116  1D84                     __end_of_CONTROL_INIT:	
  7117                           
  7118                           	psect	text34
  7119  080C                     __ptext34:	
  7120 ;; *************** function _SYS_UPDATE *****************
  7121 ;; Defined at:
  7122 ;;		line 34 in file "MICROWAVE.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;		None
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;		None
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 300/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7136 ;;      Params:         0       0       0       0       0
  7137 ;;      Locals:         0       0       0       0       0
  7138 ;;      Temps:          0       4       0       0       0
  7139 ;;      Totals:         0       4       0       0       0
  7140 ;;Total ram usage:        4 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    9
  7143 ;; This function calls:
  7144 ;;		_CONTROL_UPDATE
  7145 ;;		_HEATER_UPDATE
  7146 ;;		_KEYPAD_UPDATE
  7147 ;;		_MOTOR_UPDATE
  7148 ;;		_SWs_UPDATE
  7149 ;;		_TIMER0_UPDATE
  7150 ;;		_TIME_UPDATE
  7151 ;; This function is called by:
  7152 ;;		Interrupt level 1
  7153 ;; This function uses a non-reentrant model
  7154 ;;
  7155                           
  7156                           
  7157                           ;psect for function _SYS_UPDATE
  7158  080C                     _SYS_UPDATE:	
  7159                           
  7160                           ;MICROWAVE.c: 36:     if (( TMR0IF ))
  7161  080C  1D0B               	btfss	11,2	;volatile
  7162  080D  2827               	goto	i1l932
  7163                           
  7164                           ;MICROWAVE.c: 37:     {;MICROWAVE.c: 38:        TIME_UPDATE();
  7165  080E  160A  158A  2614  120A  158A  	fcall	_TIME_UPDATE
  7166                           
  7167                           ;MICROWAVE.c: 39:        HEATER_UPDATE();
  7168  0813  160A  158A  2584  120A  158A  	fcall	_HEATER_UPDATE
  7169                           
  7170                           ;MICROWAVE.c: 40:        MOTOR_UPDATE();
  7171  0818  160A  158A  25A6  120A  158A  	fcall	_MOTOR_UPDATE
  7172                           
  7173                           ;MICROWAVE.c: 41:        SWs_UPDATE();
  7174  081D  236D  120A  158A   	fcall	_SWs_UPDATE
  7175                           
  7176                           ;MICROWAVE.c: 42:        KEYPAD_UPDATE();
  7177  0820  2545  120A  158A   	fcall	_KEYPAD_UPDATE
  7178                           
  7179                           ;MICROWAVE.c: 43:        CONTROL_UPDATE ();
  7180  0823  2032  120A  158A   	fcall	_CONTROL_UPDATE
  7181                           
  7182                           ;MICROWAVE.c: 45:         TIMER0_UPDATE();
  7183  0826  27FA               	fcall	_TIMER0_UPDATE
  7184  0827                     i1l932:	
  7185  0827  086A               	movf	??_SYS_UPDATE+3,w
  7186  0828  00FF               	movwf	127
  7187  0829  0869               	movf	??_SYS_UPDATE+2,w
  7188  082A  008A               	movwf	10
  7189  082B  0868               	movf	??_SYS_UPDATE+1,w
  7190  082C  0084               	movwf	4
  7191  082D  0E67               	swapf	??_SYS_UPDATE^0,w
  7192  082E  0083               	movwf	3
  7193  082F  0EFE               	swapf	126,f
  7194  0830  0E7E               	swapf	126,w
  7195  0831  0009               	retfie
  7196  0832                     __end_of_SYS_UPDATE:	
  7197  0832                     __ptext49:	
  7198 ;; *************** function _CONTROL_UPDATE *****************
  7199 ;; Defined at:
  7200 ;;		line 80 in file "CONTROL.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;		None
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;		None
  7205 ;; Return value:  Size  Location     Type
  7206 ;;                  1    wreg      void 
  7207 ;; Registers used:
  7208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7209 ;; Tracked objects:
  7210 ;;		On entry : 300/300
  7211 ;;		On exit  : 0/0
  7212 ;;		Unchanged: 0/0
  7213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7214 ;;      Params:         0       0       0       0       0
  7215 ;;      Locals:         0       0       0       0       0
  7216 ;;      Temps:          0       2       0       0       0
  7217 ;;      Totals:         0       2       0       0       0
  7218 ;;Total ram usage:        2 bytes
  7219 ;; Hardware stack levels used:    1
  7220 ;; Hardware stack levels required when called:    8
  7221 ;; This function calls:
  7222 ;;		_DEFAULT_HANDLER
  7223 ;;		_FINISH_HANDLER
  7224 ;;		_HEATING_HANDLER
  7225 ;;		_KEYPAD_GET_PRESSED_KEY
  7226 ;;		_SET_HEATING_HANDLER
  7227 ;;		_SET_ROTOR_PWR_HANDLER
  7228 ;;		_SET_TIME_HANDLER
  7229 ;; This function is called by:
  7230 ;;		_SYS_UPDATE
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           
  7235                           ;psect for function _CONTROL_UPDATE
  7236  0832                     _CONTROL_UPDATE:	
  7237                           
  7238                           ;CONTROL.c: 82:     static tbyte control_shift_counter = 0;;CONTROL.c: 83:     if (contr
      +                          ol_shift_counter >= 5)
  7239                           
  7240                           ;incstack = 0
  7241 ;; hardware stack exceeded
  7242                           ; Regs used in _CONTROL_UPDATE: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7243  0832  3005               	movlw	5
  7244  0833  0227               	subwf	CONTROL_UPDATE@control_shift_counter^(0+384),w
  7245                           
  7246                           ;CONTROL.c: 84:     {;CONTROL.c: 85:         static tbyte control_timer_counter = 0;;CON
      +                          TROL.c: 86:         control_timer_counter += (5);
  7247  0834  3005               	movlw	5
  7248  0835  1C03               	skipc
  7249  0836  2877               	goto	L11
  7250  0837  07A6               	addwf	CONTROL_UPDATE@control_timer_counter^(0+384),f
  7251                           
  7252                           ;CONTROL.c: 87:         if (control_timer_counter >= 20)
  7253  0838  3014               	movlw	20
  7254  0839  0226               	subwf	CONTROL_UPDATE@control_timer_counter^(0+384),w
  7255  083A  1C03               	skipc
  7256  083B  0008               	return
  7257                           
  7258                           ;CONTROL.c: 88:         {;CONTROL.c: 89:             control_timer_counter = 0;
  7259  083C  01A6               	clrf	CONTROL_UPDATE@control_timer_counter^(0+384)
  7260                           
  7261                           ;CONTROL.c: 90:             PRESSED_KEY = KEYPAD_GET_PRESSED_KEY() ;
  7262  083D  27AF  120A  158A   	fcall	_KEYPAD_GET_PRESSED_KEY
  7263  0840  0871               	movf	?_KEYPAD_GET_PRESSED_KEY+1,w
  7264  0841  009F               	movwf	(_PRESSED_KEY+1)^(0+384)
  7265  0842  0870               	movf	?_KEYPAD_GET_PRESSED_KEY,w
  7266  0843  009E               	movwf	_PRESSED_KEY^(0+384)
  7267                           
  7268                           ;CONTROL.c: 91:             switch ( CONTROL_CURRENT_STATE )
  7269  0844  285F               	goto	i1l6702
  7270  0845                     i1l6690:	
  7271                           
  7272                           ;CONTROL.c: 94:                     SET_TIME_HANDLER();
  7273  0845  160A  158A  26FF  120A  158A  	fcall	_SET_TIME_HANDLER
  7274                           
  7275                           ;CONTROL.c: 95:                 break;
  7276  084A  2876               	goto	i1l6704
  7277  084B                     i1l6692:	
  7278                           
  7279                           ;CONTROL.c: 97:                     SET_HEATING_HANDLER();
  7280  084B  160A  158A  25CA  120A  158A  	fcall	_SET_HEATING_HANDLER
  7281                           
  7282                           ;CONTROL.c: 98:                 break;
  7283  0850  2876               	goto	i1l6704
  7284  0851                     i1l6694:	
  7285                           
  7286                           ;CONTROL.c: 100:                     SET_ROTOR_PWR_HANDLER();
  7287  0851  160A  158A  25EF  120A  158A  	fcall	_SET_ROTOR_PWR_HANDLER
  7288                           
  7289                           ;CONTROL.c: 101:                 break;
  7290  0856  2876               	goto	i1l6704
  7291  0857                     i1l6696:	
  7292                           
  7293                           ;CONTROL.c: 103:                     HEATING_HANDLER();
  7294  0857  21B4  120A  158A   	fcall	_HEATING_HANDLER
  7295                           
  7296                           ;CONTROL.c: 104:                 break;
  7297  085A  2876               	goto	i1l6704
  7298  085B                     i1l6698:	
  7299                           
  7300                           ;CONTROL.c: 106:                     FINISH_HANDLER();
  7301  085B  27BA  120A  158A   	fcall	_FINISH_HANDLER
  7302                           
  7303                           ;CONTROL.c: 107:                 break;
  7304  085E  2876               	goto	i1l6704
  7305  085F                     i1l6702:	
  7306  085F  1283               	bcf	3,5	;RP0=0, select bank0
  7307  0860  1303               	bcf	3,6	;RP1=0, select bank0
  7308  0861  086E               	movf	_CONTROL_CURRENT_STATE,w
  7309  0862  00B9               	movwf	??_CONTROL_UPDATE
  7310  0863  01BA               	clrf	??_CONTROL_UPDATE+1
  7311                           
  7312                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7313                           ; Switch size 1, requested type "speed"
  7314                           ; Number of cases is 1, Range of values is 0 to 0
  7315                           ; switch strategies available:
  7316                           ; Name         Instructions Cycles
  7317                           ; simple_byte            4     3 (average)
  7318                           ; direct_byte           11     8 (fixed)
  7319                           ; jumptable            260     6 (fixed)
  7320                           ;	Chosen strategy is simple_byte
  7321  0864  083A               	movf	??_CONTROL_UPDATE+1,w
  7322  0865  3A00               	xorlw	0	; case 0
  7323  0866  1903               	skipnz
  7324  0867  2869               	goto	i1l7074
  7325  0868  2876               	goto	i1l6704
  7326  0869                     i1l7074:	
  7327                           
  7328                           ; Switch size 1, requested type "speed"
  7329                           ; Number of cases is 5, Range of values is 0 to 4
  7330                           ; switch strategies available:
  7331                           ; Name         Instructions Cycles
  7332                           ; direct_byte           23     8 (fixed)
  7333                           ; simple_byte           16     9 (average)
  7334                           ; jumptable            260     6 (fixed)
  7335                           ;	Chosen strategy is direct_byte
  7336  0869  0839               	movf	??_CONTROL_UPDATE,w
  7337  086A  0084               	movwf	4
  7338  086B  3005               	movlw	5
  7339  086C  0204               	subwf	4,w
  7340  086D  1803               	skipnc
  7341  086E  2876               	goto	i1l6704
  7342  086F  3007               	movlw	high i1S7076
  7343  0870  008A               	movwf	10
  7344  0871  1003               	clrc
  7345  0872  0D04               	rlf	4,w
  7346  0873  0704               	addwf	4,w
  7347  0874  3EF1               	addlw	low i1S7076
  7348  0875  0082               	movwf	2
  7349  0876                     i1l6704:	
  7350                           
  7351                           ;CONTROL.c: 112:             DEFAULT_HANDLER();
  7352  0876  2962               	ljmp	i1l6198
  7353  0877                     L11:	
  7354                           ;CONTROL.c: 116:     {;CONTROL.c: 117:      control_shift_counter += (5);
  7355                           
  7356  0877  07A7               	addwf	CONTROL_UPDATE@control_shift_counter^(0+384),f
  7357  0878  0008               	return
  7358  0879                     __end_of_CONTROL_UPDATE:	
  7359  0879                     __ptext73:	
  7360 ;; *************** function _DISP_UPDATE_TIME *****************
  7361 ;; Defined at:
  7362 ;;		line 33 in file "Display.c"
  7363 ;; Parameters:    Size  Location     Type
  7364 ;;  time            3   17[BANK0 ] struct .
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;		None
  7367 ;; Return value:  Size  Location     Type
  7368 ;;                  1    wreg      void 
  7369 ;; Registers used:
  7370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 300/0
  7373 ;;		On exit  : 300/300
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7376 ;;      Params:         0       3       0       0       0
  7377 ;;      Locals:         0       0       0       0       0
  7378 ;;      Temps:          0       0       0       0       0
  7379 ;;      Totals:         0       3       0       0       0
  7380 ;;Total ram usage:        3 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    5
  7383 ;; This function calls:
  7384 ;;		_UPDATE_LCD_HOURS
  7385 ;;		_UPDATE_LCD_MINUTES
  7386 ;;		_UPDATE_LCD_SECONDS
  7387 ;; This function is called by:
  7388 ;;		_HEATING_HANDLER
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           
  7393                           ;psect for function _DISP_UPDATE_TIME
  7394  0879                     _DISP_UPDATE_TIME:	
  7395                           
  7396                           ;Display.c: 33: void DISP_UPDATE_TIME (tTIME time);Display.c: 34: {;Display.c: 36:      
      +                          if ( time.SECONDS != last_time.SECONDS )
  7397                           
  7398                           ;incstack = 0
  7399 ;; hardware stack exceeded
  7400                           ; Regs used in _DISP_UPDATE_TIME: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7401  0879  0831               	movf	DISP_UPDATE_TIME@time,w
  7402  087A  1683               	bsf	3,5	;RP0=1, select bank3
  7403  087B  1703               	bsf	3,6	;RP1=1, select bank3
  7404  087C  0618               	xorwf	_last_time^(0+384),w
  7405  087D  1903               	skipnz
  7406  087E  289B               	goto	i1l4970
  7407                           
  7408                           ;Display.c: 37:  {;Display.c: 39:   UPDATE_LCD_SECONDS( time.SECONDS);
  7409  087F  1283               	bcf	3,5	;RP0=0, select bank0
  7410  0880  1303               	bcf	3,6	;RP1=0, select bank0
  7411  0881  0831               	movf	DISP_UPDATE_TIME@time,w
  7412  0882  2507  120A  158A   	fcall	_UPDATE_LCD_SECONDS
  7413                           
  7414                           ;Display.c: 40:   if (time.MINUTES != last_time.MINUTES )
  7415  0885  0832               	movf	DISP_UPDATE_TIME@time+1,w
  7416  0886  1683               	bsf	3,5	;RP0=1, select bank3
  7417  0887  1703               	bsf	3,6	;RP1=1, select bank3
  7418  0888  0619               	xorwf	(_last_time^(0+384)+1),w
  7419  0889  1903               	skipnz
  7420  088A  289B               	goto	i1l4970
  7421                           
  7422                           ;Display.c: 41:   {;Display.c: 43:    UPDATE_LCD_MINUTES(time.MINUTES);
  7423  088B  1283               	bcf	3,5	;RP0=0, select bank0
  7424  088C  1303               	bcf	3,6	;RP1=0, select bank0
  7425  088D  0832               	movf	DISP_UPDATE_TIME@time+1,w
  7426  088E  24BE  120A  158A   	fcall	_UPDATE_LCD_MINUTES
  7427                           
  7428                           ;Display.c: 44:    if (time.HOURS != last_time.HOURS )
  7429  0891  0833               	movf	DISP_UPDATE_TIME@time+2,w
  7430  0892  1683               	bsf	3,5	;RP0=1, select bank3
  7431  0893  1703               	bsf	3,6	;RP1=1, select bank3
  7432  0894  061A               	xorwf	(_last_time^(0+384)+2),w
  7433  0895  1903               	skipnz
  7434  0896  289B               	goto	i1l4970
  7435                           
  7436                           ;Display.c: 45:    {;Display.c: 47:     UPDATE_LCD_HOURS(time.HOURS);
  7437  0897  1283               	bcf	3,5	;RP0=0, select bank0
  7438  0898  1303               	bcf	3,6	;RP1=0, select bank0
  7439  0899  0833               	movf	DISP_UPDATE_TIME@time+2,w
  7440  089A  25DD               	fcall	_UPDATE_LCD_HOURS
  7441  089B                     i1l4970:	
  7442                           
  7443                           ;Display.c: 51:  last_time = time ;
  7444  089B  1283               	bcf	3,5	;RP0=0, select bank0
  7445  089C  1303               	bcf	3,6	;RP1=0, select bank0
  7446  089D  0831               	movf	DISP_UPDATE_TIME@time,w
  7447  089E  1683               	bsf	3,5	;RP0=1, select bank3
  7448  089F  1703               	bsf	3,6	;RP1=1, select bank3
  7449  08A0  0098               	movwf	_last_time^(0+384)
  7450  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  7451  08A2  1303               	bcf	3,6	;RP1=0, select bank0
  7452  08A3  0832               	movf	DISP_UPDATE_TIME@time+1,w
  7453  08A4  1683               	bsf	3,5	;RP0=1, select bank3
  7454  08A5  1703               	bsf	3,6	;RP1=1, select bank3
  7455  08A6  0099               	movwf	(_last_time+1)^(0+384)
  7456  08A7  1283               	bcf	3,5	;RP0=0, select bank0
  7457  08A8  1303               	bcf	3,6	;RP1=0, select bank0
  7458  08A9  0833               	movf	DISP_UPDATE_TIME@time+2,w
  7459  08AA  1683               	bsf	3,5	;RP0=1, select bank3
  7460  08AB  1703               	bsf	3,6	;RP1=1, select bank3
  7461  08AC  009A               	movwf	(_last_time+2)^(0+384)
  7462  08AD  0008               	return
  7463  08AE                     __end_of_DISP_UPDATE_TIME:	
  7464  08AE                     __ptext61:	
  7465 ;; *************** function _SET_HEATING_HANDLER_ON_WORK *****************
  7466 ;; Defined at:
  7467 ;;		line 349 in file "CONTROL.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;		None
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;		None
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      void 
  7474 ;; Registers used:
  7475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7476 ;; Tracked objects:
  7477 ;;		On entry : 300/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7481 ;;      Params:         0       0       0       0       0
  7482 ;;      Locals:         0       0       0       0       0
  7483 ;;      Temps:          0       2       0       0       0
  7484 ;;      Totals:         0       2       0       0       0
  7485 ;;Total ram usage:        2 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; Hardware stack levels required when called:    4
  7488 ;; This function calls:
  7489 ;;		_START_BLINKING_AT
  7490 ;;		_STOP_BLINKING
  7491 ;; This function is called by:
  7492 ;;		_SET_HEATING_HANDLER
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           
  7497                           ;psect for function _SET_HEATING_HANDLER_ON_WORK
  7498  08AE                     _SET_HEATING_HANDLER_ON_WORK:	
  7499  08AE                     i1l5028:	
  7500                           ;incstack = 0
  7501 ;; hardware stack exceeded
  7502                           ; Regs used in _SET_HEATING_HANDLER_ON_WORK: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
  7503                           
  7504                           
  7505                           ;CONTROL.c: 351:             switch (HEATER_WORK_STATE)
  7506  08AE  28BE               	goto	i1l5038
  7507  08AF                     i1l5030:	
  7508                           
  7509                           ;CONTROL.c: 354:                     START_BLINKING_AT((11));
  7510  08AF  300B               	movlw	11
  7511  08B0  2159  120A  158A   	fcall	_START_BLINKING_AT
  7512                           
  7513                           ;CONTROL.c: 355:                 break;
  7514  08B3  28D5               	goto	i1l5040
  7515  08B4                     i1l5032:	
  7516                           
  7517                           ;CONTROL.c: 357:                     START_BLINKING_AT((13));
  7518  08B4  300D               	movlw	13
  7519  08B5  2159  120A  158A   	fcall	_START_BLINKING_AT
  7520                           
  7521                           ;CONTROL.c: 358:                 break;
  7522  08B8  28D5               	goto	i1l5040
  7523  08B9                     i1l5034:	
  7524                           
  7525                           ;CONTROL.c: 360:                     START_BLINKING_AT((15));
  7526  08B9  300F               	movlw	15
  7527  08BA  2159  120A  158A   	fcall	_START_BLINKING_AT
  7528                           
  7529                           ;CONTROL.c: 361:                 break;
  7530  08BD  28D5               	goto	i1l5040
  7531  08BE                     i1l5038:	
  7532  08BE  1683               	bsf	3,5	;RP0=1, select bank3
  7533  08BF  1703               	bsf	3,6	;RP1=1, select bank3
  7534  08C0  0828               	movf	_HEATER_WORK_STATE^(0+384),w
  7535  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  7536  08C2  1303               	bcf	3,6	;RP1=0, select bank0
  7537  08C3  00A6               	movwf	??_SET_HEATING_HANDLER_ON_WORK
  7538  08C4  01A7               	clrf	??_SET_HEATING_HANDLER_ON_WORK+1
  7539                           
  7540                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7541                           ; Switch size 1, requested type "speed"
  7542                           ; Number of cases is 1, Range of values is 0 to 0
  7543                           ; switch strategies available:
  7544                           ; Name         Instructions Cycles
  7545                           ; simple_byte            4     3 (average)
  7546                           ; direct_byte           11     8 (fixed)
  7547                           ; jumptable            260     6 (fixed)
  7548                           ;	Chosen strategy is simple_byte
  7549  08C5  0827               	movf	??_SET_HEATING_HANDLER_ON_WORK+1,w
  7550  08C6  3A00               	xorlw	0	; case 0
  7551  08C7  1903               	skipnz
  7552  08C8  28CA               	goto	i1l7090
  7553  08C9  28D5               	goto	i1l5040
  7554  08CA                     i1l7090:	
  7555                           
  7556                           ; Switch size 1, requested type "speed"
  7557                           ; Number of cases is 3, Range of values is 45 to 166
  7558                           ; switch strategies available:
  7559                           ; Name         Instructions Cycles
  7560                           ; simple_byte           10     6 (average)
  7561                           ; jumptable            263     9 (fixed)
  7562                           ;	Chosen strategy is simple_byte
  7563  08CA  0826               	movf	??_SET_HEATING_HANDLER_ON_WORK,w
  7564  08CB  3A2D               	xorlw	45	; case 45
  7565  08CC  1903               	skipnz
  7566  08CD  28AF               	goto	i1l5030
  7567  08CE  3A77               	xorlw	119	; case 90
  7568  08CF  1903               	skipnz
  7569  08D0  28B4               	goto	i1l5032
  7570  08D1  3AFC               	xorlw	252	; case 166
  7571  08D2  1903               	skipnz
  7572  08D3  28B9               	goto	i1l5034
  7573  08D4  28D5               	goto	i1l5040
  7574  08D5                     i1l5040:	
  7575                           
  7576                           ;CONTROL.c: 366:             if ( PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )
  7577  08D5  1683               	bsf	3,5	;RP0=1, select bank3
  7578  08D6  1703               	bsf	3,6	;RP1=1, select bank3
  7579  08D7  0B1F               	decfsz	(_PRESSED_KEY^(0+384)+1),w
  7580  08D8  0008               	return
  7581                           
  7582                           ;CONTROL.c: 367:             {;CONTROL.c: 368:                     if (PRESSED_KEY.KEYPA
      +                          D_NO == KEY_1)
  7583  08D9  081E               	movf	_PRESSED_KEY^(0+384),w
  7584  08DA  1D03               	btfss	3,2
  7585  08DB  28DF               	goto	i1l5046
  7586                           
  7587                           ;CONTROL.c: 369:                     {;CONTROL.c: 370:                       HEATER_WORK
      +                          _STATE = 45 ;
  7588  08DC  302D               	movlw	45
  7589  08DD  00A8               	movwf	_HEATER_WORK_STATE^(0+384)
  7590                           
  7591                           ;CONTROL.c: 371:                     }
  7592  08DE  0008               	return
  7593  08DF                     i1l5046:	
  7594  08DF  0B1E               	decfsz	_PRESSED_KEY^(0+384),w
  7595  08E0  28E4               	goto	i1l5050
  7596                           
  7597                           ;CONTROL.c: 373:                     {;CONTROL.c: 374:                       HEATER_WORK
      +                          _STATE = 90 ;
  7598  08E1  305A               	movlw	90
  7599  08E2  00A8               	movwf	_HEATER_WORK_STATE^(0+384)
  7600                           
  7601                           ;CONTROL.c: 375:                     }
  7602  08E3  0008               	return
  7603  08E4                     i1l5050:	
  7604  08E4  3002               	movlw	2
  7605  08E5  061E               	xorwf	_PRESSED_KEY^(0+384),w
  7606  08E6  1D03               	btfss	3,2
  7607  08E7  28EB               	goto	i1l5054
  7608                           
  7609                           ;CONTROL.c: 377:                     {;CONTROL.c: 378:                       HEATER_WORK
      +                          _STATE = 166 ;
  7610  08E8  30A6               	movlw	166
  7611  08E9  00A8               	movwf	_HEATER_WORK_STATE^(0+384)
  7612                           
  7613                           ;CONTROL.c: 379:                     }
  7614  08EA  0008               	return
  7615  08EB                     i1l5054:	
  7616  08EB  300B               	movlw	11
  7617  08EC  061E               	xorwf	_PRESSED_KEY^(0+384),w
  7618  08ED  1D03               	btfss	3,2
  7619  08EE  28F7               	goto	i1l5062
  7620                           
  7621                           ;CONTROL.c: 381:                     {;CONTROL.c: 382:                        CONTROL_CU
      +                          RRENT_STATE = SET_ROTOR_PWR;
  7622  08EF  3002               	movlw	2
  7623  08F0  1283               	bcf	3,5	;RP0=0, select bank0
  7624  08F1  1303               	bcf	3,6	;RP1=0, select bank0
  7625  08F2  00EE               	movwf	_CONTROL_CURRENT_STATE
  7626  08F3                     L22:	
  7627                           
  7628                           ;CONTROL.c: 383:                        HANDLERS_STATES[SET_HEATING] = FIRST_TIME ;
  7629  08F3  1683               	bsf	3,5	;RP0=1, select bank3
  7630  08F4  1703               	bsf	3,6	;RP1=1, select bank3
  7631  08F5  0191               	clrf	(_HANDLERS_STATES^(0+384)+1)
  7632                           
  7633                           ;CONTROL.c: 384:                        STOP_BLINKING();
  7634  08F6  2CB2               	ljmp	i1l4742
  7635  08F7                     i1l5062:	
  7636                           ;CONTROL.c: 385:                     }
  7637                           
  7638  08F7  3009               	movlw	9
  7639  08F8  061E               	xorwf	_PRESSED_KEY^(0+384),w
  7640  08F9  1D03               	btfss	3,2
  7641  08FA  0008               	return
  7642                           
  7643                           ;CONTROL.c: 387:                     {;CONTROL.c: 388:                        CONTROL_CU
      +                          RRENT_STATE = SET_TIME;
  7644  08FB  1283               	bcf	3,5	;RP0=0, select bank0
  7645  08FC  1303               	bcf	3,6	;RP1=0, select bank0
  7646  08FD  01EE               	clrf	_CONTROL_CURRENT_STATE
  7647  08FE  28F3               	goto	L22
  7648  08FF                     __end_of_SET_HEATING_HANDLER_ON_WORK:	
  7649                           ;CONTROL.c: 389:                         HANDLERS_STATES[SET_HEATING] = FIRST_TIME ;
  7650                           
  7651  08FF                     __ptext57:	
  7652 ;; *************** function _SET_ROTOR_PWR_HANDLER_ON_WORK *****************
  7653 ;; Defined at:
  7654 ;;		line 400 in file "CONTROL.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;		None
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;  PRESSED_KEY     2    8[BANK0 ] struct .
  7659 ;; Return value:  Size  Location     Type
  7660 ;;                  1    wreg      void 
  7661 ;; Registers used:
  7662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7663 ;; Tracked objects:
  7664 ;;		On entry : 300/0
  7665 ;;		On exit  : 0/0
  7666 ;;		Unchanged: 0/0
  7667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7668 ;;      Params:         0       0       0       0       0
  7669 ;;      Locals:         0       2       0       0       0
  7670 ;;      Temps:          0       2       0       0       0
  7671 ;;      Totals:         0       4       0       0       0
  7672 ;;Total ram usage:        4 bytes
  7673 ;; Hardware stack levels used:    1
  7674 ;; Hardware stack levels required when called:    4
  7675 ;; This function calls:
  7676 ;;		_KEYPAD_GET_PRESSED_KEY
  7677 ;;		_START_BLINKING_AT
  7678 ;;		_STOP_BLINKING
  7679 ;; This function is called by:
  7680 ;;		_SET_ROTOR_PWR_HANDLER
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           
  7685                           ;psect for function _SET_ROTOR_PWR_HANDLER_ON_WORK
  7686  08FF                     _SET_ROTOR_PWR_HANDLER_ON_WORK:	
  7687  08FF                     i1l5072:	
  7688                           ;incstack = 0
  7689 ;; hardware stack exceeded
  7690                           ; Regs used in _SET_ROTOR_PWR_HANDLER_ON_WORK: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  7691                           
  7692                           
  7693                           ;CONTROL.c: 402:     switch (MOTOR_WORK_STATE)
  7694  08FF  290F               	goto	i1l5082
  7695  0900                     i1l5074:	
  7696                           
  7697                           ;CONTROL.c: 405:                     START_BLINKING_AT((11));
  7698  0900  300B               	movlw	11
  7699  0901  2159  120A  158A   	fcall	_START_BLINKING_AT
  7700                           
  7701                           ;CONTROL.c: 406:                 break;
  7702  0904  2926               	goto	i1l5084
  7703  0905                     i1l5076:	
  7704                           
  7705                           ;CONTROL.c: 408:                     START_BLINKING_AT((13));
  7706  0905  300D               	movlw	13
  7707  0906  2159  120A  158A   	fcall	_START_BLINKING_AT
  7708                           
  7709                           ;CONTROL.c: 409:                 break;
  7710  0909  2926               	goto	i1l5084
  7711  090A                     i1l5078:	
  7712                           
  7713                           ;CONTROL.c: 411:                     START_BLINKING_AT((15));
  7714  090A  300F               	movlw	15
  7715  090B  2159  120A  158A   	fcall	_START_BLINKING_AT
  7716                           
  7717                           ;CONTROL.c: 412:                 break;
  7718  090E  2926               	goto	i1l5084
  7719  090F                     i1l5082:	
  7720  090F  1683               	bsf	3,5	;RP0=1, select bank3
  7721  0910  1703               	bsf	3,6	;RP1=1, select bank3
  7722  0911  0829               	movf	_MOTOR_WORK_STATE^(0+384),w
  7723  0912  1283               	bcf	3,5	;RP0=0, select bank0
  7724  0913  1303               	bcf	3,6	;RP1=0, select bank0
  7725  0914  00A6               	movwf	??_SET_ROTOR_PWR_HANDLER_ON_WORK
  7726  0915  01A7               	clrf	??_SET_ROTOR_PWR_HANDLER_ON_WORK+1
  7727                           
  7728                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7729                           ; Switch size 1, requested type "speed"
  7730                           ; Number of cases is 1, Range of values is 0 to 0
  7731                           ; switch strategies available:
  7732                           ; Name         Instructions Cycles
  7733                           ; simple_byte            4     3 (average)
  7734                           ; direct_byte           11     8 (fixed)
  7735                           ; jumptable            260     6 (fixed)
  7736                           ;	Chosen strategy is simple_byte
  7737  0916  0827               	movf	??_SET_ROTOR_PWR_HANDLER_ON_WORK+1,w
  7738  0917  3A00               	xorlw	0	; case 0
  7739  0918  1903               	skipnz
  7740  0919  291B               	goto	i1l7086
  7741  091A  2926               	goto	i1l5084
  7742  091B                     i1l7086:	
  7743                           
  7744                           ; Switch size 1, requested type "speed"
  7745                           ; Number of cases is 3, Range of values is 30 to 100
  7746                           ; switch strategies available:
  7747                           ; Name         Instructions Cycles
  7748                           ; simple_byte           10     6 (average)
  7749                           ; direct_byte          224    11 (fixed)
  7750                           ; jumptable            263     9 (fixed)
  7751                           ;	Chosen strategy is simple_byte
  7752  091B  0826               	movf	??_SET_ROTOR_PWR_HANDLER_ON_WORK,w
  7753  091C  3A1E               	xorlw	30	; case 30
  7754  091D  1903               	skipnz
  7755  091E  2900               	goto	i1l5074
  7756  091F  3A2C               	xorlw	44	; case 50
  7757  0920  1903               	skipnz
  7758  0921  2905               	goto	i1l5076
  7759  0922  3A56               	xorlw	86	; case 100
  7760  0923  1903               	skipnz
  7761  0924  290A               	goto	i1l5078
  7762  0925  2926               	goto	i1l5084
  7763  0926                     i1l5084:	
  7764                           
  7765                           ;CONTROL.c: 417:               tKEYPAD_PRESSED PRESSED_KEY = KEYPAD_GET_PRESSED_KEY();
  7766  0926  27AF  120A  158A   	fcall	_KEYPAD_GET_PRESSED_KEY
  7767  0929  0871               	movf	?_KEYPAD_GET_PRESSED_KEY+1,w
  7768  092A  1283               	bcf	3,5	;RP0=0, select bank0
  7769  092B  1303               	bcf	3,6	;RP1=0, select bank0
  7770  092C  00A9               	movwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY+1
  7771  092D  0870               	movf	?_KEYPAD_GET_PRESSED_KEY,w
  7772  092E  00A8               	movwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY
  7773                           
  7774                           ;CONTROL.c: 418:             if ( PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )
  7775  092F  0B29               	decfsz	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY+1,w
  7776  0930  0008               	return
  7777                           
  7778                           ;CONTROL.c: 419:             {;CONTROL.c: 420:                     if (PRESSED_KEY.KEYPA
      +                          D_NO == KEY_1)
  7779  0931  0828               	movf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7780  0932  1D03               	btfss	3,2
  7781  0933  2939               	goto	i1l5092
  7782                           
  7783                           ;CONTROL.c: 421:                     {;CONTROL.c: 422:                       MOTOR_WORK_
      +                          STATE = 30 ;
  7784  0934  301E               	movlw	30
  7785  0935  1683               	bsf	3,5	;RP0=1, select bank3
  7786  0936  1703               	bsf	3,6	;RP1=1, select bank3
  7787  0937  00A9               	movwf	_MOTOR_WORK_STATE^(0+384)
  7788                           
  7789                           ;CONTROL.c: 423:                     }
  7790  0938  0008               	return
  7791  0939                     i1l5092:	
  7792  0939  0B28               	decfsz	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7793  093A  2940               	goto	i1l5096
  7794                           
  7795                           ;CONTROL.c: 425:                     {;CONTROL.c: 426:                       MOTOR_WORK_
      +                          STATE = 50 ;
  7796  093B  3032               	movlw	50
  7797  093C  1683               	bsf	3,5	;RP0=1, select bank3
  7798  093D  1703               	bsf	3,6	;RP1=1, select bank3
  7799  093E  00A9               	movwf	_MOTOR_WORK_STATE^(0+384)
  7800                           
  7801                           ;CONTROL.c: 427:                     }
  7802  093F  0008               	return
  7803  0940                     i1l5096:	
  7804  0940  3002               	movlw	2
  7805  0941  0628               	xorwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7806  0942  1D03               	btfss	3,2
  7807  0943  2949               	goto	i1l5100
  7808                           
  7809                           ;CONTROL.c: 429:                     {;CONTROL.c: 430:                       MOTOR_WORK_
      +                          STATE = 100 ;
  7810  0944  3064               	movlw	100
  7811  0945  1683               	bsf	3,5	;RP0=1, select bank3
  7812  0946  1703               	bsf	3,6	;RP1=1, select bank3
  7813  0947  00A9               	movwf	_MOTOR_WORK_STATE^(0+384)
  7814                           
  7815                           ;CONTROL.c: 431:                     }
  7816  0948  0008               	return
  7817  0949                     i1l5100:	
  7818  0949  300B               	movlw	11
  7819  094A  0628               	xorwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7820  094B  1D03               	btfss	3,2
  7821  094C  2952               	goto	i1l5106
  7822                           
  7823                           ;CONTROL.c: 433:                     {;CONTROL.c: 434:                        CONTROL_CU
      +                          RRENT_STATE =SET_TIME ;
  7824  094D  01EE               	clrf	_CONTROL_CURRENT_STATE
  7825  094E                     L21:	
  7826                           
  7827                           ;CONTROL.c: 435:                        HANDLERS_STATES[SET_ROTOR_PWR] = FIRST_TIME ;
  7828  094E  1683               	bsf	3,5	;RP0=1, select bank3
  7829  094F  1703               	bsf	3,6	;RP1=1, select bank3
  7830  0950  0192               	clrf	(_HANDLERS_STATES^(0+384)+2)
  7831                           
  7832                           ;CONTROL.c: 436:                        STOP_BLINKING();
  7833  0951  2CB2               	ljmp	i1l4742
  7834  0952                     i1l5106:	
  7835                           ;CONTROL.c: 437:                     }
  7836                           
  7837  0952  3009               	movlw	9
  7838  0953  0628               	xorwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7839  0954  1D03               	btfss	3,2
  7840  0955  0008               	return
  7841                           
  7842                           ;CONTROL.c: 439:                     {;CONTROL.c: 440:                        CONTROL_CU
      +                          RRENT_STATE = SET_HEATING;
  7843  0956  01EE               	clrf	_CONTROL_CURRENT_STATE
  7844  0957  0AEE               	incf	_CONTROL_CURRENT_STATE,f
  7845  0958  294E               	goto	L21
  7846  0959                     __end_of_SET_ROTOR_PWR_HANDLER_ON_WORK:	
  7847                           ;CONTROL.c: 441:                        HANDLERS_STATES[SET_ROTOR_PWR] = FIRST_TIME ;
  7848                           
  7849  0959                     __ptext62:	
  7850 ;; *************** function _START_BLINKING_AT *****************
  7851 ;; Defined at:
  7852 ;;		line 110 in file "LCD.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;  BLINKED         1    wreg     unsigned char 
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;  BLINKED         1    5[BANK0 ] unsigned char 
  7857 ;; Return value:  Size  Location     Type
  7858 ;;                  1    wreg      void 
  7859 ;; Registers used:
  7860 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7861 ;; Tracked objects:
  7862 ;;		On entry : 300/0
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7866 ;;      Params:         0       0       0       0       0
  7867 ;;      Locals:         0       1       0       0       0
  7868 ;;      Temps:          0       0       0       0       0
  7869 ;;      Totals:         0       1       0       0       0
  7870 ;;Total ram usage:        1 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; Hardware stack levels required when called:    3
  7873 ;; This function calls:
  7874 ;;		_LCD_SET_CURSOR
  7875 ;;		i1_LCD_SND_COMMAND
  7876 ;; This function is called by:
  7877 ;;		_SET_HEATING_HANDLER_ON_WORK
  7878 ;;		_SET_ROTOR_PWR_HANDLER_ON_WORK
  7879 ;;		_GOTO_NEXT_DIGIT
  7880 ;; This function uses a non-reentrant model
  7881 ;;
  7882                           
  7883                           
  7884                           ;psect for function _START_BLINKING_AT
  7885  0959                     _START_BLINKING_AT:	
  7886                           
  7887                           ;incstack = 0
  7888 ;; hardware stack exceeded
  7889                           ; Regs used in _START_BLINKING_AT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7890                           ;START_BLINKING_AT@BLINKED stored from wreg
  7891  0959  00A5               	movwf	START_BLINKING_AT@BLINKED
  7892                           
  7893                           ;LCD.c: 110: void START_BLINKING_AT (tbyte BLINKED);LCD.c: 111: {;LCD.c: 112:     LCD_SE
      +                          T_CURSOR(0 , BLINKED );
  7894  095A  00A1               	movwf	LCD_SET_CURSOR@row
  7895  095B  3000               	movlw	0
  7896  095C  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
  7897                           
  7898                           ;LCD.c: 114:     LCD_SND_COMMAND(0x0F);
  7899  095F  300F               	movlw	15
  7900  0960  270E               	fcall	i1_LCD_SND_COMMAND
  7901  0961  0008               	return
  7902  0962                     __end_of_START_BLINKING_AT:	
  7903  0962                     __ptext75:	
  7904 ;; *************** function _DEFAULT_HANDLER *****************
  7905 ;; Defined at:
  7906 ;;		line 291 in file "CONTROL.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;		None
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;		None
  7911 ;; Return value:  Size  Location     Type
  7912 ;;                  1    wreg      void 
  7913 ;; Registers used:
  7914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7915 ;; Tracked objects:
  7916 ;;		On entry : 0/0
  7917 ;;		On exit  : 0/0
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7920 ;;      Params:         0       0       0       0       0
  7921 ;;      Locals:         0       0       0       0       0
  7922 ;;      Temps:          0       0       0       0       0
  7923 ;;      Totals:         0       0       0       0       0
  7924 ;;Total ram usage:        0 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; Hardware stack levels required when called:    6
  7927 ;; This function calls:
  7928 ;;		_DISP_SHOW_TIME_AT
  7929 ;;		_DISP_STATMENT
  7930 ;;		_STOP_BLINKING
  7931 ;;		_SW_GET_STATE
  7932 ;; This function is called by:
  7933 ;;		_CONTROL_UPDATE
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           
  7938                           ;psect for function _DEFAULT_HANDLER
  7939  0962                     _DEFAULT_HANDLER:	
  7940  0962                     i1l6198:	
  7941                           ;incstack = 0
  7942 ;; hardware stack exceeded
  7943                           ; Regs used in _DEFAULT_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7944                           
  7945                           
  7946                           ;CONTROL.c: 293:  if(( CONTROL_CURRENT_STATE != HEATING )&( CONTROL_CURRENT_STATE != FIN
      +                          ISH ))
  7947  0962  3003               	movlw	3
  7948  0963  1283               	bcf	3,5	;RP0=0, select bank0
  7949  0964  1303               	bcf	3,6	;RP1=0, select bank0
  7950  0965  066E               	xorwf	_CONTROL_CURRENT_STATE,w
  7951  0966  1903               	btfsc	3,2
  7952  0967  0008               	return
  7953  0968  3004               	movlw	4
  7954  0969  066E               	xorwf	_CONTROL_CURRENT_STATE,w
  7955  096A  1903               	btfsc	3,2
  7956  096B  0008               	return
  7957                           
  7958                           ;CONTROL.c: 294:  {;CONTROL.c: 296:     if ( SW_GET_STATE(START) == SW_PRE_PRESSED )
  7959  096C  3000               	movlw	0
  7960  096D  2256  120A  158A   	fcall	_SW_GET_STATE
  7961  0970  3A01               	xorlw	1
  7962  0971  1D03               	skipz
  7963  0972  0008               	return
  7964                           
  7965                           ;CONTROL.c: 297:     {;CONTROL.c: 299:         if ((SETTED_TIME.HOURS == 0)&
  7966  0973  1283               	bcf	3,5	;RP0=0, select bank0
  7967  0974  1303               	bcf	3,6	;RP1=0, select bank0
  7968  0975  086D               	movf	_SETTED_TIME+2,w
  7969  0976  1D03               	btfss	3,2
  7970  0977  2999               	goto	i1l6222
  7971  0978  086C               	movf	_SETTED_TIME+1,w
  7972  0979  1D03               	btfss	3,2
  7973  097A  2999               	goto	i1l6222
  7974  097B  086B               	movf	_SETTED_TIME,w
  7975  097C  1D03               	btfss	3,2
  7976  097D  2999               	goto	i1l6222
  7977                           
  7978                           ;CONTROL.c: 302:             {;CONTROL.c: 304:                 if (CONTROL_CURRENT_STATE
      +                           != SET_TIME)
  7979  097E  086E               	movf	_CONTROL_CURRENT_STATE,w
  7980  097F  1903               	btfsc	3,2
  7981  0980  2994               	goto	i1l6218
  7982                           
  7983                           ;CONTROL.c: 305:                {;CONTROL.c: 306:                     DISP_SHOW_TIME_AT(
      +                          SETTED_TIME);
  7984  0981  086B               	movf	_SETTED_TIME,w
  7985  0982  00B1               	movwf	DISP_SHOW_TIME_AT@START_TIME
  7986  0983  086C               	movf	_SETTED_TIME+1,w
  7987  0984  00B2               	movwf	DISP_SHOW_TIME_AT@START_TIME+1
  7988  0985  086D               	movf	_SETTED_TIME+2,w
  7989  0986  00B3               	movwf	DISP_SHOW_TIME_AT@START_TIME+2
  7990  0987  24A5  120A  158A   	fcall	_DISP_SHOW_TIME_AT
  7991                           
  7992                           ;CONTROL.c: 307:                     DISP_STATMENT("< SET TIME !!! >");
  7993  098A  3023               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  7994  098B  2280               	fcall	_DISP_STATMENT
  7995                           
  7996                           ;CONTROL.c: 308:                     HANDLERS_STATES[SET_TIME] = ON_WORK;
  7997  098C  1683               	bsf	3,5	;RP0=1, select bank3
  7998  098D  1703               	bsf	3,6	;RP1=1, select bank3
  7999  098E  0190               	clrf	_HANDLERS_STATES^(0+384)
  8000  098F  0A90               	incf	_HANDLERS_STATES^(0+384),f
  8001                           
  8002                           ;CONTROL.c: 309:                     CONTROL_CURRENT_STATE = SET_TIME;
  8003  0990  1283               	bcf	3,5	;RP0=0, select bank0
  8004  0991  1303               	bcf	3,6	;RP1=0, select bank0
  8005  0992  01EE               	clrf	_CONTROL_CURRENT_STATE
  8006                           
  8007                           ;CONTROL.c: 310:                 }
  8008  0993  0008               	return
  8009  0994                     i1l6218:	
  8010                           
  8011                           ;CONTROL.c: 312:                 {;CONTROL.c: 314:                     DISP_STATMENT("< 
      +                          SET TIME !!! >");
  8012  0994  3023               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  8013  0995  2280               	fcall	_DISP_STATMENT
  8014                           
  8015                           ;CONTROL.c: 315:                     CURRENT_DIGIT = (6);
  8016  0996  3006               	movlw	6
  8017  0997  00EF               	movwf	_CURRENT_DIGIT
  8018  0998  0008               	return
  8019  0999                     i1l6222:	
  8020                           
  8021                           ;CONTROL.c: 319:         {;CONTROL.c: 321:             if (SW_GET_STATE(FOOD_SENSOR) != 
      +                          SW_RELEASED )
  8022  0999  3002               	movlw	2
  8023  099A  2256  120A  158A   	fcall	_SW_GET_STATE
  8024  099D  3A02               	xorlw	2
  8025  099E  1903               	skipnz
  8026  099F  29A2               	goto	i1l6226
  8027                           
  8028                           ;CONTROL.c: 322:             {;CONTROL.c: 323:                 DISP_STATMENT("< PUT FOOD
      +                           IN !>");
  8029  09A0  3034               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  8030  09A1  2A80               	ljmp	_DISP_STATMENT
  8031  09A2                     i1l6226:	
  8032                           ;CONTROL.c: 324:             }
  8033                           
  8034                           
  8035                           ;CONTROL.c: 326:             {;CONTROL.c: 328:                 if(SW_GET_STATE(DOOR_SENS
      +                          OR) != SW_RELEASED )
  8036  09A2  3003               	movlw	3
  8037  09A3  2256  120A  158A   	fcall	_SW_GET_STATE
  8038  09A6  3A02               	xorlw	2
  8039  09A7  1903               	skipnz
  8040  09A8  29AB               	goto	i1l6230
  8041                           
  8042                           ;CONTROL.c: 329:                 {;CONTROL.c: 330:                     DISP_STATMENT("< 
      +                          CLOSE DOOR !!>");
  8043  09A9  3056               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  8044  09AA  2A80               	ljmp	_DISP_STATMENT
  8045  09AB                     i1l6230:	
  8046                           ;CONTROL.c: 331:                 }
  8047                           
  8048                           
  8049                           ;CONTROL.c: 333:                 {;CONTROL.c: 335:                     HANDLERS_STATES[C
      +                          ONTROL_CURRENT_STATE] = FIRST_TIME;
  8050  09AB  1283               	bcf	3,5	;RP0=0, select bank0
  8051  09AC  1303               	bcf	3,6	;RP1=0, select bank0
  8052  09AD  086E               	movf	_CONTROL_CURRENT_STATE,w
  8053  09AE  3E90               	addlw	(low (_HANDLERS_STATES| (0+256)))& (0+255)
  8054  09AF  0084               	movwf	4
  8055  09B0  3003               	movlw	3
  8056  09B1  0180               	clrf	0
  8057                           
  8058                           ;CONTROL.c: 336:                     CONTROL_CURRENT_STATE = HEATING;
  8059  09B2  00EE               	movwf	_CONTROL_CURRENT_STATE
  8060                           
  8061                           ;CONTROL.c: 337:                     STOP_BLINKING();
  8062  09B3  2CB2               	ljmp	i1l4742
  8063  09B4                     __end_of_DEFAULT_HANDLER:	
  8064  09B4                     __ptext64:	
  8065 ;; *************** function _HEATING_HANDLER *****************
  8066 ;; Defined at:
  8067 ;;		line 185 in file "CONTROL.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  current_time    3   22[BANK0 ] struct .
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1    wreg      void 
  8074 ;; Registers used:
  8075 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8081 ;;      Params:         0       0       0       0       0
  8082 ;;      Locals:         0       3       0       0       0
  8083 ;;      Temps:          0       2       0       0       0
  8084 ;;      Totals:         0       5       0       0       0
  8085 ;;Total ram usage:        5 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    6
  8088 ;; This function calls:
  8089 ;;		_DISP_SHOW_TIME_AT
  8090 ;;		_DISP_STATMENT
  8091 ;;		_DISP_UPDATE_TIME
  8092 ;;		_LED_SET_STATE
  8093 ;;		_STOP_BLINKING
  8094 ;;		_STOP_HEATING
  8095 ;;		_SW_GET_STATE
  8096 ;;		_TIME_GET
  8097 ;;		_TIME_START_AT
  8098 ;;		i1_HEATER_SET_STATE
  8099 ;;		i1_MOTOR_SET_STATE
  8100 ;; This function is called by:
  8101 ;;		_CONTROL_UPDATE
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           
  8106                           ;psect for function _HEATING_HANDLER
  8107  09B4                     _HEATING_HANDLER:	
  8108                           
  8109                           ;CONTROL.c: 187:     tTIME current_time = TIME_GET();
  8110                           
  8111                           ;incstack = 0
  8112 ;; hardware stack exceeded
  8113                           ; Regs used in _HEATING_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8114  09B4  24B5  120A  158A   	fcall	_TIME_GET
  8115  09B7  0870               	movf	?_TIME_GET,w
  8116  09B8  1283               	bcf	3,5	;RP0=0, select bank0
  8117  09B9  1303               	bcf	3,6	;RP1=0, select bank0
  8118  09BA  00B6               	movwf	HEATING_HANDLER@current_time
  8119  09BB  0871               	movf	?_TIME_GET+1,w
  8120  09BC  00B7               	movwf	HEATING_HANDLER@current_time+1
  8121  09BD  0872               	movf	?_TIME_GET+2,w
  8122  09BE  00B8               	movwf	HEATING_HANDLER@current_time+2
  8123                           
  8124                           ;CONTROL.c: 247:                 }
  8125                           
  8126                           ;CONTROL.c: 241:                        }
  8127                           
  8128                           ;CONTROL.c: 188:     switch (HANDLERS_STATES[HEATING])
  8129  09BF  1683               	bsf	3,5	;RP0=1, select bank3
  8130  09C0  1703               	bsf	3,6	;RP1=1, select bank3
  8131  09C1  0813               	movf	(_HANDLERS_STATES^(0+384)+3),w
  8132  09C2  1283               	bcf	3,5	;RP0=0, select bank0
  8133  09C3  1303               	bcf	3,6	;RP1=0, select bank0
  8134  09C4  00B4               	movwf	??_HEATING_HANDLER
  8135  09C5  01B5               	clrf	??_HEATING_HANDLER+1
  8136                           
  8137                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8138                           ; Switch size 1, requested type "speed"
  8139                           ; Number of cases is 1, Range of values is 0 to 0
  8140                           ; switch strategies available:
  8141                           ; Name         Instructions Cycles
  8142                           ; simple_byte            4     3 (average)
  8143                           ; direct_byte           11     8 (fixed)
  8144                           ; jumptable            260     6 (fixed)
  8145                           ;	Chosen strategy is simple_byte
  8146  09C6  0835               	movf	??_HEATING_HANDLER+1,w
  8147  09C7  3A00               	xorlw	0	; case 0
  8148  09C8  1903               	skipnz
  8149  09C9  2A4D               	goto	i1l7092
  8150  09CA  2A55               	goto	i1l754
  8151  09CB                     i1l6110:	
  8152                           
  8153                           ;CONTROL.c: 191:             STOP_BLINKING();
  8154  09CB  24B2  120A  158A   	fcall	_STOP_BLINKING
  8155                           
  8156                           ;CONTROL.c: 192:             MOTOR_SET_STATE(MOTOR_WORK_STATE );
  8157  09CE  1683               	bsf	3,5	;RP0=1, select bank3
  8158  09CF  1703               	bsf	3,6	;RP1=1, select bank3
  8159  09D0  0829               	movf	_MOTOR_WORK_STATE^(0+384),w
  8160  09D1  24A0  120A  158A   	fcall	i1_MOTOR_SET_STATE
  8161                           
  8162                           ;CONTROL.c: 193:             HEATER_SET_STATE(HEATER_WORK_STATE);
  8163  09D4  0828               	movf	_HEATER_WORK_STATE^(0+384),w
  8164  09D5  249D  120A  158A   	fcall	i1_HEATER_SET_STATE
  8165                           
  8166                           ;CONTROL.c: 194:             LED_SET_STATE(LAMP , LED_ON);
  8167  09D8  1283               	bcf	3,5	;RP0=0, select bank0
  8168  09D9  1303               	bcf	3,6	;RP1=0, select bank0
  8169  09DA  3000               	movlw	0
  8170  09DB  01A0               	clrf	LED_SET_STATE@LED_STATE
  8171  09DC  0AA0               	incf	LED_SET_STATE@LED_STATE,f
  8172  09DD  2291  120A  158A   	fcall	_LED_SET_STATE
  8173                           
  8174                           ;CONTROL.c: 195:             TIME_START_AT (SETTED_TIME.SECONDS ,SETTED_TIME.MINUTES , S
      +                          ETTED_TIME.HOURS , DECREMENTAL_TO_O );
  8175  09E0  086C               	movf	_SETTED_TIME+1,w
  8176  09E1  00F0               	movwf	TIME_START_AT@START_MINUTES
  8177  09E2  086D               	movf	_SETTED_TIME+2,w
  8178  09E3  00F1               	movwf	TIME_START_AT@START_HOURS
  8179  09E4  01F2               	clrf	TIME_START_AT@COUNTING_TYPE
  8180  09E5  086B               	movf	_SETTED_TIME,w
  8181  09E6  252A  120A  158A   	fcall	_TIME_START_AT
  8182                           
  8183                           ;CONTROL.c: 196:             DISP_SHOW_TIME_AT( SETTED_TIME );
  8184  09E9  1283               	bcf	3,5	;RP0=0, select bank0
  8185  09EA  1303               	bcf	3,6	;RP1=0, select bank0
  8186  09EB  086B               	movf	_SETTED_TIME,w
  8187  09EC  00B1               	movwf	DISP_SHOW_TIME_AT@START_TIME
  8188  09ED  086C               	movf	_SETTED_TIME+1,w
  8189  09EE  00B2               	movwf	DISP_SHOW_TIME_AT@START_TIME+1
  8190  09EF  086D               	movf	_SETTED_TIME+2,w
  8191  09F0  00B3               	movwf	DISP_SHOW_TIME_AT@START_TIME+2
  8192  09F1  24A5               	fcall	_DISP_SHOW_TIME_AT
  8193                           
  8194                           ;CONTROL.c: 197:             HANDLERS_STATES[HEATING] = ON_WORK ;
  8195  09F2  1683               	bsf	3,5	;RP0=1, select bank3
  8196  09F3  1703               	bsf	3,6	;RP1=1, select bank3
  8197  09F4  0193               	clrf	(_HANDLERS_STATES^(0+384)+3)
  8198  09F5  0A93               	incf	(_HANDLERS_STATES^(0+384)+3),f
  8199                           
  8200                           ;CONTROL.c: 198:         break;
  8201  09F6  0008               	return
  8202  09F7                     i1l6122:	
  8203                           
  8204                           ;CONTROL.c: 201:             DISP_UPDATE_TIME(current_time);
  8205  09F7  0836               	movf	HEATING_HANDLER@current_time,w
  8206  09F8  00B1               	movwf	DISP_UPDATE_TIME@time
  8207  09F9  0837               	movf	HEATING_HANDLER@current_time+1,w
  8208  09FA  00B2               	movwf	DISP_UPDATE_TIME@time+1
  8209  09FB  0838               	movf	HEATING_HANDLER@current_time+2,w
  8210  09FC  00B3               	movwf	DISP_UPDATE_TIME@time+2
  8211  09FD  2079  120A  158A   	fcall	_DISP_UPDATE_TIME
  8212                           
  8213                           ;CONTROL.c: 203:             if ((current_time.HOURS == 0)&
  8214  0A00  1283               	bcf	3,5	;RP0=0, select bank0
  8215  0A01  1303               	bcf	3,6	;RP1=0, select bank0
  8216  0A02  0838               	movf	HEATING_HANDLER@current_time+2,w
  8217  0A03  1D03               	btfss	3,2
  8218  0A04  2A14               	goto	i1l6136
  8219  0A05  0837               	movf	HEATING_HANDLER@current_time+1,w
  8220  0A06  1D03               	btfss	3,2
  8221  0A07  2A14               	goto	i1l6136
  8222  0A08  0836               	movf	HEATING_HANDLER@current_time,w
  8223  0A09  1D03               	btfss	3,2
  8224  0A0A  2A14               	goto	i1l6136
  8225                           
  8226                           ;CONTROL.c: 206:             {;CONTROL.c: 207:                 STOP_HEATING();
  8227  0A0B  2261               	fcall	_STOP_HEATING
  8228                           
  8229                           ;CONTROL.c: 208:                 CONTROL_CURRENT_STATE = FINISH;
  8230  0A0C  3004               	movlw	4
  8231  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
  8232  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
  8233  0A0F  00EE               	movwf	_CONTROL_CURRENT_STATE
  8234                           
  8235                           ;CONTROL.c: 209:                 HANDLERS_STATES[HEATING] = FIRST_TIME ;
  8236  0A10  1683               	bsf	3,5	;RP0=1, select bank3
  8237  0A11  1703               	bsf	3,6	;RP1=1, select bank3
  8238  0A12  0193               	clrf	(_HANDLERS_STATES^(0+384)+3)
  8239                           
  8240                           ;CONTROL.c: 210:             }
  8241  0A13  0008               	return
  8242  0A14                     i1l6136:	
  8243                           
  8244                           ;CONTROL.c: 212:             {;CONTROL.c: 213:                 if (SW_GET_STATE(FOOD_SEN
      +                          SOR) != SW_RELEASED )
  8245  0A14  3002               	movlw	2
  8246  0A15  2256  120A  158A   	fcall	_SW_GET_STATE
  8247  0A18  3A02               	xorlw	2
  8248  0A19  1903               	skipnz
  8249  0A1A  2A27               	goto	i1l6146
  8250                           
  8251                           ;CONTROL.c: 214:                 {;CONTROL.c: 216:                     STOP_HEATING();
  8252  0A1B  2261  120A  158A   	fcall	_STOP_HEATING
  8253                           
  8254                           ;CONTROL.c: 217:                     CONTROL_CURRENT_STATE = SET_TIME;
  8255  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  8256  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  8257  0A20  01EE               	clrf	_CONTROL_CURRENT_STATE
  8258                           
  8259                           ;CONTROL.c: 218:                     HANDLERS_STATES[SET_TIME] = ON_WORK;
  8260  0A21  1683               	bsf	3,5	;RP0=1, select bank3
  8261  0A22  1703               	bsf	3,6	;RP1=1, select bank3
  8262  0A23  3045               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  8263  0A24  0190               	clrf	_HANDLERS_STATES^(0+384)
  8264  0A25  0A90               	incf	_HANDLERS_STATES^(0+384),f
  8265                           
  8266                           ;CONTROL.c: 219:                     DISP_STATMENT("< CHECK FOOD !!>");
  8267  0A26  2A80               	ljmp	_DISP_STATMENT
  8268  0A27                     i1l6146:	
  8269                           ;CONTROL.c: 220:                 }
  8270                           
  8271                           
  8272                           ;CONTROL.c: 222:                 {;CONTROL.c: 223:                     if(SW_GET_STATE(D
      +                          OOR_SENSOR) != SW_RELEASED )
  8273  0A27  3003               	movlw	3
  8274  0A28  2256  120A  158A   	fcall	_SW_GET_STATE
  8275  0A2B  3A02               	xorlw	2
  8276  0A2C  1903               	skipnz
  8277  0A2D  2A3A               	goto	i1l6156
  8278                           
  8279                           ;CONTROL.c: 224:                     {;CONTROL.c: 226:                         STOP_HEAT
      +                          ING();
  8280  0A2E  2261  120A  158A   	fcall	_STOP_HEATING
  8281                           
  8282                           ;CONTROL.c: 227:                         CONTROL_CURRENT_STATE = SET_TIME;
  8283  0A31  1283               	bcf	3,5	;RP0=0, select bank0
  8284  0A32  1303               	bcf	3,6	;RP1=0, select bank0
  8285  0A33  01EE               	clrf	_CONTROL_CURRENT_STATE
  8286                           
  8287                           ;CONTROL.c: 228:                         HANDLERS_STATES[SET_TIME] = ON_WORK;
  8288  0A34  1683               	bsf	3,5	;RP0=1, select bank3
  8289  0A35  1703               	bsf	3,6	;RP1=1, select bank3
  8290  0A36  3056               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  8291  0A37  0190               	clrf	_HANDLERS_STATES^(0+384)
  8292  0A38  0A90               	incf	_HANDLERS_STATES^(0+384),f
  8293                           
  8294                           ;CONTROL.c: 229:                         DISP_STATMENT("< CLOSE DOOR !!>");
  8295  0A39  2A80               	ljmp	_DISP_STATMENT
  8296  0A3A                     i1l6156:	
  8297                           ;CONTROL.c: 231:                     }
  8298                           
  8299                           
  8300                           ;CONTROL.c: 233:                     {;CONTROL.c: 234:                        if(SW_GET_
      +                          STATE(Cancel) == SW_PRE_PRESSED )
  8301  0A3A  3001               	movlw	1
  8302  0A3B  2256  120A  158A   	fcall	_SW_GET_STATE
  8303  0A3E  3A01               	xorlw	1
  8304  0A3F  1D03               	skipz
  8305  0A40  0008               	return
  8306                           
  8307                           ;CONTROL.c: 235:                        {;CONTROL.c: 237:                          STOP_
      +                          HEATING();
  8308  0A41  2261  120A  158A   	fcall	_STOP_HEATING
  8309                           
  8310                           ;CONTROL.c: 238:                          CONTROL_CURRENT_STATE = SET_TIME;
  8311  0A44  1283               	bcf	3,5	;RP0=0, select bank0
  8312  0A45  1303               	bcf	3,6	;RP1=0, select bank0
  8313  0A46  01EE               	clrf	_CONTROL_CURRENT_STATE
  8314                           
  8315                           ;CONTROL.c: 239:                          HANDLERS_STATES[SET_TIME] = ON_WORK;
  8316  0A47  1683               	bsf	3,5	;RP0=1, select bank3
  8317  0A48  1703               	bsf	3,6	;RP1=1, select bank3
  8318  0A49  3001               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  8319  0A4A  0190               	clrf	_HANDLERS_STATES^(0+384)
  8320  0A4B  0A90               	incf	_HANDLERS_STATES^(0+384),f
  8321                           
  8322                           ;CONTROL.c: 240:                          DISP_STATMENT("< CANCELLED !! >");
  8323  0A4C  2A80               	ljmp	_DISP_STATMENT
  8324  0A4D                     i1l7092:	
  8325                           
  8326                           ; Switch size 1, requested type "speed"
  8327                           ; Number of cases is 2, Range of values is 0 to 1
  8328                           ; switch strategies available:
  8329                           ; Name         Instructions Cycles
  8330                           ; simple_byte            7     4 (average)
  8331                           ; direct_byte           14     8 (fixed)
  8332                           ; jumptable            260     6 (fixed)
  8333                           ;	Chosen strategy is simple_byte
  8334  0A4D  0834               	movf	??_HEATING_HANDLER,w
  8335  0A4E  3A00               	xorlw	0	; case 0
  8336  0A4F  1903               	skipnz
  8337  0A50  29CB               	goto	i1l6110
  8338  0A51  3A01               	xorlw	1	; case 1
  8339  0A52  1903               	skipnz
  8340  0A53  29F7               	goto	i1l6122
  8341  0A54  2A55               	goto	i1l754
  8342  0A55                     i1l754:	
  8343  0A55  0008               	return
  8344  0A56                     __end_of_HEATING_HANDLER:	
  8345  0A56                     __ptext76:	
  8346 ;; *************** function _SW_GET_STATE *****************
  8347 ;; Defined at:
  8348 ;;		line 124 in file "SW.c"
  8349 ;; Parameters:    Size  Location     Type
  8350 ;;  SW_NO           1    wreg     enum E5
  8351 ;; Auto vars:     Size  Location     Type
  8352 ;;  SW_NO           1    3[COMMON] enum E5
  8353 ;;  ret             1    4[COMMON] enum E916
  8354 ;; Return value:  Size  Location     Type
  8355 ;;                  1    wreg      enum E916
  8356 ;; Registers used:
  8357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8358 ;; Tracked objects:
  8359 ;;		On entry : 0/300
  8360 ;;		On exit  : 800/800
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8363 ;;      Params:         0       0       0       0       0
  8364 ;;      Locals:         2       0       0       0       0
  8365 ;;      Temps:          0       0       0       0       0
  8366 ;;      Totals:         2       0       0       0       0
  8367 ;;Total ram usage:        2 bytes
  8368 ;; Hardware stack levels used:    1
  8369 ;; Hardware stack levels required when called:    1
  8370 ;; This function calls:
  8371 ;;		i1___bmul
  8372 ;; This function is called by:
  8373 ;;		_HEATING_HANDLER
  8374 ;;		_FINISH_HANDLER
  8375 ;;		_DEFAULT_HANDLER
  8376 ;;		_SET_TIME_HANDLER_ON_WORK
  8377 ;; This function uses a non-reentrant model
  8378 ;;
  8379                           
  8380                           
  8381                           ;psect for function _SW_GET_STATE
  8382  0A56                     _SW_GET_STATE:	
  8383                           
  8384                           ;incstack = 0
  8385 ;; hardware stack exceeded
  8386                           ; Regs used in _SW_GET_STATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8387                           ;SW_GET_STATE@SW_NO stored from wreg
  8388  0A56  00F3               	movwf	SW_GET_STATE@SW_NO
  8389                           
  8390                           ;SW.c: 124: tSW_STATE SW_GET_STATE (tSW SW_NO);SW.c: 125: {;SW.c: 126:  tSW_STATE ret ;;
      +                          SW.c: 127:  ret = SWs[SW_NO].SW_STATE ;
  8391  0A57  3005               	movlw	5
  8392  0A58  00F0               	movwf	i1___bmul@multiplicand
  8393  0A59  0873               	movf	SW_GET_STATE@SW_NO,w
  8394  0A5A  2473               	fcall	i1___bmul
  8395  0A5B  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  8396  0A5C  0084               	movwf	4
  8397  0A5D  1783               	bsf	3,7	;select IRP bank3
  8398  0A5E  0800               	movf	0,w
  8399  0A5F  00F4               	movwf	SW_GET_STATE@ret
  8400                           
  8401                           ;SW.c: 128:  return ret ;
  8402  0A60  0008               	return
  8403  0A61                     __end_of_SW_GET_STATE:	
  8404  0A61                     __ptext67:	
  8405 ;; *************** function _STOP_HEATING *****************
  8406 ;; Defined at:
  8407 ;;		line 643 in file "CONTROL.c"
  8408 ;; Parameters:    Size  Location     Type
  8409 ;;		None
  8410 ;; Auto vars:     Size  Location     Type
  8411 ;;		None
  8412 ;; Return value:  Size  Location     Type
  8413 ;;                  1    wreg      void 
  8414 ;; Registers used:
  8415 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 300/300
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8421 ;;      Params:         0       0       0       0       0
  8422 ;;      Locals:         0       0       0       0       0
  8423 ;;      Temps:          0       0       0       0       0
  8424 ;;      Totals:         0       0       0       0       0
  8425 ;;Total ram usage:        0 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:    2
  8428 ;; This function calls:
  8429 ;;		_LED_SET_STATE
  8430 ;;		_TIME_GET
  8431 ;;		_TIME_STOP
  8432 ;;		i1_HEATER_SET_STATE
  8433 ;;		i1_MOTOR_SET_STATE
  8434 ;; This function is called by:
  8435 ;;		_HEATING_HANDLER
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           
  8440                           ;psect for function _STOP_HEATING
  8441  0A61                     _STOP_HEATING:	
  8442                           
  8443                           ;CONTROL.c: 646:     MOTOR_SET_STATE( 0 );
  8444                           
  8445                           ;incstack = 0
  8446 ;; hardware stack exceeded
  8447                           ; Regs used in _STOP_HEATING: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8448  0A61  3000               	movlw	0
  8449  0A62  24A0  120A  158A   	fcall	i1_MOTOR_SET_STATE
  8450                           
  8451                           ;CONTROL.c: 648:     HEATER_SET_STATE(0);
  8452  0A65  3000               	movlw	0
  8453  0A66  249D  120A  158A   	fcall	i1_HEATER_SET_STATE
  8454                           
  8455                           ;CONTROL.c: 650:     LED_SET_STATE(LAMP , LED_OFF);
  8456  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  8457  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  8458  0A6B  3000               	movlw	0
  8459  0A6C  01A0               	clrf	LED_SET_STATE@LED_STATE
  8460  0A6D  2291  120A  158A   	fcall	_LED_SET_STATE
  8461                           
  8462                           ;CONTROL.c: 652:     TIME_STOP();
  8463  0A70  2526  120A  158A   	fcall	_TIME_STOP
  8464                           
  8465                           ;CONTROL.c: 654:     SETTED_TIME = TIME_GET();
  8466  0A73  24B5               	fcall	_TIME_GET
  8467  0A74  0870               	movf	?_TIME_GET,w
  8468  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  8469  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  8470  0A77  00EB               	movwf	_SETTED_TIME
  8471  0A78  0871               	movf	?_TIME_GET+1,w
  8472  0A79  00EC               	movwf	_SETTED_TIME+1
  8473  0A7A  0872               	movf	?_TIME_GET+2,w
  8474  0A7B  00ED               	movwf	_SETTED_TIME+2
  8475                           
  8476                           ;CONTROL.c: 659:     HANDLERS_STATES[HEATING] = FIRST_TIME ;
  8477  0A7C  1683               	bsf	3,5	;RP0=1, select bank3
  8478  0A7D  1703               	bsf	3,6	;RP1=1, select bank3
  8479  0A7E  0193               	clrf	(_HANDLERS_STATES^(0+384)+3)
  8480  0A7F  0008               	return
  8481  0A80                     __end_of_STOP_HEATING:	
  8482  0A80                     __ptext79:	
  8483 ;; *************** function _DISP_STATMENT *****************
  8484 ;; Defined at:
  8485 ;;		line 92 in file "Display.c"
  8486 ;; Parameters:    Size  Location     Type
  8487 ;;  statment        1    wreg     PTR unsigned char 
  8488 ;;		 -> STR_17(17), STR_16(17), STR_15(17), STR_14(17), 
  8489 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  statment        1    5[BANK0 ] PTR unsigned char 
  8492 ;;		 -> STR_17(17), STR_16(17), STR_15(17), STR_14(17), 
  8493 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  1    wreg      void 
  8496 ;; Registers used:
  8497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8498 ;; Tracked objects:
  8499 ;;		On entry : 0/B00
  8500 ;;		On exit  : 300/0
  8501 ;;		Unchanged: 0/0
  8502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8503 ;;      Params:         0       0       0       0       0
  8504 ;;      Locals:         0       1       0       0       0
  8505 ;;      Temps:          0       0       0       0       0
  8506 ;;      Totals:         0       1       0       0       0
  8507 ;;Total ram usage:        1 bytes
  8508 ;; Hardware stack levels used:    1
  8509 ;; Hardware stack levels required when called:    3
  8510 ;; This function calls:
  8511 ;;		_LCD_SEND_A_STRING
  8512 ;;		_LCD_SET_CURSOR
  8513 ;; This function is called by:
  8514 ;;		_HEATING_HANDLER
  8515 ;;		_FINISH_HANDLER
  8516 ;;		_DEFAULT_HANDLER
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           
  8521                           ;psect for function _DISP_STATMENT
  8522  0A80                     _DISP_STATMENT:	
  8523                           
  8524                           ;incstack = 0
  8525 ;; hardware stack exceeded
  8526                           ; Regs used in _DISP_STATMENT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8527                           ;DISP_STATMENT@statment stored from wreg
  8528  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  8529  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  8530  0A82  00A5               	movwf	DISP_STATMENT@statment
  8531  0A83  3001               	movlw	1
  8532                           
  8533                           ;Display.c: 92: void DISP_STATMENT (tbyte * statment);Display.c: 93: {;Display.c: 94:   
      +                          LCD_SET_CURSOR(1,0);
  8534  0A84  01A1               	clrf	LCD_SET_CURSOR@row
  8535  0A85  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
  8536                           
  8537                           ;Display.c: 95:  LCD_SEND_A_STRING(statment);
  8538  0A88  1283               	bcf	3,5	;RP0=0, select bank0
  8539  0A89  1303               	bcf	3,6	;RP1=0, select bank0
  8540  0A8A  0825               	movf	DISP_STATMENT@statment,w
  8541  0A8B  00A1               	movwf	LCD_SEND_A_STRING@string
  8542  0A8C  3000               	movlw	0
  8543  0A8D  1D03               	btfss	3,2
  8544  0A8E  3080               	movlw	128
  8545  0A8F  00A2               	movwf	LCD_SEND_A_STRING@string+1
  8546  0A90  2E86               	ljmp	i1l4490
  8547  0A91                     __end_of_DISP_STATMENT:	
  8548  0A91                     __ptext72:	
  8549 ;; *************** function _LED_SET_STATE *****************
  8550 ;; Defined at:
  8551 ;;		line 52 in file "LED.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;  LED_NO          1    wreg     enum E2
  8554 ;;  LED_STATE       1    0[BANK0 ] enum E916
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;  LED_NO          1    2[BANK0 ] enum E2
  8557 ;;  ret             1    0        enum E865
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  1    wreg      enum E865
  8560 ;; Registers used:
  8561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8562 ;; Tracked objects:
  8563 ;;		On entry : 300/0
  8564 ;;		On exit  : B00/800
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8567 ;;      Params:         0       1       0       0       0
  8568 ;;      Locals:         0       2       0       0       0
  8569 ;;      Temps:          0       0       0       0       0
  8570 ;;      Totals:         0       3       0       0       0
  8571 ;;Total ram usage:        3 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    1
  8574 ;; This function calls:
  8575 ;;		i1_GPIO_PIN_SET_STATE
  8576 ;;		i1___bmul
  8577 ;; This function is called by:
  8578 ;;		_HEATING_HANDLER
  8579 ;;		_STOP_HEATING
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           
  8584                           ;psect for function _LED_SET_STATE
  8585  0A91                     _LED_SET_STATE:	
  8586                           
  8587                           ;incstack = 0
  8588 ;; hardware stack exceeded
  8589                           ; Regs used in _LED_SET_STATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8590                           ;LED_SET_STATE@LED_NO stored from wreg
  8591  0A91  00A2               	movwf	LED_SET_STATE@LED_NO
  8592                           
  8593                           ;LED.c: 56:  GPIO_PIN_SET_STATE(LEDs[LED_NO].LED_PORT, LEDs[LED_NO].LED_PIN , LED_STATE)
      +                          ;
  8594  0A92  3003               	movlw	3
  8595  0A93  00F0               	movwf	i1___bmul@multiplicand
  8596  0A94  0822               	movf	LED_SET_STATE@LED_NO,w
  8597  0A95  2473  120A  158A   	fcall	i1___bmul
  8598  0A98  3ED0               	addlw	(low ((_LEDs| (0+256)+1)))& (0+255)
  8599  0A99  0084               	movwf	4
  8600  0A9A  1783               	bsf	3,7	;select IRP bank3
  8601  0A9B  0800               	movf	0,w
  8602  0A9C  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
  8603  0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  8604  0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  8605  0A9F  0820               	movf	LED_SET_STATE@LED_STATE,w
  8606  0AA0  00F4               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
  8607  0AA1  3003               	movlw	3
  8608  0AA2  00F0               	movwf	i1___bmul@multiplicand
  8609  0AA3  0822               	movf	LED_SET_STATE@LED_NO,w
  8610  0AA4  2473  120A  158A   	fcall	i1___bmul
  8611  0AA7  3ECF               	addlw	(low (_LEDs| (0+256)))& (0+255)
  8612  0AA8  0084               	movwf	4
  8613  0AA9  1783               	bsf	3,7	;select IRP bank3
  8614  0AAA  0800               	movf	0,w
  8615  0AAB  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
  8616                           
  8617                           ;LED.c: 57:  LEDs[LED_NO].LED_STATE = LED_STATE ;
  8618  0AAE  3003               	movlw	3
  8619  0AAF  00F0               	movwf	i1___bmul@multiplicand
  8620  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  8621  0AB1  1303               	bcf	3,6	;RP1=0, select bank0
  8622  0AB2  0822               	movf	LED_SET_STATE@LED_NO,w
  8623  0AB3  2473               	fcall	i1___bmul
  8624  0AB4  3ED1               	addlw	(low ((_LEDs| (0+256)+2)))& (0+255)
  8625  0AB5  0084               	movwf	4
  8626  0AB6  1283               	bcf	3,5	;RP0=0, select bank0
  8627  0AB7  1303               	bcf	3,6	;RP1=0, select bank0
  8628  0AB8  0820               	movf	LED_SET_STATE@LED_STATE,w
  8629  0AB9  1783               	bsf	3,7	;select IRP bank3
  8630  0ABA  0080               	movwf	0
  8631  0ABB  0008               	return
  8632  0ABC                     __end_of_LED_SET_STATE:	
  8633  0ABC                     __ptext52:	
  8634 ;; *************** function _INCREMENT_THIS *****************
  8635 ;; Defined at:
  8636 ;;		line 598 in file "CONTROL.c"
  8637 ;; Parameters:    Size  Location     Type
  8638 ;;  KEY             1    wreg     unsigned char 
  8639 ;; Auto vars:     Size  Location     Type
  8640 ;;  KEY             1   20[BANK0 ] unsigned char 
  8641 ;; Return value:  Size  Location     Type
  8642 ;;                  1    wreg      void 
  8643 ;; Registers used:
  8644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8645 ;; Tracked objects:
  8646 ;;		On entry : 300/300
  8647 ;;		On exit  : 0/0
  8648 ;;		Unchanged: 0/0
  8649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8650 ;;      Params:         0       0       0       0       0
  8651 ;;      Locals:         0       1       0       0       0
  8652 ;;      Temps:          0       2       0       0       0
  8653 ;;      Totals:         0       3       0       0       0
  8654 ;;Total ram usage:        3 bytes
  8655 ;; Hardware stack levels used:    1
  8656 ;; Hardware stack levels required when called:    5
  8657 ;; This function calls:
  8658 ;;		_DISP_UPDATE_TIME_UNIT_AT
  8659 ;;		_GOTO_NEXT_DIGIT
  8660 ;;		_LCD_SET_CURSOR
  8661 ;;		___lbmod
  8662 ;;		i1___bmul
  8663 ;; This function is called by:
  8664 ;;		_SET_TIME_HANDLER_ON_WORK
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           
  8669                           ;psect for function _INCREMENT_THIS
  8670  0ABC                     _INCREMENT_THIS:	
  8671                           
  8672                           ;incstack = 0
  8673 ;; hardware stack exceeded
  8674                           ; Regs used in _INCREMENT_THIS: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8675                           ;INCREMENT_THIS@KEY stored from wreg
  8676  0ABC  1283               	bcf	3,5	;RP0=0, select bank0
  8677  0ABD  1303               	bcf	3,6	;RP1=0, select bank0
  8678  0ABE  00B4               	movwf	INCREMENT_THIS@KEY
  8679                           
  8680                           ;CONTROL.c: 598: static void INCREMENT_THIS (tbyte KEY);CONTROL.c: 599: {;CONTROL.c: 601
      +                          :     if (KEY == KEY_0 )
  8681  0ABF  3A0A               	xorlw	10
  8682  0AC0  1D03               	btfss	3,2
  8683  0AC1  2B22               	goto	i1l4808
  8684                           
  8685                           ;CONTROL.c: 602:     {;CONTROL.c: 603:         KEY = -1;
  8686  0AC2  30FF               	movlw	255
  8687  0AC3  00B4               	movwf	INCREMENT_THIS@KEY
  8688  0AC4  2B22               	goto	i1l4808
  8689  0AC5                     i1l4794:	
  8690                           
  8691                           ;CONTROL.c: 608:            SETTED_TIME.HOURS = ((SETTED_TIME.HOURS % 10 ) + ((KEY +1 )*
      +                          10)) ;
  8692  0AC5  300A               	movlw	10
  8693  0AC6  00F0               	movwf	___lbmod@divisor
  8694  0AC7  086D               	movf	_SETTED_TIME+2,w
  8695  0AC8  2351  120A  158A   	fcall	___lbmod
  8696  0ACB  00B2               	movwf	??_INCREMENT_THIS
  8697  0ACC  300A               	movlw	10
  8698  0ACD  00F0               	movwf	i1___bmul@multiplicand
  8699  0ACE  0834               	movf	INCREMENT_THIS@KEY,w
  8700  0ACF  2473  120A  158A   	fcall	i1___bmul
  8701  0AD2  1283               	bcf	3,5	;RP0=0, select bank0
  8702  0AD3  1303               	bcf	3,6	;RP1=0, select bank0
  8703  0AD4  0732               	addwf	??_INCREMENT_THIS,w
  8704  0AD5  3E0A               	addlw	10
  8705  0AD6  2AE2               	goto	L12
  8706  0AD7                     i1l4796:	
  8707                           ;CONTROL.c: 609:         break;
  8708                           
  8709                           
  8710                           ;CONTROL.c: 611:            SETTED_TIME.HOURS = ((SETTED_TIME.HOURS - (SETTED_TIME.HOURS
      +                           % 10 )) + (KEY +1 )) ;
  8711  0AD7  300A               	movlw	10
  8712  0AD8  00F0               	movwf	___lbmod@divisor
  8713  0AD9  086D               	movf	_SETTED_TIME+2,w
  8714  0ADA  2351  120A  158A   	fcall	___lbmod
  8715  0ADD  026D               	subwf	_SETTED_TIME+2,w
  8716  0ADE  00B2               	movwf	??_INCREMENT_THIS
  8717  0ADF  0834               	movf	INCREMENT_THIS@KEY,w
  8718  0AE0  0732               	addwf	??_INCREMENT_THIS,w
  8719  0AE1  3E01               	addlw	1
  8720  0AE2                     L12:	
  8721  0AE2  00ED               	movwf	_SETTED_TIME+2
  8722                           
  8723                           ;CONTROL.c: 612:         break;
  8724  0AE3  2B3E               	goto	i1l4810
  8725  0AE4                     i1l4798:	
  8726                           
  8727                           ;CONTROL.c: 614:            SETTED_TIME.MINUTES = ((SETTED_TIME.MINUTES % 10) + ((KEY +1
      +                           )*10)) ;
  8728  0AE4  300A               	movlw	10
  8729  0AE5  00F0               	movwf	___lbmod@divisor
  8730  0AE6  086C               	movf	_SETTED_TIME+1,w
  8731  0AE7  2351  120A  158A   	fcall	___lbmod
  8732  0AEA  00B2               	movwf	??_INCREMENT_THIS
  8733  0AEB  300A               	movlw	10
  8734  0AEC  00F0               	movwf	i1___bmul@multiplicand
  8735  0AED  0834               	movf	INCREMENT_THIS@KEY,w
  8736  0AEE  2473  120A  158A   	fcall	i1___bmul
  8737  0AF1  1283               	bcf	3,5	;RP0=0, select bank0
  8738  0AF2  1303               	bcf	3,6	;RP1=0, select bank0
  8739  0AF3  0732               	addwf	??_INCREMENT_THIS,w
  8740  0AF4  3E0A               	addlw	10
  8741  0AF5  2B01               	goto	L13
  8742  0AF6                     i1l4800:	
  8743                           ;CONTROL.c: 615:         break;
  8744                           
  8745                           
  8746                           ;CONTROL.c: 617:            SETTED_TIME.MINUTES = ((SETTED_TIME.MINUTES - (SETTED_TIME.M
      +                          INUTES % 10 )) + (KEY +1 )) ;
  8747  0AF6  300A               	movlw	10
  8748  0AF7  00F0               	movwf	___lbmod@divisor
  8749  0AF8  086C               	movf	_SETTED_TIME+1,w
  8750  0AF9  2351  120A  158A   	fcall	___lbmod
  8751  0AFC  026C               	subwf	_SETTED_TIME+1,w
  8752  0AFD  00B2               	movwf	??_INCREMENT_THIS
  8753  0AFE  0834               	movf	INCREMENT_THIS@KEY,w
  8754  0AFF  0732               	addwf	??_INCREMENT_THIS,w
  8755  0B00  3E01               	addlw	1
  8756  0B01                     L13:	
  8757  0B01  00EC               	movwf	_SETTED_TIME+1
  8758                           
  8759                           ;CONTROL.c: 618:         break;
  8760  0B02  2B3E               	goto	i1l4810
  8761  0B03                     i1l4802:	
  8762                           
  8763                           ;CONTROL.c: 620:            SETTED_TIME.SECONDS = ((SETTED_TIME.SECONDS % 10 ) + ((KEY +
      +                          1 )*10)) ;
  8764  0B03  300A               	movlw	10
  8765  0B04  00F0               	movwf	___lbmod@divisor
  8766  0B05  086B               	movf	_SETTED_TIME,w
  8767  0B06  2351  120A  158A   	fcall	___lbmod
  8768  0B09  00B2               	movwf	??_INCREMENT_THIS
  8769  0B0A  300A               	movlw	10
  8770  0B0B  00F0               	movwf	i1___bmul@multiplicand
  8771  0B0C  0834               	movf	INCREMENT_THIS@KEY,w
  8772  0B0D  2473  120A  158A   	fcall	i1___bmul
  8773  0B10  1283               	bcf	3,5	;RP0=0, select bank0
  8774  0B11  1303               	bcf	3,6	;RP1=0, select bank0
  8775  0B12  0732               	addwf	??_INCREMENT_THIS,w
  8776  0B13  3E0A               	addlw	10
  8777  0B14  2B20               	goto	L14
  8778  0B15                     i1l4804:	
  8779                           ;CONTROL.c: 621:         break;
  8780                           
  8781                           
  8782                           ;CONTROL.c: 623:            SETTED_TIME.SECONDS = ((SETTED_TIME.SECONDS - (SETTED_TIME.S
      +                          ECONDS % 10 )) + (KEY +1 )) ;
  8783  0B15  300A               	movlw	10
  8784  0B16  00F0               	movwf	___lbmod@divisor
  8785  0B17  086B               	movf	_SETTED_TIME,w
  8786  0B18  2351  120A  158A   	fcall	___lbmod
  8787  0B1B  026B               	subwf	_SETTED_TIME,w
  8788  0B1C  00B2               	movwf	??_INCREMENT_THIS
  8789  0B1D  0834               	movf	INCREMENT_THIS@KEY,w
  8790  0B1E  0732               	addwf	??_INCREMENT_THIS,w
  8791  0B1F  3E01               	addlw	1
  8792  0B20                     L14:	
  8793  0B20  00EB               	movwf	_SETTED_TIME
  8794                           
  8795                           ;CONTROL.c: 624:         break;
  8796  0B21  2B3E               	goto	i1l4810
  8797  0B22                     i1l4808:	
  8798  0B22  086F               	movf	_CURRENT_DIGIT,w
  8799  0B23  00B2               	movwf	??_INCREMENT_THIS
  8800  0B24  01B3               	clrf	??_INCREMENT_THIS+1
  8801                           
  8802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8803                           ; Switch size 1, requested type "speed"
  8804                           ; Number of cases is 1, Range of values is 0 to 0
  8805                           ; switch strategies available:
  8806                           ; Name         Instructions Cycles
  8807                           ; simple_byte            4     3 (average)
  8808                           ; direct_byte           11     8 (fixed)
  8809                           ; jumptable            260     6 (fixed)
  8810                           ;	Chosen strategy is simple_byte
  8811  0B25  0833               	movf	??_INCREMENT_THIS+1,w
  8812  0B26  3A00               	xorlw	0	; case 0
  8813  0B27  1903               	skipnz
  8814  0B28  2B2A               	goto	i1l7080
  8815  0B29  2B3E               	goto	i1l4810
  8816  0B2A                     i1l7080:	
  8817                           
  8818                           ; Switch size 1, requested type "speed"
  8819                           ; Number of cases is 6, Range of values is 6 to 13
  8820                           ; switch strategies available:
  8821                           ; Name         Instructions Cycles
  8822                           ; simple_byte           19    10 (average)
  8823                           ; direct_byte           35    11 (fixed)
  8824                           ; jumptable            263     9 (fixed)
  8825                           ;	Chosen strategy is simple_byte
  8826  0B2A  0832               	movf	??_INCREMENT_THIS,w
  8827  0B2B  3A06               	xorlw	6	; case 6
  8828  0B2C  1903               	skipnz
  8829  0B2D  2AC5               	goto	i1l4794
  8830  0B2E  3A01               	xorlw	1	; case 7
  8831  0B2F  1903               	skipnz
  8832  0B30  2AD7               	goto	i1l4796
  8833  0B31  3A0E               	xorlw	14	; case 9
  8834  0B32  1903               	skipnz
  8835  0B33  2AE4               	goto	i1l4798
  8836  0B34  3A03               	xorlw	3	; case 10
  8837  0B35  1903               	skipnz
  8838  0B36  2AF6               	goto	i1l4800
  8839  0B37  3A06               	xorlw	6	; case 12
  8840  0B38  1903               	skipnz
  8841  0B39  2B03               	goto	i1l4802
  8842  0B3A  3A01               	xorlw	1	; case 13
  8843  0B3B  1903               	skipnz
  8844  0B3C  2B15               	goto	i1l4804
  8845  0B3D  2B3E               	goto	i1l4810
  8846  0B3E                     i1l4810:	
  8847                           
  8848                           ;CONTROL.c: 630:    DISP_UPDATE_TIME_UNIT_AT (CURRENT_DIGIT ,(KEY +1 ));
  8849  0B3E  0834               	movf	INCREMENT_THIS@KEY,w
  8850  0B3F  3E01               	addlw	1
  8851  0B40  00B0               	movwf	DISP_UPDATE_TIME_UNIT_AT@NUMBER
  8852  0B41  086F               	movf	_CURRENT_DIGIT,w
  8853  0B42  2536  120A  158A   	fcall	_DISP_UPDATE_TIME_UNIT_AT
  8854                           
  8855                           ;CONTROL.c: 632:    if (CURRENT_DIGIT == (13))
  8856  0B45  300D               	movlw	13
  8857  0B46  066F               	xorwf	_CURRENT_DIGIT,w
  8858  0B47  1D03               	btfss	3,2
  8859  0B48  2B4D               	goto	i1l4816
  8860                           
  8861                           ;CONTROL.c: 633:    {;CONTROL.c: 634:         LCD_SET_CURSOR(0 , (13));
  8862  0B49  300D               	movlw	13
  8863  0B4A  00A1               	movwf	LCD_SET_CURSOR@row
  8864  0B4B  3000               	movlw	0
  8865  0B4C  2EA4               	ljmp	_LCD_SET_CURSOR
  8866  0B4D                     i1l4816:	
  8867                           ;CONTROL.c: 635:    }
  8868                           
  8869                           
  8870                           ;CONTROL.c: 637:    {;CONTROL.c: 638:         GOTO_NEXT_DIGIT(KEY_RIGHRT);
  8871  0B4D  300B               	movlw	11
  8872  0B4E  160A  158A  2F5F   	ljmp	_GOTO_NEXT_DIGIT
  8873  0B51                     __end_of_INCREMENT_THIS:	
  8874  0B51                     __ptext53:	
  8875 ;; *************** function ___lbmod *****************
  8876 ;; Defined at:
  8877 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;  dividend        1    wreg     unsigned char 
  8880 ;;  divisor         1    0[COMMON] unsigned char 
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;  dividend        1    2[COMMON] unsigned char 
  8883 ;;  rem             1    4[COMMON] unsigned char 
  8884 ;;  counter         1    3[COMMON] unsigned char 
  8885 ;; Return value:  Size  Location     Type
  8886 ;;                  1    wreg      unsigned char 
  8887 ;; Registers used:
  8888 ;;		wreg, status,2, status,0
  8889 ;; Tracked objects:
  8890 ;;		On entry : 300/0
  8891 ;;		On exit  : 300/0
  8892 ;;		Unchanged: 300/0
  8893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8894 ;;      Params:         1       0       0       0       0
  8895 ;;      Locals:         3       0       0       0       0
  8896 ;;      Temps:          1       0       0       0       0
  8897 ;;      Totals:         5       0       0       0       0
  8898 ;;Total ram usage:        5 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; This function calls:
  8901 ;;		Nothing
  8902 ;; This function is called by:
  8903 ;;		_INCREMENT_THIS
  8904 ;; This function uses a non-reentrant model
  8905 ;;
  8906                           
  8907                           
  8908                           ;psect for function ___lbmod
  8909  0B51                     ___lbmod:	
  8910                           
  8911                           ;incstack = 0
  8912 ;; hardware stack exceeded
  8913                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  8914                           ;___lbmod@dividend stored from wreg
  8915  0B51  00F2               	movwf	___lbmod@dividend
  8916  0B52  3008               	movlw	8
  8917  0B53  00F3               	movwf	___lbmod@counter
  8918  0B54  01F4               	clrf	___lbmod@rem
  8919  0B55                     i1l4660:	
  8920  0B55  0872               	movf	___lbmod@dividend,w
  8921  0B56  00F1               	movwf	??___lbmod
  8922  0B57  3007               	movlw	7
  8923  0B58  1003               	clrc
  8924  0B59                     L15:	
  8925  0B59  0CF1               	rrf	??___lbmod,f
  8926  0B5A  3EFF               	addlw	-1
  8927  0B5B  1003               	clrc
  8928  0B5C  1D03               	skipz
  8929  0B5D  2B59               	goto	L15
  8930  0B5E  0D74               	rlf	___lbmod@rem,w
  8931  0B5F  0471               	iorwf	??___lbmod,w
  8932  0B60  00F4               	movwf	___lbmod@rem
  8933  0B61  1003               	clrc
  8934  0B62  0DF2               	rlf	___lbmod@dividend,f
  8935  0B63  0870               	movf	___lbmod@divisor,w
  8936  0B64  0274               	subwf	___lbmod@rem,w
  8937  0B65  1C03               	skipc
  8938  0B66  2B69               	goto	i1l4668
  8939  0B67  0870               	movf	___lbmod@divisor,w
  8940  0B68  02F4               	subwf	___lbmod@rem,f
  8941  0B69                     i1l4668:	
  8942  0B69  0BF3               	decfsz	___lbmod@counter,f
  8943  0B6A  2B55               	goto	i1l4660
  8944  0B6B  0874               	movf	___lbmod@rem,w
  8945  0B6C  0008               	return
  8946  0B6D                     __end_of___lbmod:	
  8947  0B6D                     __ptext37:	
  8948 ;; *************** function _SWs_UPDATE *****************
  8949 ;; Defined at:
  8950 ;;		line 31 in file "SW.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;		None
  8953 ;; Auto vars:     Size  Location     Type
  8954 ;;  sw_counter      1    2[BANK0 ] unsigned char 
  8955 ;;  samples_coun    1    1[BANK0 ] unsigned char 
  8956 ;;  ret             1    0        enum E865
  8957 ;; Return value:  Size  Location     Type
  8958 ;;                  1    wreg      enum E865
  8959 ;; Registers used:
  8960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8961 ;; Tracked objects:
  8962 ;;		On entry : 0/300
  8963 ;;		On exit  : 0/0
  8964 ;;		Unchanged: 0/0
  8965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8966 ;;      Params:         0       0       0       0       0
  8967 ;;      Locals:         0       3       0       0       0
  8968 ;;      Temps:          3       0       0       0       0
  8969 ;;      Totals:         3       3       0       0       0
  8970 ;;Total ram usage:        6 bytes
  8971 ;; Hardware stack levels used:    1
  8972 ;; Hardware stack levels required when called:    1
  8973 ;; This function calls:
  8974 ;;		_GPIO_PIN_GET_STATE
  8975 ;;		i1___bmul
  8976 ;; This function is called by:
  8977 ;;		_SYS_UPDATE
  8978 ;; This function uses a non-reentrant model
  8979 ;;
  8980                           
  8981                           
  8982                           ;psect for function _SWs_UPDATE
  8983  0B6D                     _SWs_UPDATE:	
  8984                           
  8985                           ;SW.c: 34:  static tbyte SW_timer_counter = 0;;SW.c: 35:  SW_timer_counter += (5);
  8986                           
  8987                           ;incstack = 0
  8988                           ; Regs used in _SWs_UPDATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8989  0B6D  3005               	movlw	5
  8990  0B6E  1683               	bsf	3,5	;RP0=1, select bank3
  8991  0B6F  1703               	bsf	3,6	;RP1=1, select bank3
  8992  0B70  07B1               	addwf	SWs_UPDATE@SW_timer_counter^(0+384),f
  8993                           
  8994                           ;SW.c: 37:  if (SW_timer_counter >= (20))
  8995  0B71  3014               	movlw	20
  8996  0B72  0231               	subwf	SWs_UPDATE@SW_timer_counter^(0+384),w
  8997  0B73  1C03               	skipc
  8998  0B74  0008               	return
  8999                           
  9000                           ;SW.c: 38:  {;SW.c: 39:   tbyte sw_counter ;;SW.c: 40:   tbyte samples_counter ;;SW.c: 4
      +                          1:   SW_timer_counter = 0;
  9001  0B75  01B1               	clrf	SWs_UPDATE@SW_timer_counter^(0+384)
  9002                           
  9003                           ;SW.c: 43:   for (sw_counter = 0 ; sw_counter < 4 ; sw_counter++)
  9004  0B76  1283               	bcf	3,5	;RP0=0, select bank0
  9005  0B77  1303               	bcf	3,6	;RP1=0, select bank0
  9006  0B78  01A2               	clrf	SWs_UPDATE@sw_counter
  9007  0B79                     i1l294:	
  9008                           
  9009                           ;SW.c: 44:   {;SW.c: 45:    for (samples_counter = 2 -1 ; samples_counter > 0 ; samples_
      +                          counter--)
  9010  0B79  01A1               	clrf	SWs_UPDATE@samples_counter
  9011  0B7A  0AA1               	incf	SWs_UPDATE@samples_counter,f
  9012  0B7B                     i1l6340:	
  9013                           
  9014                           ;SW.c: 46:    {;SW.c: 48:     SWs[sw_counter].SW_SAMPLES[samples_counter] = SWs[sw_count
      +                          er].SW_SAMPLES[samples_counter -1 ] ;
  9015  0B7B  3005               	movlw	5
  9016  0B7C  00F0               	movwf	i1___bmul@multiplicand
  9017  0B7D  0822               	movf	SWs_UPDATE@sw_counter,w
  9018  0B7E  2473  120A  158A   	fcall	i1___bmul
  9019  0B81  3EB3               	addlw	(low ((_SWs| (0+256)+1)))& (0+255)
  9020  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  9021  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  9022  0B84  0721               	addwf	SWs_UPDATE@samples_counter,w
  9023  0B85  00FA               	movwf	??_SWs_UPDATE
  9024  0B86  0084               	movwf	4
  9025  0B87  1783               	bsf	3,7	;select IRP bank3
  9026  0B88  0800               	movf	0,w
  9027  0B89  00FB               	movwf	??_SWs_UPDATE+1
  9028  0B8A  3005               	movlw	5
  9029  0B8B  00F0               	movwf	i1___bmul@multiplicand
  9030  0B8C  0822               	movf	SWs_UPDATE@sw_counter,w
  9031  0B8D  2473  120A  158A   	fcall	i1___bmul
  9032  0B90  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  9033  0B91  1283               	bcf	3,5	;RP0=0, select bank0
  9034  0B92  1303               	bcf	3,6	;RP1=0, select bank0
  9035  0B93  0721               	addwf	SWs_UPDATE@samples_counter,w
  9036  0B94  00FC               	movwf	??_SWs_UPDATE+2
  9037  0B95  0084               	movwf	4
  9038  0B96  087B               	movf	??_SWs_UPDATE+1,w
  9039  0B97  1783               	bsf	3,7	;select IRP bank3
  9040  0B98  0080               	movwf	0
  9041                           
  9042                           ;SW.c: 49:    }
  9043  0B99  0BA1               	decfsz	SWs_UPDATE@samples_counter,f
  9044  0B9A  2B7B               	goto	i1l6340
  9045                           
  9046                           ;SW.c: 51:    SWs[sw_counter].SW_SAMPLES[0] = GPIO_PIN_GET_STATE( SWs[sw_counter].SW_POR
      +                          T ,SWs[sw_counter].SW_PIN );
  9047  0B9B  3005               	movlw	5
  9048  0B9C  00F0               	movwf	i1___bmul@multiplicand
  9049  0B9D  0822               	movf	SWs_UPDATE@sw_counter,w
  9050  0B9E  2473  120A  158A   	fcall	i1___bmul
  9051  0BA1  3EB3               	addlw	(low ((_SWs| (0+256)+1)))& (0+255)
  9052  0BA2  0084               	movwf	4
  9053  0BA3  1783               	bsf	3,7	;select IRP bank3
  9054  0BA4  0800               	movf	0,w
  9055  0BA5  00F3               	movwf	GPIO_PIN_GET_STATE@GPIO_PIN_NO
  9056  0BA6  3005               	movlw	5
  9057  0BA7  00F0               	movwf	i1___bmul@multiplicand
  9058  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
  9059  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
  9060  0BAA  0822               	movf	SWs_UPDATE@sw_counter,w
  9061  0BAB  2473  120A  158A   	fcall	i1___bmul
  9062  0BAE  3EB2               	addlw	(low (_SWs| (0+256)))& (0+255)
  9063  0BAF  0084               	movwf	4
  9064  0BB0  1783               	bsf	3,7	;select IRP bank3
  9065  0BB1  0800               	movf	0,w
  9066  0BB2  2778  120A  158A   	fcall	_GPIO_PIN_GET_STATE
  9067  0BB5  00FA               	movwf	??_SWs_UPDATE
  9068  0BB6  3005               	movlw	5
  9069  0BB7  00F0               	movwf	i1___bmul@multiplicand
  9070  0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  9071  0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  9072  0BBA  0822               	movf	SWs_UPDATE@sw_counter,w
  9073  0BBB  2473  120A  158A   	fcall	i1___bmul
  9074  0BBE  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  9075  0BBF  0084               	movwf	4
  9076  0BC0  087A               	movf	??_SWs_UPDATE,w
  9077  0BC1  1783               	bsf	3,7	;select IRP bank3
  9078  0BC2  0080               	movwf	0
  9079                           
  9080                           ;SW.c: 54:    switch(SWs[sw_counter].SW_STATE)
  9081  0BC3  2C4A               	goto	i1l6370
  9082  0BC4                     i1l6348:	
  9083                           
  9084                           ;SW.c: 57:      if ((SWs[sw_counter].SW_SAMPLES[0] == (0)) &&
  9085  0BC4  3005               	movlw	5
  9086  0BC5  00F0               	movwf	i1___bmul@multiplicand
  9087  0BC6  1283               	bcf	3,5	;RP0=0, select bank0
  9088  0BC7  1303               	bcf	3,6	;RP1=0, select bank0
  9089  0BC8  0822               	movf	SWs_UPDATE@sw_counter,w
  9090  0BC9  2473  120A  158A   	fcall	i1___bmul
  9091  0BCC  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  9092  0BCD  0084               	movwf	4
  9093  0BCE  1783               	bsf	3,7	;select IRP bank3
  9094  0BCF  0800               	movf	0,w
  9095  0BD0  1D03               	btfss	3,2
  9096  0BD1  2C6B               	goto	i1l6372
  9097  0BD2  3005               	movlw	5
  9098  0BD3  00F0               	movwf	i1___bmul@multiplicand
  9099  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  9100  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  9101  0BD6  0822               	movf	SWs_UPDATE@sw_counter,w
  9102  0BD7  2473  120A  158A   	fcall	i1___bmul
  9103  0BDA  3EB5               	addlw	(low ((_SWs| (0+256)+3)))& (0+255)
  9104  0BDB  0084               	movwf	4
  9105  0BDC  1783               	bsf	3,7	;select IRP bank3
  9106  0BDD  0800               	movf	0,w
  9107  0BDE  1D03               	btfss	3,2
  9108  0BDF  2C6B               	goto	i1l6372
  9109                           
  9110                           ;SW.c: 59:      {;SW.c: 60:       SWs[sw_counter].SW_STATE = SW_PRE_PRESSED;
  9111  0BE0  3005               	movlw	5
  9112  0BE1  00F0               	movwf	i1___bmul@multiplicand
  9113  0BE2  1283               	bcf	3,5	;RP0=0, select bank0
  9114  0BE3  1303               	bcf	3,6	;RP1=0, select bank0
  9115  0BE4  0822               	movf	SWs_UPDATE@sw_counter,w
  9116  0BE5  2473  120A  158A   	fcall	i1___bmul
  9117  0BE8  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  9118  0BE9  0084               	movwf	4
  9119  0BEA  1783               	bsf	3,7	;select IRP bank3
  9120  0BEB  0180               	clrf	0
  9121  0BEC  0A80               	incf	0,f
  9122                           
  9123                           ;SW.c: 61:      }
  9124  0BED  2C6B               	goto	i1l6372
  9125  0BEE                     i1l6354:	
  9126                           
  9127                           ;SW.c: 69:      if (SWs[sw_counter].SW_SAMPLES[0] == (0))
  9128  0BEE  3005               	movlw	5
  9129  0BEF  00F0               	movwf	i1___bmul@multiplicand
  9130  0BF0  1283               	bcf	3,5	;RP0=0, select bank0
  9131  0BF1  1303               	bcf	3,6	;RP1=0, select bank0
  9132  0BF2  0822               	movf	SWs_UPDATE@sw_counter,w
  9133  0BF3  2473  120A  158A   	fcall	i1___bmul
  9134  0BF6  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  9135  0BF7  0084               	movwf	4
  9136  0BF8  1783               	bsf	3,7	;select IRP bank3
  9137  0BF9  0800               	movf	0,w
  9138  0BFA  1D03               	btfss	3,2
  9139  0BFB  2C6B               	goto	i1l6372
  9140                           
  9141                           ;SW.c: 70:      {;SW.c: 71:       SWs[sw_counter].SW_STATE = SW_PRESSED;
  9142  0BFC  3005               	movlw	5
  9143  0BFD  00F0               	movwf	i1___bmul@multiplicand
  9144  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  9145  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  9146  0C00  0822               	movf	SWs_UPDATE@sw_counter,w
  9147  0C01  2473  120A  158A   	fcall	i1___bmul
  9148  0C04  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  9149  0C05  0084               	movwf	4
  9150  0C06  1783               	bsf	3,7	;select IRP bank3
  9151  0C07  0180               	clrf	0
  9152                           
  9153                           ;SW.c: 72:      }
  9154  0C08  2C6B               	goto	i1l6372
  9155  0C09                     i1l6358:	
  9156                           
  9157                           ;SW.c: 80:      if ((SWs[sw_counter].SW_SAMPLES[0] == (1)) &&
  9158  0C09  3005               	movlw	5
  9159  0C0A  00F0               	movwf	i1___bmul@multiplicand
  9160  0C0B  1283               	bcf	3,5	;RP0=0, select bank0
  9161  0C0C  1303               	bcf	3,6	;RP1=0, select bank0
  9162  0C0D  0822               	movf	SWs_UPDATE@sw_counter,w
  9163  0C0E  2473  120A  158A   	fcall	i1___bmul
  9164  0C11  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  9165  0C12  0084               	movwf	4
  9166  0C13  1783               	bsf	3,7	;select IRP bank3
  9167  0C14  0B00               	decfsz	0,w
  9168  0C15  2C6B               	goto	i1l6372
  9169  0C16  3005               	movlw	5
  9170  0C17  00F0               	movwf	i1___bmul@multiplicand
  9171  0C18  1283               	bcf	3,5	;RP0=0, select bank0
  9172  0C19  1303               	bcf	3,6	;RP1=0, select bank0
  9173  0C1A  0822               	movf	SWs_UPDATE@sw_counter,w
  9174  0C1B  2473  120A  158A   	fcall	i1___bmul
  9175  0C1E  3EB5               	addlw	(low ((_SWs| (0+256)+3)))& (0+255)
  9176  0C1F  0084               	movwf	4
  9177  0C20  1783               	bsf	3,7	;select IRP bank3
  9178  0C21  0B00               	decfsz	0,w
  9179  0C22  2C6B               	goto	i1l6372
  9180                           
  9181                           ;SW.c: 82:      {;SW.c: 83:       SWs[sw_counter].SW_STATE = SW_PRE_RELEASED;
  9182  0C23  3005               	movlw	5
  9183  0C24  00F0               	movwf	i1___bmul@multiplicand
  9184  0C25  1283               	bcf	3,5	;RP0=0, select bank0
  9185  0C26  1303               	bcf	3,6	;RP1=0, select bank0
  9186  0C27  0822               	movf	SWs_UPDATE@sw_counter,w
  9187  0C28  2473  120A  158A   	fcall	i1___bmul
  9188  0C2B  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  9189  0C2C  0084               	movwf	4
  9190  0C2D  3003               	movlw	3
  9191  0C2E  2C47               	goto	L4
  9192  0C2F                     i1l6364:	
  9193                           ;SW.c: 84:      }
  9194                           
  9195                           
  9196                           ;SW.c: 92:      if (SWs[sw_counter].SW_SAMPLES[0] == (1))
  9197  0C2F  3005               	movlw	5
  9198  0C30  00F0               	movwf	i1___bmul@multiplicand
  9199  0C31  1283               	bcf	3,5	;RP0=0, select bank0
  9200  0C32  1303               	bcf	3,6	;RP1=0, select bank0
  9201  0C33  0822               	movf	SWs_UPDATE@sw_counter,w
  9202  0C34  2473  120A  158A   	fcall	i1___bmul
  9203  0C37  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  9204  0C38  0084               	movwf	4
  9205  0C39  1783               	bsf	3,7	;select IRP bank3
  9206  0C3A  0B00               	decfsz	0,w
  9207  0C3B  2C6B               	goto	i1l6372
  9208                           
  9209                           ;SW.c: 93:      {;SW.c: 94:       SWs[sw_counter].SW_STATE = SW_RELEASED;
  9210  0C3C  3005               	movlw	5
  9211  0C3D  00F0               	movwf	i1___bmul@multiplicand
  9212  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  9213  0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  9214  0C40  0822               	movf	SWs_UPDATE@sw_counter,w
  9215  0C41  2473  120A  158A   	fcall	i1___bmul
  9216  0C44  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  9217  0C45  0084               	movwf	4
  9218  0C46  3002               	movlw	2
  9219  0C47                     L4:	
  9220  0C47  1783               	bsf	3,7	;select IRP bank3
  9221  0C48  0080               	movwf	0
  9222                           
  9223                           ;SW.c: 95:      }
  9224  0C49  2C6B               	goto	i1l6372
  9225  0C4A                     i1l6370:	
  9226  0C4A  3005               	movlw	5
  9227  0C4B  00F0               	movwf	i1___bmul@multiplicand
  9228  0C4C  1283               	bcf	3,5	;RP0=0, select bank0
  9229  0C4D  1303               	bcf	3,6	;RP1=0, select bank0
  9230  0C4E  0822               	movf	SWs_UPDATE@sw_counter,w
  9231  0C4F  2473  120A  158A   	fcall	i1___bmul
  9232  0C52  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  9233  0C53  0084               	movwf	4
  9234  0C54  1783               	bsf	3,7	;select IRP bank3
  9235  0C55  0800               	movf	0,w
  9236  0C56  00FA               	movwf	??_SWs_UPDATE
  9237  0C57  01FB               	clrf	??_SWs_UPDATE+1
  9238                           
  9239                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9240                           ; Switch size 1, requested type "speed"
  9241                           ; Number of cases is 1, Range of values is 0 to 0
  9242                           ; switch strategies available:
  9243                           ; Name         Instructions Cycles
  9244                           ; simple_byte            4     3 (average)
  9245                           ; direct_byte           11     8 (fixed)
  9246                           ; jumptable            260     6 (fixed)
  9247                           ;	Chosen strategy is simple_byte
  9248  0C58  087B               	movf	??_SWs_UPDATE+1,w
  9249  0C59  3A00               	xorlw	0	; case 0
  9250  0C5A  1903               	skipnz
  9251  0C5B  2C5D               	goto	i1l7072
  9252  0C5C  2C6B               	goto	i1l6372
  9253  0C5D                     i1l7072:	
  9254                           
  9255                           ; Switch size 1, requested type "speed"
  9256                           ; Number of cases is 4, Range of values is 0 to 3
  9257                           ; switch strategies available:
  9258                           ; Name         Instructions Cycles
  9259                           ; simple_byte           13     7 (average)
  9260                           ; direct_byte           20     8 (fixed)
  9261                           ; jumptable            260     6 (fixed)
  9262                           ;	Chosen strategy is simple_byte
  9263  0C5D  087A               	movf	??_SWs_UPDATE,w
  9264  0C5E  3A00               	xorlw	0	; case 0
  9265  0C5F  1903               	skipnz
  9266  0C60  2C09               	goto	i1l6358
  9267  0C61  3A01               	xorlw	1	; case 1
  9268  0C62  1903               	skipnz
  9269  0C63  2BEE               	goto	i1l6354
  9270  0C64  3A03               	xorlw	3	; case 2
  9271  0C65  1903               	skipnz
  9272  0C66  2BC4               	goto	i1l6348
  9273  0C67  3A01               	xorlw	1	; case 3
  9274  0C68  1903               	skipnz
  9275  0C69  2C2F               	goto	i1l6364
  9276  0C6A  2C6B               	goto	i1l6372
  9277  0C6B                     i1l6372:	
  9278                           
  9279                           ;SW.c: 106:   }
  9280  0C6B  1283               	bcf	3,5	;RP0=0, select bank0
  9281  0C6C  1303               	bcf	3,6	;RP1=0, select bank0
  9282  0C6D  3004               	movlw	4
  9283  0C6E  0AA2               	incf	SWs_UPDATE@sw_counter,f
  9284  0C6F  0222               	subwf	SWs_UPDATE@sw_counter,w
  9285  0C70  1803               	btfsc	3,0
  9286  0C71  0008               	return
  9287  0C72  2B79               	goto	i1l294
  9288  0C73                     __end_of_SWs_UPDATE:	
  9289  0C73                     __ptext77:	
  9290 ;; *************** function i1___bmul *****************
  9291 ;; Defined at:
  9292 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;  multiplier      1    wreg     unsigned char 
  9295 ;;  multiplicand    1    0[COMMON] unsigned char 
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;  multiplier      1    1[COMMON] unsigned char 
  9298 ;;  __bmul          1    2[COMMON] unsigned char 
  9299 ;; Return value:  Size  Location     Type
  9300 ;;                  1    wreg      unsigned char 
  9301 ;; Registers used:
  9302 ;;		wreg, status,2, status,0
  9303 ;; Tracked objects:
  9304 ;;		On entry : 0/0
  9305 ;;		On exit  : 0/0
  9306 ;;		Unchanged: 0/0
  9307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9308 ;;      Params:         1       0       0       0       0
  9309 ;;      Locals:         2       0       0       0       0
  9310 ;;      Temps:          0       0       0       0       0
  9311 ;;      Totals:         3       0       0       0       0
  9312 ;;Total ram usage:        3 bytes
  9313 ;; Hardware stack levels used:    1
  9314 ;; This function calls:
  9315 ;;		Nothing
  9316 ;; This function is called by:
  9317 ;;		_SWs_UPDATE
  9318 ;;		_SW_GET_STATE
  9319 ;;		_LED_SET_STATE
  9320 ;;		_INCREMENT_THIS
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           
  9325                           ;psect for function i1___bmul
  9326  0C73                     i1___bmul:	
  9327                           
  9328                           ;incstack = 0
  9329                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  9330                           ;i1___bmul@multiplier stored from wreg
  9331  0C73  00F1               	movwf	i1___bmul@multiplier
  9332  0C74  01F2               	clrf	i1___bmul@product
  9333  0C75  0870               	movf	i1___bmul@multiplicand,w
  9334  0C76  1871               	btfsc	i1___bmul@multiplier,0
  9335  0C77  07F2               	addwf	i1___bmul@product,f
  9336  0C78  1003               	clrc
  9337  0C79  0DF0               	rlf	i1___bmul@multiplicand,f
  9338  0C7A  0870               	movf	i1___bmul@multiplicand,w
  9339  0C7B  18F1               	btfsc	i1___bmul@multiplier,1
  9340  0C7C  07F2               	addwf	i1___bmul@product,f
  9341  0C7D  1003               	clrc
  9342  0C7E  0DF0               	rlf	i1___bmul@multiplicand,f
  9343  0C7F  0870               	movf	i1___bmul@multiplicand,w
  9344  0C80  1971               	btfsc	i1___bmul@multiplier,2
  9345  0C81  07F2               	addwf	i1___bmul@product,f
  9346  0C82  1003               	clrc
  9347  0C83  0DF0               	rlf	i1___bmul@multiplicand,f
  9348  0C84  0870               	movf	i1___bmul@multiplicand,w
  9349  0C85  19F1               	btfsc	i1___bmul@multiplier,3
  9350  0C86  07F2               	addwf	i1___bmul@product,f
  9351  0C87  1003               	clrc
  9352  0C88  0DF0               	rlf	i1___bmul@multiplicand,f
  9353  0C89  0870               	movf	i1___bmul@multiplicand,w
  9354  0C8A  1A71               	btfsc	i1___bmul@multiplier,4
  9355  0C8B  07F2               	addwf	i1___bmul@product,f
  9356  0C8C  1003               	clrc
  9357  0C8D  0DF0               	rlf	i1___bmul@multiplicand,f
  9358  0C8E  0870               	movf	i1___bmul@multiplicand,w
  9359  0C8F  1AF1               	btfsc	i1___bmul@multiplier,5
  9360  0C90  07F2               	addwf	i1___bmul@product,f
  9361  0C91  1003               	clrc
  9362  0C92  0DF0               	rlf	i1___bmul@multiplicand,f
  9363  0C93  0870               	movf	i1___bmul@multiplicand,w
  9364  0C94  1B71               	btfsc	i1___bmul@multiplier,6
  9365  0C95  07F2               	addwf	i1___bmul@product,f
  9366  0C96  1003               	clrc
  9367  0C97  0DF0               	rlf	i1___bmul@multiplicand,f
  9368  0C98  0870               	movf	i1___bmul@multiplicand,w
  9369  0C99  1BF1               	btfsc	i1___bmul@multiplier,7
  9370  0C9A  07F2               	addwf	i1___bmul@product,f
  9371  0C9B  0872               	movf	i1___bmul@product,w
  9372  0C9C  0008               	return
  9373  0C9D                     __end_ofi1___bmul:	
  9374  0C9D                     __ptext69:	
  9375 ;; *************** function i1_HEATER_SET_STATE *****************
  9376 ;; Defined at:
  9377 ;;		line 71 in file "HEATER.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;  HEATER_STATE    1    wreg     unsigned char 
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;  HEATER_STATE    1    0[COMMON] unsigned char 
  9382 ;; Return value:  Size  Location     Type
  9383 ;;                  1    wreg      void 
  9384 ;; Registers used:
  9385 ;;		wreg
  9386 ;; Tracked objects:
  9387 ;;		On entry : 300/300
  9388 ;;		On exit  : 300/300
  9389 ;;		Unchanged: 0/0
  9390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9391 ;;      Params:         0       0       0       0       0
  9392 ;;      Locals:         1       0       0       0       0
  9393 ;;      Temps:          0       0       0       0       0
  9394 ;;      Totals:         1       0       0       0       0
  9395 ;;Total ram usage:        1 bytes
  9396 ;; Hardware stack levels used:    1
  9397 ;; This function calls:
  9398 ;;		Nothing
  9399 ;; This function is called by:
  9400 ;;		_HEATING_HANDLER
  9401 ;;		_STOP_HEATING
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           
  9406                           ;psect for function i1_HEATER_SET_STATE
  9407  0C9D                     i1_HEATER_SET_STATE:	
  9408                           
  9409                           ;incstack = 0
  9410                           ; Regs used in i1_HEATER_SET_STATE: [wreg]
  9411                           ;i1HEATER_SET_STATE@HEATER_STATE stored from wreg
  9412  0C9D  00F0               	movwf	i1HEATER_SET_STATE@HEATER_STATE
  9413                           
  9414                           ;HEATER.c: 71: void HEATER_SET_STATE (tHEATER_STATE HEATER_STATE);HEATER.c: 72: {;HEATER
      +                          .c: 73:     DESIRED_HEAT = HEATER_STATE ;
  9415  0C9E  00EB               	movwf	_DESIRED_HEAT^(0+384)
  9416  0C9F  0008               	return
  9417  0CA0                     __end_ofi1_HEATER_SET_STATE:	
  9418  0CA0                     __ptext68:	
  9419 ;; *************** function i1_MOTOR_SET_STATE *****************
  9420 ;; Defined at:
  9421 ;;		line 71 in file "MOTOR.c"
  9422 ;; Parameters:    Size  Location     Type
  9423 ;;  MOTOR_STATE     1    wreg     unsigned char 
  9424 ;; Auto vars:     Size  Location     Type
  9425 ;;  MOTOR_STATE     1    0[COMMON] unsigned char 
  9426 ;; Return value:  Size  Location     Type
  9427 ;;                  1    wreg      void 
  9428 ;; Registers used:
  9429 ;;		wreg
  9430 ;; Tracked objects:
  9431 ;;		On entry : 0/300
  9432 ;;		On exit  : 300/300
  9433 ;;		Unchanged: 0/0
  9434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9435 ;;      Params:         0       0       0       0       0
  9436 ;;      Locals:         1       0       0       0       0
  9437 ;;      Temps:          0       0       0       0       0
  9438 ;;      Totals:         1       0       0       0       0
  9439 ;;Total ram usage:        1 bytes
  9440 ;; Hardware stack levels used:    1
  9441 ;; This function calls:
  9442 ;;		Nothing
  9443 ;; This function is called by:
  9444 ;;		_HEATING_HANDLER
  9445 ;;		_STOP_HEATING
  9446 ;; This function uses a non-reentrant model
  9447 ;;
  9448                           
  9449                           
  9450                           ;psect for function i1_MOTOR_SET_STATE
  9451  0CA0                     i1_MOTOR_SET_STATE:	
  9452                           
  9453                           ;incstack = 0
  9454                           ; Regs used in i1_MOTOR_SET_STATE: [wreg]
  9455                           ;i1MOTOR_SET_STATE@MOTOR_STATE stored from wreg
  9456  0CA0  00F0               	movwf	i1MOTOR_SET_STATE@MOTOR_STATE
  9457                           
  9458                           ;MOTOR.c: 71: void MOTOR_SET_STATE (tMOTOR_STATE MOTOR_STATE);MOTOR.c: 72: {;MOTOR.c: 73
      +                          :     DESIRED_SPEED = MOTOR_STATE ;
  9459  0CA1  1683               	bsf	3,5	;RP0=1, select bank3
  9460  0CA2  1703               	bsf	3,6	;RP1=1, select bank3
  9461  0CA3  00EC               	movwf	_DESIRED_SPEED^(0+384)
  9462  0CA4  0008               	return
  9463  0CA5                     __end_ofi1_MOTOR_SET_STATE:	
  9464  0CA5                     __ptext80:	
  9465 ;; *************** function _DISP_SHOW_TIME_AT *****************
  9466 ;; Defined at:
  9467 ;;		line 59 in file "Display.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;  START_TIME      3   17[BANK0 ] struct .
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;		None
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  1    wreg      void 
  9474 ;; Registers used:
  9475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9476 ;; Tracked objects:
  9477 ;;		On entry : 300/0
  9478 ;;		On exit  : 300/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9481 ;;      Params:         0       3       0       0       0
  9482 ;;      Locals:         0       0       0       0       0
  9483 ;;      Temps:          0       0       0       0       0
  9484 ;;      Totals:         0       3       0       0       0
  9485 ;;Total ram usage:        3 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    5
  9488 ;; This function calls:
  9489 ;;		_DISP_SHOW_TIME
  9490 ;;		_UPDATE_LCD_HOURS
  9491 ;;		_UPDATE_LCD_MINUTES
  9492 ;;		_UPDATE_LCD_SECONDS
  9493 ;; This function is called by:
  9494 ;;		_SET_TIME_HANDLER
  9495 ;;		_HEATING_HANDLER
  9496 ;;		_DEFAULT_HANDLER
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           
  9501                           ;psect for function _DISP_SHOW_TIME_AT
  9502  0CA5                     _DISP_SHOW_TIME_AT:	
  9503                           
  9504                           ;Display.c: 59:  void DISP_SHOW_TIME_AT( tTIME START_TIME);Display.c: 60:  {;Display.c: 
      +                          62:      DISP_SHOW_TIME();
  9505                           
  9506                           ;incstack = 0
  9507 ;; hardware stack exceeded
  9508                           ; Regs used in _DISP_SHOW_TIME_AT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9509  0CA5  2658  120A  158A   	fcall	_DISP_SHOW_TIME
  9510                           
  9511                           ;Display.c: 63:       UPDATE_LCD_SECONDS(START_TIME.SECONDS);
  9512  0CA8  0831               	movf	DISP_SHOW_TIME_AT@START_TIME,w
  9513  0CA9  2507  120A  158A   	fcall	_UPDATE_LCD_SECONDS
  9514                           
  9515                           ;Display.c: 64:       UPDATE_LCD_MINUTES(START_TIME.MINUTES);
  9516  0CAC  0832               	movf	DISP_SHOW_TIME_AT@START_TIME+1,w
  9517  0CAD  24BE  120A  158A   	fcall	_UPDATE_LCD_MINUTES
  9518                           
  9519                           ;Display.c: 65:       UPDATE_LCD_HOURS(START_TIME.HOURS);
  9520  0CB0  0833               	movf	DISP_SHOW_TIME_AT@START_TIME+2,w
  9521  0CB1  2DDD               	ljmp	_UPDATE_LCD_HOURS
  9522  0CB2                     __end_of_DISP_SHOW_TIME_AT:	
  9523  0CB2                     __ptext78:	
  9524 ;; *************** function _STOP_BLINKING *****************
  9525 ;; Defined at:
  9526 ;;		line 118 in file "LCD.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;		None
  9529 ;; Auto vars:     Size  Location     Type
  9530 ;;		None
  9531 ;; Return value:  Size  Location     Type
  9532 ;;                  1    wreg      void 
  9533 ;; Registers used:
  9534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9540 ;;      Params:         0       0       0       0       0
  9541 ;;      Locals:         0       0       0       0       0
  9542 ;;      Temps:          0       0       0       0       0
  9543 ;;      Totals:         0       0       0       0       0
  9544 ;;Total ram usage:        0 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:    2
  9547 ;; This function calls:
  9548 ;;		i1_LCD_SND_COMMAND
  9549 ;; This function is called by:
  9550 ;;		_SET_TIME_HANDLER
  9551 ;;		_SET_HEATING_HANDLER
  9552 ;;		_SET_ROTOR_PWR_HANDLER
  9553 ;;		_HEATING_HANDLER
  9554 ;;		_DEFAULT_HANDLER
  9555 ;;		_SET_HEATING_HANDLER_ON_WORK
  9556 ;;		_SET_ROTOR_PWR_HANDLER_ON_WORK
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560                           
  9561                           ;psect for function _STOP_BLINKING
  9562  0CB2                     _STOP_BLINKING:	
  9563  0CB2                     i1l4742:	
  9564                           ;incstack = 0
  9565 ;; hardware stack exceeded
  9566                           ; Regs used in _STOP_BLINKING: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9567                           
  9568                           
  9569                           ;LCD.c: 121:  LCD_SND_COMMAND(0x0C);
  9570  0CB2  300C               	movlw	12
  9571  0CB3  270E               	fcall	i1_LCD_SND_COMMAND
  9572  0CB4  0008               	return
  9573  0CB5                     __end_of_STOP_BLINKING:	
  9574  0CB5                     __ptext71:	
  9575 ;; *************** function _TIME_GET *****************
  9576 ;; Defined at:
  9577 ;;		line 131 in file "TIME.c"
  9578 ;; Parameters:    Size  Location     Type
  9579 ;;		None
  9580 ;; Auto vars:     Size  Location     Type
  9581 ;;		None
  9582 ;; Return value:  Size  Location     Type
  9583 ;;                  3    0[COMMON] struct .
  9584 ;; Registers used:
  9585 ;;		wreg
  9586 ;; Tracked objects:
  9587 ;;		On entry : 0/0
  9588 ;;		On exit  : 300/300
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9591 ;;      Params:         3       0       0       0       0
  9592 ;;      Locals:         0       0       0       0       0
  9593 ;;      Temps:          0       0       0       0       0
  9594 ;;      Totals:         3       0       0       0       0
  9595 ;;Total ram usage:        3 bytes
  9596 ;; Hardware stack levels used:    1
  9597 ;; This function calls:
  9598 ;;		Nothing
  9599 ;; This function is called by:
  9600 ;;		_HEATING_HANDLER
  9601 ;;		_STOP_HEATING
  9602 ;; This function uses a non-reentrant model
  9603 ;;
  9604                           
  9605                           
  9606                           ;psect for function _TIME_GET
  9607  0CB5                     _TIME_GET:	
  9608                           
  9609                           ;TIME.c: 133:     return CURRENT_TIME;
  9610                           
  9611                           ;incstack = 0
  9612                           ; Regs used in _TIME_GET: [wreg]
  9613  0CB5  1683               	bsf	3,5	;RP0=1, select bank3
  9614  0CB6  1703               	bsf	3,6	;RP1=1, select bank3
  9615  0CB7  0815               	movf	_CURRENT_TIME^(0+384),w
  9616  0CB8  00F0               	movwf	?_TIME_GET
  9617  0CB9  0816               	movf	(_CURRENT_TIME+1)^(0+384),w
  9618  0CBA  00F1               	movwf	?_TIME_GET+1
  9619  0CBB  0817               	movf	(_CURRENT_TIME+2)^(0+384),w
  9620  0CBC  00F2               	movwf	?_TIME_GET+2
  9621  0CBD  0008               	return
  9622  0CBE                     __end_of_TIME_GET:	
  9623  0CBE                     __ptext82:	
  9624 ;; *************** function _UPDATE_LCD_MINUTES *****************
  9625 ;; Defined at:
  9626 ;;		line 120 in file "Display.c"
  9627 ;; Parameters:    Size  Location     Type
  9628 ;;  MINUTES         1    wreg     unsigned char 
  9629 ;; Auto vars:     Size  Location     Type
  9630 ;;  MINUTES         1   16[BANK0 ] unsigned char 
  9631 ;; Return value:  Size  Location     Type
  9632 ;;                  1    wreg      void 
  9633 ;; Registers used:
  9634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9635 ;; Tracked objects:
  9636 ;;		On entry : 300/0
  9637 ;;		On exit  : 300/0
  9638 ;;		Unchanged: 0/0
  9639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9640 ;;      Params:         0       0       0       0       0
  9641 ;;      Locals:         0       1       0       0       0
  9642 ;;      Temps:          0       0       0       0       0
  9643 ;;      Totals:         0       1       0       0       0
  9644 ;;Total ram usage:        1 bytes
  9645 ;; Hardware stack levels used:    1
  9646 ;; Hardware stack levels required when called:    4
  9647 ;; This function calls:
  9648 ;;		_LCD_SEND_A_NUMBER
  9649 ;;		_LCD_SET_CURSOR
  9650 ;;		___lbdiv
  9651 ;; This function is called by:
  9652 ;;		_DISP_UPDATE_TIME
  9653 ;;		_DISP_SHOW_TIME_AT
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           
  9658                           ;psect for function _UPDATE_LCD_MINUTES
  9659  0CBE                     _UPDATE_LCD_MINUTES:	
  9660                           
  9661                           ;incstack = 0
  9662 ;; hardware stack exceeded
  9663                           ; Regs used in _UPDATE_LCD_MINUTES: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9664                           ;UPDATE_LCD_MINUTES@MINUTES stored from wreg
  9665  0CBE  00B0               	movwf	UPDATE_LCD_MINUTES@MINUTES
  9666                           
  9667                           ;Display.c: 120:  static void UPDATE_LCD_MINUTES(tbyte MINUTES);Display.c: 121:  {;Displ
      +                          ay.c: 123:   LCD_SET_CURSOR(0,(9));
  9668  0CBF  3009               	movlw	9
  9669  0CC0  00A1               	movwf	LCD_SET_CURSOR@row
  9670  0CC1  3000               	movlw	0
  9671  0CC2  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
  9672                           
  9673                           ;Display.c: 124:   if (MINUTES / 10 != 0)
  9674  0CC5  300A               	movlw	10
  9675  0CC6  00F0               	movwf	___lbdiv@divisor
  9676  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  9677  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  9678  0CC9  0830               	movf	UPDATE_LCD_MINUTES@MINUTES,w
  9679  0CCA  24EC  120A  158A   	fcall	___lbdiv
  9680  0CCD  3A00               	xorlw	0
  9681  0CCE  1903               	skipnz
  9682  0CCF  2CD4               	goto	i1l4762
  9683                           
  9684                           ;Display.c: 125:   {;Display.c: 126:    LCD_SEND_A_NUMBER(MINUTES);
  9685  0CD0  0830               	movf	UPDATE_LCD_MINUTES@MINUTES,w
  9686  0CD1  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9687  0CD2  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9688  0CD3  2CDD               	ljmp	i1l4532
  9689  0CD4                     i1l4762:	
  9690                           ;Display.c: 127:   }
  9691                           
  9692                           
  9693                           ;Display.c: 129:   {;Display.c: 130:    LCD_SEND_A_NUMBER(0);
  9694  0CD4  01A8               	clrf	LCD_SEND_A_NUMBER@x
  9695  0CD5  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9696  0CD6  24DD  120A  158A   	fcall	_LCD_SEND_A_NUMBER
  9697                           
  9698                           ;Display.c: 131:    LCD_SEND_A_NUMBER(MINUTES);
  9699  0CD9  0830               	movf	UPDATE_LCD_MINUTES@MINUTES,w
  9700  0CDA  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9701  0CDB  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9702  0CDC  2CDD               	ljmp	i1l4532
  9703  0CDD                     __end_of_UPDATE_LCD_MINUTES:	
  9704  0CDD                     __ptext85:	
  9705 ;; *************** function _LCD_SEND_A_NUMBER *****************
  9706 ;; Defined at:
  9707 ;;		line 69 in file "LCD.c"
  9708 ;; Parameters:    Size  Location     Type
  9709 ;;  x               2    8[BANK0 ] unsigned int 
  9710 ;; Auto vars:     Size  Location     Type
  9711 ;;  string          6   10[BANK0 ] unsigned char [6]
  9712 ;; Return value:  Size  Location     Type
  9713 ;;                  1    wreg      void 
  9714 ;; Registers used:
  9715 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9716 ;; Tracked objects:
  9717 ;;		On entry : 300/0
  9718 ;;		On exit  : 300/0
  9719 ;;		Unchanged: 0/0
  9720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9721 ;;      Params:         0       2       0       0       0
  9722 ;;      Locals:         0       6       0       0       0
  9723 ;;      Temps:          0       0       0       0       0
  9724 ;;      Totals:         0       8       0       0       0
  9725 ;;Total ram usage:        8 bytes
  9726 ;; Hardware stack levels used:    1
  9727 ;; Hardware stack levels required when called:    3
  9728 ;; This function calls:
  9729 ;;		_LCD_SEND_A_STRING
  9730 ;;		_itoa
  9731 ;; This function is called by:
  9732 ;;		_DISP_UPDATE_TIME_UNIT_AT
  9733 ;;		_UPDATE_LCD_SECONDS
  9734 ;;		_UPDATE_LCD_MINUTES
  9735 ;;		_UPDATE_LCD_HOURS
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           
  9740                           ;psect for function _LCD_SEND_A_NUMBER
  9741  0CDD                     _LCD_SEND_A_NUMBER:	
  9742  0CDD                     i1l4532:	
  9743                           ;incstack = 0
  9744 ;; hardware stack exceeded
  9745                           ; Regs used in _LCD_SEND_A_NUMBER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9746                           
  9747                           
  9748                           ;LCD.c: 69: void LCD_SEND_A_NUMBER (tWORD x);LCD.c: 70: {;LCD.c: 71:  char string[6];;LC
      +                          D.c: 73:  itoa (string , x ,10);
  9749  0CDD  0829               	movf	LCD_SEND_A_NUMBER@x+1,w
  9750  0CDE  00A5               	movwf	itoa@val+1
  9751  0CDF  0828               	movf	LCD_SEND_A_NUMBER@x,w
  9752  0CE0  00A4               	movwf	itoa@val
  9753  0CE1  300A               	movlw	10
  9754  0CE2  00A6               	movwf	itoa@base
  9755  0CE3  302A               	movlw	(low (LCD_SEND_A_NUMBER@string| 0))& (0+255)
  9756  0CE4  01A7               	clrf	itoa@base+1
  9757  0CE5  2795  120A  158A   	fcall	_itoa
  9758                           
  9759                           ;LCD.c: 74:  LCD_SEND_A_STRING(string);
  9760  0CE8  302A               	movlw	(low (LCD_SEND_A_NUMBER@string| 0))& (0+255)
  9761  0CE9  00A1               	movwf	LCD_SEND_A_STRING@string
  9762  0CEA  01A2               	clrf	LCD_SEND_A_STRING@string+1
  9763  0CEB  2E86               	ljmp	i1l4490
  9764  0CEC                     __end_of_LCD_SEND_A_NUMBER:	
  9765  0CEC                     __ptext84:	
  9766 ;; *************** function ___lbdiv *****************
  9767 ;; Defined at:
  9768 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;  dividend        1    wreg     unsigned char 
  9771 ;;  divisor         1    0[COMMON] unsigned char 
  9772 ;; Auto vars:     Size  Location     Type
  9773 ;;  dividend        1    1[COMMON] unsigned char 
  9774 ;;  quotient        1    3[COMMON] unsigned char 
  9775 ;;  counter         1    2[COMMON] unsigned char 
  9776 ;; Return value:  Size  Location     Type
  9777 ;;                  1    wreg      unsigned char 
  9778 ;; Registers used:
  9779 ;;		wreg, status,2, status,0
  9780 ;; Tracked objects:
  9781 ;;		On entry : 300/0
  9782 ;;		On exit  : 300/0
  9783 ;;		Unchanged: 300/0
  9784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9785 ;;      Params:         1       0       0       0       0
  9786 ;;      Locals:         3       0       0       0       0
  9787 ;;      Temps:          0       0       0       0       0
  9788 ;;      Totals:         4       0       0       0       0
  9789 ;;Total ram usage:        4 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; This function calls:
  9792 ;;		Nothing
  9793 ;; This function is called by:
  9794 ;;		_UPDATE_LCD_SECONDS
  9795 ;;		_UPDATE_LCD_MINUTES
  9796 ;;		_UPDATE_LCD_HOURS
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           
  9801                           ;psect for function ___lbdiv
  9802  0CEC                     ___lbdiv:	
  9803                           
  9804                           ;incstack = 0
  9805 ;; hardware stack exceeded
  9806                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  9807                           ;___lbdiv@dividend stored from wreg
  9808  0CEC  00F1               	movwf	___lbdiv@dividend
  9809  0CED  01F3               	clrf	___lbdiv@quotient
  9810  0CEE  0870               	movf	___lbdiv@divisor,w
  9811  0CEF  1903               	btfsc	3,2
  9812  0CF0  2D05               	goto	i1l4652
  9813  0CF1  01F2               	clrf	___lbdiv@counter
  9814  0CF2                     i1l4638:	
  9815  0CF2  0AF2               	incf	___lbdiv@counter,f
  9816  0CF3  1BF0               	btfsc	___lbdiv@divisor,7
  9817  0CF4  2CF8               	goto	i1l1402
  9818  0CF5  1003               	clrc
  9819  0CF6  0DF0               	rlf	___lbdiv@divisor,f
  9820  0CF7  2CF2               	goto	i1l4638
  9821  0CF8                     i1l1402:	
  9822  0CF8  1003               	clrc
  9823  0CF9  0DF3               	rlf	___lbdiv@quotient,f
  9824  0CFA  0870               	movf	___lbdiv@divisor,w
  9825  0CFB  0271               	subwf	___lbdiv@dividend,w
  9826  0CFC  1C03               	skipc
  9827  0CFD  2D02               	goto	L23
  9828  0CFE  0870               	movf	___lbdiv@divisor,w
  9829  0CFF  02F1               	subwf	___lbdiv@dividend,f
  9830  0D00  1473               	bsf	___lbdiv@quotient,0
  9831  0D01  1003               	clrc
  9832  0D02                     L23:	
  9833  0D02  0CF0               	rrf	___lbdiv@divisor,f
  9834  0D03  0BF2               	decfsz	___lbdiv@counter,f
  9835  0D04  2CF8               	goto	i1l1402
  9836  0D05                     i1l4652:	
  9837  0D05  0873               	movf	___lbdiv@quotient,w
  9838  0D06  0008               	return
  9839  0D07                     __end_of___lbdiv:	
  9840  0D07                     __ptext81:	
  9841 ;; *************** function _UPDATE_LCD_SECONDS *****************
  9842 ;; Defined at:
  9843 ;;		line 106 in file "Display.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;  SECONDS         1    wreg     unsigned char 
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;  SECONDS         1   16[BANK0 ] unsigned char 
  9848 ;; Return value:  Size  Location     Type
  9849 ;;                  1    wreg      void 
  9850 ;; Registers used:
  9851 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9852 ;; Tracked objects:
  9853 ;;		On entry : 300/0
  9854 ;;		On exit  : 300/0
  9855 ;;		Unchanged: 0/0
  9856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9857 ;;      Params:         0       0       0       0       0
  9858 ;;      Locals:         0       1       0       0       0
  9859 ;;      Temps:          0       0       0       0       0
  9860 ;;      Totals:         0       1       0       0       0
  9861 ;;Total ram usage:        1 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; Hardware stack levels required when called:    4
  9864 ;; This function calls:
  9865 ;;		_LCD_SEND_A_NUMBER
  9866 ;;		_LCD_SET_CURSOR
  9867 ;;		___lbdiv
  9868 ;; This function is called by:
  9869 ;;		_DISP_UPDATE_TIME
  9870 ;;		_DISP_SHOW_TIME_AT
  9871 ;; This function uses a non-reentrant model
  9872 ;;
  9873                           
  9874                           
  9875                           ;psect for function _UPDATE_LCD_SECONDS
  9876  0D07                     _UPDATE_LCD_SECONDS:	
  9877                           
  9878                           ;incstack = 0
  9879 ;; hardware stack exceeded
  9880                           ; Regs used in _UPDATE_LCD_SECONDS: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9881                           ;UPDATE_LCD_SECONDS@SECONDS stored from wreg
  9882  0D07  00B0               	movwf	UPDATE_LCD_SECONDS@SECONDS
  9883                           
  9884                           ;Display.c: 106: static void UPDATE_LCD_SECONDS(tbyte SECONDS);Display.c: 107:  {;Displa
      +                          y.c: 109:   LCD_SET_CURSOR(0,(12));
  9885  0D08  300C               	movlw	12
  9886  0D09  00A1               	movwf	LCD_SET_CURSOR@row
  9887  0D0A  3000               	movlw	0
  9888  0D0B  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
  9889                           
  9890                           ;Display.c: 110:   if (SECONDS / 10 != 0)
  9891  0D0E  300A               	movlw	10
  9892  0D0F  00F0               	movwf	___lbdiv@divisor
  9893  0D10  1283               	bcf	3,5	;RP0=0, select bank0
  9894  0D11  1303               	bcf	3,6	;RP1=0, select bank0
  9895  0D12  0830               	movf	UPDATE_LCD_SECONDS@SECONDS,w
  9896  0D13  24EC  120A  158A   	fcall	___lbdiv
  9897  0D16  3A00               	xorlw	0
  9898  0D17  1903               	skipnz
  9899  0D18  2D1D               	goto	i1l4754
  9900                           
  9901                           ;Display.c: 111:   {;Display.c: 112:             LCD_SEND_A_NUMBER(SECONDS);
  9902  0D19  0830               	movf	UPDATE_LCD_SECONDS@SECONDS,w
  9903  0D1A  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9904  0D1B  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9905  0D1C  2CDD               	ljmp	i1l4532
  9906  0D1D                     i1l4754:	
  9907                           ;Display.c: 113:   }
  9908                           
  9909                           
  9910                           ;Display.c: 115:   {;Display.c: 116:             LCD_SEND_A_NUMBER(0);
  9911  0D1D  01A8               	clrf	LCD_SEND_A_NUMBER@x
  9912  0D1E  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9913  0D1F  24DD  120A  158A   	fcall	_LCD_SEND_A_NUMBER
  9914                           
  9915                           ;Display.c: 117:             LCD_SEND_A_NUMBER(SECONDS);
  9916  0D22  0830               	movf	UPDATE_LCD_SECONDS@SECONDS,w
  9917  0D23  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9918  0D24  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9919  0D25  2CDD               	ljmp	i1l4532
  9920  0D26                     __end_of_UPDATE_LCD_SECONDS:	
  9921  0D26                     __ptext70:	
  9922 ;; *************** function _TIME_STOP *****************
  9923 ;; Defined at:
  9924 ;;		line 48 in file "TIME.c"
  9925 ;; Parameters:    Size  Location     Type
  9926 ;;		None
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;		None
  9929 ;; Return value:  Size  Location     Type
  9930 ;;                  1    wreg      void 
  9931 ;; Registers used:
  9932 ;;		status,2
  9933 ;; Tracked objects:
  9934 ;;		On entry : B00/800
  9935 ;;		On exit  : B00/B00
  9936 ;;		Unchanged: 800/0
  9937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9938 ;;      Params:         0       0       0       0       0
  9939 ;;      Locals:         0       0       0       0       0
  9940 ;;      Temps:          0       0       0       0       0
  9941 ;;      Totals:         0       0       0       0       0
  9942 ;;Total ram usage:        0 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; This function calls:
  9945 ;;		Nothing
  9946 ;; This function is called by:
  9947 ;;		_STOP_HEATING
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           
  9952                           ;psect for function _TIME_STOP
  9953  0D26                     _TIME_STOP:	
  9954                           
  9955                           ;TIME.c: 50:     COUNT_DECISION = NO;
  9956                           
  9957                           ;incstack = 0
  9958 ;; hardware stack exceeded
  9959                           ; Regs used in _TIME_STOP: [status,2]
  9960  0D26  1683               	bsf	3,5	;RP0=1, select bank3
  9961  0D27  1703               	bsf	3,6	;RP1=1, select bank3
  9962  0D28  01AB               	clrf	_COUNT_DECISION^(0+384)
  9963  0D29  0008               	return
  9964  0D2A                     __end_of_TIME_STOP:	
  9965  0D2A                     __ptext65:	
  9966 ;; *************** function _TIME_START_AT *****************
  9967 ;; Defined at:
  9968 ;;		line 136 in file "TIME.c"
  9969 ;; Parameters:    Size  Location     Type
  9970 ;;  START_SECOND    1    wreg     unsigned char 
  9971 ;;  START_MINUTE    1    0[COMMON] unsigned char 
  9972 ;;  START_HOURS     1    1[COMMON] unsigned char 
  9973 ;;  COUNTING_TYP    1    2[COMMON] enum E878
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;  START_SECOND    1    3[COMMON] unsigned char 
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  1    wreg      void 
  9978 ;; Registers used:
  9979 ;;		wreg, status,2, status,0, pclath, cstack
  9980 ;; Tracked objects:
  9981 ;;		On entry : B00/800
  9982 ;;		On exit  : B00/B00
  9983 ;;		Unchanged: 800/0
  9984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9985 ;;      Params:         3       0       0       0       0
  9986 ;;      Locals:         1       0       0       0       0
  9987 ;;      Temps:          0       0       0       0       0
  9988 ;;      Totals:         4       0       0       0       0
  9989 ;;Total ram usage:        4 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    1
  9992 ;; This function calls:
  9993 ;;		_TIME_CONTINUE
  9994 ;; This function is called by:
  9995 ;;		_HEATING_HANDLER
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           
 10000                           ;psect for function _TIME_START_AT
 10001  0D2A                     _TIME_START_AT:	
 10002                           
 10003                           ;incstack = 0
 10004 ;; hardware stack exceeded
 10005                           ; Regs used in _TIME_START_AT: [wreg+status,2+status,0+pclath+cstack]
 10006                           ;TIME_START_AT@START_SECONDS stored from wreg
 10007  0D2A  00F3               	movwf	TIME_START_AT@START_SECONDS
 10008                           
 10009                           ;TIME.c: 136: void TIME_START_AT (tbyte START_SECONDS , tbyte START_MINUTES , tbyte STAR
      +                          T_HOURS ,tTIME_type COUNTING_TYPE );TIME.c: 137: {;TIME.c: 138:     TICK_COUNTER = 0;
 10010  0D2B  1683               	bsf	3,5	;RP0=1, select bank3
 10011  0D2C  1703               	bsf	3,6	;RP1=1, select bank3
 10012  0D2D  01A0               	clrf	_TICK_COUNTER^(0+384)
 10013  0D2E  01A1               	clrf	(_TICK_COUNTER+1)^(0+384)
 10014                           
 10015                           ;TIME.c: 139:     CURRENT_TIME.SECONDS = START_SECONDS;
 10016  0D2F  0873               	movf	TIME_START_AT@START_SECONDS,w
 10017  0D30  0095               	movwf	_CURRENT_TIME^(0+384)
 10018                           
 10019                           ;TIME.c: 140:     CURRENT_TIME.MINUTES = START_MINUTES;
 10020  0D31  0870               	movf	TIME_START_AT@START_MINUTES,w
 10021  0D32  0096               	movwf	(_CURRENT_TIME^(0+384)+1)
 10022                           
 10023                           ;TIME.c: 141:     CURRENT_TIME.HOURS = START_HOURS;
 10024  0D33  0871               	movf	TIME_START_AT@START_HOURS,w
 10025  0D34  0097               	movwf	(_CURRENT_TIME^(0+384)+2)
 10026                           
 10027                           ;TIME.c: 143:     TIME_CONTINUE();
 10028  0D35  2D42               	ljmp	i1l4782
 10029  0D36                     __end_of_TIME_START_AT:	
 10030  0D36                     __ptext55:	
 10031 ;; *************** function _DISP_UPDATE_TIME_UNIT_AT *****************
 10032 ;; Defined at:
 10033 ;;		line 53 in file "Display.c"
 10034 ;; Parameters:    Size  Location     Type
 10035 ;;  UNIT            1    wreg     unsigned char 
 10036 ;;  NUMBER          1   16[BANK0 ] unsigned char 
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;  UNIT            1   17[BANK0 ] unsigned char 
 10039 ;; Return value:  Size  Location     Type
 10040 ;;                  1    wreg      void 
 10041 ;; Registers used:
 10042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10043 ;; Tracked objects:
 10044 ;;		On entry : 300/0
 10045 ;;		On exit  : 300/0
 10046 ;;		Unchanged: 0/0
 10047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10048 ;;      Params:         0       1       0       0       0
 10049 ;;      Locals:         0       1       0       0       0
 10050 ;;      Temps:          0       0       0       0       0
 10051 ;;      Totals:         0       2       0       0       0
 10052 ;;Total ram usage:        2 bytes
 10053 ;; Hardware stack levels used:    1
 10054 ;; Hardware stack levels required when called:    4
 10055 ;; This function calls:
 10056 ;;		_LCD_SEND_A_NUMBER
 10057 ;;		_LCD_SET_CURSOR
 10058 ;; This function is called by:
 10059 ;;		_INCREMENT_THIS
 10060 ;; This function uses a non-reentrant model
 10061 ;;
 10062                           
 10063                           
 10064                           ;psect for function _DISP_UPDATE_TIME_UNIT_AT
 10065  0D36                     _DISP_UPDATE_TIME_UNIT_AT:	
 10066                           
 10067                           ;incstack = 0
 10068 ;; hardware stack exceeded
 10069                           ; Regs used in _DISP_UPDATE_TIME_UNIT_AT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
 10070                           ;DISP_UPDATE_TIME_UNIT_AT@UNIT stored from wreg
 10071  0D36  00B1               	movwf	DISP_UPDATE_TIME_UNIT_AT@UNIT
 10072                           
 10073                           ;Display.c: 53: void DISP_UPDATE_TIME_UNIT_AT(tbyte UNIT , tbyte NUMBER );Display.c: 54:
      +                               {;Display.c: 55:   LCD_SET_CURSOR(0,UNIT);
 10074  0D37  00A1               	movwf	LCD_SET_CURSOR@row
 10075  0D38  3000               	movlw	0
 10076  0D39  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10077                           
 10078                           ;Display.c: 56:         LCD_SEND_A_NUMBER(NUMBER);
 10079  0D3C  1283               	bcf	3,5	;RP0=0, select bank0
 10080  0D3D  1303               	bcf	3,6	;RP1=0, select bank0
 10081  0D3E  0830               	movf	DISP_UPDATE_TIME_UNIT_AT@NUMBER,w
 10082  0D3F  00A8               	movwf	LCD_SEND_A_NUMBER@x
 10083  0D40  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
 10084  0D41  2CDD               	ljmp	i1l4532
 10085  0D42                     __end_of_DISP_UPDATE_TIME_UNIT_AT:	
 10086  0D42                     __ptext66:	
 10087 ;; *************** function _TIME_CONTINUE *****************
 10088 ;; Defined at:
 10089 ;;		line 42 in file "TIME.c"
 10090 ;; Parameters:    Size  Location     Type
 10091 ;;		None
 10092 ;; Auto vars:     Size  Location     Type
 10093 ;;		None
 10094 ;; Return value:  Size  Location     Type
 10095 ;;                  1    wreg      void 
 10096 ;; Registers used:
 10097 ;;		None
 10098 ;; Tracked objects:
 10099 ;;		On entry : B00/B00
 10100 ;;		On exit  : B00/B00
 10101 ;;		Unchanged: 800/0
 10102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10103 ;;      Params:         0       0       0       0       0
 10104 ;;      Locals:         0       0       0       0       0
 10105 ;;      Temps:          0       0       0       0       0
 10106 ;;      Totals:         0       0       0       0       0
 10107 ;;Total ram usage:        0 bytes
 10108 ;; Hardware stack levels used:    1
 10109 ;; This function calls:
 10110 ;;		Nothing
 10111 ;; This function is called by:
 10112 ;;		_TIME_START_AT
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           
 10117                           ;psect for function _TIME_CONTINUE
 10118  0D42                     _TIME_CONTINUE:	
 10119  0D42                     i1l4782:	
 10120                           ;incstack = 0
 10121 ;; hardware stack exceeded
 10122                           ; Regs used in _TIME_CONTINUE: []
 10123                           
 10124                           
 10125                           ;TIME.c: 44:     COUNT_DECISION = YES;
 10126  0D42  01AB               	clrf	_COUNT_DECISION^(0+384)
 10127  0D43  0AAB               	incf	_COUNT_DECISION^(0+384),f
 10128  0D44  0008               	return
 10129  0D45                     __end_of_TIME_CONTINUE:	
 10130  0D45                     __ptext40:	
 10131 ;; *************** function _KEYPAD_UPDATE *****************
 10132 ;; Defined at:
 10133 ;;		line 30 in file "Keypad.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;		None
 10136 ;; Auto vars:     Size  Location     Type
 10137 ;;  COL_counter     1    4[BANK0 ] unsigned char 
 10138 ;;  ROW_counter     1    3[BANK0 ] unsigned char 
 10139 ;;  KEYPAD_count    1    2[BANK0 ] unsigned char 
 10140 ;;  KEY_STATE       1    1[BANK0 ] enum E891
 10141 ;; Return value:  Size  Location     Type
 10142 ;;                  1    wreg      void 
 10143 ;; Registers used:
 10144 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/300
 10147 ;;		On exit  : 300/300
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10150 ;;      Params:         0       0       0       0       0
 10151 ;;      Locals:         0       4       0       0       0
 10152 ;;      Temps:          0       1       0       0       0
 10153 ;;      Totals:         0       5       0       0       0
 10154 ;;Total ram usage:        5 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    1
 10157 ;; This function calls:
 10158 ;;		_GPIO_PIN_GET_STATE
 10159 ;;		i1_GPIO_PIN_SET_STATE
 10160 ;; This function is called by:
 10161 ;;		_SYS_UPDATE
 10162 ;; This function uses a non-reentrant model
 10163 ;;
 10164                           
 10165                           
 10166                           ;psect for function _KEYPAD_UPDATE
 10167  0D45                     _KEYPAD_UPDATE:	
 10168                           
 10169                           ;Keypad.c: 32:  static tbyte KEYPAD_TICK_counter = 0;;Keypad.c: 33:  KEYPAD_TICK_counter
      +                           += (5);
 10170                           
 10171                           ;incstack = 0
 10172                           ; Regs used in _KEYPAD_UPDATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10173  0D45  3005               	movlw	5
 10174  0D46  1683               	bsf	3,5	;RP0=1, select bank3
 10175  0D47  1703               	bsf	3,6	;RP1=1, select bank3
 10176  0D48  07B0               	addwf	KEYPAD_UPDATE@KEYPAD_TICK_counter^(0+384),f
 10177                           
 10178                           ;Keypad.c: 35:  if (KEYPAD_TICK_counter > (10))
 10179  0D49  300B               	movlw	11
 10180  0D4A  0230               	subwf	KEYPAD_UPDATE@KEYPAD_TICK_counter^(0+384),w
 10181  0D4B  1C03               	skipc
 10182  0D4C  0008               	return
 10183  0D4D  3002               	movlw	2
 10184                           
 10185                           ;Keypad.c: 41:   KEYPAD_TICK_counter = 0;
 10186  0D4E  01B0               	clrf	KEYPAD_UPDATE@KEYPAD_TICK_counter^(0+384)
 10187                           
 10188                           ;Keypad.c: 43:   for (KEYPAD_counter = 3 -1 ; KEYPAD_counter > 0 ; KEYPAD_counter-- )
 10189  0D4F  1283               	bcf	3,5	;RP0=0, select bank0
 10190  0D50  1303               	bcf	3,6	;RP1=0, select bank0
 10191  0D51  00A2               	movwf	KEYPAD_UPDATE@KEYPAD_counter
 10192  0D52                     i1l6474:	
 10193                           
 10194                           ;Keypad.c: 44:   {;Keypad.c: 45:    keypad_sapmles[KEYPAD_counter]=keypad_sapmles[KEYPAD
      +                          _counter-1];
 10195  0D52  0822               	movf	KEYPAD_UPDATE@KEYPAD_counter,w
 10196  0D53  3E9A               	addlw	(low ((_keypad_sapmles| (0+256)+255)))& (0+255)
 10197  0D54  0084               	movwf	4
 10198  0D55  1783               	bsf	3,7	;select IRP bank3
 10199  0D56  0800               	movf	0,w
 10200  0D57  00A0               	movwf	??_KEYPAD_UPDATE
 10201  0D58  0822               	movf	KEYPAD_UPDATE@KEYPAD_counter,w
 10202  0D59  3E9B               	addlw	(low (_keypad_sapmles| (0+256)))& (0+255)
 10203  0D5A  0084               	movwf	4
 10204  0D5B  0820               	movf	??_KEYPAD_UPDATE,w
 10205  0D5C  0080               	movwf	0
 10206                           
 10207                           ;Keypad.c: 46:   }
 10208  0D5D  0BA2               	decfsz	KEYPAD_UPDATE@KEYPAD_counter,f
 10209  0D5E  2D52               	goto	i1l6474
 10210                           
 10211                           ;Keypad.c: 47:   keypad_sapmles[0] = NO_KEY;
 10212  0D5F  300C               	movlw	12
 10213  0D60  1683               	bsf	3,5	;RP0=1, select bank3
 10214  0D61  1703               	bsf	3,6	;RP1=1, select bank3
 10215  0D62  009B               	movwf	_keypad_sapmles^(0+384)
 10216                           
 10217                           ;Keypad.c: 48:   for (ROW_counter = 0 ; ROW_counter <4 ; ROW_counter++)
 10218  0D63  1283               	bcf	3,5	;RP0=0, select bank0
 10219  0D64  1303               	bcf	3,6	;RP1=0, select bank0
 10220  0D65  01A3               	clrf	KEYPAD_UPDATE@ROW_counter
 10221  0D66                     i1l6488:	
 10222                           
 10223                           ;Keypad.c: 49:   {;Keypad.c: 50:    GPIO_PIN_SET_STATE(KEYPAD_info.KEYPAD_ROW_RORT , KEY
      +                          PAD_info.KEYPAD_ROW_PIN[ROW_counter] , GPIO_PIN_OFF);
 10224  0D66  0823               	movf	KEYPAD_UPDATE@ROW_counter,w
 10225  0D67  3EC8               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
 10226  0D68  0084               	movwf	4
 10227  0D69  1783               	bsf	3,7	;select IRP bank3
 10228  0D6A  0800               	movf	0,w
 10229  0D6B  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10230  0D6C  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10231  0D6D  1683               	bsf	3,5	;RP0=1, select bank3
 10232  0D6E  1703               	bsf	3,6	;RP1=1, select bank3
 10233  0D6F  0846               	movf	_KEYPAD_info^(0+384),w
 10234  0D70  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10235                           
 10236                           ;Keypad.c: 51:            for (COL_counter = 0 ; COL_counter <3 ; COL_counter++ )
 10237  0D73  1283               	bcf	3,5	;RP0=0, select bank0
 10238  0D74  1303               	bcf	3,6	;RP1=0, select bank0
 10239  0D75  01A4               	clrf	KEYPAD_UPDATE@COL_counter
 10240  0D76                     i1l6496:	
 10241  0D76  0824               	movf	KEYPAD_UPDATE@COL_counter,w
 10242  0D77  3ECC               	addlw	(low ((_KEYPAD_info| (0+256)+6)))& (0+255)
 10243  0D78  0084               	movwf	4
 10244  0D79  1783               	bsf	3,7	;select IRP bank3
 10245  0D7A  0800               	movf	0,w
 10246  0D7B  00F3               	movwf	GPIO_PIN_GET_STATE@GPIO_PIN_NO
 10247  0D7C  1683               	bsf	3,5	;RP0=1, select bank3
 10248  0D7D  1703               	bsf	3,6	;RP1=1, select bank3
 10249  0D7E  0847               	movf	(_KEYPAD_info^(0+384)+1),w
 10250  0D7F  2778  120A  158A   	fcall	_GPIO_PIN_GET_STATE
 10251                           
 10252                           ;Keypad.c: 54:    }
 10253  0D82  1283               	bcf	3,5	;RP0=0, select bank0
 10254  0D83  1303               	bcf	3,6	;RP1=0, select bank0
 10255  0D84  3003               	movlw	3
 10256  0D85  0AA4               	incf	KEYPAD_UPDATE@COL_counter,f
 10257  0D86  0224               	subwf	KEYPAD_UPDATE@COL_counter,w
 10258  0D87  1C03               	skipc
 10259  0D88  2D76               	goto	i1l6496
 10260                           
 10261                           ;Keypad.c: 55:    for (COL_counter = 0 ; COL_counter <3 ; COL_counter++ )
 10262  0D89  01A4               	clrf	KEYPAD_UPDATE@COL_counter
 10263  0D8A                     i1l6508:	
 10264                           
 10265                           ;Keypad.c: 56:    {;Keypad.c: 57:     KEY_STATE = GPIO_PIN_GET_STATE(KEYPAD_info.KEYPAD_
      +                          COL_PORT , KEYPAD_info.KEYPAD_COL_PIN[COL_counter]);
 10266  0D8A  0824               	movf	KEYPAD_UPDATE@COL_counter,w
 10267  0D8B  3ECC               	addlw	(low ((_KEYPAD_info| (0+256)+6)))& (0+255)
 10268  0D8C  0084               	movwf	4
 10269  0D8D  1783               	bsf	3,7	;select IRP bank3
 10270  0D8E  0800               	movf	0,w
 10271  0D8F  00F3               	movwf	GPIO_PIN_GET_STATE@GPIO_PIN_NO
 10272  0D90  1683               	bsf	3,5	;RP0=1, select bank3
 10273  0D91  1703               	bsf	3,6	;RP1=1, select bank3
 10274  0D92  0847               	movf	(_KEYPAD_info^(0+384)+1),w
 10275  0D93  2778  120A  158A   	fcall	_GPIO_PIN_GET_STATE
 10276  0D96  1283               	bcf	3,5	;RP0=0, select bank0
 10277  0D97  1303               	bcf	3,6	;RP1=0, select bank0
 10278  0D98  00A1               	movwf	KEYPAD_UPDATE@KEY_STATE
 10279                           
 10280                           ;Keypad.c: 58:     if ( KEY_STATE == (0) )
 10281  0D99  0821               	movf	KEYPAD_UPDATE@KEY_STATE,w
 10282  0D9A  1D03               	btfss	3,2
 10283  0D9B  2DA3               	goto	i1l6514
 10284                           
 10285                           ;Keypad.c: 59:     {;Keypad.c: 60:      keypad_sapmles[0]=( ROW_counter * 3 + COL_counte
      +                          r );
 10286  0D9C  0823               	movf	KEYPAD_UPDATE@ROW_counter,w
 10287  0D9D  0723               	addwf	KEYPAD_UPDATE@ROW_counter,w
 10288  0D9E  0723               	addwf	KEYPAD_UPDATE@ROW_counter,w
 10289  0D9F  0724               	addwf	KEYPAD_UPDATE@COL_counter,w
 10290  0DA0  1683               	bsf	3,5	;RP0=1, select bank3
 10291  0DA1  1703               	bsf	3,6	;RP1=1, select bank3
 10292  0DA2  009B               	movwf	_keypad_sapmles^(0+384)
 10293  0DA3                     i1l6514:	
 10294                           
 10295                           ;Keypad.c: 62:    }
 10296  0DA3  1283               	bcf	3,5	;RP0=0, select bank0
 10297  0DA4  1303               	bcf	3,6	;RP1=0, select bank0
 10298  0DA5  3003               	movlw	3
 10299  0DA6  0AA4               	incf	KEYPAD_UPDATE@COL_counter,f
 10300  0DA7  0224               	subwf	KEYPAD_UPDATE@COL_counter,w
 10301  0DA8  1C03               	skipc
 10302  0DA9  2D8A               	goto	i1l6508
 10303                           
 10304                           ;Keypad.c: 63:    GPIO_PIN_SET_STATE(KEYPAD_info.KEYPAD_ROW_RORT , KEYPAD_info.KEYPAD_RO
      +                          W_PIN[ROW_counter] , GPIO_PIN_ON);
 10305  0DAA  0823               	movf	KEYPAD_UPDATE@ROW_counter,w
 10306  0DAB  3EC8               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
 10307  0DAC  0084               	movwf	4
 10308  0DAD  1783               	bsf	3,7	;select IRP bank3
 10309  0DAE  0800               	movf	0,w
 10310  0DAF  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10311  0DB0  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10312  0DB1  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 10313  0DB2  1683               	bsf	3,5	;RP0=1, select bank3
 10314  0DB3  1703               	bsf	3,6	;RP1=1, select bank3
 10315  0DB4  0846               	movf	_KEYPAD_info^(0+384),w
 10316  0DB5  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10317                           
 10318                           ;Keypad.c: 64:   }
 10319  0DB8  1283               	bcf	3,5	;RP0=0, select bank0
 10320  0DB9  1303               	bcf	3,6	;RP1=0, select bank0
 10321  0DBA  3004               	movlw	4
 10322  0DBB  0AA3               	incf	KEYPAD_UPDATE@ROW_counter,f
 10323  0DBC  0223               	subwf	KEYPAD_UPDATE@ROW_counter,w
 10324  0DBD  1C03               	skipc
 10325  0DBE  2D66               	goto	i1l6488
 10326                           
 10327                           ;Keypad.c: 65:   if ((keypad_sapmles[0] == keypad_sapmles[1])&(keypad_sapmles[0] != keyp
      +                          ad_sapmles[2]) )
 10328  0DBF  1683               	bsf	3,5	;RP0=1, select bank3
 10329  0DC0  1703               	bsf	3,6	;RP1=1, select bank3
 10330  0DC1  081C               	movf	(_keypad_sapmles^(0+384)+1),w
 10331  0DC2  061B               	xorwf	_keypad_sapmles^(0+384),w
 10332  0DC3  1D03               	skipz
 10333  0DC4  2DCE               	goto	i1l6530
 10334  0DC5  081D               	movf	(_keypad_sapmles^(0+384)+2),w
 10335  0DC6  061B               	xorwf	_keypad_sapmles^(0+384),w
 10336  0DC7  1903               	skipnz
 10337  0DC8  2DCE               	goto	i1l6530
 10338                           
 10339                           ;Keypad.c: 66:   {;Keypad.c: 67:    LAST_PRESSED_KEY.KEYPAD_NO = keypad_sapmles[0];
 10340  0DC9  081B               	movf	_keypad_sapmles^(0+384),w
 10341  0DCA  00A2               	movwf	_LAST_PRESSED_KEY^(0+384)
 10342                           
 10343                           ;Keypad.c: 68:    LAST_PRESSED_KEY.KEYPAD_STATUS = KEY_PRE_PRESSED;
 10344  0DCB  01A3               	clrf	(_LAST_PRESSED_KEY^(0+384)+1)
 10345  0DCC  0AA3               	incf	(_LAST_PRESSED_KEY^(0+384)+1),f
 10346                           
 10347                           ;Keypad.c: 69:   }
 10348  0DCD  0008               	return
 10349  0DCE                     i1l6530:	
 10350  0DCE  081C               	movf	(_keypad_sapmles^(0+384)+1),w
 10351  0DCF  061B               	xorwf	_keypad_sapmles^(0+384),w
 10352  0DD0  1D03               	skipz
 10353  0DD1  2DDA               	goto	i1l6538
 10354  0DD2  081D               	movf	(_keypad_sapmles^(0+384)+2),w
 10355  0DD3  061B               	xorwf	_keypad_sapmles^(0+384),w
 10356  0DD4  1D03               	skipz
 10357  0DD5  2DDA               	goto	i1l6538
 10358                           
 10359                           ;Keypad.c: 71:   {;Keypad.c: 72:    LAST_PRESSED_KEY.KEYPAD_NO = keypad_sapmles[0];
 10360  0DD6  081B               	movf	_keypad_sapmles^(0+384),w
 10361  0DD7  00A2               	movwf	_LAST_PRESSED_KEY^(0+384)
 10362                           
 10363                           ;Keypad.c: 73:    LAST_PRESSED_KEY.KEYPAD_STATUS = KEY_PRESSED;
 10364  0DD8  01A3               	clrf	(_LAST_PRESSED_KEY^(0+384)+1)
 10365                           
 10366                           ;Keypad.c: 74:   }
 10367  0DD9  0008               	return
 10368  0DDA                     i1l6538:	
 10369                           
 10370                           ;Keypad.c: 76:   {;Keypad.c: 77:    LAST_PRESSED_KEY.KEYPAD_NO = NO_KEY;
 10371  0DDA  300C               	movlw	12
 10372  0DDB  00A2               	movwf	_LAST_PRESSED_KEY^(0+384)
 10373  0DDC  0008               	return
 10374  0DDD                     __end_of_KEYPAD_UPDATE:	
 10375  0DDD                     __ptext83:	
 10376 ;; *************** function _UPDATE_LCD_HOURS *****************
 10377 ;; Defined at:
 10378 ;;		line 134 in file "Display.c"
 10379 ;; Parameters:    Size  Location     Type
 10380 ;;  HOURS           1    wreg     unsigned char 
 10381 ;; Auto vars:     Size  Location     Type
 10382 ;;  HOURS           1   16[BANK0 ] unsigned char 
 10383 ;; Return value:  Size  Location     Type
 10384 ;;                  1    wreg      void 
 10385 ;; Registers used:
 10386 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10387 ;; Tracked objects:
 10388 ;;		On entry : 300/0
 10389 ;;		On exit  : 300/0
 10390 ;;		Unchanged: 0/0
 10391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10392 ;;      Params:         0       0       0       0       0
 10393 ;;      Locals:         0       1       0       0       0
 10394 ;;      Temps:          0       0       0       0       0
 10395 ;;      Totals:         0       1       0       0       0
 10396 ;;Total ram usage:        1 bytes
 10397 ;; Hardware stack levels used:    1
 10398 ;; Hardware stack levels required when called:    4
 10399 ;; This function calls:
 10400 ;;		_LCD_SEND_A_NUMBER
 10401 ;;		_LCD_SET_CURSOR
 10402 ;;		___lbdiv
 10403 ;; This function is called by:
 10404 ;;		_DISP_UPDATE_TIME
 10405 ;;		_DISP_SHOW_TIME_AT
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           
 10410                           ;psect for function _UPDATE_LCD_HOURS
 10411  0DDD                     _UPDATE_LCD_HOURS:	
 10412                           
 10413                           ;incstack = 0
 10414 ;; hardware stack exceeded
 10415                           ; Regs used in _UPDATE_LCD_HOURS: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10416                           ;UPDATE_LCD_HOURS@HOURS stored from wreg
 10417  0DDD  00B0               	movwf	UPDATE_LCD_HOURS@HOURS
 10418                           
 10419                           ;Display.c: 134:  static void UPDATE_LCD_HOURS(tbyte HOURS);Display.c: 135:  {;Display.c
      +                          : 137:   LCD_SET_CURSOR(0,(6));
 10420  0DDE  3006               	movlw	6
 10421  0DDF  00A1               	movwf	LCD_SET_CURSOR@row
 10422  0DE0  3000               	movlw	0
 10423  0DE1  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10424                           
 10425                           ;Display.c: 138:   if (HOURS / 10 != 0)
 10426  0DE4  300A               	movlw	10
 10427  0DE5  00F0               	movwf	___lbdiv@divisor
 10428  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
 10429  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
 10430  0DE8  0830               	movf	UPDATE_LCD_HOURS@HOURS,w
 10431  0DE9  24EC  120A  158A   	fcall	___lbdiv
 10432  0DEC  3A00               	xorlw	0
 10433  0DED  1903               	skipnz
 10434  0DEE  2DF3               	goto	i1l4770
 10435                           
 10436                           ;Display.c: 139:   {;Display.c: 140:    LCD_SEND_A_NUMBER(HOURS);
 10437  0DEF  0830               	movf	UPDATE_LCD_HOURS@HOURS,w
 10438  0DF0  00A8               	movwf	LCD_SEND_A_NUMBER@x
 10439  0DF1  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
 10440  0DF2  2CDD               	ljmp	i1l4532
 10441  0DF3                     i1l4770:	
 10442                           ;Display.c: 141:   }
 10443                           
 10444                           
 10445                           ;Display.c: 143:   {;Display.c: 144:    LCD_SEND_A_NUMBER(0);
 10446  0DF3  01A8               	clrf	LCD_SEND_A_NUMBER@x
 10447  0DF4  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
 10448  0DF5  24DD  120A  158A   	fcall	_LCD_SEND_A_NUMBER
 10449                           
 10450                           ;Display.c: 145:    LCD_SEND_A_NUMBER(HOURS);
 10451  0DF8  0830               	movf	UPDATE_LCD_HOURS@HOURS,w
 10452  0DF9  00A8               	movwf	LCD_SEND_A_NUMBER@x
 10453  0DFA  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
 10454  0DFB  2CDD               	ljmp	i1l4532
 10455  0DFC                     __end_of_UPDATE_LCD_HOURS:	
 10456  0DFC                     __ptext59:	
 10457 ;; *************** function _DISP_MOTOR_DATA *****************
 10458 ;; Defined at:
 10459 ;;		line 80 in file "Display.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;		None
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;		None
 10464 ;; Return value:  Size  Location     Type
 10465 ;;                  1    wreg      void 
 10466 ;; Registers used:
 10467 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10468 ;; Tracked objects:
 10469 ;;		On entry : 0/0
 10470 ;;		On exit  : 300/0
 10471 ;;		Unchanged: 0/0
 10472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10473 ;;      Params:         0       0       0       0       0
 10474 ;;      Locals:         0       0       0       0       0
 10475 ;;      Temps:          0       0       0       0       0
 10476 ;;      Totals:         0       0       0       0       0
 10477 ;;Total ram usage:        0 bytes
 10478 ;; Hardware stack levels used:    1
 10479 ;; Hardware stack levels required when called:    3
 10480 ;; This function calls:
 10481 ;;		_LCD_CLEAR
 10482 ;;		_LCD_SEND_A_STRING
 10483 ;;		_LCD_SET_CURSOR
 10484 ;; This function is called by:
 10485 ;;		_SET_ROTOR_PWR_HANDLER
 10486 ;; This function uses a non-reentrant model
 10487 ;;
 10488                           
 10489                           
 10490                           ;psect for function _DISP_MOTOR_DATA
 10491  0DFC                     _DISP_MOTOR_DATA:	
 10492                           
 10493                           ;Display.c: 83:  LCD_CLEAR();
 10494                           
 10495                           ;incstack = 0
 10496 ;; hardware stack exceeded
 10497                           ; Regs used in _DISP_MOTOR_DATA: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10498  0DFC  26CD  120A  158A   	fcall	_LCD_CLEAR
 10499                           
 10500                           ;Display.c: 84:  LCD_SET_CURSOR(0,0);
 10501  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
 10502  0E00  1303               	bcf	3,6	;RP1=0, select bank0
 10503  0E01  3000               	movlw	0
 10504  0E02  01A1               	clrf	LCD_SET_CURSOR@row
 10505  0E03  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10506                           
 10507                           ;Display.c: 85:  LCD_SEND_A_STRING("MOTOR PWR: 1 2 3");
 10508  0E06  3089               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
 10509  0E07  1283               	bcf	3,5	;RP0=0, select bank0
 10510  0E08  1303               	bcf	3,6	;RP1=0, select bank0
 10511  0E09  00A1               	movwf	LCD_SEND_A_STRING@string
 10512  0E0A  3080               	movlw	128
 10513  0E0B  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10514  0E0C  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10515  0E0F  3001               	movlw	1
 10516                           
 10517                           ;Display.c: 86:  LCD_SET_CURSOR(1,0);
 10518  0E10  01A1               	clrf	LCD_SET_CURSOR@row
 10519  0E11  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10520                           
 10521                           ;Display.c: 87:  LCD_SEND_A_STRING("<");
 10522  0E14  309A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
 10523  0E15  1283               	bcf	3,5	;RP0=0, select bank0
 10524  0E16  1303               	bcf	3,6	;RP1=0, select bank0
 10525  0E17  00A1               	movwf	LCD_SEND_A_STRING@string
 10526  0E18  3080               	movlw	128
 10527  0E19  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10528  0E1A  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10529                           
 10530                           ;Display.c: 88:  LCD_SET_CURSOR(1,15);
 10531  0E1D  300F               	movlw	15
 10532  0E1E  00A1               	movwf	LCD_SET_CURSOR@row
 10533  0E1F  3001               	movlw	1
 10534  0E20  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10535                           
 10536                           ;Display.c: 89:  LCD_SEND_A_STRING(">");
 10537  0E23  3010               	movlw	(low (((STR_12+15)-__stringbase)| (0+32768)))& (0+255)
 10538  0E24  1283               	bcf	3,5	;RP0=0, select bank0
 10539  0E25  1303               	bcf	3,6	;RP1=0, select bank0
 10540  0E26  00A1               	movwf	LCD_SEND_A_STRING@string
 10541  0E27  3080               	movlw	128
 10542  0E28  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10543  0E29  2E86               	ljmp	i1l4490
 10544  0E2A                     __end_of_DISP_MOTOR_DATA:	
 10545  0E2A                     __ptext63:	
 10546 ;; *************** function _DISP_HEATER_DATA *****************
 10547 ;; Defined at:
 10548 ;;		line 68 in file "Display.c"
 10549 ;; Parameters:    Size  Location     Type
 10550 ;;		None
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;		None
 10553 ;; Return value:  Size  Location     Type
 10554 ;;                  1    wreg      void 
 10555 ;; Registers used:
 10556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10557 ;; Tracked objects:
 10558 ;;		On entry : 0/0
 10559 ;;		On exit  : 300/0
 10560 ;;		Unchanged: 0/0
 10561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10562 ;;      Params:         0       0       0       0       0
 10563 ;;      Locals:         0       0       0       0       0
 10564 ;;      Temps:          0       0       0       0       0
 10565 ;;      Totals:         0       0       0       0       0
 10566 ;;Total ram usage:        0 bytes
 10567 ;; Hardware stack levels used:    1
 10568 ;; Hardware stack levels required when called:    3
 10569 ;; This function calls:
 10570 ;;		_LCD_CLEAR
 10571 ;;		_LCD_SEND_A_STRING
 10572 ;;		_LCD_SET_CURSOR
 10573 ;; This function is called by:
 10574 ;;		_SET_HEATING_HANDLER
 10575 ;; This function uses a non-reentrant model
 10576 ;;
 10577                           
 10578                           
 10579                           ;psect for function _DISP_HEATER_DATA
 10580  0E2A                     _DISP_HEATER_DATA:	
 10581                           
 10582                           ;Display.c: 71:  LCD_CLEAR();
 10583                           
 10584                           ;incstack = 0
 10585 ;; hardware stack exceeded
 10586                           ; Regs used in _DISP_HEATER_DATA: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10587  0E2A  26CD  120A  158A   	fcall	_LCD_CLEAR
 10588                           
 10589                           ;Display.c: 72:  LCD_SET_CURSOR(0,0);
 10590  0E2D  1283               	bcf	3,5	;RP0=0, select bank0
 10591  0E2E  1303               	bcf	3,6	;RP1=0, select bank0
 10592  0E2F  3000               	movlw	0
 10593  0E30  01A1               	clrf	LCD_SET_CURSOR@row
 10594  0E31  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10595                           
 10596                           ;Display.c: 73:  LCD_SEND_A_STRING(" HEAT LVL: 1 2 3");
 10597  0E34  3078               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
 10598  0E35  1283               	bcf	3,5	;RP0=0, select bank0
 10599  0E36  1303               	bcf	3,6	;RP1=0, select bank0
 10600  0E37  00A1               	movwf	LCD_SEND_A_STRING@string
 10601  0E38  3080               	movlw	128
 10602  0E39  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10603  0E3A  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10604  0E3D  3001               	movlw	1
 10605                           
 10606                           ;Display.c: 74:  LCD_SET_CURSOR(1,0);
 10607  0E3E  01A1               	clrf	LCD_SET_CURSOR@row
 10608  0E3F  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10609                           
 10610                           ;Display.c: 75:  LCD_SEND_A_STRING("<");
 10611  0E42  309A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
 10612  0E43  1283               	bcf	3,5	;RP0=0, select bank0
 10613  0E44  1303               	bcf	3,6	;RP1=0, select bank0
 10614  0E45  00A1               	movwf	LCD_SEND_A_STRING@string
 10615  0E46  3080               	movlw	128
 10616  0E47  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10617  0E48  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10618                           
 10619                           ;Display.c: 76:  LCD_SET_CURSOR(1,15);
 10620  0E4B  300F               	movlw	15
 10621  0E4C  00A1               	movwf	LCD_SET_CURSOR@row
 10622  0E4D  3001               	movlw	1
 10623  0E4E  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10624                           
 10625                           ;Display.c: 77:  LCD_SEND_A_STRING(">");
 10626  0E51  3010               	movlw	(low (((STR_12+15)-__stringbase)| (0+32768)))& (0+255)
 10627  0E52  1283               	bcf	3,5	;RP0=0, select bank0
 10628  0E53  1303               	bcf	3,6	;RP1=0, select bank0
 10629  0E54  00A1               	movwf	LCD_SEND_A_STRING@string
 10630  0E55  3080               	movlw	128
 10631  0E56  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10632  0E57  2E86               	ljmp	i1l4490
 10633  0E58                     __end_of_DISP_HEATER_DATA:	
 10634  0E58                     __ptext90:	
 10635 ;; *************** function _DISP_SHOW_TIME *****************
 10636 ;; Defined at:
 10637 ;;		line 150 in file "Display.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;		None
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;		None
 10642 ;; Return value:  Size  Location     Type
 10643 ;;                  1    wreg      void 
 10644 ;; Registers used:
 10645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10646 ;; Tracked objects:
 10647 ;;		On entry : 300/0
 10648 ;;		On exit  : 300/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10651 ;;      Params:         0       0       0       0       0
 10652 ;;      Locals:         0       0       0       0       0
 10653 ;;      Temps:          0       0       0       0       0
 10654 ;;      Totals:         0       0       0       0       0
 10655 ;;Total ram usage:        0 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:    3
 10658 ;; This function calls:
 10659 ;;		_LCD_CLEAR
 10660 ;;		_LCD_SEND_A_STRING
 10661 ;;		_LCD_SET_CURSOR
 10662 ;; This function is called by:
 10663 ;;		_DISP_SHOW_TIME_AT
 10664 ;; This function uses a non-reentrant model
 10665 ;;
 10666                           
 10667                           
 10668                           ;psect for function _DISP_SHOW_TIME
 10669  0E58                     _DISP_SHOW_TIME:	
 10670                           
 10671                           ;Display.c: 153:  LCD_CLEAR();
 10672                           
 10673                           ;incstack = 0
 10674 ;; hardware stack exceeded
 10675                           ; Regs used in _DISP_SHOW_TIME: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10676  0E58  26CD  120A  158A   	fcall	_LCD_CLEAR
 10677                           
 10678                           ;Display.c: 154:  LCD_SET_CURSOR(0,0);
 10679  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
 10680  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
 10681  0E5D  3000               	movlw	0
 10682  0E5E  01A1               	clrf	LCD_SET_CURSOR@row
 10683  0E5F  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10684                           
 10685                           ;Display.c: 155:  LCD_SEND_A_STRING(" TIME:00:00:00  ");
 10686  0E62  3067               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
 10687  0E63  1283               	bcf	3,5	;RP0=0, select bank0
 10688  0E64  1303               	bcf	3,6	;RP1=0, select bank0
 10689  0E65  00A1               	movwf	LCD_SEND_A_STRING@string
 10690  0E66  3080               	movlw	128
 10691  0E67  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10692  0E68  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10693  0E6B  3001               	movlw	1
 10694                           
 10695                           ;Display.c: 156:  LCD_SET_CURSOR(1,0);
 10696  0E6C  01A1               	clrf	LCD_SET_CURSOR@row
 10697  0E6D  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10698                           
 10699                           ;Display.c: 157:  LCD_SEND_A_STRING("<");
 10700  0E70  309A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
 10701  0E71  1283               	bcf	3,5	;RP0=0, select bank0
 10702  0E72  1303               	bcf	3,6	;RP1=0, select bank0
 10703  0E73  00A1               	movwf	LCD_SEND_A_STRING@string
 10704  0E74  3080               	movlw	128
 10705  0E75  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10706  0E76  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10707                           
 10708                           ;Display.c: 158:  LCD_SET_CURSOR(1,15);
 10709  0E79  300F               	movlw	15
 10710  0E7A  00A1               	movwf	LCD_SET_CURSOR@row
 10711  0E7B  3001               	movlw	1
 10712  0E7C  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10713                           
 10714                           ;Display.c: 159:  LCD_SEND_A_STRING(">");
 10715  0E7F  3010               	movlw	(low (((STR_12+15)-__stringbase)| (0+32768)))& (0+255)
 10716  0E80  1283               	bcf	3,5	;RP0=0, select bank0
 10717  0E81  1303               	bcf	3,6	;RP1=0, select bank0
 10718  0E82  00A1               	movwf	LCD_SEND_A_STRING@string
 10719  0E83  3080               	movlw	128
 10720  0E84  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10721  0E85  2E86               	ljmp	i1l4490
 10722  0E86                     __end_of_DISP_SHOW_TIME:	
 10723  0E86                     __ptext92:	
 10724 ;; *************** function _LCD_SEND_A_STRING *****************
 10725 ;; Defined at:
 10726 ;;		line 61 in file "LCD.c"
 10727 ;; Parameters:    Size  Location     Type
 10728 ;;  string          2    1[BANK0 ] PTR unsigned char 
 10729 ;;		 -> STR_17(17), STR_16(17), STR_15(17), STR_14(17), 
 10730 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
 10731 ;;		 -> STR_9(2), STR_8(2), STR_7(17), STR_6(2), 
 10732 ;;		 -> STR_5(2), STR_4(17), STR_3(2), STR_2(2), 
 10733 ;;		 -> STR_1(17), LCD_SEND_A_NUMBER@string(6), 
 10734 ;; Auto vars:     Size  Location     Type
 10735 ;;		None
 10736 ;; Return value:  Size  Location     Type
 10737 ;;                  1    wreg      void 
 10738 ;; Registers used:
 10739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10740 ;; Tracked objects:
 10741 ;;		On entry : 300/0
 10742 ;;		On exit  : 300/0
 10743 ;;		Unchanged: 0/0
 10744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10745 ;;      Params:         0       2       0       0       0
 10746 ;;      Locals:         0       0       0       0       0
 10747 ;;      Temps:          0       0       0       0       0
 10748 ;;      Totals:         0       2       0       0       0
 10749 ;;Total ram usage:        2 bytes
 10750 ;; Hardware stack levels used:    1
 10751 ;; Hardware stack levels required when called:    2
 10752 ;; This function calls:
 10753 ;;		_LCD_SEND_CHARACTER
 10754 ;; This function is called by:
 10755 ;;		_LCD_SEND_A_NUMBER
 10756 ;;		_DISP_HEATER_DATA
 10757 ;;		_DISP_MOTOR_DATA
 10758 ;;		_DISP_STATMENT
 10759 ;;		_DISP_SHOW_TIME
 10760 ;; This function uses a non-reentrant model
 10761 ;;
 10762                           
 10763                           
 10764                           ;psect for function _LCD_SEND_A_STRING
 10765  0E86                     _LCD_SEND_A_STRING:	
 10766  0E86                     i1l4490:	
 10767                           ;incstack = 0
 10768 ;; hardware stack exceeded
 10769                           ; Regs used in _LCD_SEND_A_STRING: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10770                           
 10771  0E86                     i1l4496:	
 10772                           ;LCD.c: 61: void LCD_SEND_A_STRING ( tbyte *string);LCD.c: 62: {;LCD.c: 63:  while (*str
      +                          ing != 0){
 10773                           
 10774                           
 10775                           ;LCD.c: 63:  while (*string != 0){
 10776  0E86  0822               	movf	LCD_SEND_A_STRING@string+1,w
 10777  0E87  00FF               	movwf	127
 10778  0E88  0821               	movf	LCD_SEND_A_STRING@string,w
 10779  0E89  0084               	movwf	4
 10780  0E8A  120A  118A  270E  120A  158A  	fcall	stringtab
 10781  0E8F  3A00               	xorlw	0
 10782  0E90  1903               	btfsc	3,2
 10783  0E91  0008               	return
 10784                           
 10785                           ;LCD.c: 64:   LCD_SEND_CHARACTER(*string++);
 10786  0E92  0822               	movf	LCD_SEND_A_STRING@string+1,w
 10787  0E93  00FF               	movwf	127
 10788  0E94  0821               	movf	LCD_SEND_A_STRING@string,w
 10789  0E95  0084               	movwf	4
 10790  0E96  120A  118A  270E  120A  158A  	fcall	stringtab
 10791  0E9B  26D8  120A  158A   	fcall	_LCD_SEND_CHARACTER
 10792  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
 10793  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
 10794  0EA0  0AA1               	incf	LCD_SEND_A_STRING@string,f
 10795  0EA1  1903               	skipnz
 10796  0EA2  0AA2               	incf	LCD_SEND_A_STRING@string+1,f
 10797  0EA3  2E86               	goto	i1l4496
 10798  0EA4                     __end_of_LCD_SEND_A_STRING:	
 10799  0EA4                     __ptext91:	
 10800 ;; *************** function _LCD_SET_CURSOR *****************
 10801 ;; Defined at:
 10802 ;;		line 78 in file "LCD.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;  coloum          1    wreg     unsigned char 
 10805 ;;  row             1    1[BANK0 ] unsigned char 
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;  coloum          1    4[BANK0 ] unsigned char 
 10808 ;; Return value:  Size  Location     Type
 10809 ;;                  1    wreg      void 
 10810 ;; Registers used:
 10811 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10812 ;; Tracked objects:
 10813 ;;		On entry : 300/0
 10814 ;;		On exit  : 0/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10817 ;;      Params:         0       1       0       0       0
 10818 ;;      Locals:         0       1       0       0       0
 10819 ;;      Temps:          0       2       0       0       0
 10820 ;;      Totals:         0       4       0       0       0
 10821 ;;Total ram usage:        4 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; Hardware stack levels required when called:    2
 10824 ;; This function calls:
 10825 ;;		i1_LCD_SND_COMMAND
 10826 ;; This function is called by:
 10827 ;;		_START_BLINKING_AT
 10828 ;;		_DISP_UPDATE_TIME_UNIT_AT
 10829 ;;		_DISP_HEATER_DATA
 10830 ;;		_DISP_MOTOR_DATA
 10831 ;;		_DISP_STATMENT
 10832 ;;		_UPDATE_LCD_SECONDS
 10833 ;;		_UPDATE_LCD_MINUTES
 10834 ;;		_UPDATE_LCD_HOURS
 10835 ;;		_DISP_SHOW_TIME
 10836 ;;		_INCREMENT_THIS
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           
 10841                           ;psect for function _LCD_SET_CURSOR
 10842  0EA4                     _LCD_SET_CURSOR:	
 10843                           
 10844                           ;incstack = 0
 10845 ;; hardware stack exceeded
 10846                           ; Regs used in _LCD_SET_CURSOR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10847                           ;LCD_SET_CURSOR@coloum stored from wreg
 10848  0EA4  00A4               	movwf	LCD_SET_CURSOR@coloum
 10849                           
 10850                           ;LCD.c: 78: void LCD_SET_CURSOR (tbyte coloum , tbyte row);LCD.c: 79: {;LCD.c: 80:  swit
      +                          ch (coloum)
 10851  0EA5  2EB6               	goto	i1l4524
 10852  0EA6                     i1l4514:	
 10853                           
 10854                           ;LCD.c: 84:   LCD_SND_COMMAND((0x80+row));
 10855  0EA6  0821               	movf	LCD_SET_CURSOR@row,w
 10856  0EA7  3E80               	addlw	128
 10857  0EA8  270E               	fcall	i1_LCD_SND_COMMAND
 10858                           
 10859                           ;LCD.c: 85:   break;
 10860  0EA9  0008               	return
 10861  0EAA                     i1l4516:	
 10862                           
 10863                           ;LCD.c: 88:   LCD_SND_COMMAND((0xC0+row));
 10864  0EAA  0821               	movf	LCD_SET_CURSOR@row,w
 10865  0EAB  3EC0               	addlw	192
 10866  0EAC  270E               	fcall	i1_LCD_SND_COMMAND
 10867                           
 10868                           ;LCD.c: 89:   break;
 10869  0EAD  0008               	return
 10870  0EAE                     i1l4518:	
 10871                           
 10872                           ;LCD.c: 91:   LCD_SND_COMMAND((0x94+row));
 10873  0EAE  0821               	movf	LCD_SET_CURSOR@row,w
 10874  0EAF  3E94               	addlw	148
 10875  0EB0  270E               	fcall	i1_LCD_SND_COMMAND
 10876                           
 10877                           ;LCD.c: 92:   break;
 10878  0EB1  0008               	return
 10879  0EB2                     i1l4520:	
 10880                           
 10881                           ;LCD.c: 94:   LCD_SND_COMMAND((0xD4+row));
 10882  0EB2  0821               	movf	LCD_SET_CURSOR@row,w
 10883  0EB3  3ED4               	addlw	212
 10884  0EB4  270E               	fcall	i1_LCD_SND_COMMAND
 10885                           
 10886                           ;LCD.c: 95:   break;
 10887  0EB5  0008               	return
 10888  0EB6                     i1l4524:	
 10889  0EB6  0824               	movf	LCD_SET_CURSOR@coloum,w
 10890  0EB7  00A2               	movwf	??_LCD_SET_CURSOR
 10891  0EB8  01A3               	clrf	??_LCD_SET_CURSOR+1
 10892                           
 10893                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10894                           ; Switch size 1, requested type "speed"
 10895                           ; Number of cases is 1, Range of values is 0 to 0
 10896                           ; switch strategies available:
 10897                           ; Name         Instructions Cycles
 10898                           ; simple_byte            4     3 (average)
 10899                           ; direct_byte           11     8 (fixed)
 10900                           ; jumptable            260     6 (fixed)
 10901                           ;	Chosen strategy is simple_byte
 10902  0EB9  0823               	movf	??_LCD_SET_CURSOR+1,w
 10903  0EBA  3A00               	xorlw	0	; case 0
 10904  0EBB  1903               	skipnz
 10905  0EBC  2EBE               	goto	i1l7096
 10906  0EBD  2ECC               	goto	i1l385
 10907  0EBE                     i1l7096:	
 10908                           
 10909                           ; Switch size 1, requested type "speed"
 10910                           ; Number of cases is 4, Range of values is 0 to 3
 10911                           ; switch strategies available:
 10912                           ; Name         Instructions Cycles
 10913                           ; simple_byte           13     7 (average)
 10914                           ; direct_byte           20     8 (fixed)
 10915                           ; jumptable            260     6 (fixed)
 10916                           ;	Chosen strategy is simple_byte
 10917  0EBE  0822               	movf	??_LCD_SET_CURSOR,w
 10918  0EBF  3A00               	xorlw	0	; case 0
 10919  0EC0  1903               	skipnz
 10920  0EC1  2EA6               	goto	i1l4514
 10921  0EC2  3A01               	xorlw	1	; case 1
 10922  0EC3  1903               	skipnz
 10923  0EC4  2EAA               	goto	i1l4516
 10924  0EC5  3A03               	xorlw	3	; case 2
 10925  0EC6  1903               	skipnz
 10926  0EC7  2EAE               	goto	i1l4518
 10927  0EC8  3A01               	xorlw	1	; case 3
 10928  0EC9  1903               	skipnz
 10929  0ECA  2EB2               	goto	i1l4520
 10930  0ECB  2ECC               	goto	i1l385
 10931  0ECC                     i1l385:	
 10932  0ECC  0008               	return
 10933  0ECD                     __end_of_LCD_SET_CURSOR:	
 10934  0ECD                     __ptext94:	
 10935 ;; *************** function _LCD_CLEAR *****************
 10936 ;; Defined at:
 10937 ;;		line 100 in file "LCD.c"
 10938 ;; Parameters:    Size  Location     Type
 10939 ;;		None
 10940 ;; Auto vars:     Size  Location     Type
 10941 ;;		None
 10942 ;; Return value:  Size  Location     Type
 10943 ;;                  1    wreg      void 
 10944 ;; Registers used:
 10945 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10946 ;; Tracked objects:
 10947 ;;		On entry : 0/0
 10948 ;;		On exit  : 0/0
 10949 ;;		Unchanged: 0/0
 10950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10951 ;;      Params:         0       0       0       0       0
 10952 ;;      Locals:         0       0       0       0       0
 10953 ;;      Temps:          0       0       0       0       0
 10954 ;;      Totals:         0       0       0       0       0
 10955 ;;Total ram usage:        0 bytes
 10956 ;; Hardware stack levels used:    1
 10957 ;; Hardware stack levels required when called:    2
 10958 ;; This function calls:
 10959 ;;		i1_LCD_SND_COMMAND
 10960 ;; This function is called by:
 10961 ;;		_DISP_HEATER_DATA
 10962 ;;		_DISP_MOTOR_DATA
 10963 ;;		_DISP_SHOW_TIME
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           
 10968                           ;psect for function _LCD_CLEAR
 10969  0ECD                     _LCD_CLEAR:	
 10970                           
 10971                           ;LCD.c: 102:  LCD_SND_COMMAND(0x01);
 10972                           
 10973                           ;incstack = 0
 10974 ;; hardware stack exceeded
 10975                           ; Regs used in _LCD_CLEAR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10976  0ECD  3001               	movlw	1
 10977  0ECE  270E  120A  158A   	fcall	i1_LCD_SND_COMMAND
 10978                           
 10979                           ;LCD.c: 103:  LCD_SND_COMMAND(0x02);
 10980  0ED1  3002               	movlw	2
 10981  0ED2  270E  120A  158A   	fcall	i1_LCD_SND_COMMAND
 10982                           
 10983                           ;LCD.c: 105:  LCD_SND_COMMAND(0x0C);
 10984  0ED5  300C               	movlw	12
 10985  0ED6  270E               	fcall	i1_LCD_SND_COMMAND
 10986  0ED7  0008               	return
 10987  0ED8                     __end_of_LCD_CLEAR:	
 10988  0ED8                     __ptext93:	
 10989 ;; *************** function _LCD_SEND_CHARACTER *****************
 10990 ;; Defined at:
 10991 ;;		line 149 in file "LCD.c"
 10992 ;; Parameters:    Size  Location     Type
 10993 ;;  character       1    wreg     unsigned char 
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;  character       1    0[BANK0 ] unsigned char 
 10996 ;; Return value:  Size  Location     Type
 10997 ;;                  1    wreg      void 
 10998 ;; Registers used:
 10999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11000 ;; Tracked objects:
 11001 ;;		On entry : 300/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11005 ;;      Params:         0       0       0       0       0
 11006 ;;      Locals:         0       1       0       0       0
 11007 ;;      Temps:          0       0       0       0       0
 11008 ;;      Totals:         0       1       0       0       0
 11009 ;;Total ram usage:        1 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; Hardware stack levels required when called:    1
 11012 ;; This function calls:
 11013 ;;		i1_GPIO_PIN_SET_STATE
 11014 ;;		i1_GPIO_PORT_SET_STATE
 11015 ;; This function is called by:
 11016 ;;		_LCD_SEND_A_STRING
 11017 ;; This function uses a non-reentrant model
 11018 ;;
 11019                           
 11020                           
 11021                           ;psect for function _LCD_SEND_CHARACTER
 11022  0ED8                     _LCD_SEND_CHARACTER:	
 11023                           
 11024                           ;incstack = 0
 11025 ;; hardware stack exceeded
 11026                           ; Regs used in _LCD_SEND_CHARACTER: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11027                           ;LCD_SEND_CHARACTER@character stored from wreg
 11028  0ED8  00A0               	movwf	LCD_SEND_CHARACTER@character
 11029                           
 11030                           ;LCD.c: 149: static void LCD_SEND_CHARACTER ( tbyte character);LCD.c: 150: {;LCD.c: 152:
      +                            GPIO_PORT_SET_STATE((0x0008) , (character &0xf0) );
 11031  0ED9  00F0               	movwf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE
 11032  0EDA  30F0               	movlw	240
 11033  0EDB  05F0               	andwf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE,f
 11034  0EDC  3008               	movlw	8
 11035  0EDD  276E  120A  158A   	fcall	i1_GPIO_PORT_SET_STATE
 11036                           
 11037                           ;LCD.c: 154:  GPIO_PIN_SET_STATE((0x0009) , 2 , GPIO_PIN_ON);
 11038  0EE0  3002               	movlw	2
 11039  0EE1  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 11040  0EE2  3009               	movlw	9
 11041  0EE3  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 11042  0EE4  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 11043  0EE5  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 11044  0EE8  3009               	movlw	9
 11045                           
 11046                           ;LCD.c: 156:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
 11047  0EE9  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 11048  0EEA  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 11049  0EEB  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 11050  0EEC  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 11051  0EED  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 11052  0EF0  3009               	movlw	9
 11053                           
 11054                           ;LCD.c: 157:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
 11055                           ;LCD.c: 159:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
 11056  0EF1  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 11057  0EF2  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 11058  0EF3  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 11059  0EF4  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 11060                           
 11061                           ;LCD.c: 160:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
 11062                           ;LCD.c: 162:  GPIO_PORT_SET_STATE((0x0008) , (character <<4) );
 11063  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
 11064  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
 11065  0EF9  0E20               	swapf	LCD_SEND_CHARACTER@character,w
 11066  0EFA  39F0               	andlw	240
 11067  0EFB  00F0               	movwf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE
 11068  0EFC  3008               	movlw	8
 11069  0EFD  276E  120A  158A   	fcall	i1_GPIO_PORT_SET_STATE
 11070  0F00  3009               	movlw	9
 11071                           
 11072                           ;LCD.c: 164:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
 11073  0F01  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 11074  0F02  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 11075  0F03  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 11076  0F04  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 11077  0F05  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 11078  0F08  3009               	movlw	9
 11079                           
 11080                           ;LCD.c: 165:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
 11081                           ;LCD.c: 167:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
 11082  0F09  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 11083  0F0A  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 11084  0F0B  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 11085  0F0C  2745               	fcall	i1_GPIO_PIN_SET_STATE
 11086                           
 11087                           ;LCD.c: 168:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
 11088  0F0D  0008               	return
 11089  0F0E                     __end_of_LCD_SEND_CHARACTER:	
 11090  0F0E                     __ptext95:	
 11091 ;; *************** function i1_LCD_SND_COMMAND *****************
 11092 ;; Defined at:
 11093 ;;		line 171 in file "LCD.c"
 11094 ;; Parameters:    Size  Location     Type
 11095 ;;  command         1    wreg     unsigned char 
 11096 ;; Auto vars:     Size  Location     Type
 11097 ;;  command         1    0[BANK0 ] unsigned char 
 11098 ;; Return value:  Size  Location     Type
 11099 ;;                  1    wreg      void 
 11100 ;; Registers used:
 11101 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11107 ;;      Params:         0       0       0       0       0
 11108 ;;      Locals:         0       1       0       0       0
 11109 ;;      Temps:          0       0       0       0       0
 11110 ;;      Totals:         0       1       0       0       0
 11111 ;;Total ram usage:        1 bytes
 11112 ;; Hardware stack levels used:    1
 11113 ;; Hardware stack levels required when called:    1
 11114 ;; This function calls:
 11115 ;;		i1_GPIO_PIN_SET_STATE
 11116 ;;		i1_GPIO_PORT_SET_STATE
 11117 ;; This function is called by:
 11118 ;;		_LCD_SET_CURSOR
 11119 ;;		_LCD_CLEAR
 11120 ;;		_START_BLINKING_AT
 11121 ;;		_STOP_BLINKING
 11122 ;; This function uses a non-reentrant model
 11123 ;;
 11124                           
 11125                           
 11126                           ;psect for function i1_LCD_SND_COMMAND
 11127  0F0E                     i1_LCD_SND_COMMAND:	
 11128                           
 11129                           ;incstack = 0
 11130 ;; hardware stack exceeded
 11131                           ; Regs used in i1_LCD_SND_COMMAND: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11132                           ;i1LCD_SND_COMMAND@command stored from wreg
 11133  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
 11134  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
 11135  0F10  00A0               	movwf	i1LCD_SND_COMMAND@command
 11136                           
 11137                           ;LCD.c: 171: static void LCD_SND_COMMAND ( tbyte command);LCD.c: 172: {;LCD.c: 174:  GPI
      +                          O_PORT_SET_STATE((0x0008) , (command &0xf0) );
 11138  0F11  00F0               	movwf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE
 11139  0F12  30F0               	movlw	240
 11140  0F13  05F0               	andwf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE,f
 11141  0F14  3008               	movlw	8
 11142  0F15  276E  120A  158A   	fcall	i1_GPIO_PORT_SET_STATE
 11143                           
 11144                           ;LCD.c: 176:  GPIO_PIN_SET_STATE((0x0009) , 2 , GPIO_PIN_OFF);
 11145  0F18  3002               	movlw	2
 11146  0F19  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 11147  0F1A  3009               	movlw	9
 11148  0F1B  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 11149  0F1C  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 11150  0F1F  3009               	movlw	9
 11151                           
 11152                           ;LCD.c: 178:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
 11153  0F20  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 11154  0F21  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 11155  0F22  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 11156  0F23  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 11157  0F24  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 11158  0F27  3009               	movlw	9
 11159                           
 11160                           ;LCD.c: 179:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
 11161                           ;LCD.c: 181:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
 11162  0F28  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 11163  0F29  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 11164  0F2A  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 11165  0F2B  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 11166                           
 11167                           ;LCD.c: 182:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
 11168                           ;LCD.c: 184:  GPIO_PORT_SET_STATE((0x0008) , (command <<4) );
 11169  0F2E  1283               	bcf	3,5	;RP0=0, select bank0
 11170  0F2F  1303               	bcf	3,6	;RP1=0, select bank0
 11171  0F30  0E20               	swapf	i1LCD_SND_COMMAND@command,w
 11172  0F31  39F0               	andlw	240
 11173  0F32  00F0               	movwf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE
 11174  0F33  3008               	movlw	8
 11175  0F34  276E  120A  158A   	fcall	i1_GPIO_PORT_SET_STATE
 11176  0F37  3009               	movlw	9
 11177                           
 11178                           ;LCD.c: 186:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
 11179  0F38  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 11180  0F39  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 11181  0F3A  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 11182  0F3B  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 11183  0F3C  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 11184  0F3F  3009               	movlw	9
 11185                           
 11186                           ;LCD.c: 187:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
 11187                           ;LCD.c: 189:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
 11188  0F40  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 11189  0F41  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 11190  0F42  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 11191  0F43  2745               	fcall	i1_GPIO_PIN_SET_STATE
 11192                           
 11193                           ;LCD.c: 190:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
 11194  0F44  0008               	return
 11195  0F45                     __end_ofi1_LCD_SND_COMMAND:	
 11196  0F45                     __ptext97:	
 11197 ;; *************** function i1_GPIO_PIN_SET_STATE *****************
 11198 ;; Defined at:
 11199 ;;		line 31 in file "GPIO.c"
 11200 ;; Parameters:    Size  Location     Type
 11201 ;;  GPIO_PORTx      1    wreg     unsigned char 
 11202 ;;  GPIO_PIN_NO     1    3[COMMON] enum E875
 11203 ;;  GPIO_PIN_STA    1    4[COMMON] enum E891
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;  GPIO_PORTx      1   13[COMMON] unsigned char 
 11206 ;;  GPIO_PIN_SET    1    0        enum E865
 11207 ;; Return value:  Size  Location     Type
 11208 ;;                  1    wreg      enum E865
 11209 ;; Registers used:
 11210 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11211 ;; Tracked objects:
 11212 ;;		On entry : 0/B00
 11213 ;;		On exit  : 0/0
 11214 ;;		Unchanged: 0/0
 11215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11216 ;;      Params:         2       0       0       0       0
 11217 ;;      Locals:         2       0       0       0       0
 11218 ;;      Temps:          7       0       0       0       0
 11219 ;;      Totals:        11       0       0       0       0
 11220 ;;Total ram usage:       11 bytes
 11221 ;; Hardware stack levels used:    1
 11222 ;; This function calls:
 11223 ;;		Nothing
 11224 ;; This function is called by:
 11225 ;;		_LED_SET_STATE
 11226 ;;		_LCD_SEND_CHARACTER
 11227 ;;		_KEYPAD_UPDATE
 11228 ;;		i1_LCD_SND_COMMAND
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           
 11233                           ;psect for function i1_GPIO_PIN_SET_STATE
 11234  0F45                     i1_GPIO_PIN_SET_STATE:	
 11235                           
 11236                           ;incstack = 0
 11237                           ; Regs used in i1_GPIO_PIN_SET_STATE: [wreg-fsr0h+status,2+status,0]
 11238                           ;i1GPIO_PIN_SET_STATE@GPIO_PORTx stored from wreg
 11239  0F45  00FD               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PORTx
 11240                           
 11241                           ;GPIO.c: 34:   ( (*((volatile unsigned char* )( GPIO_PORTx + (0x00) ))) = (((*((volatile
      +                           unsigned char* )( GPIO_PORTx + (0x00) ))) & (~(1<< GPIO_PIN_NO)) ) | (GPIO_PIN_STATE <<
      +                           GPIO_PIN_NO)) );
 11242  0F46  0874               	movf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,w
 11243  0F47  00F5               	movwf	??i1_GPIO_PIN_SET_STATE
 11244  0F48  0A73               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,w
 11245  0F49  2F4C               	goto	u351_24
 11246  0F4A                     u351_25:	
 11247  0F4A  1003               	clrc
 11248  0F4B  0DF5               	rlf	??i1_GPIO_PIN_SET_STATE,f
 11249  0F4C                     u351_24:	
 11250  0F4C  3EFF               	addlw	-1
 11251  0F4D  1D03               	skipz
 11252  0F4E  2F4A               	goto	u351_25
 11253  0F4F  087D               	movf	i1GPIO_PIN_SET_STATE@GPIO_PORTx,w
 11254  0F50  00F6               	movwf	??i1_GPIO_PIN_SET_STATE+1
 11255  0F51  01F7               	clrf	??i1_GPIO_PIN_SET_STATE+2
 11256  0F52  0084               	movwf	4
 11257  0F53  1783               	bsf	3,7
 11258  0F54  1C77               	btfss	??i1_GPIO_PIN_SET_STATE+2,0
 11259  0F55  1383               	bcf	3,7
 11260  0F56  3001               	movlw	1
 11261  0F57  00F8               	movwf	??i1_GPIO_PIN_SET_STATE+3
 11262  0F58  0A73               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,w
 11263  0F59  2F5C               	goto	u352_24
 11264  0F5A                     u352_25:	
 11265  0F5A  1003               	clrc
 11266  0F5B  0DF8               	rlf	??i1_GPIO_PIN_SET_STATE+3,f
 11267  0F5C                     u352_24:	
 11268  0F5C  3EFF               	addlw	-1
 11269  0F5D  1D03               	skipz
 11270  0F5E  2F5A               	goto	u352_25
 11271  0F5F  0878               	movf	??i1_GPIO_PIN_SET_STATE+3,w
 11272  0F60  3AFF               	xorlw	255
 11273  0F61  0500               	andwf	0,w
 11274  0F62  0475               	iorwf	??i1_GPIO_PIN_SET_STATE,w
 11275  0F63  00F9               	movwf	??i1_GPIO_PIN_SET_STATE+4
 11276  0F64  087D               	movf	i1GPIO_PIN_SET_STATE@GPIO_PORTx,w
 11277  0F65  00FA               	movwf	??i1_GPIO_PIN_SET_STATE+5
 11278  0F66  01FB               	clrf	??i1_GPIO_PIN_SET_STATE+6
 11279  0F67  0084               	movwf	4
 11280  0F68  1783               	bsf	3,7
 11281  0F69  1C7B               	btfss	??i1_GPIO_PIN_SET_STATE+6,0
 11282  0F6A  1383               	bcf	3,7
 11283  0F6B  0879               	movf	??i1_GPIO_PIN_SET_STATE+4,w
 11284  0F6C  0080               	movwf	0
 11285  0F6D  0008               	return
 11286  0F6E                     __end_ofi1_GPIO_PIN_SET_STATE:	
 11287  007E                     btemp	set	126	;btemp
 11288  007E                     wtemp0	set	126
 11289  0F6E                     __ptext96:	
 11290 ;; *************** function i1_GPIO_PORT_SET_STATE *****************
 11291 ;; Defined at:
 11292 ;;		line 38 in file "GPIO.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;  GPIO_PORTx      1    wreg     unsigned char 
 11295 ;;  GPIO_PORT_ST    1    0[COMMON] enum E891
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;  GPIO_PORTx      1    4[COMMON] unsigned char 
 11298 ;;  GPIO_PORT_SE    1    0        enum E865
 11299 ;; Return value:  Size  Location     Type
 11300 ;;                  1    wreg      enum E865
 11301 ;; Registers used:
 11302 ;;		wreg, fsr0l, fsr0h, status,2
 11303 ;; Tracked objects:
 11304 ;;		On entry : 300/0
 11305 ;;		On exit  : 300/0
 11306 ;;		Unchanged: 300/0
 11307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11308 ;;      Params:         1       0       0       0       0
 11309 ;;      Locals:         2       0       0       0       0
 11310 ;;      Temps:          2       0       0       0       0
 11311 ;;      Totals:         5       0       0       0       0
 11312 ;;Total ram usage:        5 bytes
 11313 ;; Hardware stack levels used:    1
 11314 ;; This function calls:
 11315 ;;		Nothing
 11316 ;; This function is called by:
 11317 ;;		_LCD_SEND_CHARACTER
 11318 ;;		i1_LCD_SND_COMMAND
 11319 ;; This function uses a non-reentrant model
 11320 ;;
 11321                           
 11322                           
 11323                           ;psect for function i1_GPIO_PORT_SET_STATE
 11324  0F6E                     i1_GPIO_PORT_SET_STATE:	
 11325                           
 11326                           ;incstack = 0
 11327 ;; hardware stack exceeded
 11328                           ; Regs used in i1_GPIO_PORT_SET_STATE: [wreg-fsr0h+status,2]
 11329                           ;i1GPIO_PORT_SET_STATE@GPIO_PORTx stored from wreg
 11330  0F6E  00F4               	movwf	i1GPIO_PORT_SET_STATE@GPIO_PORTx
 11331                           
 11332                           ;GPIO.c: 41:   (*((volatile unsigned char* )( GPIO_PORTx + (0x00) ))) = GPIO_PORT_STATE 
      +                          ;
 11333  0F6F  00F1               	movwf	??i1_GPIO_PORT_SET_STATE
 11334  0F70  01F2               	clrf	??i1_GPIO_PORT_SET_STATE+1
 11335  0F71  0084               	movwf	4
 11336  0F72  1783               	bsf	3,7
 11337  0F73  1C72               	btfss	??i1_GPIO_PORT_SET_STATE+1,0
 11338  0F74  1383               	bcf	3,7
 11339  0F75  0870               	movf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE,w
 11340  0F76  0080               	movwf	0
 11341  0F77  0008               	return
 11342  0F78                     __end_ofi1_GPIO_PORT_SET_STATE:	
 11343  0F78                     __ptext41:	
 11344 ;; *************** function _GPIO_PIN_GET_STATE *****************
 11345 ;; Defined at:
 11346 ;;		line 45 in file "GPIO.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;  GPIO_PORTx      1    wreg     unsigned char 
 11349 ;;  GPIO_PIN_NO     1    3[COMMON] enum E875
 11350 ;; Auto vars:     Size  Location     Type
 11351 ;;  GPIO_PORTx      1    8[COMMON] unsigned char 
 11352 ;;  ret             1    9[COMMON] enum E891
 11353 ;; Return value:  Size  Location     Type
 11354 ;;                  1    wreg      enum E891
 11355 ;; Registers used:
 11356 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11357 ;; Tracked objects:
 11358 ;;		On entry : 800/800
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11362 ;;      Params:         1       0       0       0       0
 11363 ;;      Locals:         2       0       0       0       0
 11364 ;;      Temps:          4       0       0       0       0
 11365 ;;      Totals:         7       0       0       0       0
 11366 ;;Total ram usage:        7 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; This function calls:
 11369 ;;		Nothing
 11370 ;; This function is called by:
 11371 ;;		_SWs_UPDATE
 11372 ;;		_KEYPAD_UPDATE
 11373 ;; This function uses a non-reentrant model
 11374 ;;
 11375                           
 11376                           
 11377                           ;psect for function _GPIO_PIN_GET_STATE
 11378  0F78                     _GPIO_PIN_GET_STATE:	
 11379                           
 11380                           ;incstack = 0
 11381                           ; Regs used in _GPIO_PIN_GET_STATE: [wreg-fsr0h+status,2+status,0]
 11382                           ;GPIO_PIN_GET_STATE@GPIO_PORTx stored from wreg
 11383  0F78  00F8               	movwf	GPIO_PIN_GET_STATE@GPIO_PORTx
 11384                           
 11385                           ;GPIO.c: 45:  tGPIO_STATE GPIO_PIN_GET_STATE ( tGPIO_PORT_NO GPIO_PORTx , tGPIO_PIN_NO G
      +                          PIO_PIN_NO );GPIO.c: 46:  {;GPIO.c: 47:   tGPIO_STATE ret = (((*((volatile unsigned char
      +                          * )( GPIO_PORTx + (0x00) ))) & (1 << GPIO_PIN_NO)) >> GPIO_PIN_NO );
 11386  0F79  00F4               	movwf	??_GPIO_PIN_GET_STATE
 11387  0F7A  01F5               	clrf	??_GPIO_PIN_GET_STATE+1
 11388  0F7B  0084               	movwf	4
 11389  0F7C  1783               	bsf	3,7
 11390  0F7D  1C75               	btfss	??_GPIO_PIN_GET_STATE+1,0
 11391  0F7E  1383               	bcf	3,7
 11392  0F7F  3001               	movlw	1
 11393  0F80  00F6               	movwf	??_GPIO_PIN_GET_STATE+2
 11394  0F81  0A73               	incf	GPIO_PIN_GET_STATE@GPIO_PIN_NO,w
 11395  0F82  2F85               	goto	u610_24
 11396  0F83                     u610_25:	
 11397  0F83  1003               	clrc
 11398  0F84  0DF6               	rlf	??_GPIO_PIN_GET_STATE+2,f
 11399  0F85                     u610_24:	
 11400  0F85  3EFF               	addlw	-1
 11401  0F86  1D03               	skipz
 11402  0F87  2F83               	goto	u610_25
 11403  0F88  0876               	movf	??_GPIO_PIN_GET_STATE+2,w
 11404  0F89  0500               	andwf	0,w
 11405  0F8A  00F7               	movwf	??_GPIO_PIN_GET_STATE+3
 11406  0F8B  0A73               	incf	GPIO_PIN_GET_STATE@GPIO_PIN_NO,w
 11407  0F8C  2F8F               	goto	u611_24
 11408  0F8D                     u611_25:	
 11409  0F8D  1003               	clrc
 11410  0F8E  0CF7               	rrf	??_GPIO_PIN_GET_STATE+3,f
 11411  0F8F                     u611_24:	
 11412  0F8F  3EFF               	addlw	-1
 11413  0F90  1D03               	skipz
 11414  0F91  2F8D               	goto	u611_25
 11415  0F92  0877               	movf	??_GPIO_PIN_GET_STATE+3,w
 11416  0F93  00F9               	movwf	GPIO_PIN_GET_STATE@ret
 11417                           
 11418                           ;GPIO.c: 48:   return ret ;
 11419  0F94  0008               	return
 11420  0F95                     __end_of_GPIO_PIN_GET_STATE:	
 11421  0F95                     __ptext86:	
 11422 ;; *************** function _itoa *****************
 11423 ;; Defined at:
 11424 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c"
 11425 ;; Parameters:    Size  Location     Type
 11426 ;;  buf             1    wreg     PTR unsigned char 
 11427 ;;		 -> LCD_SEND_A_NUMBER@string(6), 
 11428 ;;  val             2    4[BANK0 ] int 
 11429 ;;  base            2    6[BANK0 ] int 
 11430 ;; Auto vars:     Size  Location     Type
 11431 ;;  buf             1   12[COMMON] PTR unsigned char 
 11432 ;;		 -> LCD_SEND_A_NUMBER@string(6), 
 11433 ;;  cp              1    0        PTR unsigned char 
 11434 ;;		 -> LCD_SEND_A_NUMBER@string(6), 
 11435 ;; Return value:  Size  Location     Type
 11436 ;;                  1    wreg      PTR unsigned char 
 11437 ;; Registers used:
 11438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11439 ;; Tracked objects:
 11440 ;;		On entry : 300/0
 11441 ;;		On exit  : B00/0
 11442 ;;		Unchanged: 0/0
 11443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11444 ;;      Params:         0       4       0       0       0
 11445 ;;      Locals:         2       0       0       0       0
 11446 ;;      Temps:          0       0       0       0       0
 11447 ;;      Totals:         2       4       0       0       0
 11448 ;;Total ram usage:        6 bytes
 11449 ;; Hardware stack levels used:    1
 11450 ;; Hardware stack levels required when called:    2
 11451 ;; This function calls:
 11452 ;;		_utoa
 11453 ;; This function is called by:
 11454 ;;		_LCD_SEND_A_NUMBER
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           
 11459                           ;psect for function _itoa
 11460  0F95                     _itoa:	
 11461                           
 11462                           ;incstack = 0
 11463 ;; hardware stack exceeded
 11464                           ; Regs used in _itoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11465                           ;itoa@buf stored from wreg
 11466  0F95  00FC               	movwf	itoa@buf
 11467  0F96  1FA5               	btfss	itoa@val+1,7
 11468  0F97  2FA3               	goto	i1l4508
 11469  0F98  087C               	movf	itoa@buf,w
 11470  0F99  0084               	movwf	4
 11471  0F9A  302D               	movlw	45
 11472  0F9B  1383               	bcf	3,7	;select IRP bank0
 11473  0F9C  0080               	movwf	0
 11474  0F9D  0AFC               	incf	itoa@buf,f
 11475  0F9E  09A4               	comf	itoa@val,f
 11476  0F9F  09A5               	comf	itoa@val+1,f
 11477  0FA0  0AA4               	incf	itoa@val,f
 11478  0FA1  1903               	skipnz
 11479  0FA2  0AA5               	incf	itoa@val+1,f
 11480  0FA3                     i1l4508:	
 11481  0FA3  0825               	movf	itoa@val+1,w
 11482  0FA4  00F8               	movwf	utoa@val+1
 11483  0FA5  0824               	movf	itoa@val,w
 11484  0FA6  00F7               	movwf	utoa@val
 11485  0FA7  0827               	movf	itoa@base+1,w
 11486  0FA8  00FA               	movwf	utoa@base+1
 11487  0FA9  0826               	movf	itoa@base,w
 11488  0FAA  00F9               	movwf	utoa@base
 11489  0FAB  087C               	movf	itoa@buf,w
 11490  0FAC  160A  158A  2E64   	ljmp	_utoa
 11491  0FAF                     __end_of_itoa:	
 11492  0FAF                     __ptext58:	
 11493 ;; *************** function _KEYPAD_GET_PRESSED_KEY *****************
 11494 ;; Defined at:
 11495 ;;		line 82 in file "Keypad.c"
 11496 ;; Parameters:    Size  Location     Type
 11497 ;;		None
 11498 ;; Auto vars:     Size  Location     Type
 11499 ;;  ret             2    2[COMMON] struct .
 11500 ;; Return value:  Size  Location     Type
 11501 ;;                  2    0[COMMON] struct .
 11502 ;; Registers used:
 11503 ;;		wreg
 11504 ;; Tracked objects:
 11505 ;;		On entry : 0/300
 11506 ;;		On exit  : 300/300
 11507 ;;		Unchanged: 0/0
 11508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11509 ;;      Params:         2       0       0       0       0
 11510 ;;      Locals:         2       0       0       0       0
 11511 ;;      Temps:          0       0       0       0       0
 11512 ;;      Totals:         4       0       0       0       0
 11513 ;;Total ram usage:        4 bytes
 11514 ;; Hardware stack levels used:    1
 11515 ;; This function calls:
 11516 ;;		Nothing
 11517 ;; This function is called by:
 11518 ;;		_CONTROL_UPDATE
 11519 ;;		_SET_ROTOR_PWR_HANDLER_ON_WORK
 11520 ;; This function uses a non-reentrant model
 11521 ;;
 11522                           
 11523                           
 11524                           ;psect for function _KEYPAD_GET_PRESSED_KEY
 11525  0FAF                     _KEYPAD_GET_PRESSED_KEY:	
 11526                           
 11527                           ;Keypad.c: 84:  tKEYPAD_PRESSED ret;;Keypad.c: 85:  ret = LAST_PRESSED_KEY;
 11528                           
 11529                           ;incstack = 0
 11530 ;; hardware stack exceeded
 11531                           ; Regs used in _KEYPAD_GET_PRESSED_KEY: [wreg]
 11532  0FAF  1683               	bsf	3,5	;RP0=1, select bank3
 11533  0FB0  1703               	bsf	3,6	;RP1=1, select bank3
 11534  0FB1  0823               	movf	(_LAST_PRESSED_KEY+1)^(0+384),w
 11535  0FB2  00F3               	movwf	KEYPAD_GET_PRESSED_KEY@ret+1
 11536  0FB3  0822               	movf	_LAST_PRESSED_KEY^(0+384),w
 11537  0FB4  00F2               	movwf	KEYPAD_GET_PRESSED_KEY@ret
 11538                           
 11539                           ;Keypad.c: 86:  return ret;
 11540  0FB5  0873               	movf	KEYPAD_GET_PRESSED_KEY@ret+1,w
 11541  0FB6  00F1               	movwf	?_KEYPAD_GET_PRESSED_KEY+1
 11542  0FB7  0872               	movf	KEYPAD_GET_PRESSED_KEY@ret,w
 11543  0FB8  00F0               	movwf	?_KEYPAD_GET_PRESSED_KEY
 11544  0FB9  0008               	return
 11545  0FBA                     __end_of_KEYPAD_GET_PRESSED_KEY:	
 11546  0FBA                     __ptext74:	
 11547 ;; *************** function _FINISH_HANDLER *****************
 11548 ;; Defined at:
 11549 ;;		line 255 in file "CONTROL.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;		None
 11552 ;; Auto vars:     Size  Location     Type
 11553 ;;		None
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  1    wreg      void 
 11556 ;; Registers used:
 11557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11563 ;;      Params:         0       0       0       0       0
 11564 ;;      Locals:         0       0       0       0       0
 11565 ;;      Temps:          0       2       0       0       0
 11566 ;;      Totals:         0       2       0       0       0
 11567 ;;Total ram usage:        2 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:    4
 11570 ;; This function calls:
 11571 ;;		_DISP_STATMENT
 11572 ;;		_SW_GET_STATE
 11573 ;; This function is called by:
 11574 ;;		_CONTROL_UPDATE
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           
 11579                           ;psect for function _FINISH_HANDLER
 11580  0FBA                     _FINISH_HANDLER:	
 11581                           
 11582                           ;CONTROL.c: 257:    switch (HANDLERS_STATES[FINISH])
 11583                           
 11584                           ;incstack = 0
 11585 ;; hardware stack exceeded
 11586                           ; Regs used in _FINISH_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11587  0FBA  2FE5               	goto	i1l6192
 11588  0FBB                     i1l6176:	
 11589                           
 11590                           ;CONTROL.c: 261:             DISP_STATMENT("< FINISHED !!! >");
 11591  0FBB  3012               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
 11592  0FBC  2280               	fcall	_DISP_STATMENT
 11593                           
 11594                           ;CONTROL.c: 263:             HANDLERS_STATES[FINISH] = ON_WORK ;
 11595  0FBD  1683               	bsf	3,5	;RP0=1, select bank3
 11596  0FBE  1703               	bsf	3,6	;RP1=1, select bank3
 11597  0FBF  0194               	clrf	(_HANDLERS_STATES^(0+384)+4)
 11598  0FC0  0A94               	incf	(_HANDLERS_STATES^(0+384)+4),f
 11599                           
 11600                           ;CONTROL.c: 265:             SETTED_TIME.HOURS = 0;
 11601  0FC1  1283               	bcf	3,5	;RP0=0, select bank0
 11602  0FC2  1303               	bcf	3,6	;RP1=0, select bank0
 11603  0FC3  01ED               	clrf	_SETTED_TIME+2
 11604                           
 11605                           ;CONTROL.c: 266:             SETTED_TIME.MINUTES = 0;
 11606  0FC4  01EC               	clrf	_SETTED_TIME+1
 11607                           
 11608                           ;CONTROL.c: 267:             SETTED_TIME.SECONDS = 0;
 11609  0FC5  01EB               	clrf	_SETTED_TIME
 11610                           
 11611                           ;CONTROL.c: 269:         break;
 11612  0FC6  0008               	return
 11613  0FC7                     i1l6186:	
 11614                           
 11615                           ;CONTROL.c: 272:             if ((PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )|
 11616  0FC7  3000               	movlw	0
 11617  0FC8  2256  120A  158A   	fcall	_SW_GET_STATE
 11618  0FCB  3A01               	xorlw	1
 11619  0FCC  1D03               	btfss	3,2
 11620  0FCD  2FD0               	goto	u618_20
 11621  0FCE  3001               	movlw	1
 11622  0FCF  2FD1               	goto	u618_22
 11623  0FD0                     u618_20:	
 11624  0FD0  3000               	movlw	0
 11625  0FD1                     u618_22:	
 11626  0FD1  1283               	bcf	3,5	;RP0=0, select bank0
 11627  0FD2  1303               	bcf	3,6	;RP1=0, select bank0
 11628  0FD3  00A6               	movwf	??_FINISH_HANDLER
 11629  0FD4  1683               	bsf	3,5	;RP0=1, select bank3
 11630  0FD5  1703               	bsf	3,6	;RP1=1, select bank3
 11631  0FD6  0B1F               	decfsz	(_PRESSED_KEY^(0+384)+1),w
 11632  0FD7  2FDA               	goto	u619_20
 11633  0FD8  3001               	movlw	1
 11634  0FD9  2FDB               	goto	u619_22
 11635  0FDA                     u619_20:	
 11636  0FDA  3000               	movlw	0
 11637  0FDB                     u619_22:	
 11638  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
 11639  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
 11640  0FDD  0426               	iorwf	??_FINISH_HANDLER,w
 11641  0FDE  1903               	skipnz
 11642  0FDF  0008               	return
 11643                           
 11644                           ;CONTROL.c: 275:             {;CONTROL.c: 277:               CONTROL_CURRENT_STATE = SET
      +                          _TIME;
 11645  0FE0  01EE               	clrf	_CONTROL_CURRENT_STATE
 11646                           
 11647                           ;CONTROL.c: 278:               HANDLERS_STATES[FINISH] = FIRST_TIME ;
 11648  0FE1  1683               	bsf	3,5	;RP0=1, select bank3
 11649  0FE2  1703               	bsf	3,6	;RP1=1, select bank3
 11650  0FE3  0194               	clrf	(_HANDLERS_STATES^(0+384)+4)
 11651                           
 11652                           ;CONTROL.c: 279:             }
 11653  0FE4  0008               	return
 11654  0FE5                     i1l6192:	
 11655  0FE5  1683               	bsf	3,5	;RP0=1, select bank3
 11656  0FE6  1703               	bsf	3,6	;RP1=1, select bank3
 11657  0FE7  0814               	movf	(_HANDLERS_STATES^(0+384)+4),w
 11658  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
 11659  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
 11660  0FEA  00A6               	movwf	??_FINISH_HANDLER
 11661  0FEB  01A7               	clrf	??_FINISH_HANDLER+1
 11662                           
 11663                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11664                           ; Switch size 1, requested type "speed"
 11665                           ; Number of cases is 1, Range of values is 0 to 0
 11666                           ; switch strategies available:
 11667                           ; Name         Instructions Cycles
 11668                           ; simple_byte            4     3 (average)
 11669                           ; direct_byte           11     8 (fixed)
 11670                           ; jumptable            260     6 (fixed)
 11671                           ;	Chosen strategy is simple_byte
 11672  0FEC  0827               	movf	??_FINISH_HANDLER+1,w
 11673  0FED  3A00               	xorlw	0	; case 0
 11674  0FEE  1903               	skipnz
 11675  0FEF  2FF1               	goto	i1l7094
 11676  0FF0  2FF9               	goto	i1l764
 11677  0FF1                     i1l7094:	
 11678                           
 11679                           ; Switch size 1, requested type "speed"
 11680                           ; Number of cases is 2, Range of values is 0 to 1
 11681                           ; switch strategies available:
 11682                           ; Name         Instructions Cycles
 11683                           ; simple_byte            7     4 (average)
 11684                           ; direct_byte           14     8 (fixed)
 11685                           ; jumptable            260     6 (fixed)
 11686                           ;	Chosen strategy is simple_byte
 11687  0FF1  0826               	movf	??_FINISH_HANDLER,w
 11688  0FF2  3A00               	xorlw	0	; case 0
 11689  0FF3  1903               	skipnz
 11690  0FF4  2FBB               	goto	i1l6176
 11691  0FF5  3A01               	xorlw	1	; case 1
 11692  0FF6  1903               	skipnz
 11693  0FF7  2FC7               	goto	i1l6186
 11694  0FF8  2FF9               	goto	i1l764
 11695  0FF9                     i1l764:	
 11696  0FF9  0008               	return
 11697  0FFA                     __end_of_FINISH_HANDLER:	
 11698  0FFA                     __ptext36:	
 11699 ;; *************** function _TIMER0_UPDATE *****************
 11700 ;; Defined at:
 11701 ;;		line 40 in file "TIMR0.c"
 11702 ;; Parameters:    Size  Location     Type
 11703 ;;		None
 11704 ;; Auto vars:     Size  Location     Type
 11705 ;;		None
 11706 ;; Return value:  Size  Location     Type
 11707 ;;                  1    wreg      void 
 11708 ;; Registers used:
 11709 ;;		wreg
 11710 ;; Tracked objects:
 11711 ;;		On entry : 0/300
 11712 ;;		On exit  : 300/0
 11713 ;;		Unchanged: 0/0
 11714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11715 ;;      Params:         0       0       0       0       0
 11716 ;;      Locals:         0       0       0       0       0
 11717 ;;      Temps:          0       0       0       0       0
 11718 ;;      Totals:         0       0       0       0       0
 11719 ;;Total ram usage:        0 bytes
 11720 ;; Hardware stack levels used:    1
 11721 ;; This function calls:
 11722 ;;		Nothing
 11723 ;; This function is called by:
 11724 ;;		_SYS_UPDATE
 11725 ;; This function uses a non-reentrant model
 11726 ;;
 11727                           
 11728                           
 11729                           ;psect for function _TIMER0_UPDATE
 11730  0FFA                     _TIMER0_UPDATE:	
 11731                           
 11732                           ;TIMR0.c: 43:     (TMR0 = ((tWORD)((256) - ( (5)* ((double) (8 * 1000) / ( 4 * 256 ) ) )
      +                          )) );
 11733                           
 11734                           ;incstack = 0
 11735                           ; Regs used in _TIMER0_UPDATE: [wreg]
 11736  0FFA  30D8               	movlw	216
 11737  0FFB  1283               	bcf	3,5	;RP0=0, select bank0
 11738  0FFC  1303               	bcf	3,6	;RP1=0, select bank0
 11739  0FFD  0081               	movwf	1	;volatile
 11740                           
 11741                           ;TIMR0.c: 45:     ( TMR0IF = GPIO_PIN_OFF );
 11742  0FFE  110B               	bcf	11,2	;volatile
 11743  0FFF  0008               	return
 11744  1000                     __end_of_TIMER0_UPDATE:	
 11745                           
 11746                           	psect	intentry
 11747  0004                     __pintentry:	
 11748                           ;incstack = 0
 11749 ;; hardware stack exceeded
 11750                           ; Regs used in _SYS_UPDATE: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11751                           
 11752  0004                     interrupt_function:	
 11753  007E                     saved_w	set	btemp
 11754  0004  00FE               	movwf	btemp
 11755  0005  0E03               	swapf	3,w
 11756  0006  1283               	bcf	3,5	;RP0=0, select bank0
 11757  0007  1303               	bcf	3,6	;RP1=0, select bank0
 11758  0008  00E7               	movwf	??_SYS_UPDATE
 11759  0009  0804               	movf	4,w
 11760  000A  00E8               	movwf	??_SYS_UPDATE+1
 11761  000B  080A               	movf	10,w
 11762  000C  00E9               	movwf	??_SYS_UPDATE+2
 11763  000D  087F               	movf	btemp+1,w
 11764  000E  00EA               	movwf	??_SYS_UPDATE+3
 11765  000F  120A  158A  280C   	ljmp	_SYS_UPDATE
 11766                           
 11767                           	psect	text35
 11768  1E14                     __ptext35:	
 11769 ;; *************** function _TIME_UPDATE *****************
 11770 ;; Defined at:
 11771 ;;		line 54 in file "TIME.c"
 11772 ;; Parameters:    Size  Location     Type
 11773 ;;		None
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;		None
 11776 ;; Return value:  Size  Location     Type
 11777 ;;                  1    wreg      void 
 11778 ;; Registers used:
 11779 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11780 ;; Tracked objects:
 11781 ;;		On entry : 0/0
 11782 ;;		On exit  : 300/300
 11783 ;;		Unchanged: 0/0
 11784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11785 ;;      Params:         0       0       0       0       0
 11786 ;;      Locals:         0       0       0       0       0
 11787 ;;      Temps:          2       0       0       0       0
 11788 ;;      Totals:         2       0       0       0       0
 11789 ;;Total ram usage:        2 bytes
 11790 ;; Hardware stack levels used:    1
 11791 ;; This function calls:
 11792 ;;		Nothing
 11793 ;; This function is called by:
 11794 ;;		_SYS_UPDATE
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           
 11799                           ;psect for function _TIME_UPDATE
 11800  1E14                     _TIME_UPDATE:	
 11801                           
 11802                           ;TIME.c: 56:  if (COUNT_DECISION == YES )
 11803                           
 11804                           ;incstack = 0
 11805                           ; Regs used in _TIME_UPDATE: [wreg-fsr0h+status,2+status,0]
 11806  1E14  1683               	bsf	3,5	;RP0=1, select bank3
 11807  1E15  1703               	bsf	3,6	;RP1=1, select bank3
 11808  1E16  0B2B               	decfsz	_COUNT_DECISION^(0+384),w
 11809  1E17  0008               	return
 11810                           
 11811                           ;TIME.c: 57:  {;TIME.c: 58:   if (TICK_COUNTER >= (1000 / (5)) )
 11812  1E18  3000               	movlw	0
 11813  1E19  0221               	subwf	(_TICK_COUNTER+1)^(0+384),w
 11814  1E1A  30C8               	movlw	200
 11815  1E1B  1903               	skipnz
 11816  1E1C  0220               	subwf	_TICK_COUNTER^(0+384),w
 11817  1E1D  1C03               	skipc
 11818  1E1E  2E5F               	goto	i1l6656
 11819                           
 11820                           ;TIME.c: 59:   {;TIME.c: 60:    TICK_COUNTER = 0;
 11821  1E1F  01A0               	clrf	_TICK_COUNTER^(0+384)
 11822  1E20  01A1               	clrf	(_TICK_COUNTER+1)^(0+384)
 11823                           
 11824                           ;TIME.c: 61:    switch (TIME_TICKING_TYPE)
 11825  1E21  2E4F               	goto	i1l6654
 11826  1E22                     i1l6614:	
 11827                           
 11828                           ;TIME.c: 64:      if (CURRENT_TIME.SECONDS != 0 )
 11829  1E22  0815               	movf	_CURRENT_TIME^(0+384),w
 11830  1E23  1903               	btfsc	3,2
 11831  1E24  2E27               	goto	i1l6618
 11832                           
 11833                           ;TIME.c: 65:      {;TIME.c: 66:       CURRENT_TIME.SECONDS--;
 11834  1E25  0395               	decf	_CURRENT_TIME^(0+384),f
 11835                           
 11836                           ;TIME.c: 67:      }
 11837  1E26  0008               	return
 11838  1E27                     i1l6618:	
 11839                           
 11840                           ;TIME.c: 69:      {;TIME.c: 70:       CURRENT_TIME.SECONDS =59;
 11841  1E27  303B               	movlw	59
 11842  1E28  0095               	movwf	_CURRENT_TIME^(0+384)
 11843                           
 11844                           ;TIME.c: 71:       if (CURRENT_TIME.MINUTES != 0 )
 11845  1E29  0816               	movf	(_CURRENT_TIME^(0+384)+1),w
 11846  1E2A  1903               	btfsc	3,2
 11847  1E2B  2E2E               	goto	i1l6624
 11848                           
 11849                           ;TIME.c: 72:       {;TIME.c: 73:        CURRENT_TIME.MINUTES --;
 11850  1E2C  0396               	decf	(_CURRENT_TIME^(0+384)+1),f
 11851                           
 11852                           ;TIME.c: 74:       }
 11853  1E2D  0008               	return
 11854  1E2E                     i1l6624:	
 11855                           
 11856                           ;TIME.c: 76:       {;TIME.c: 77:        CURRENT_TIME.MINUTES=59;
 11857  1E2E  303B               	movlw	59
 11858  1E2F  0096               	movwf	(_CURRENT_TIME^(0+384)+1)
 11859                           
 11860                           ;TIME.c: 78:        if (CURRENT_TIME.HOURS != 0)
 11861  1E30  0817               	movf	(_CURRENT_TIME^(0+384)+2),w
 11862  1E31  1903               	btfsc	3,2
 11863  1E32  2E35               	goto	i1l6630
 11864                           
 11865                           ;TIME.c: 79:        {;TIME.c: 80:         CURRENT_TIME.HOURS--;
 11866  1E33  0397               	decf	(_CURRENT_TIME^(0+384)+2),f
 11867                           
 11868                           ;TIME.c: 81:        }
 11869  1E34  0008               	return
 11870  1E35                     i1l6630:	
 11871                           
 11872                           ;TIME.c: 83:        {;TIME.c: 84:         COUNT_DECISION = NO;
 11873  1E35  01AB               	clrf	_COUNT_DECISION^(0+384)
 11874  1E36  0008               	return
 11875  1E37                     i1l6632:	
 11876                           
 11877                           ;TIME.c: 90:     if (CURRENT_TIME.SECONDS != 59 )
 11878  1E37  303B               	movlw	59
 11879  1E38  0615               	xorwf	_CURRENT_TIME^(0+384),w
 11880  1E39  1903               	btfsc	3,2
 11881  1E3A  2E3D               	goto	i1l6636
 11882                           
 11883                           ;TIME.c: 91:     {;TIME.c: 92:      CURRENT_TIME.SECONDS++;
 11884  1E3B  0A95               	incf	_CURRENT_TIME^(0+384),f
 11885                           
 11886                           ;TIME.c: 93:     }
 11887  1E3C  0008               	return
 11888  1E3D                     i1l6636:	
 11889                           
 11890                           ;TIME.c: 95:     {;TIME.c: 96:      if (CURRENT_TIME.MINUTES != 59 )
 11891  1E3D  303B               	movlw	59
 11892  1E3E  0616               	xorwf	(_CURRENT_TIME^(0+384)+1),w
 11893  1E3F  1903               	btfsc	3,2
 11894  1E40  2E47               	goto	i1l6642
 11895                           
 11896                           ;TIME.c: 97:      {;TIME.c: 98:       CURRENT_TIME.MINUTES ++;
 11897  1E41  0A96               	incf	(_CURRENT_TIME^(0+384)+1),f
 11898  1E42  2E45               	goto	i1l6640
 11899  1E43                     i1l6644:	
 11900                           
 11901                           ;TIME.c: 104:       {;TIME.c: 105:        CURRENT_TIME.HOURS++;
 11902  1E43  0A97               	incf	(_CURRENT_TIME^(0+384)+2),f
 11903                           
 11904                           ;TIME.c: 106:        CURRENT_TIME.MINUTES=0;
 11905  1E44  0196               	clrf	(_CURRENT_TIME^(0+384)+1)
 11906  1E45                     i1l6640:	
 11907                           
 11908                           ;TIME.c: 99:       CURRENT_TIME.SECONDS =0;
 11909  1E45  0195               	clrf	_CURRENT_TIME^(0+384)
 11910                           
 11911                           ;TIME.c: 100:      }
 11912  1E46  0008               	return
 11913  1E47                     i1l6642:	
 11914                           
 11915                           ;TIME.c: 102:      {;TIME.c: 103:       if (CURRENT_TIME.HOURS != 23)
 11916  1E47  3017               	movlw	23
 11917  1E48  0617               	xorwf	(_CURRENT_TIME^(0+384)+2),w
 11918  1E49  1D03               	btfss	3,2
 11919  1E4A  2E43               	goto	i1l6644
 11920                           
 11921                           ;TIME.c: 110:       {;TIME.c: 111:        CURRENT_TIME.HOURS=0;
 11922  1E4B  0197               	clrf	(_CURRENT_TIME^(0+384)+2)
 11923                           
 11924                           ;TIME.c: 112:        CURRENT_TIME.MINUTES=0;
 11925  1E4C  0196               	clrf	(_CURRENT_TIME^(0+384)+1)
 11926                           
 11927                           ;TIME.c: 113:        CURRENT_TIME.SECONDS=0;
 11928  1E4D  0195               	clrf	_CURRENT_TIME^(0+384)
 11929  1E4E  0008               	return
 11930  1E4F                     i1l6654:	
 11931  1E4F  082A               	movf	_TIME_TICKING_TYPE^(0+384),w
 11932  1E50  00F0               	movwf	??_TIME_UPDATE
 11933  1E51  01F1               	clrf	??_TIME_UPDATE+1
 11934                           
 11935                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11936                           ; Switch size 1, requested type "speed"
 11937                           ; Number of cases is 1, Range of values is 0 to 0
 11938                           ; switch strategies available:
 11939                           ; Name         Instructions Cycles
 11940                           ; simple_byte            4     3 (average)
 11941                           ; direct_byte           11     8 (fixed)
 11942                           ; jumptable            260     6 (fixed)
 11943                           ;	Chosen strategy is simple_byte
 11944  1E52  0871               	movf	??_TIME_UPDATE+1,w
 11945  1E53  3A00               	xorlw	0	; case 0
 11946  1E54  1903               	skipnz
 11947  1E55  2E57               	goto	i1l7070
 11948  1E56  2E63               	goto	i1l612
 11949  1E57                     i1l7070:	
 11950                           
 11951                           ; Switch size 1, requested type "speed"
 11952                           ; Number of cases is 2, Range of values is 0 to 1
 11953                           ; switch strategies available:
 11954                           ; Name         Instructions Cycles
 11955                           ; simple_byte            7     4 (average)
 11956                           ; direct_byte           14     8 (fixed)
 11957                           ; jumptable            260     6 (fixed)
 11958                           ;	Chosen strategy is simple_byte
 11959  1E57  0870               	movf	??_TIME_UPDATE,w
 11960  1E58  3A00               	xorlw	0	; case 0
 11961  1E59  1903               	skipnz
 11962  1E5A  2E22               	goto	i1l6614
 11963  1E5B  3A01               	xorlw	1	; case 1
 11964  1E5C  1903               	skipnz
 11965  1E5D  2E37               	goto	i1l6632
 11966  1E5E  2E63               	goto	i1l612
 11967  1E5F                     i1l6656:	
 11968                           
 11969                           ;TIME.c: 124:   {;TIME.c: 125:    TICK_COUNTER++ ;
 11970  1E5F  0AA0               	incf	_TICK_COUNTER^(0+384),f
 11971  1E60  1903               	skipnz
 11972  1E61  0AA1               	incf	(_TICK_COUNTER+1)^(0+384),f
 11973  1E62  0008               	return
 11974  1E63                     i1l612:	
 11975                           ;TIME.c: 126:   }
 11976                           
 11977  1E63  0008               	return
 11978  1E64                     __end_of_TIME_UPDATE:	
 11979                           
 11980                           	psect	text38
 11981  1DA6                     __ptext38:	
 11982 ;; *************** function _MOTOR_UPDATE *****************
 11983 ;; Defined at:
 11984 ;;		line 40 in file "MOTOR.c"
 11985 ;; Parameters:    Size  Location     Type
 11986 ;;		None
 11987 ;; Auto vars:     Size  Location     Type
 11988 ;;		None
 11989 ;; Return value:  Size  Location     Type
 11990 ;;                  1    wreg      void 
 11991 ;; Registers used:
 11992 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 11993 ;; Tracked objects:
 11994 ;;		On entry : 0/300
 11995 ;;		On exit  : 0/0
 11996 ;;		Unchanged: 0/0
 11997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11998 ;;      Params:         0       0       0       0       0
 11999 ;;      Locals:         0       0       0       0       0
 12000 ;;      Temps:          0       0       0       0       0
 12001 ;;      Totals:         0       0       0       0       0
 12002 ;;Total ram usage:        0 bytes
 12003 ;; Hardware stack levels used:    1
 12004 ;; Hardware stack levels required when called:    3
 12005 ;; This function calls:
 12006 ;;		i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12007 ;; This function is called by:
 12008 ;;		_SYS_UPDATE
 12009 ;; This function uses a non-reentrant model
 12010 ;;
 12011                           
 12012                           
 12013                           ;psect for function _MOTOR_UPDATE
 12014  1DA6                     _MOTOR_UPDATE:	
 12015                           
 12016                           ;MOTOR.c: 42:     static tbyte motor_timer_counter = 0;;MOTOR.c: 43:  motor_timer_counte
      +                          r += (5);
 12017                           
 12018                           ;incstack = 0
 12019 ;; hardware stack exceeded
 12020                           ; Regs used in _MOTOR_UPDATE: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 12021  1DA6  3005               	movlw	5
 12022  1DA7  1683               	bsf	3,5	;RP0=1, select bank3
 12023  1DA8  1703               	bsf	3,6	;RP1=1, select bank3
 12024  1DA9  07AE               	addwf	MOTOR_UPDATE@motor_timer_counter^(0+384),f
 12025                           
 12026                           ;MOTOR.c: 45:     if (motor_timer_counter >= 5)
 12027  1DAA  022E               	subwf	MOTOR_UPDATE@motor_timer_counter^(0+384),w
 12028  1DAB  1C03               	skipc
 12029  1DAC  0008               	return
 12030                           
 12031                           ;MOTOR.c: 46:         {;MOTOR.c: 47:             motor_timer_counter = 0;
 12032  1DAD  01AE               	clrf	MOTOR_UPDATE@motor_timer_counter^(0+384)
 12033                           
 12034                           ;MOTOR.c: 49:         if ((current_angle > DESIRED_SPEED ) & ( DESIRED_SPEED != 0 ))
 12035  1DAE  082F               	movf	_current_angle^(0+384),w
 12036  1DAF  026C               	subwf	_DESIRED_SPEED^(0+384),w
 12037  1DB0  086C               	movf	_DESIRED_SPEED^(0+384),w
 12038  1DB1  1803               	skipnc
 12039  1DB2  2DB8               	goto	L5
 12040  1DB3  1903               	btfsc	3,2
 12041  1DB4  2DB7               	goto	i1l6562
 12042                           
 12043                           ;MOTOR.c: 50:         {;MOTOR.c: 51:             current_angle-- ;
 12044  1DB5  03AF               	decf	_current_angle^(0+384),f
 12045                           
 12046                           ;MOTOR.c: 52:         }
 12047  1DB6  2DC1               	goto	i1l6570
 12048  1DB7                     i1l6562:	
 12049  1DB7  086C               	movf	_DESIRED_SPEED^(0+384),w
 12050  1DB8                     L5:	
 12051  1DB8  022F               	subwf	_current_angle^(0+384),w
 12052  1DB9  1803               	skipnc
 12053  1DBA  2DBD               	goto	i1l6566
 12054                           
 12055                           ;MOTOR.c: 54:         {;MOTOR.c: 55:             current_angle++ ;
 12056  1DBB  0AAF               	incf	_current_angle^(0+384),f
 12057                           
 12058                           ;MOTOR.c: 56:         }
 12059  1DBC  2DC1               	goto	i1l6570
 12060  1DBD                     i1l6566:	
 12061  1DBD  086C               	movf	_DESIRED_SPEED^(0+384),w
 12062  1DBE  1D03               	btfss	3,2
 12063  1DBF  2DC1               	goto	i1l6570
 12064                           
 12065                           ;MOTOR.c: 58:         {;MOTOR.c: 59:             current_angle = 0 ;
 12066  1DC0  01AF               	clrf	_current_angle^(0+384)
 12067  1DC1                     i1l6570:	
 12068                           ;MOTOR.c: 60:         }
 12069                           
 12070                           
 12071                           ;MOTOR.c: 65:         CCP1_PWM_DUTY_CYCLE_LOAD(current_angle);
 12072  1DC1  082F               	movf	_current_angle^(0+384),w
 12073  1DC2  1283               	bcf	3,5	;RP0=0, select bank0
 12074  1DC3  1303               	bcf	3,6	;RP1=0, select bank0
 12075  1DC4  00DC               	movwf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE
 12076  1DC5  01DD               	clrf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1
 12077  1DC6  120A  118A  2033   	fcall	i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12078  1DC9  0008               	return
 12079  1DCA                     __end_of_MOTOR_UPDATE:	
 12080                           
 12081                           	psect	text39
 12082  0033                     __ptext39:	
 12083 ;; *************** function i1_CCP1_PWM_DUTY_CYCLE_LOAD *****************
 12084 ;; Defined at:
 12085 ;;		line 196 in file "CCP.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;  DUTY_CYCLE      2   60[BANK0 ] unsigned int 
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;  CCP1_PWM_DUT    2   69[BANK0 ] unsigned int 
 12090 ;;  CCP1_PWM_DUT    1    0        enum E865
 12091 ;; Return value:  Size  Location     Type
 12092 ;;                  1    wreg      enum E865
 12093 ;; Registers used:
 12094 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 12095 ;; Tracked objects:
 12096 ;;		On entry : 300/0
 12097 ;;		On exit  : 300/0
 12098 ;;		Unchanged: 0/0
 12099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12100 ;;      Params:         0       2       0       0       0
 12101 ;;      Locals:         0       7       0       0       0
 12102 ;;      Temps:          0       2       0       0       0
 12103 ;;      Totals:         0      11       0       0       0
 12104 ;;Total ram usage:       11 bytes
 12105 ;; Hardware stack levels used:    1
 12106 ;; Hardware stack levels required when called:    2
 12107 ;; This function calls:
 12108 ;;		i1___fldiv
 12109 ;;		i1___flmul
 12110 ;;		i1___fltol
 12111 ;;		i1___xxtofl
 12112 ;; This function is called by:
 12113 ;;		_MOTOR_UPDATE
 12114 ;; This function uses a non-reentrant model
 12115 ;;
 12116                           
 12117                           
 12118                           ;psect for function i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12119  0033                     i1_CCP1_PWM_DUTY_CYCLE_LOAD:	
 12120                           
 12121                           ;CCP.c: 199:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 201:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
 12122                           
 12123                           ;incstack = 0
 12124 ;; hardware stack exceeded
 12125                           ; Regs used in i1_CCP1_PWM_DUTY_CYCLE_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
 12126  0033  085C               	movf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE,w
 12127  0034  00F0               	movwf	i1___xxtofl@val
 12128  0035  085D               	movf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1,w
 12129  0036  00F1               	movwf	i1___xxtofl@val+1
 12130  0037  3000               	movlw	0
 12131  0038  01F2               	clrf	i1___xxtofl@val+2
 12132  0039  01F3               	clrf	i1___xxtofl@val+3
 12133  003A  2363               	fcall	i1___xxtofl
 12134  003B  0873               	movf	?i1___xxtofl+3,w
 12135  003C  00A7               	movwf	i1___fldiv@b+3
 12136  003D  0872               	movf	?i1___xxtofl+2,w
 12137  003E  00A6               	movwf	i1___fldiv@b+2
 12138  003F  0871               	movf	?i1___xxtofl+1,w
 12139  0040  00A5               	movwf	i1___fldiv@b+1
 12140  0041  0870               	movf	?i1___xxtofl,w
 12141  0042  00A4               	movwf	i1___fldiv@b
 12142  0043  3043               	movlw	67
 12143  0044  00A3               	movwf	i1___fldiv@a+3
 12144  0045  3034               	movlw	52
 12145  0046  00A2               	movwf	i1___fldiv@a+2
 12146  0047  01A1               	clrf	i1___fldiv@a+1
 12147  0048  01A0               	clrf	i1___fldiv@a
 12148  0049  120A  118A  25F0  120A  118A  	fcall	i1___fldiv
 12149  004E  0823               	movf	?i1___fldiv+3,w
 12150  004F  00C0               	movwf	i1___flmul@a+3
 12151  0050  0822               	movf	?i1___fldiv+2,w
 12152  0051  00BF               	movwf	i1___flmul@a+2
 12153  0052  0821               	movf	?i1___fldiv+1,w
 12154  0053  00BE               	movwf	i1___flmul@a+1
 12155  0054  0820               	movf	?i1___fldiv,w
 12156  0055  00BD               	movwf	i1___flmul@a
 12157  0056  3041               	movlw	65
 12158  0057  00BC               	movwf	i1___flmul@b+3
 12159  0058  3020               	movlw	32
 12160  0059  00BB               	movwf	i1___flmul@b+2
 12161  005A  01BA               	clrf	i1___flmul@b+1
 12162  005B  01B9               	clrf	i1___flmul@b
 12163  005C  2105  120A  118A   	fcall	i1___flmul
 12164  005F  083C               	movf	?i1___flmul+3,w
 12165  0060  00E4               	movwf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2352+3
 12166  0061  083B               	movf	?i1___flmul+2,w
 12167  0062  00E3               	movwf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2352+2
 12168  0063  083A               	movf	?i1___flmul+1,w
 12169  0064  00E2               	movwf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2352+1
 12170  0065  0839               	movf	?i1___flmul,w
 12171  0066  00E1               	movwf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2352
 12172                           
 12173                           ;CCP.c: 199:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 201:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
 12174  0067  0864               	movf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2352+3,w
 12175  0068  00C0               	movwf	i1___flmul@a+3
 12176  0069  0863               	movf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2352+2,w
 12177  006A  00BF               	movwf	i1___flmul@a+2
 12178  006B  0862               	movf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2352+1,w
 12179  006C  00BE               	movwf	i1___flmul@a+1
 12180  006D  0861               	movf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2352,w
 12181  006E  00BD               	movwf	i1___flmul@a
 12182  006F  3041               	movlw	65
 12183  0070  00BC               	movwf	i1___flmul@b+3
 12184  0071  30FA               	movlw	250
 12185  0072  00BB               	movwf	i1___flmul@b+2
 12186  0073  01BA               	clrf	i1___flmul@b+1
 12187  0074  01B9               	clrf	i1___flmul@b
 12188  0075  2105  120A  118A   	fcall	i1___flmul
 12189  0078  083C               	movf	?i1___flmul+3,w
 12190  0079  00D5               	movwf	i1___fltol@f1+3
 12191  007A  083B               	movf	?i1___flmul+2,w
 12192  007B  00D4               	movwf	i1___fltol@f1+2
 12193  007C  083A               	movf	?i1___flmul+1,w
 12194  007D  00D3               	movwf	i1___fltol@f1+1
 12195  007E  0839               	movf	?i1___flmul,w
 12196  007F  00D2               	movwf	i1___fltol@f1
 12197  0080  23D5               	fcall	i1___fltol
 12198  0081  0853               	movf	?i1___fltol+1,w
 12199  0082  00E6               	movwf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1
 12200  0083  0852               	movf	?i1___fltol,w
 12201  0084  00E5               	movwf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE
 12202                           
 12203                           ;CCP.c: 203:  (CCPR1L =((tbyte)(DUTY_VALUE >>2))); ( CCP1CON =((CCP1CON & 0b11001111)| (
      +                          (DUTY_VALUE&0x0003)<<4)));
 12204  0085  0866               	movf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1,w
 12205  0086  00DF               	movwf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD+1
 12206  0087  0865               	movf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE,w
 12207  0088  00DE               	movwf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12208  0089  1003               	clrc
 12209  008A  0CDF               	rrf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD+1,f
 12210  008B  0CDE               	rrf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD,f
 12211  008C  1003               	clrc
 12212  008D  0CDF               	rrf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD+1,f
 12213  008E  0CDE               	rrf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD,f
 12214  008F  085E               	movf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD,w
 12215  0090  0095               	movwf	21	;volatile
 12216  0091  0865               	movf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE,w
 12217  0092  3903               	andlw	3
 12218  0093  00DE               	movwf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12219  0094  0E5E               	swapf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD,w
 12220  0095  39F0               	andlw	240
 12221  0096  00DE               	movwf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12222  0097  0817               	movf	23,w	;volatile
 12223  0098  39CF               	andlw	207
 12224  0099  045E               	iorwf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD,w
 12225  009A  0097               	movwf	23	;volatile
 12226  009B  0008               	return
 12227  009C                     __end_ofi1_CCP1_PWM_DUTY_CYCLE_LOAD:	
 12228  009C                     __ptext43:	
 12229 ;; *************** function i1_CCP2_PWM_DUTY_CYCLE_LOAD *****************
 12230 ;; Defined at:
 12231 ;;		line 207 in file "CCP.c"
 12232 ;; Parameters:    Size  Location     Type
 12233 ;;  DUTY_CYCLE      2   60[BANK0 ] unsigned int 
 12234 ;; Auto vars:     Size  Location     Type
 12235 ;;  CCP2_PWM_DUT    2   69[BANK0 ] unsigned int 
 12236 ;;  CCP2_PWM_DUT    1    0        enum E865
 12237 ;; Return value:  Size  Location     Type
 12238 ;;                  1    wreg      enum E865
 12239 ;; Registers used:
 12240 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 12241 ;; Tracked objects:
 12242 ;;		On entry : 300/0
 12243 ;;		On exit  : 300/0
 12244 ;;		Unchanged: 0/0
 12245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12246 ;;      Params:         0       2       0       0       0
 12247 ;;      Locals:         0       7       0       0       0
 12248 ;;      Temps:          0       2       0       0       0
 12249 ;;      Totals:         0      11       0       0       0
 12250 ;;Total ram usage:       11 bytes
 12251 ;; Hardware stack levels used:    1
 12252 ;; Hardware stack levels required when called:    2
 12253 ;; This function calls:
 12254 ;;		i1___fldiv
 12255 ;;		i1___flmul
 12256 ;;		i1___fltol
 12257 ;;		i1___xxtofl
 12258 ;; This function is called by:
 12259 ;;		_HEATER_UPDATE
 12260 ;; This function uses a non-reentrant model
 12261 ;;
 12262                           
 12263                           
 12264                           ;psect for function i1_CCP2_PWM_DUTY_CYCLE_LOAD
 12265  009C                     i1_CCP2_PWM_DUTY_CYCLE_LOAD:	
 12266                           
 12267                           ;CCP.c: 210:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 211:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
 12268                           
 12269                           ;incstack = 0
 12270 ;; hardware stack exceeded
 12271                           ; Regs used in i1_CCP2_PWM_DUTY_CYCLE_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
 12272  009C  085C               	movf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE,w
 12273  009D  00F0               	movwf	i1___xxtofl@val
 12274  009E  085D               	movf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1,w
 12275  009F  00F1               	movwf	i1___xxtofl@val+1
 12276  00A0  3000               	movlw	0
 12277  00A1  01F2               	clrf	i1___xxtofl@val+2
 12278  00A2  01F3               	clrf	i1___xxtofl@val+3
 12279  00A3  2363               	fcall	i1___xxtofl
 12280  00A4  0873               	movf	?i1___xxtofl+3,w
 12281  00A5  00A7               	movwf	i1___fldiv@b+3
 12282  00A6  0872               	movf	?i1___xxtofl+2,w
 12283  00A7  00A6               	movwf	i1___fldiv@b+2
 12284  00A8  0871               	movf	?i1___xxtofl+1,w
 12285  00A9  00A5               	movwf	i1___fldiv@b+1
 12286  00AA  0870               	movf	?i1___xxtofl,w
 12287  00AB  00A4               	movwf	i1___fldiv@b
 12288  00AC  3043               	movlw	67
 12289  00AD  00A3               	movwf	i1___fldiv@a+3
 12290  00AE  3034               	movlw	52
 12291  00AF  00A2               	movwf	i1___fldiv@a+2
 12292  00B0  01A1               	clrf	i1___fldiv@a+1
 12293  00B1  01A0               	clrf	i1___fldiv@a
 12294  00B2  120A  118A  25F0  120A  118A  	fcall	i1___fldiv
 12295  00B7  0823               	movf	?i1___fldiv+3,w
 12296  00B8  00C0               	movwf	i1___flmul@a+3
 12297  00B9  0822               	movf	?i1___fldiv+2,w
 12298  00BA  00BF               	movwf	i1___flmul@a+2
 12299  00BB  0821               	movf	?i1___fldiv+1,w
 12300  00BC  00BE               	movwf	i1___flmul@a+1
 12301  00BD  0820               	movf	?i1___fldiv,w
 12302  00BE  00BD               	movwf	i1___flmul@a
 12303  00BF  3041               	movlw	65
 12304  00C0  00BC               	movwf	i1___flmul@b+3
 12305  00C1  3020               	movlw	32
 12306  00C2  00BB               	movwf	i1___flmul@b+2
 12307  00C3  01BA               	clrf	i1___flmul@b+1
 12308  00C4  01B9               	clrf	i1___flmul@b
 12309  00C5  2105  120A  118A   	fcall	i1___flmul
 12310  00C8  083C               	movf	?i1___flmul+3,w
 12311  00C9  00E4               	movwf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2353+3
 12312  00CA  083B               	movf	?i1___flmul+2,w
 12313  00CB  00E3               	movwf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2353+2
 12314  00CC  083A               	movf	?i1___flmul+1,w
 12315  00CD  00E2               	movwf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2353+1
 12316  00CE  0839               	movf	?i1___flmul,w
 12317  00CF  00E1               	movwf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2353
 12318                           
 12319                           ;CCP.c: 210:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 211:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
 12320  00D0  0864               	movf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2353+3,w
 12321  00D1  00C0               	movwf	i1___flmul@a+3
 12322  00D2  0863               	movf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2353+2,w
 12323  00D3  00BF               	movwf	i1___flmul@a+2
 12324  00D4  0862               	movf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2353+1,w
 12325  00D5  00BE               	movwf	i1___flmul@a+1
 12326  00D6  0861               	movf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2353,w
 12327  00D7  00BD               	movwf	i1___flmul@a
 12328  00D8  3041               	movlw	65
 12329  00D9  00BC               	movwf	i1___flmul@b+3
 12330  00DA  30FA               	movlw	250
 12331  00DB  00BB               	movwf	i1___flmul@b+2
 12332  00DC  01BA               	clrf	i1___flmul@b+1
 12333  00DD  01B9               	clrf	i1___flmul@b
 12334  00DE  2105  120A  118A   	fcall	i1___flmul
 12335  00E1  083C               	movf	?i1___flmul+3,w
 12336  00E2  00D5               	movwf	i1___fltol@f1+3
 12337  00E3  083B               	movf	?i1___flmul+2,w
 12338  00E4  00D4               	movwf	i1___fltol@f1+2
 12339  00E5  083A               	movf	?i1___flmul+1,w
 12340  00E6  00D3               	movwf	i1___fltol@f1+1
 12341  00E7  0839               	movf	?i1___flmul,w
 12342  00E8  00D2               	movwf	i1___fltol@f1
 12343  00E9  23D5               	fcall	i1___fltol
 12344  00EA  0853               	movf	?i1___fltol+1,w
 12345  00EB  00E6               	movwf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1
 12346  00EC  0852               	movf	?i1___fltol,w
 12347  00ED  00E5               	movwf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE
 12348                           
 12349                           ;CCP.c: 213:  (CCPR2L =((tbyte)(DUTY_VALUE >>2))); ( CCP2CON =((CCP2CON & 0b11001111)| (
      +                          (DUTY_VALUE&0x0003)<<4)));
 12350  00EE  0866               	movf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1,w
 12351  00EF  00DF               	movwf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD+1
 12352  00F0  0865               	movf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE,w
 12353  00F1  00DE               	movwf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD
 12354  00F2  1003               	clrc
 12355  00F3  0CDF               	rrf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD+1,f
 12356  00F4  0CDE               	rrf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD,f
 12357  00F5  1003               	clrc
 12358  00F6  0CDF               	rrf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD+1,f
 12359  00F7  0CDE               	rrf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD,f
 12360  00F8  085E               	movf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD,w
 12361  00F9  009B               	movwf	27	;volatile
 12362  00FA  0865               	movf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE,w
 12363  00FB  3903               	andlw	3
 12364  00FC  00DE               	movwf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD
 12365  00FD  0E5E               	swapf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD,w
 12366  00FE  39F0               	andlw	240
 12367  00FF  00DE               	movwf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD
 12368  0100  081D               	movf	29,w	;volatile
 12369  0101  39CF               	andlw	207
 12370  0102  045E               	iorwf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD,w
 12371  0103  009D               	movwf	29	;volatile
 12372  0104  0008               	return
 12373  0105                     __end_ofi1_CCP2_PWM_DUTY_CYCLE_LOAD:	
 12374  0105                     __ptext46:	
 12375 ;; *************** function i1___flmul *****************
 12376 ;; Defined at:
 12377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c"
 12378 ;; Parameters:    Size  Location     Type
 12379 ;;  b               4   25[BANK0 ] long 
 12380 ;;  a               4   29[BANK0 ] long 
 12381 ;; Auto vars:     Size  Location     Type
 12382 ;;  __flmul         4   44[BANK0 ] struct .
 12383 ;;  __flmul         4   39[BANK0 ] unsigned long 
 12384 ;;  __flmul         2   48[BANK0 ] struct .
 12385 ;;  __flmul         1   43[BANK0 ] unsigned char 
 12386 ;;  __flmul         1   38[BANK0 ] unsigned char 
 12387 ;;  __flmul         1   37[BANK0 ] unsigned char 
 12388 ;; Return value:  Size  Location     Type
 12389 ;;                  4   25[BANK0 ] unsigned char 
 12390 ;; Registers used:
 12391 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 12392 ;; Tracked objects:
 12393 ;;		On entry : 300/0
 12394 ;;		On exit  : 300/0
 12395 ;;		Unchanged: 0/0
 12396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12397 ;;      Params:         0       8       0       0       0
 12398 ;;      Locals:         0      13       0       0       0
 12399 ;;      Temps:          0       4       0       0       0
 12400 ;;      Totals:         0      25       0       0       0
 12401 ;;Total ram usage:       25 bytes
 12402 ;; Hardware stack levels used:    1
 12403 ;; Hardware stack levels required when called:    1
 12404 ;; This function calls:
 12405 ;;		i1__Umul8_16
 12406 ;; This function is called by:
 12407 ;;		i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12408 ;;		i1_CCP2_PWM_DUTY_CYCLE_LOAD
 12409 ;; This function uses a non-reentrant model
 12410 ;;
 12411                           
 12412                           
 12413                           ;psect for function i1___flmul
 12414  0105                     i1___flmul:	
 12415                           
 12416                           ;incstack = 0
 12417 ;; hardware stack exceeded
 12418                           ; Regs used in i1___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 12419  0105  083C               	movf	i1___flmul@b+3,w
 12420  0106  00C5               	movwf	i1___flmul@sign
 12421  0107  3080               	movlw	128
 12422  0108  05C5               	andwf	i1___flmul@sign,f
 12423  0109  1003               	clrc
 12424  010A  0D3C               	rlf	i1___flmul@b+3,w
 12425  010B  00CB               	movwf	i1___flmul@bexp
 12426  010C  1BBB               	btfsc	i1___flmul@b+2,7
 12427  010D  144B               	bsf	i1___flmul@bexp,0
 12428  010E  084B               	movf	i1___flmul@bexp,w
 12429  010F  1903               	btfsc	3,2
 12430  0110  2919               	goto	i1l1578
 12431  0111  0F4B               	incfsz	i1___flmul@bexp,w
 12432  0112  2917               	goto	i1l1579
 12433  0113  01B9               	clrf	i1___flmul@b
 12434  0114  01BA               	clrf	i1___flmul@b+1
 12435  0115  01BB               	clrf	i1___flmul@b+2
 12436  0116  01BC               	clrf	i1___flmul@b+3
 12437  0117                     i1l1579:	
 12438  0117  17BB               	bsf	i1___flmul@b+2,7
 12439  0118  291D               	goto	i1l5836
 12440  0119                     i1l1578:	
 12441  0119  01B9               	clrf	i1___flmul@b
 12442  011A  01BA               	clrf	i1___flmul@b+1
 12443  011B  01BB               	clrf	i1___flmul@b+2
 12444  011C  01BC               	clrf	i1___flmul@b+3
 12445  011D                     i1l5836:	
 12446  011D  0840               	movf	i1___flmul@a+3,w
 12447  011E  3980               	andlw	128
 12448  011F  06C5               	xorwf	i1___flmul@sign,f
 12449  0120  1003               	clrc
 12450  0121  0D40               	rlf	i1___flmul@a+3,w
 12451  0122  00C6               	movwf	i1___flmul@aexp
 12452  0123  1BBF               	btfsc	i1___flmul@a+2,7
 12453  0124  1446               	bsf	i1___flmul@aexp,0
 12454  0125  0846               	movf	i1___flmul@aexp,w
 12455  0126  1903               	btfsc	3,2
 12456  0127  2930               	goto	i1l1582
 12457  0128  0F46               	incfsz	i1___flmul@aexp,w
 12458  0129  292E               	goto	i1l1583
 12459  012A  01BD               	clrf	i1___flmul@a
 12460  012B  01BE               	clrf	i1___flmul@a+1
 12461  012C  01BF               	clrf	i1___flmul@a+2
 12462  012D  01C0               	clrf	i1___flmul@a+3
 12463  012E                     i1l1583:	
 12464  012E  17BF               	bsf	i1___flmul@a+2,7
 12465  012F  2934               	goto	i1l5848
 12466  0130                     i1l1582:	
 12467  0130  01BD               	clrf	i1___flmul@a
 12468  0131  01BE               	clrf	i1___flmul@a+1
 12469  0132  01BF               	clrf	i1___flmul@a+2
 12470  0133  01C0               	clrf	i1___flmul@a+3
 12471  0134                     i1l5848:	
 12472  0134  0846               	movf	i1___flmul@aexp,w
 12473  0135  1D03               	btfss	3,2
 12474  0136  084B               	movf	i1___flmul@bexp,w
 12475  0137  1D03               	btfss	3,2
 12476  0138  293E               	goto	i1l5852
 12477  0139  01B9               	clrf	?i1___flmul
 12478  013A  01BA               	clrf	?i1___flmul+1
 12479  013B  01BB               	clrf	?i1___flmul+2
 12480  013C  01BC               	clrf	?i1___flmul+3
 12481  013D  0008               	return
 12482  013E                     i1l5852:	
 12483  013E  0839               	movf	i1___flmul@b,w
 12484  013F  00F0               	movwf	i1__Umul8_16@multiplicand
 12485  0140  083F               	movf	i1___flmul@a+2,w
 12486  0141  2303  120A  118A   	fcall	i1__Umul8_16
 12487  0144  0871               	movf	?i1__Umul8_16+1,w
 12488  0145  00D1               	movwf	i1___flmul@temp+1
 12489  0146  0870               	movf	?i1__Umul8_16,w
 12490  0147  00D0               	movwf	i1___flmul@temp
 12491  0148  00C7               	movwf	i1___flmul@grs
 12492  0149  01C8               	clrf	i1___flmul@grs+1
 12493  014A  01C9               	clrf	i1___flmul@grs+2
 12494  014B  01CA               	clrf	i1___flmul@grs+3
 12495  014C  0851               	movf	i1___flmul@temp+1,w
 12496  014D  00CC               	movwf	i1___flmul@prod
 12497  014E  01CD               	clrf	i1___flmul@prod+1
 12498  014F  01CE               	clrf	i1___flmul@prod+2
 12499  0150  01CF               	clrf	i1___flmul@prod+3
 12500  0151  083A               	movf	i1___flmul@b+1,w
 12501  0152  00F0               	movwf	i1__Umul8_16@multiplicand
 12502  0153  083E               	movf	i1___flmul@a+1,w
 12503  0154  2303  120A  118A   	fcall	i1__Umul8_16
 12504  0157  0871               	movf	?i1__Umul8_16+1,w
 12505  0158  00D1               	movwf	i1___flmul@temp+1
 12506  0159  0870               	movf	?i1__Umul8_16,w
 12507  015A  00D0               	movwf	i1___flmul@temp
 12508  015B  07C7               	addwf	i1___flmul@grs,f
 12509  015C  3001               	movlw	1
 12510  015D  1803               	skipnc
 12511  015E  07C8               	addwf	i1___flmul@grs+1,f
 12512  015F  1803               	skipnc
 12513  0160  07C9               	addwf	i1___flmul@grs+2,f
 12514  0161  1803               	skipnc
 12515  0162  07CA               	addwf	i1___flmul@grs+3,f
 12516  0163  0851               	movf	i1___flmul@temp+1,w
 12517  0164  07CC               	addwf	i1___flmul@prod,f
 12518  0165  3001               	movlw	1
 12519  0166  1803               	skipnc
 12520  0167  07CD               	addwf	i1___flmul@prod+1,f
 12521  0168  1803               	skipnc
 12522  0169  07CE               	addwf	i1___flmul@prod+2,f
 12523  016A  1803               	skipnc
 12524  016B  07CF               	addwf	i1___flmul@prod+3,f
 12525  016C  083B               	movf	i1___flmul@b+2,w
 12526  016D  00F0               	movwf	i1__Umul8_16@multiplicand
 12527  016E  083D               	movf	i1___flmul@a,w
 12528  016F  2303  120A  118A   	fcall	i1__Umul8_16
 12529  0172  0871               	movf	?i1__Umul8_16+1,w
 12530  0173  00D1               	movwf	i1___flmul@temp+1
 12531  0174  0870               	movf	?i1__Umul8_16,w
 12532  0175  00D0               	movwf	i1___flmul@temp
 12533  0176  07C7               	addwf	i1___flmul@grs,f
 12534  0177  3001               	movlw	1
 12535  0178  1803               	skipnc
 12536  0179  07C8               	addwf	i1___flmul@grs+1,f
 12537  017A  1803               	skipnc
 12538  017B  07C9               	addwf	i1___flmul@grs+2,f
 12539  017C  1803               	skipnc
 12540  017D  07CA               	addwf	i1___flmul@grs+3,f
 12541  017E  0851               	movf	i1___flmul@temp+1,w
 12542  017F  07CC               	addwf	i1___flmul@prod,f
 12543  0180  3001               	movlw	1
 12544  0181  1803               	skipnc
 12545  0182  07CD               	addwf	i1___flmul@prod+1,f
 12546  0183  1803               	skipnc
 12547  0184  07CE               	addwf	i1___flmul@prod+2,f
 12548  0185  1803               	skipnc
 12549  0186  07CF               	addwf	i1___flmul@prod+3,f
 12550  0187  0849               	movf	i1___flmul@grs+2,w
 12551  0188  00CA               	movwf	i1___flmul@grs+3
 12552  0189  0848               	movf	i1___flmul@grs+1,w
 12553  018A  00C9               	movwf	i1___flmul@grs+2
 12554  018B  0847               	movf	i1___flmul@grs,w
 12555  018C  00C8               	movwf	i1___flmul@grs+1
 12556  018D  01C7               	clrf	i1___flmul@grs
 12557  018E  083A               	movf	i1___flmul@b+1,w
 12558  018F  00F0               	movwf	i1__Umul8_16@multiplicand
 12559  0190  083D               	movf	i1___flmul@a,w
 12560  0191  2303  120A  118A   	fcall	i1__Umul8_16
 12561  0194  0871               	movf	?i1__Umul8_16+1,w
 12562  0195  00D1               	movwf	i1___flmul@temp+1
 12563  0196  0870               	movf	?i1__Umul8_16,w
 12564  0197  00D0               	movwf	i1___flmul@temp
 12565  0198  00C1               	movwf	??i1___flmul
 12566  0199  0851               	movf	i1___flmul@temp+1,w
 12567  019A  00C2               	movwf	??i1___flmul+1
 12568  019B  01C3               	clrf	??i1___flmul+2
 12569  019C  01C4               	clrf	??i1___flmul+3
 12570  019D  0841               	movf	??i1___flmul,w
 12571  019E  07C7               	addwf	i1___flmul@grs,f
 12572  019F  0842               	movf	??i1___flmul+1,w
 12573  01A0  1103               	clrz
 12574  01A1  1803               	skipnc
 12575  01A2  3E01               	addlw	1
 12576  01A3  1D03               	btfss	3,2
 12577  01A4  07C8               	addwf	i1___flmul@grs+1,f
 12578  01A5  0843               	movf	??i1___flmul+2,w
 12579  01A6  1103               	clrz
 12580  01A7  1803               	skipnc
 12581  01A8  3E01               	addlw	1
 12582  01A9  1D03               	btfss	3,2
 12583  01AA  07C9               	addwf	i1___flmul@grs+2,f
 12584  01AB  0844               	movf	??i1___flmul+3,w
 12585  01AC  1103               	clrz
 12586  01AD  1803               	skipnc
 12587  01AE  3E01               	addlw	1
 12588  01AF  1D03               	btfss	3,2
 12589  01B0  07CA               	addwf	i1___flmul@grs+3,f
 12590  01B1  0839               	movf	i1___flmul@b,w
 12591  01B2  00F0               	movwf	i1__Umul8_16@multiplicand
 12592  01B3  083E               	movf	i1___flmul@a+1,w
 12593  01B4  2303  120A  118A   	fcall	i1__Umul8_16
 12594  01B7  0871               	movf	?i1__Umul8_16+1,w
 12595  01B8  00D1               	movwf	i1___flmul@temp+1
 12596  01B9  0870               	movf	?i1__Umul8_16,w
 12597  01BA  00D0               	movwf	i1___flmul@temp
 12598  01BB  00C1               	movwf	??i1___flmul
 12599  01BC  0851               	movf	i1___flmul@temp+1,w
 12600  01BD  00C2               	movwf	??i1___flmul+1
 12601  01BE  01C3               	clrf	??i1___flmul+2
 12602  01BF  01C4               	clrf	??i1___flmul+3
 12603  01C0  0841               	movf	??i1___flmul,w
 12604  01C1  07C7               	addwf	i1___flmul@grs,f
 12605  01C2  0842               	movf	??i1___flmul+1,w
 12606  01C3  1103               	clrz
 12607  01C4  1803               	skipnc
 12608  01C5  3E01               	addlw	1
 12609  01C6  1D03               	btfss	3,2
 12610  01C7  07C8               	addwf	i1___flmul@grs+1,f
 12611  01C8  0843               	movf	??i1___flmul+2,w
 12612  01C9  1103               	clrz
 12613  01CA  1803               	skipnc
 12614  01CB  3E01               	addlw	1
 12615  01CC  1D03               	btfss	3,2
 12616  01CD  07C9               	addwf	i1___flmul@grs+2,f
 12617  01CE  0844               	movf	??i1___flmul+3,w
 12618  01CF  1103               	clrz
 12619  01D0  1803               	skipnc
 12620  01D1  3E01               	addlw	1
 12621  01D2  1D03               	btfss	3,2
 12622  01D3  07CA               	addwf	i1___flmul@grs+3,f
 12623  01D4  0849               	movf	i1___flmul@grs+2,w
 12624  01D5  00CA               	movwf	i1___flmul@grs+3
 12625  01D6  0848               	movf	i1___flmul@grs+1,w
 12626  01D7  00C9               	movwf	i1___flmul@grs+2
 12627  01D8  0847               	movf	i1___flmul@grs,w
 12628  01D9  00C8               	movwf	i1___flmul@grs+1
 12629  01DA  01C7               	clrf	i1___flmul@grs
 12630  01DB  0839               	movf	i1___flmul@b,w
 12631  01DC  00F0               	movwf	i1__Umul8_16@multiplicand
 12632  01DD  083D               	movf	i1___flmul@a,w
 12633  01DE  2303  120A  118A   	fcall	i1__Umul8_16
 12634  01E1  0871               	movf	?i1__Umul8_16+1,w
 12635  01E2  00D1               	movwf	i1___flmul@temp+1
 12636  01E3  0870               	movf	?i1__Umul8_16,w
 12637  01E4  00D0               	movwf	i1___flmul@temp
 12638  01E5  00C1               	movwf	??i1___flmul
 12639  01E6  0851               	movf	i1___flmul@temp+1,w
 12640  01E7  00C2               	movwf	??i1___flmul+1
 12641  01E8  01C3               	clrf	??i1___flmul+2
 12642  01E9  01C4               	clrf	??i1___flmul+3
 12643  01EA  0841               	movf	??i1___flmul,w
 12644  01EB  07C7               	addwf	i1___flmul@grs,f
 12645  01EC  0842               	movf	??i1___flmul+1,w
 12646  01ED  1103               	clrz
 12647  01EE  1803               	skipnc
 12648  01EF  3E01               	addlw	1
 12649  01F0  1D03               	btfss	3,2
 12650  01F1  07C8               	addwf	i1___flmul@grs+1,f
 12651  01F2  0843               	movf	??i1___flmul+2,w
 12652  01F3  1103               	clrz
 12653  01F4  1803               	skipnc
 12654  01F5  3E01               	addlw	1
 12655  01F6  1D03               	btfss	3,2
 12656  01F7  07C9               	addwf	i1___flmul@grs+2,f
 12657  01F8  0844               	movf	??i1___flmul+3,w
 12658  01F9  1103               	clrz
 12659  01FA  1803               	skipnc
 12660  01FB  3E01               	addlw	1
 12661  01FC  1D03               	btfss	3,2
 12662  01FD  07CA               	addwf	i1___flmul@grs+3,f
 12663  01FE  083A               	movf	i1___flmul@b+1,w
 12664  01FF  00F0               	movwf	i1__Umul8_16@multiplicand
 12665  0200  083F               	movf	i1___flmul@a+2,w
 12666  0201  2303  120A  118A   	fcall	i1__Umul8_16
 12667  0204  0871               	movf	?i1__Umul8_16+1,w
 12668  0205  00D1               	movwf	i1___flmul@temp+1
 12669  0206  0870               	movf	?i1__Umul8_16,w
 12670  0207  00D0               	movwf	i1___flmul@temp
 12671  0208  00C1               	movwf	??i1___flmul
 12672  0209  0851               	movf	i1___flmul@temp+1,w
 12673  020A  00C2               	movwf	??i1___flmul+1
 12674  020B  01C3               	clrf	??i1___flmul+2
 12675  020C  01C4               	clrf	??i1___flmul+3
 12676  020D  0841               	movf	??i1___flmul,w
 12677  020E  07CC               	addwf	i1___flmul@prod,f
 12678  020F  0842               	movf	??i1___flmul+1,w
 12679  0210  1103               	clrz
 12680  0211  1803               	skipnc
 12681  0212  3E01               	addlw	1
 12682  0213  1D03               	btfss	3,2
 12683  0214  07CD               	addwf	i1___flmul@prod+1,f
 12684  0215  0843               	movf	??i1___flmul+2,w
 12685  0216  1103               	clrz
 12686  0217  1803               	skipnc
 12687  0218  3E01               	addlw	1
 12688  0219  1D03               	btfss	3,2
 12689  021A  07CE               	addwf	i1___flmul@prod+2,f
 12690  021B  0844               	movf	??i1___flmul+3,w
 12691  021C  1103               	clrz
 12692  021D  1803               	skipnc
 12693  021E  3E01               	addlw	1
 12694  021F  1D03               	btfss	3,2
 12695  0220  07CF               	addwf	i1___flmul@prod+3,f
 12696  0221  083B               	movf	i1___flmul@b+2,w
 12697  0222  00F0               	movwf	i1__Umul8_16@multiplicand
 12698  0223  083E               	movf	i1___flmul@a+1,w
 12699  0224  2303  120A  118A   	fcall	i1__Umul8_16
 12700  0227  0871               	movf	?i1__Umul8_16+1,w
 12701  0228  00D1               	movwf	i1___flmul@temp+1
 12702  0229  0870               	movf	?i1__Umul8_16,w
 12703  022A  00D0               	movwf	i1___flmul@temp
 12704  022B  00C1               	movwf	??i1___flmul
 12705  022C  0851               	movf	i1___flmul@temp+1,w
 12706  022D  00C2               	movwf	??i1___flmul+1
 12707  022E  01C3               	clrf	??i1___flmul+2
 12708  022F  01C4               	clrf	??i1___flmul+3
 12709  0230  0841               	movf	??i1___flmul,w
 12710  0231  07CC               	addwf	i1___flmul@prod,f
 12711  0232  0842               	movf	??i1___flmul+1,w
 12712  0233  1103               	clrz
 12713  0234  1803               	skipnc
 12714  0235  3E01               	addlw	1
 12715  0236  1D03               	btfss	3,2
 12716  0237  07CD               	addwf	i1___flmul@prod+1,f
 12717  0238  0843               	movf	??i1___flmul+2,w
 12718  0239  1103               	clrz
 12719  023A  1803               	skipnc
 12720  023B  3E01               	addlw	1
 12721  023C  1D03               	btfss	3,2
 12722  023D  07CE               	addwf	i1___flmul@prod+2,f
 12723  023E  0844               	movf	??i1___flmul+3,w
 12724  023F  1103               	clrz
 12725  0240  1803               	skipnc
 12726  0241  3E01               	addlw	1
 12727  0242  1D03               	btfss	3,2
 12728  0243  07CF               	addwf	i1___flmul@prod+3,f
 12729  0244  083B               	movf	i1___flmul@b+2,w
 12730  0245  00F0               	movwf	i1__Umul8_16@multiplicand
 12731  0246  083F               	movf	i1___flmul@a+2,w
 12732  0247  2303  120A  118A   	fcall	i1__Umul8_16
 12733  024A  0871               	movf	?i1__Umul8_16+1,w
 12734  024B  00D1               	movwf	i1___flmul@temp+1
 12735  024C  0870               	movf	?i1__Umul8_16,w
 12736  024D  00D0               	movwf	i1___flmul@temp
 12737  024E  00C1               	movwf	??i1___flmul
 12738  024F  0851               	movf	i1___flmul@temp+1,w
 12739  0250  00C2               	movwf	??i1___flmul+1
 12740  0251  01C3               	clrf	??i1___flmul+2
 12741  0252  01C4               	clrf	??i1___flmul+3
 12742  0253  0843               	movf	??i1___flmul+2,w
 12743  0254  00C4               	movwf	??i1___flmul+3
 12744  0255  0842               	movf	??i1___flmul+1,w
 12745  0256  00C3               	movwf	??i1___flmul+2
 12746  0257  0841               	movf	??i1___flmul,w
 12747  0258  00C2               	movwf	??i1___flmul+1
 12748  0259  01C1               	clrf	??i1___flmul
 12749  025A  0841               	movf	??i1___flmul,w
 12750  025B  07CC               	addwf	i1___flmul@prod,f
 12751  025C  0842               	movf	??i1___flmul+1,w
 12752  025D  1103               	clrz
 12753  025E  1803               	skipnc
 12754  025F  3E01               	addlw	1
 12755  0260  1D03               	btfss	3,2
 12756  0261  07CD               	addwf	i1___flmul@prod+1,f
 12757  0262  0843               	movf	??i1___flmul+2,w
 12758  0263  1103               	clrz
 12759  0264  1803               	skipnc
 12760  0265  3E01               	addlw	1
 12761  0266  1D03               	btfss	3,2
 12762  0267  07CE               	addwf	i1___flmul@prod+2,f
 12763  0268  0844               	movf	??i1___flmul+3,w
 12764  0269  1103               	clrz
 12765  026A  1803               	skipnc
 12766  026B  3E01               	addlw	1
 12767  026C  1D03               	btfss	3,2
 12768  026D  07CF               	addwf	i1___flmul@prod+3,f
 12769  026E  084A               	movf	i1___flmul@grs+3,w
 12770  026F  07CC               	addwf	i1___flmul@prod,f
 12771  0270  3001               	movlw	1
 12772  0271  1803               	skipnc
 12773  0272  07CD               	addwf	i1___flmul@prod+1,f
 12774  0273  1803               	skipnc
 12775  0274  07CE               	addwf	i1___flmul@prod+2,f
 12776  0275  1803               	skipnc
 12777  0276  07CF               	addwf	i1___flmul@prod+3,f
 12778  0277  0849               	movf	i1___flmul@grs+2,w
 12779  0278  00CA               	movwf	i1___flmul@grs+3
 12780  0279  0848               	movf	i1___flmul@grs+1,w
 12781  027A  00C9               	movwf	i1___flmul@grs+2
 12782  027B  0847               	movf	i1___flmul@grs,w
 12783  027C  00C8               	movwf	i1___flmul@grs+1
 12784  027D  01C7               	clrf	i1___flmul@grs
 12785  027E  084B               	movf	i1___flmul@bexp,w
 12786  027F  00D0               	movwf	i1___flmul@temp
 12787  0280  01D1               	clrf	i1___flmul@temp+1
 12788  0281  0846               	movf	i1___flmul@aexp,w
 12789  0282  07D0               	addwf	i1___flmul@temp,f
 12790  0283  1803               	skipnc
 12791  0284  0AD1               	incf	i1___flmul@temp+1,f
 12792  0285  3082               	movlw	-126
 12793  0286                     L7:	
 12794  0286  07D0               	addwf	i1___flmul@temp,f
 12795  0287  1C03               	skipc
 12796  0288  03D1               	decf	i1___flmul@temp+1,f
 12797  0289  1BCE               	btfsc	i1___flmul@prod+2,7
 12798  028A  2A99               	goto	i1l5900
 12799  028B  1003               	clrc
 12800  028C  0DCC               	rlf	i1___flmul@prod,f
 12801  028D  0DCD               	rlf	i1___flmul@prod+1,f
 12802  028E  0DCE               	rlf	i1___flmul@prod+2,f
 12803  028F  0DCF               	rlf	i1___flmul@prod+3,f
 12804  0290  1BCA               	btfsc	i1___flmul@grs+3,7
 12805  0291  144C               	bsf	i1___flmul@prod,0
 12806  0292  30FF               	movlw	-1
 12807  0293  1003               	clrc
 12808  0294  0DC7               	rlf	i1___flmul@grs,f
 12809  0295  0DC8               	rlf	i1___flmul@grs+1,f
 12810  0296  0DC9               	rlf	i1___flmul@grs+2,f
 12811  0297  0DCA               	rlf	i1___flmul@grs+3,f
 12812  0298  2A86               	goto	L7
 12813  0299                     i1l5900:	
 12814  0299  01C6               	clrf	i1___flmul@aexp
 12815  029A  1FCA               	btfss	i1___flmul@grs+3,7
 12816  029B  2AAE               	goto	i1l5910
 12817  029C  0847               	movf	i1___flmul@grs,w
 12818  029D  00C1               	movwf	??i1___flmul
 12819  029E  0848               	movf	i1___flmul@grs+1,w
 12820  029F  00C2               	movwf	??i1___flmul+1
 12821  02A0  0849               	movf	i1___flmul@grs+2,w
 12822  02A1  00C3               	movwf	??i1___flmul+2
 12823  02A2  307F               	movlw	127
 12824  02A3  054A               	andwf	i1___flmul@grs+3,w
 12825  02A4  00C4               	movwf	??i1___flmul+3
 12826  02A5  0443               	iorwf	??i1___flmul+2,w
 12827  02A6  0442               	iorwf	??i1___flmul+1,w
 12828  02A7  0441               	iorwf	??i1___flmul,w
 12829  02A8  1903               	skipnz
 12830  02A9  184C               	btfsc	i1___flmul@prod,0
 12831  02AA  2AAC               	goto	i1l5906
 12832  02AB  2AAE               	goto	i1l5910
 12833  02AC                     i1l5906:	
 12834  02AC  01C6               	clrf	i1___flmul@aexp
 12835  02AD  0AC6               	incf	i1___flmul@aexp,f
 12836  02AE                     i1l5910:	
 12837  02AE  0846               	movf	i1___flmul@aexp,w
 12838  02AF  1903               	btfsc	3,2
 12839  02B0  2AC2               	goto	i1l5920
 12840  02B1  0ACC               	incf	i1___flmul@prod,f
 12841  02B2  1903               	skipnz
 12842  02B3  0ACD               	incf	i1___flmul@prod+1,f
 12843  02B4  1903               	skipnz
 12844  02B5  0ACE               	incf	i1___flmul@prod+2,f
 12845  02B6  1903               	skipnz
 12846  02B7  0ACF               	incf	i1___flmul@prod+3,f
 12847  02B8  1C4F               	btfss	i1___flmul@prod+3,0
 12848  02B9  2AC2               	goto	i1l5920
 12849  02BA  0D4F               	rlf	i1___flmul@prod+3,w
 12850  02BB  0CCF               	rrf	i1___flmul@prod+3,f
 12851  02BC  0CCE               	rrf	i1___flmul@prod+2,f
 12852  02BD  0CCD               	rrf	i1___flmul@prod+1,f
 12853  02BE  0CCC               	rrf	i1___flmul@prod,f
 12854  02BF  0AD0               	incf	i1___flmul@temp,f
 12855  02C0  1903               	skipnz
 12856  02C1  0AD1               	incf	i1___flmul@temp+1,f
 12857  02C2                     i1l5920:	
 12858  02C2  0851               	movf	i1___flmul@temp+1,w
 12859  02C3  3A80               	xorlw	128
 12860  02C4  00FF               	movwf	127
 12861  02C5  3080               	movlw	128
 12862  02C6  027F               	subwf	127,w
 12863  02C7  1D03               	skipz
 12864  02C8  2ACB               	goto	u597_25
 12865  02C9  30FF               	movlw	255
 12866  02CA  0250               	subwf	i1___flmul@temp,w
 12867  02CB                     u597_25:	
 12868  02CB  1C03               	skipc
 12869  02CC  2AD6               	goto	i1l5924
 12870  02CD  307F               	movlw	127
 12871  02CE  1283               	bcf	3,5	;RP0=0, select bank0
 12872  02CF  1303               	bcf	3,6	;RP1=0, select bank0
 12873  02D0  00CF               	movwf	i1___flmul@prod+3
 12874  02D1  3080               	movlw	128
 12875  02D2  00CE               	movwf	i1___flmul@prod+2
 12876  02D3  01CD               	clrf	i1___flmul@prod+1
 12877  02D4  01CC               	clrf	i1___flmul@prod
 12878  02D5  2AF8               	goto	i1l1600
 12879  02D6                     i1l5924:	
 12880  02D6  1283               	bcf	3,5	;RP0=0, select bank0
 12881  02D7  1303               	bcf	3,6	;RP1=0, select bank0
 12882  02D8  0851               	movf	i1___flmul@temp+1,w
 12883  02D9  3A80               	xorlw	128
 12884  02DA  00FF               	movwf	127
 12885  02DB  3080               	movlw	128
 12886  02DC  027F               	subwf	127,w
 12887  02DD  1D03               	skipz
 12888  02DE  2AE1               	goto	u598_25
 12889  02DF  3001               	movlw	1
 12890  02E0  0250               	subwf	i1___flmul@temp,w
 12891  02E1                     u598_25:	
 12892  02E1  1803               	skipnc
 12893  02E2  2AEB               	goto	i1l5930
 12894  02E3  1283               	bcf	3,5	;RP0=0, select bank0
 12895  02E4  1303               	bcf	3,6	;RP1=0, select bank0
 12896  02E5  01CC               	clrf	i1___flmul@prod
 12897  02E6  01CD               	clrf	i1___flmul@prod+1
 12898  02E7  01CE               	clrf	i1___flmul@prod+2
 12899  02E8  01CF               	clrf	i1___flmul@prod+3
 12900  02E9  01C5               	clrf	i1___flmul@sign
 12901  02EA  2AF8               	goto	i1l1600
 12902  02EB                     i1l5930:	
 12903  02EB  1283               	bcf	3,5	;RP0=0, select bank0
 12904  02EC  1303               	bcf	3,6	;RP1=0, select bank0
 12905  02ED  0850               	movf	i1___flmul@temp,w
 12906  02EE  00CB               	movwf	i1___flmul@bexp
 12907  02EF  307F               	movlw	127
 12908  02F0  05CE               	andwf	i1___flmul@prod+2,f
 12909  02F1  3000               	movlw	0
 12910  02F2  01CF               	clrf	i1___flmul@prod+3
 12911  02F3  184B               	btfsc	i1___flmul@bexp,0
 12912  02F4  17CE               	bsf	i1___flmul@prod+2,7
 12913  02F5  1003               	clrc
 12914  02F6  0C4B               	rrf	i1___flmul@bexp,w
 12915  02F7  00CF               	movwf	i1___flmul@prod+3
 12916  02F8                     i1l1600:	
 12917  02F8  0845               	movf	i1___flmul@sign,w
 12918  02F9  04CF               	iorwf	i1___flmul@prod+3,f
 12919  02FA  084F               	movf	i1___flmul@prod+3,w
 12920  02FB  00BC               	movwf	?i1___flmul+3
 12921  02FC  084E               	movf	i1___flmul@prod+2,w
 12922  02FD  00BB               	movwf	?i1___flmul+2
 12923  02FE  084D               	movf	i1___flmul@prod+1,w
 12924  02FF  00BA               	movwf	?i1___flmul+1
 12925  0300  084C               	movf	i1___flmul@prod,w
 12926  0301  00B9               	movwf	?i1___flmul
 12927  0302  0008               	return
 12928  0303                     __end_ofi1___flmul:	
 12929  0303                     __ptext47:	
 12930 ;; *************** function i1__Umul8_16 *****************
 12931 ;; Defined at:
 12932 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c"
 12933 ;; Parameters:    Size  Location     Type
 12934 ;;  multiplier      1    wreg     unsigned char 
 12935 ;;  multiplicand    1    0[COMMON] unsigned char 
 12936 ;; Auto vars:     Size  Location     Type
 12937 ;;  multiplier      1    5[COMMON] unsigned char 
 12938 ;;  _Umul8_16       2    6[COMMON] unsigned int 
 12939 ;;  _Umul8_16       2    3[COMMON] unsigned int 
 12940 ;; Return value:  Size  Location     Type
 12941 ;;                  2    0[COMMON] unsigned int 
 12942 ;; Registers used:
 12943 ;;		wreg, status,2, status,0
 12944 ;; Tracked objects:
 12945 ;;		On entry : 300/0
 12946 ;;		On exit  : 300/0
 12947 ;;		Unchanged: 300/0
 12948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12949 ;;      Params:         3       0       0       0       0
 12950 ;;      Locals:         5       0       0       0       0
 12951 ;;      Temps:          0       0       0       0       0
 12952 ;;      Totals:         8       0       0       0       0
 12953 ;;Total ram usage:        8 bytes
 12954 ;; Hardware stack levels used:    1
 12955 ;; This function calls:
 12956 ;;		Nothing
 12957 ;; This function is called by:
 12958 ;;		i1___flmul
 12959 ;; This function uses a non-reentrant model
 12960 ;;
 12961                           
 12962                           
 12963                           ;psect for function i1__Umul8_16
 12964  0303                     i1__Umul8_16:	
 12965                           
 12966                           ;incstack = 0
 12967 ;; hardware stack exceeded
 12968                           ; Regs used in i1__Umul8_16: [wreg+status,2+status,0]
 12969                           ;i1__Umul8_16@multiplier stored from wreg
 12970  0303  00F5               	movwf	i1__Umul8_16@multiplier
 12971  0304  01F3               	clrf	i1__Umul8_16@product
 12972  0305  01F4               	clrf	i1__Umul8_16@product+1
 12973  0306  0870               	movf	i1__Umul8_16@multiplicand,w
 12974  0307  00F6               	movwf	i1__Umul8_16@word_mpld
 12975  0308  01F7               	clrf	i1__Umul8_16@word_mpld+1
 12976  0309  1C75               	btfss	i1__Umul8_16@multiplier,0
 12977  030A  2B11               	goto	i1l4886
 12978  030B  0876               	movf	i1__Umul8_16@word_mpld,w
 12979  030C  07F3               	addwf	i1__Umul8_16@product,f
 12980  030D  1803               	skipnc
 12981  030E  0AF4               	incf	i1__Umul8_16@product+1,f
 12982  030F  0877               	movf	i1__Umul8_16@word_mpld+1,w
 12983  0310  07F4               	addwf	i1__Umul8_16@product+1,f
 12984  0311                     i1l4886:	
 12985  0311  1003               	clrc
 12986  0312  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 12987  0313  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 12988  0314  1CF5               	btfss	i1__Umul8_16@multiplier,1
 12989  0315  2B1C               	goto	i1l4892
 12990  0316  0876               	movf	i1__Umul8_16@word_mpld,w
 12991  0317  07F3               	addwf	i1__Umul8_16@product,f
 12992  0318  1803               	skipnc
 12993  0319  0AF4               	incf	i1__Umul8_16@product+1,f
 12994  031A  0877               	movf	i1__Umul8_16@word_mpld+1,w
 12995  031B  07F4               	addwf	i1__Umul8_16@product+1,f
 12996  031C                     i1l4892:	
 12997  031C  1003               	clrc
 12998  031D  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 12999  031E  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 13000  031F  1D75               	btfss	i1__Umul8_16@multiplier,2
 13001  0320  2B27               	goto	i1l4898
 13002  0321  0876               	movf	i1__Umul8_16@word_mpld,w
 13003  0322  07F3               	addwf	i1__Umul8_16@product,f
 13004  0323  1803               	skipnc
 13005  0324  0AF4               	incf	i1__Umul8_16@product+1,f
 13006  0325  0877               	movf	i1__Umul8_16@word_mpld+1,w
 13007  0326  07F4               	addwf	i1__Umul8_16@product+1,f
 13008  0327                     i1l4898:	
 13009  0327  1003               	clrc
 13010  0328  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 13011  0329  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 13012  032A  1DF5               	btfss	i1__Umul8_16@multiplier,3
 13013  032B  2B32               	goto	i1l4904
 13014  032C  0876               	movf	i1__Umul8_16@word_mpld,w
 13015  032D  07F3               	addwf	i1__Umul8_16@product,f
 13016  032E  1803               	skipnc
 13017  032F  0AF4               	incf	i1__Umul8_16@product+1,f
 13018  0330  0877               	movf	i1__Umul8_16@word_mpld+1,w
 13019  0331  07F4               	addwf	i1__Umul8_16@product+1,f
 13020  0332                     i1l4904:	
 13021  0332  1003               	clrc
 13022  0333  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 13023  0334  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 13024  0335  1E75               	btfss	i1__Umul8_16@multiplier,4
 13025  0336  2B3D               	goto	i1l4910
 13026  0337  0876               	movf	i1__Umul8_16@word_mpld,w
 13027  0338  07F3               	addwf	i1__Umul8_16@product,f
 13028  0339  1803               	skipnc
 13029  033A  0AF4               	incf	i1__Umul8_16@product+1,f
 13030  033B  0877               	movf	i1__Umul8_16@word_mpld+1,w
 13031  033C  07F4               	addwf	i1__Umul8_16@product+1,f
 13032  033D                     i1l4910:	
 13033  033D  1003               	clrc
 13034  033E  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 13035  033F  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 13036  0340  1EF5               	btfss	i1__Umul8_16@multiplier,5
 13037  0341  2B48               	goto	i1l4916
 13038  0342  0876               	movf	i1__Umul8_16@word_mpld,w
 13039  0343  07F3               	addwf	i1__Umul8_16@product,f
 13040  0344  1803               	skipnc
 13041  0345  0AF4               	incf	i1__Umul8_16@product+1,f
 13042  0346  0877               	movf	i1__Umul8_16@word_mpld+1,w
 13043  0347  07F4               	addwf	i1__Umul8_16@product+1,f
 13044  0348                     i1l4916:	
 13045  0348  1003               	clrc
 13046  0349  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 13047  034A  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 13048  034B  1F75               	btfss	i1__Umul8_16@multiplier,6
 13049  034C  2B53               	goto	i1l4922
 13050  034D  0876               	movf	i1__Umul8_16@word_mpld,w
 13051  034E  07F3               	addwf	i1__Umul8_16@product,f
 13052  034F  1803               	skipnc
 13053  0350  0AF4               	incf	i1__Umul8_16@product+1,f
 13054  0351  0877               	movf	i1__Umul8_16@word_mpld+1,w
 13055  0352  07F4               	addwf	i1__Umul8_16@product+1,f
 13056  0353                     i1l4922:	
 13057  0353  1003               	clrc
 13058  0354  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 13059  0355  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 13060  0356  1FF5               	btfss	i1__Umul8_16@multiplier,7
 13061  0357  2B5E               	goto	i1l1665
 13062  0358  0876               	movf	i1__Umul8_16@word_mpld,w
 13063  0359  07F3               	addwf	i1__Umul8_16@product,f
 13064  035A  1803               	skipnc
 13065  035B  0AF4               	incf	i1__Umul8_16@product+1,f
 13066  035C  0877               	movf	i1__Umul8_16@word_mpld+1,w
 13067  035D  07F4               	addwf	i1__Umul8_16@product+1,f
 13068  035E                     i1l1665:	
 13069  035E  0874               	movf	i1__Umul8_16@product+1,w
 13070  035F  00F1               	movwf	?i1__Umul8_16+1
 13071  0360  0873               	movf	i1__Umul8_16@product,w
 13072  0361  00F0               	movwf	?i1__Umul8_16
 13073  0362  0008               	return
 13074  0363                     __end_ofi1__Umul8_16:	
 13075  0363                     __ptext44:	
 13076 ;; *************** function i1___xxtofl *****************
 13077 ;; Defined at:
 13078 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c"
 13079 ;; Parameters:    Size  Location     Type
 13080 ;;  sign            1    wreg     unsigned char 
 13081 ;;  val             4    0[COMMON] long 
 13082 ;; Auto vars:     Size  Location     Type
 13083 ;;  sign            1    8[COMMON] unsigned char 
 13084 ;;  __xxtofl        4   10[COMMON] unsigned long 
 13085 ;;  __xxtofl        1    9[COMMON] unsigned char 
 13086 ;; Return value:  Size  Location     Type
 13087 ;;                  4    0[COMMON] unsigned char 
 13088 ;; Registers used:
 13089 ;;		wreg, status,2, status,0
 13090 ;; Tracked objects:
 13091 ;;		On entry : 300/0
 13092 ;;		On exit  : 300/0
 13093 ;;		Unchanged: 300/0
 13094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13095 ;;      Params:         4       0       0       0       0
 13096 ;;      Locals:         6       0       0       0       0
 13097 ;;      Temps:          4       0       0       0       0
 13098 ;;      Totals:        14       0       0       0       0
 13099 ;;Total ram usage:       14 bytes
 13100 ;; Hardware stack levels used:    1
 13101 ;; This function calls:
 13102 ;;		Nothing
 13103 ;; This function is called by:
 13104 ;;		i1_CCP1_PWM_DUTY_CYCLE_LOAD
 13105 ;;		i1_CCP2_PWM_DUTY_CYCLE_LOAD
 13106 ;; This function uses a non-reentrant model
 13107 ;;
 13108                           
 13109                           
 13110                           ;psect for function i1___xxtofl
 13111  0363                     i1___xxtofl:	
 13112                           
 13113                           ;incstack = 0
 13114                           ; Regs used in i1___xxtofl: [wreg+status,2+status,0]
 13115                           ;i1___xxtofl@sign stored from wreg
 13116  0363  00F8               	movwf	i1___xxtofl@sign
 13117  0364  0878               	movf	i1___xxtofl@sign,w
 13118  0365  1D03               	btfss	3,2
 13119  0366  1FF3               	btfss	i1___xxtofl@val+3,7
 13120  0367  2B78               	goto	i1l5948
 13121  0368  0970               	comf	i1___xxtofl@val,w
 13122  0369  00FA               	movwf	i1___xxtofl@arg
 13123  036A  0971               	comf	i1___xxtofl@val+1,w
 13124  036B  00FB               	movwf	i1___xxtofl@arg+1
 13125  036C  0972               	comf	i1___xxtofl@val+2,w
 13126  036D  00FC               	movwf	i1___xxtofl@arg+2
 13127  036E  0973               	comf	i1___xxtofl@val+3,w
 13128  036F  00FD               	movwf	i1___xxtofl@arg+3
 13129  0370  0AFA               	incf	i1___xxtofl@arg,f
 13130  0371  1903               	skipnz
 13131  0372  0AFB               	incf	i1___xxtofl@arg+1,f
 13132  0373  1903               	skipnz
 13133  0374  0AFC               	incf	i1___xxtofl@arg+2,f
 13134  0375  1903               	skipnz
 13135  0376  0AFD               	incf	i1___xxtofl@arg+3,f
 13136  0377  2B80               	goto	i1l1626
 13137  0378                     i1l5948:	
 13138  0378  0873               	movf	i1___xxtofl@val+3,w
 13139  0379  00FD               	movwf	i1___xxtofl@arg+3
 13140  037A  0872               	movf	i1___xxtofl@val+2,w
 13141  037B  00FC               	movwf	i1___xxtofl@arg+2
 13142  037C  0871               	movf	i1___xxtofl@val+1,w
 13143  037D  00FB               	movwf	i1___xxtofl@arg+1
 13144  037E  0870               	movf	i1___xxtofl@val,w
 13145  037F  00FA               	movwf	i1___xxtofl@arg
 13146  0380                     i1l1626:	
 13147  0380  0873               	movf	i1___xxtofl@val+3,w
 13148  0381  0472               	iorwf	i1___xxtofl@val+2,w
 13149  0382  0471               	iorwf	i1___xxtofl@val+1,w
 13150  0383  0470               	iorwf	i1___xxtofl@val,w
 13151  0384  1D03               	skipz
 13152  0385  2B8B               	goto	i1l5952
 13153  0386  01F0               	clrf	?i1___xxtofl
 13154  0387  01F1               	clrf	?i1___xxtofl+1
 13155  0388  01F2               	clrf	?i1___xxtofl+2
 13156  0389  01F3               	clrf	?i1___xxtofl+3
 13157  038A  0008               	return
 13158  038B                     i1l5952:	
 13159  038B  3096               	movlw	150
 13160  038C  00F9               	movwf	i1___xxtofl@exp
 13161  038D                     i1l5956:	
 13162  038D  30FE               	movlw	254
 13163  038E  057D               	andwf	i1___xxtofl@arg+3,w
 13164  038F  1903               	btfsc	3,2
 13165  0390  2BA5               	goto	i1l5960
 13166  0391  0AF9               	incf	i1___xxtofl@exp,f
 13167  0392  1003               	clrc
 13168  0393  0CFD               	rrf	i1___xxtofl@arg+3,f
 13169  0394  0CFC               	rrf	i1___xxtofl@arg+2,f
 13170  0395  0CFB               	rrf	i1___xxtofl@arg+1,f
 13171  0396  0CFA               	rrf	i1___xxtofl@arg,f
 13172  0397  2B8D               	goto	i1l5956
 13173  0398                     i1l5958:	
 13174  0398  0AF9               	incf	i1___xxtofl@exp,f
 13175  0399  0AFA               	incf	i1___xxtofl@arg,f
 13176  039A  1903               	skipnz
 13177  039B  0AFB               	incf	i1___xxtofl@arg+1,f
 13178  039C  1903               	skipnz
 13179  039D  0AFC               	incf	i1___xxtofl@arg+2,f
 13180  039E  1903               	skipnz
 13181  039F  0AFD               	incf	i1___xxtofl@arg+3,f
 13182  03A0  1003               	clrc
 13183  03A1  0CFD               	rrf	i1___xxtofl@arg+3,f
 13184  03A2  0CFC               	rrf	i1___xxtofl@arg+2,f
 13185  03A3  0CFB               	rrf	i1___xxtofl@arg+1,f
 13186  03A4  0CFA               	rrf	i1___xxtofl@arg,f
 13187  03A5                     i1l5960:	
 13188  03A5  30FF               	movlw	255
 13189  03A6  057D               	andwf	i1___xxtofl@arg+3,w
 13190  03A7  1903               	btfsc	3,2
 13191  03A8  2BB4               	goto	i1l5964
 13192  03A9  2B98               	goto	i1l5958
 13193  03AA                     i1l5966:	
 13194  03AA  3002               	movlw	2
 13195  03AB  0279               	subwf	i1___xxtofl@exp,w
 13196  03AC  1C03               	btfss	3,0
 13197  03AD  2BB6               	goto	i1l1639
 13198  03AE  03F9               	decf	i1___xxtofl@exp,f
 13199  03AF  1003               	clrc
 13200  03B0  0DFA               	rlf	i1___xxtofl@arg,f
 13201  03B1  0DFB               	rlf	i1___xxtofl@arg+1,f
 13202  03B2  0DFC               	rlf	i1___xxtofl@arg+2,f
 13203  03B3  0DFD               	rlf	i1___xxtofl@arg+3,f
 13204  03B4                     i1l5964:	
 13205  03B4  1FFC               	btfss	i1___xxtofl@arg+2,7
 13206  03B5  2BAA               	goto	i1l5966
 13207  03B6                     i1l1639:	
 13208  03B6  1C79               	btfss	i1___xxtofl@exp,0
 13209  03B7  13FC               	bcf	i1___xxtofl@arg+2,7
 13210  03B8  1003               	clrc
 13211  03B9  0CF9               	rrf	i1___xxtofl@exp,f
 13212  03BA  0879               	movf	i1___xxtofl@exp,w
 13213  03BB  00F7               	movwf	??i1___xxtofl+3
 13214  03BC  01F6               	clrf	??i1___xxtofl+2
 13215  03BD  01F5               	clrf	??i1___xxtofl+1
 13216  03BE  01F4               	clrf	??i1___xxtofl
 13217  03BF  0874               	movf	??i1___xxtofl,w
 13218  03C0  04FA               	iorwf	i1___xxtofl@arg,f
 13219  03C1  0875               	movf	??i1___xxtofl+1,w
 13220  03C2  04FB               	iorwf	i1___xxtofl@arg+1,f
 13221  03C3  0876               	movf	??i1___xxtofl+2,w
 13222  03C4  04FC               	iorwf	i1___xxtofl@arg+2,f
 13223  03C5  0877               	movf	??i1___xxtofl+3,w
 13224  03C6  04FD               	iorwf	i1___xxtofl@arg+3,f
 13225  03C7  0878               	movf	i1___xxtofl@sign,w
 13226  03C8  1D03               	btfss	3,2
 13227  03C9  1FF3               	btfss	i1___xxtofl@val+3,7
 13228  03CA  2BCC               	goto	i1l5978
 13229  03CB  17FD               	bsf	i1___xxtofl@arg+3,7
 13230  03CC                     i1l5978:	
 13231  03CC  087D               	movf	i1___xxtofl@arg+3,w
 13232  03CD  00F3               	movwf	?i1___xxtofl+3
 13233  03CE  087C               	movf	i1___xxtofl@arg+2,w
 13234  03CF  00F2               	movwf	?i1___xxtofl+2
 13235  03D0  087B               	movf	i1___xxtofl@arg+1,w
 13236  03D1  00F1               	movwf	?i1___xxtofl+1
 13237  03D2  087A               	movf	i1___xxtofl@arg,w
 13238  03D3  00F0               	movwf	?i1___xxtofl
 13239  03D4  0008               	return
 13240  03D5                     __end_ofi1___xxtofl:	
 13241  03D5                     __ptext45:	
 13242 ;; *************** function i1___fltol *****************
 13243 ;; Defined at:
 13244 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c"
 13245 ;; Parameters:    Size  Location     Type
 13246 ;;  f1              4   50[BANK0 ] unsigned char 
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;  __fltol         1   59[BANK0 ] unsigned char 
 13249 ;;  __fltol         1   58[BANK0 ] unsigned char 
 13250 ;; Return value:  Size  Location     Type
 13251 ;;                  4   50[BANK0 ] long 
 13252 ;; Registers used:
 13253 ;;		wreg, status,2, status,0
 13254 ;; Tracked objects:
 13255 ;;		On entry : 300/0
 13256 ;;		On exit  : 300/0
 13257 ;;		Unchanged: 0/0
 13258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13259 ;;      Params:         0       4       0       0       0
 13260 ;;      Locals:         0       2       0       0       0
 13261 ;;      Temps:          0       4       0       0       0
 13262 ;;      Totals:         0      10       0       0       0
 13263 ;;Total ram usage:       10 bytes
 13264 ;; Hardware stack levels used:    1
 13265 ;; This function calls:
 13266 ;;		Nothing
 13267 ;; This function is called by:
 13268 ;;		i1_CCP1_PWM_DUTY_CYCLE_LOAD
 13269 ;;		i1_CCP2_PWM_DUTY_CYCLE_LOAD
 13270 ;; This function uses a non-reentrant model
 13271 ;;
 13272                           
 13273                           
 13274                           ;psect for function i1___fltol
 13275  03D5                     i1___fltol:	
 13276                           
 13277                           ;incstack = 0
 13278                           ; Regs used in i1___fltol: [wreg+status,2+status,0]
 13279  03D5  1003               	clrc
 13280  03D6  0D54               	rlf	i1___fltol@f1+2,w
 13281  03D7  0D55               	rlf	i1___fltol@f1+3,w
 13282  03D8  00DB               	movwf	i1___fltol@exp1
 13283  03D9  085B               	movf	i1___fltol@exp1,w
 13284  03DA  1D03               	btfss	3,2
 13285  03DB  2BE1               	goto	i1l5650
 13286  03DC                     i1l5648:	
 13287  03DC  01D2               	clrf	?i1___fltol
 13288  03DD  01D3               	clrf	?i1___fltol+1
 13289  03DE  01D4               	clrf	?i1___fltol+2
 13290  03DF  01D5               	clrf	?i1___fltol+3
 13291  03E0  0008               	return
 13292  03E1                     i1l5650:	
 13293  03E1  0852               	movf	i1___fltol@f1,w
 13294  03E2  00D6               	movwf	??i1___fltol
 13295  03E3  0853               	movf	i1___fltol@f1+1,w
 13296  03E4  00D7               	movwf	??i1___fltol+1
 13297  03E5  0854               	movf	i1___fltol@f1+2,w
 13298  03E6  00D8               	movwf	??i1___fltol+2
 13299  03E7  0855               	movf	i1___fltol@f1+3,w
 13300  03E8  00D9               	movwf	??i1___fltol+3
 13301  03E9  301F               	movlw	31
 13302  03EA                     u546_25:	
 13303  03EA  1003               	clrc
 13304  03EB  0CD9               	rrf	??i1___fltol+3,f
 13305  03EC  0CD8               	rrf	??i1___fltol+2,f
 13306  03ED  0CD7               	rrf	??i1___fltol+1,f
 13307  03EE  0CD6               	rrf	??i1___fltol,f
 13308  03EF  3EFF               	addlw	-1
 13309  03F0  1D03               	skipz
 13310  03F1  2BEA               	goto	u546_25
 13311  03F2  0856               	movf	??i1___fltol,w
 13312  03F3  00DA               	movwf	i1___fltol@sign1
 13313  03F4  3096               	movlw	150
 13314  03F5  17D4               	bsf	i1___fltol@f1+2,7
 13315  03F6  01D5               	clrf	i1___fltol@f1+3
 13316  03F7  02DB               	subwf	i1___fltol@exp1,f
 13317  03F8  1FDB               	btfss	i1___fltol@exp1,7
 13318  03F9  2C07               	goto	i1l5668
 13319  03FA  085B               	movf	i1___fltol@exp1,w
 13320  03FB  3A80               	xorlw	128
 13321  03FC  3E97               	addlw	151
 13322  03FD  1C03               	btfss	3,0
 13323  03FE  2BDC               	goto	i1l5648
 13324  03FF                     i1l5664:	
 13325  03FF  1003               	clrc
 13326  0400  0CD5               	rrf	i1___fltol@f1+3,f
 13327  0401  0CD4               	rrf	i1___fltol@f1+2,f
 13328  0402  0CD3               	rrf	i1___fltol@f1+1,f
 13329  0403  0CD2               	rrf	i1___fltol@f1,f
 13330  0404  0FDB               	incfsz	i1___fltol@exp1,f
 13331  0405  2BFF               	goto	i1l5664
 13332  0406  2C15               	goto	i1l5676
 13333  0407                     i1l5668:	
 13334  0407  3020               	movlw	32
 13335  0408  025B               	subwf	i1___fltol@exp1,w
 13336  0409  1803               	btfsc	3,0
 13337  040A  2BDC               	goto	i1l5648
 13338  040B                     i1l5674:	
 13339  040B  085B               	movf	i1___fltol@exp1,w
 13340  040C  1903               	btfsc	3,2
 13341  040D  2C15               	goto	i1l5676
 13342  040E  1003               	clrc
 13343  040F  0DD2               	rlf	i1___fltol@f1,f
 13344  0410  0DD3               	rlf	i1___fltol@f1+1,f
 13345  0411  0DD4               	rlf	i1___fltol@f1+2,f
 13346  0412  0DD5               	rlf	i1___fltol@f1+3,f
 13347  0413  03DB               	decf	i1___fltol@exp1,f
 13348  0414  2C0B               	goto	i1l5674
 13349  0415                     i1l5676:	
 13350  0415  085A               	movf	i1___fltol@sign1,w
 13351  0416  1903               	btfsc	3,2
 13352  0417  0008               	return
 13353  0418  09D2               	comf	i1___fltol@f1,f
 13354  0419  09D3               	comf	i1___fltol@f1+1,f
 13355  041A  09D4               	comf	i1___fltol@f1+2,f
 13356  041B  09D5               	comf	i1___fltol@f1+3,f
 13357  041C  0AD2               	incf	i1___fltol@f1,f
 13358  041D  1903               	skipnz
 13359  041E  0AD3               	incf	i1___fltol@f1+1,f
 13360  041F  1903               	skipnz
 13361  0420  0AD4               	incf	i1___fltol@f1+2,f
 13362  0421  1903               	skipnz
 13363  0422  0AD5               	incf	i1___fltol@f1+3,f
 13364  0423  0008               	return
 13365  0424                     __end_ofi1___fltol:	
 13366                           
 13367                           	psect	text42
 13368  1D84                     __ptext42:	
 13369 ;; *************** function _HEATER_UPDATE *****************
 13370 ;; Defined at:
 13371 ;;		line 40 in file "HEATER.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;		None
 13374 ;; Auto vars:     Size  Location     Type
 13375 ;;		None
 13376 ;; Return value:  Size  Location     Type
 13377 ;;                  1    wreg      void 
 13378 ;; Registers used:
 13379 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 13380 ;; Tracked objects:
 13381 ;;		On entry : 300/300
 13382 ;;		On exit  : 0/0
 13383 ;;		Unchanged: 0/0
 13384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13385 ;;      Params:         0       0       0       0       0
 13386 ;;      Locals:         0       0       0       0       0
 13387 ;;      Temps:          0       0       0       0       0
 13388 ;;      Totals:         0       0       0       0       0
 13389 ;;Total ram usage:        0 bytes
 13390 ;; Hardware stack levels used:    1
 13391 ;; Hardware stack levels required when called:    3
 13392 ;; This function calls:
 13393 ;;		i1_CCP2_PWM_DUTY_CYCLE_LOAD
 13394 ;; This function is called by:
 13395 ;;		_SYS_UPDATE
 13396 ;; This function uses a non-reentrant model
 13397 ;;
 13398                           
 13399                           
 13400                           ;psect for function _HEATER_UPDATE
 13401  1D84                     _HEATER_UPDATE:	
 13402                           
 13403                           ;HEATER.c: 42:     static tbyte heater_timer_counter = 0;;HEATER.c: 43:  heater_timer_co
      +                          unter += (5);
 13404                           
 13405                           ;incstack = 0
 13406 ;; hardware stack exceeded
 13407                           ; Regs used in _HEATER_UPDATE: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 13408  1D84  3005               	movlw	5
 13409  1D85  07AC               	addwf	HEATER_UPDATE@heater_timer_counter^(0+384),f
 13410                           
 13411                           ;HEATER.c: 45:     if (heater_timer_counter >= 5)
 13412  1D86  022C               	subwf	HEATER_UPDATE@heater_timer_counter^(0+384),w
 13413  1D87  1C03               	skipc
 13414  1D88  0008               	return
 13415                           
 13416                           ;HEATER.c: 46:     {;HEATER.c: 47:         heater_timer_counter = 0;
 13417  1D89  01AC               	clrf	HEATER_UPDATE@heater_timer_counter^(0+384)
 13418                           
 13419                           ;HEATER.c: 48:         if ((current_angle > DESIRED_HEAT ) & ( DESIRED_HEAT != 0 ))
 13420  1D8A  082D               	movf	HEATER@current_angle^(0+384),w
 13421  1D8B  026B               	subwf	_DESIRED_HEAT^(0+384),w
 13422  1D8C  086B               	movf	_DESIRED_HEAT^(0+384),w
 13423  1D8D  1803               	skipnc
 13424  1D8E  2D94               	goto	L6
 13425  1D8F  1903               	btfsc	3,2
 13426  1D90  2D93               	goto	i1l6594
 13427                           
 13428                           ;HEATER.c: 49:         {;HEATER.c: 50:             current_angle-- ;
 13429  1D91  03AD               	decf	HEATER@current_angle^(0+384),f
 13430                           
 13431                           ;HEATER.c: 51:         }
 13432  1D92  2D9D               	goto	i1l6602
 13433  1D93                     i1l6594:	
 13434  1D93  086B               	movf	_DESIRED_HEAT^(0+384),w
 13435  1D94                     L6:	
 13436  1D94  022D               	subwf	HEATER@current_angle^(0+384),w
 13437  1D95  1803               	skipnc
 13438  1D96  2D99               	goto	i1l6598
 13439                           
 13440                           ;HEATER.c: 53:         {;HEATER.c: 54:             current_angle++ ;
 13441  1D97  0AAD               	incf	HEATER@current_angle^(0+384),f
 13442                           
 13443                           ;HEATER.c: 55:         }
 13444  1D98  2D9D               	goto	i1l6602
 13445  1D99                     i1l6598:	
 13446  1D99  086B               	movf	_DESIRED_HEAT^(0+384),w
 13447  1D9A  1D03               	btfss	3,2
 13448  1D9B  2D9D               	goto	i1l6602
 13449                           
 13450                           ;HEATER.c: 57:         {;HEATER.c: 58:             current_angle = 0 ;
 13451  1D9C  01AD               	clrf	HEATER@current_angle^(0+384)
 13452  1D9D                     i1l6602:	
 13453                           ;HEATER.c: 59:         }
 13454                           
 13455                           
 13456                           ;HEATER.c: 64:         CCP2_PWM_DUTY_CYCLE_LOAD(current_angle);
 13457  1D9D  082D               	movf	HEATER@current_angle^(0+384),w
 13458  1D9E  1283               	bcf	3,5	;RP0=0, select bank0
 13459  1D9F  1303               	bcf	3,6	;RP1=0, select bank0
 13460  1DA0  00DC               	movwf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE
 13461  1DA1  01DD               	clrf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1
 13462  1DA2  120A  118A  209C   	fcall	i1_CCP2_PWM_DUTY_CYCLE_LOAD
 13463  1DA5  0008               	return
 13464  1DA6                     __end_of_HEATER_UPDATE:	
 13465                           
 13466                           	psect	text48
 13467  05F0                     __ptext48:	
 13468 ;; *************** function i1___fldiv *****************
 13469 ;; Defined at:
 13470 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c"
 13471 ;; Parameters:    Size  Location     Type
 13472 ;;  a               4    0[BANK0 ] unsigned int 
 13473 ;;  b               4    4[BANK0 ] unsigned int 
 13474 ;; Auto vars:     Size  Location     Type
 13475 ;;  __fldiv         4   19[BANK0 ] unsigned long 
 13476 ;;  __fldiv         4   12[BANK0 ] unsigned long 
 13477 ;;  __fldiv         2   17[BANK0 ] int 
 13478 ;;  __fldiv         1   24[BANK0 ] unsigned char 
 13479 ;;  __fldiv         1   23[BANK0 ] unsigned char 
 13480 ;;  __fldiv         1   16[BANK0 ] unsigned char 
 13481 ;; Return value:  Size  Location     Type
 13482 ;;                  4    0[BANK0 ] unsigned char 
 13483 ;; Registers used:
 13484 ;;		wreg, status,2, status,0, btemp+1
 13485 ;; Tracked objects:
 13486 ;;		On entry : 300/0
 13487 ;;		On exit  : 300/0
 13488 ;;		Unchanged: 0/0
 13489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13490 ;;      Params:         0       8       0       0       0
 13491 ;;      Locals:         0      13       0       0       0
 13492 ;;      Temps:          0       4       0       0       0
 13493 ;;      Totals:         0      25       0       0       0
 13494 ;;Total ram usage:       25 bytes
 13495 ;; Hardware stack levels used:    1
 13496 ;; This function calls:
 13497 ;;		Nothing
 13498 ;; This function is called by:
 13499 ;;		i1_CCP1_PWM_DUTY_CYCLE_LOAD
 13500 ;;		i1_CCP2_PWM_DUTY_CYCLE_LOAD
 13501 ;; This function uses a non-reentrant model
 13502 ;;
 13503                           
 13504                           
 13505                           ;psect for function i1___fldiv
 13506  05F0                     i1___fldiv:	
 13507                           
 13508                           ;incstack = 0
 13509                           ; Regs used in i1___fldiv: [wreg+status,2+status,0+btemp+1]
 13510  05F0  0827               	movf	i1___fldiv@b+3,w
 13511  05F1  00B0               	movwf	i1___fldiv@sign
 13512  05F2  3080               	movlw	128
 13513  05F3  05B0               	andwf	i1___fldiv@sign,f
 13514  05F4  1003               	clrc
 13515  05F5  0D27               	rlf	i1___fldiv@b+3,w
 13516  05F6  00B7               	movwf	i1___fldiv@bexp
 13517  05F7  1BA6               	btfsc	i1___fldiv@b+2,7
 13518  05F8  1437               	bsf	i1___fldiv@bexp,0
 13519  05F9  0837               	movf	i1___fldiv@bexp,w
 13520  05FA  1903               	btfsc	3,2
 13521  05FB  2E04               	goto	i1l1542
 13522  05FC  0F37               	incfsz	i1___fldiv@bexp,w
 13523  05FD  2E02               	goto	i1l1543
 13524  05FE  01A4               	clrf	i1___fldiv@b
 13525  05FF  01A5               	clrf	i1___fldiv@b+1
 13526  0600  01A6               	clrf	i1___fldiv@b+2
 13527  0601  01A7               	clrf	i1___fldiv@b+3
 13528  0602                     i1l1543:	
 13529  0602  17A6               	bsf	i1___fldiv@b+2,7
 13530  0603  2E07               	goto	L8
 13531  0604                     i1l1542:	
 13532  0604  01A4               	clrf	i1___fldiv@b
 13533  0605  01A5               	clrf	i1___fldiv@b+1
 13534  0606  01A6               	clrf	i1___fldiv@b+2
 13535  0607                     L8:	
 13536  0607  01A7               	clrf	i1___fldiv@b+3
 13537  0608  0823               	movf	i1___fldiv@a+3,w
 13538  0609  3980               	andlw	128
 13539  060A  06B0               	xorwf	i1___fldiv@sign,f
 13540  060B  1003               	clrc
 13541  060C  0D23               	rlf	i1___fldiv@a+3,w
 13542  060D  00B8               	movwf	i1___fldiv@aexp
 13543  060E  1BA2               	btfsc	i1___fldiv@a+2,7
 13544  060F  1438               	bsf	i1___fldiv@aexp,0
 13545  0610  0838               	movf	i1___fldiv@aexp,w
 13546  0611  1903               	btfsc	3,2
 13547  0612  2E1B               	goto	i1l1546
 13548  0613  0F38               	incfsz	i1___fldiv@aexp,w
 13549  0614  2E19               	goto	i1l1547
 13550  0615  01A0               	clrf	i1___fldiv@a
 13551  0616  01A1               	clrf	i1___fldiv@a+1
 13552  0617  01A2               	clrf	i1___fldiv@a+2
 13553  0618  01A3               	clrf	i1___fldiv@a+3
 13554  0619                     i1l1547:	
 13555  0619  17A2               	bsf	i1___fldiv@a+2,7
 13556  061A  2E1E               	goto	L9
 13557  061B                     i1l1546:	
 13558  061B  01A0               	clrf	i1___fldiv@a
 13559  061C  01A1               	clrf	i1___fldiv@a+1
 13560  061D  01A2               	clrf	i1___fldiv@a+2
 13561  061E                     L9:	
 13562  061E  01A3               	clrf	i1___fldiv@a+3
 13563  061F  0823               	movf	i1___fldiv@a+3,w
 13564  0620  0422               	iorwf	i1___fldiv@a+2,w
 13565  0621  0421               	iorwf	i1___fldiv@a+1,w
 13566  0622  0420               	iorwf	i1___fldiv@a,w
 13567  0623  1D03               	skipz
 13568  0624  2E38               	goto	i1l5724
 13569  0625  3080               	movlw	128
 13570  0626  01A4               	clrf	i1___fldiv@b
 13571  0627  01A5               	clrf	i1___fldiv@b+1
 13572  0628  01A6               	clrf	i1___fldiv@b+2
 13573  0629  01A7               	clrf	i1___fldiv@b+3
 13574  062A  04A6               	iorwf	i1___fldiv@b+2,f
 13575  062B  307F               	movlw	127
 13576  062C  04A7               	iorwf	i1___fldiv@b+3,f
 13577  062D                     L10:	
 13578  062D  0830               	movf	i1___fldiv@sign,w
 13579  062E  04A7               	iorwf	i1___fldiv@b+3,f
 13580  062F  0827               	movf	i1___fldiv@b+3,w
 13581  0630  00A3               	movwf	?i1___fldiv+3
 13582  0631  0826               	movf	i1___fldiv@b+2,w
 13583  0632  00A2               	movwf	?i1___fldiv+2
 13584  0633  0825               	movf	i1___fldiv@b+1,w
 13585  0634  00A1               	movwf	?i1___fldiv+1
 13586  0635  0824               	movf	i1___fldiv@b,w
 13587  0636  00A0               	movwf	?i1___fldiv
 13588  0637  0008               	return
 13589  0638                     i1l5724:	
 13590  0638  0837               	movf	i1___fldiv@bexp,w
 13591  0639  1D03               	btfss	3,2
 13592  063A  2E40               	goto	i1l5732
 13593  063B  01A0               	clrf	?i1___fldiv
 13594  063C  01A1               	clrf	?i1___fldiv+1
 13595  063D  01A2               	clrf	?i1___fldiv+2
 13596  063E  01A3               	clrf	?i1___fldiv+3
 13597  063F  0008               	return
 13598  0640                     i1l5732:	
 13599  0640  0837               	movf	i1___fldiv@bexp,w
 13600  0641  00B1               	movwf	i1___fldiv@new_exp
 13601  0642  01B2               	clrf	i1___fldiv@new_exp+1
 13602  0643  0838               	movf	i1___fldiv@aexp,w
 13603  0644  02B1               	subwf	i1___fldiv@new_exp,f
 13604  0645  1C03               	skipc
 13605  0646  03B2               	decf	i1___fldiv@new_exp+1,f
 13606  0647  307F               	movlw	127
 13607  0648  07B1               	addwf	i1___fldiv@new_exp,f
 13608  0649  1803               	skipnc
 13609  064A  0AB2               	incf	i1___fldiv@new_exp+1,f
 13610  064B  0827               	movf	i1___fldiv@b+3,w
 13611  064C  00AF               	movwf	i1___fldiv@rem+3
 13612  064D  0826               	movf	i1___fldiv@b+2,w
 13613  064E  00AE               	movwf	i1___fldiv@rem+2
 13614  064F  0825               	movf	i1___fldiv@b+1,w
 13615  0650  00AD               	movwf	i1___fldiv@rem+1
 13616  0651  0824               	movf	i1___fldiv@b,w
 13617  0652  00AC               	movwf	i1___fldiv@rem
 13618  0653  01A4               	clrf	i1___fldiv@b
 13619  0654  01A5               	clrf	i1___fldiv@b+1
 13620  0655  01A6               	clrf	i1___fldiv@b+2
 13621  0656  01A7               	clrf	i1___fldiv@b+3
 13622  0657  01B3               	clrf	i1___fldiv@grs
 13623  0658  01B4               	clrf	i1___fldiv@grs+1
 13624  0659  01B5               	clrf	i1___fldiv@grs+2
 13625  065A  01B6               	clrf	i1___fldiv@grs+3
 13626  065B  01B8               	clrf	i1___fldiv@aexp
 13627  065C                     i1l5758:	
 13628  065C  301A               	movlw	26
 13629  065D  0238               	subwf	i1___fldiv@aexp,w
 13630  065E  1803               	btfsc	3,0
 13631  065F  2E95               	goto	i1l5760
 13632  0660  0838               	movf	i1___fldiv@aexp,w
 13633  0661  1903               	btfsc	3,2
 13634  0662  2E74               	goto	i1l5750
 13635  0663  1003               	clrc
 13636  0664  0DAC               	rlf	i1___fldiv@rem,f
 13637  0665  0DAD               	rlf	i1___fldiv@rem+1,f
 13638  0666  0DAE               	rlf	i1___fldiv@rem+2,f
 13639  0667  0DAF               	rlf	i1___fldiv@rem+3,f
 13640  0668  1003               	clrc
 13641  0669  0DA4               	rlf	i1___fldiv@b,f
 13642  066A  0DA5               	rlf	i1___fldiv@b+1,f
 13643  066B  0DA6               	rlf	i1___fldiv@b+2,f
 13644  066C  0DA7               	rlf	i1___fldiv@b+3,f
 13645  066D  1BB6               	btfsc	i1___fldiv@grs+3,7
 13646  066E  1424               	bsf	i1___fldiv@b,0
 13647  066F  1003               	clrc
 13648  0670  0DB3               	rlf	i1___fldiv@grs,f
 13649  0671  0DB4               	rlf	i1___fldiv@grs+1,f
 13650  0672  0DB5               	rlf	i1___fldiv@grs+2,f
 13651  0673  0DB6               	rlf	i1___fldiv@grs+3,f
 13652  0674                     i1l5750:	
 13653  0674  0823               	movf	i1___fldiv@a+3,w
 13654  0675  022F               	subwf	i1___fldiv@rem+3,w
 13655  0676  1D03               	skipz
 13656  0677  2E82               	goto	u563_25
 13657  0678  0822               	movf	i1___fldiv@a+2,w
 13658  0679  022E               	subwf	i1___fldiv@rem+2,w
 13659  067A  1D03               	skipz
 13660  067B  2E82               	goto	u563_25
 13661  067C  0821               	movf	i1___fldiv@a+1,w
 13662  067D  022D               	subwf	i1___fldiv@rem+1,w
 13663  067E  1D03               	skipz
 13664  067F  2E82               	goto	u563_25
 13665  0680  0820               	movf	i1___fldiv@a,w
 13666  0681  022C               	subwf	i1___fldiv@rem,w
 13667  0682                     u563_25:	
 13668  0682  1C03               	skipc
 13669  0683  2E93               	goto	i1l5756
 13670  0684  1736               	bsf	i1___fldiv@grs+3,6
 13671  0685  0820               	movf	i1___fldiv@a,w
 13672  0686  02AC               	subwf	i1___fldiv@rem,f
 13673  0687  0821               	movf	i1___fldiv@a+1,w
 13674  0688  1C03               	skipc
 13675  0689  0F21               	incfsz	i1___fldiv@a+1,w
 13676  068A  02AD               	subwf	i1___fldiv@rem+1,f
 13677  068B  0822               	movf	i1___fldiv@a+2,w
 13678  068C  1C03               	skipc
 13679  068D  0F22               	incfsz	i1___fldiv@a+2,w
 13680  068E  02AE               	subwf	i1___fldiv@rem+2,f
 13681  068F  0823               	movf	i1___fldiv@a+3,w
 13682  0690  1C03               	skipc
 13683  0691  0F23               	incfsz	i1___fldiv@a+3,w
 13684  0692  02AF               	subwf	i1___fldiv@rem+3,f
 13685  0693                     i1l5756:	
 13686  0693  0AB8               	incf	i1___fldiv@aexp,f
 13687  0694  2E5C               	goto	i1l5758
 13688  0695                     i1l5760:	
 13689  0695  082F               	movf	i1___fldiv@rem+3,w
 13690  0696  042E               	iorwf	i1___fldiv@rem+2,w
 13691  0697  042D               	iorwf	i1___fldiv@rem+1,w
 13692  0698  042C               	iorwf	i1___fldiv@rem,w
 13693  0699  1D03               	btfss	3,2
 13694  069A  1433               	bsf	i1___fldiv@grs,0
 13695  069B                     i1l5774:	
 13696  069B  1BA6               	btfsc	i1___fldiv@b+2,7
 13697  069C  2EAE               	goto	i1l5776
 13698  069D  1003               	clrc
 13699  069E  0DA4               	rlf	i1___fldiv@b,f
 13700  069F  0DA5               	rlf	i1___fldiv@b+1,f
 13701  06A0  0DA6               	rlf	i1___fldiv@b+2,f
 13702  06A1  0DA7               	rlf	i1___fldiv@b+3,f
 13703  06A2  1BB6               	btfsc	i1___fldiv@grs+3,7
 13704  06A3  1424               	bsf	i1___fldiv@b,0
 13705  06A4  30FF               	movlw	-1
 13706  06A5  1003               	clrc
 13707  06A6  0DB3               	rlf	i1___fldiv@grs,f
 13708  06A7  0DB4               	rlf	i1___fldiv@grs+1,f
 13709  06A8  0DB5               	rlf	i1___fldiv@grs+2,f
 13710  06A9  0DB6               	rlf	i1___fldiv@grs+3,f
 13711  06AA  07B1               	addwf	i1___fldiv@new_exp,f
 13712  06AB  1C03               	skipc
 13713  06AC  03B2               	decf	i1___fldiv@new_exp+1,f
 13714  06AD  2E9B               	goto	i1l5774
 13715  06AE                     i1l5776:	
 13716  06AE  01B8               	clrf	i1___fldiv@aexp
 13717  06AF  1FB6               	btfss	i1___fldiv@grs+3,7
 13718  06B0  2EC3               	goto	i1l5786
 13719  06B1  0833               	movf	i1___fldiv@grs,w
 13720  06B2  00A8               	movwf	??i1___fldiv
 13721  06B3  0834               	movf	i1___fldiv@grs+1,w
 13722  06B4  00A9               	movwf	??i1___fldiv+1
 13723  06B5  0835               	movf	i1___fldiv@grs+2,w
 13724  06B6  00AA               	movwf	??i1___fldiv+2
 13725  06B7  307F               	movlw	127
 13726  06B8  0536               	andwf	i1___fldiv@grs+3,w
 13727  06B9  00AB               	movwf	??i1___fldiv+3
 13728  06BA  042A               	iorwf	??i1___fldiv+2,w
 13729  06BB  0429               	iorwf	??i1___fldiv+1,w
 13730  06BC  0428               	iorwf	??i1___fldiv,w
 13731  06BD  1903               	skipnz
 13732  06BE  1824               	btfsc	i1___fldiv@b,0
 13733  06BF  2EC1               	goto	i1l5782
 13734  06C0  2EC3               	goto	i1l5786
 13735  06C1                     i1l5782:	
 13736  06C1  01B8               	clrf	i1___fldiv@aexp
 13737  06C2  0AB8               	incf	i1___fldiv@aexp,f
 13738  06C3                     i1l5786:	
 13739  06C3  0838               	movf	i1___fldiv@aexp,w
 13740  06C4  1903               	btfsc	3,2
 13741  06C5  2ED7               	goto	i1l5796
 13742  06C6  0AA4               	incf	i1___fldiv@b,f
 13743  06C7  1903               	skipnz
 13744  06C8  0AA5               	incf	i1___fldiv@b+1,f
 13745  06C9  1903               	skipnz
 13746  06CA  0AA6               	incf	i1___fldiv@b+2,f
 13747  06CB  1903               	skipnz
 13748  06CC  0AA7               	incf	i1___fldiv@b+3,f
 13749  06CD  1C27               	btfss	i1___fldiv@b+3,0
 13750  06CE  2ED7               	goto	i1l5796
 13751  06CF  0D27               	rlf	i1___fldiv@b+3,w
 13752  06D0  0CA7               	rrf	i1___fldiv@b+3,f
 13753  06D1  0CA6               	rrf	i1___fldiv@b+2,f
 13754  06D2  0CA5               	rrf	i1___fldiv@b+1,f
 13755  06D3  0CA4               	rrf	i1___fldiv@b,f
 13756  06D4  0AB1               	incf	i1___fldiv@new_exp,f
 13757  06D5  1903               	skipnz
 13758  06D6  0AB2               	incf	i1___fldiv@new_exp+1,f
 13759  06D7                     i1l5796:	
 13760  06D7  0832               	movf	i1___fldiv@new_exp+1,w
 13761  06D8  3A80               	xorlw	128
 13762  06D9  00FF               	movwf	127
 13763  06DA  3080               	movlw	128
 13764  06DB  027F               	subwf	127,w
 13765  06DC  1D03               	skipz
 13766  06DD  2EE0               	goto	u573_25
 13767  06DE  30FF               	movlw	255
 13768  06DF  0231               	subwf	i1___fldiv@new_exp,w
 13769  06E0                     u573_25:	
 13770  06E0  1C03               	skipc
 13771  06E1  2EEB               	goto	i1l5802
 13772  06E2  30FF               	movlw	255
 13773  06E3  1283               	bcf	3,5	;RP0=0, select bank0
 13774  06E4  1303               	bcf	3,6	;RP1=0, select bank0
 13775  06E5  00B1               	movwf	i1___fldiv@new_exp
 13776  06E6  01B2               	clrf	i1___fldiv@new_exp+1
 13777  06E7  01A4               	clrf	i1___fldiv@b
 13778  06E8  01A5               	clrf	i1___fldiv@b+1
 13779  06E9  01A6               	clrf	i1___fldiv@b+2
 13780  06EA  01A7               	clrf	i1___fldiv@b+3
 13781  06EB                     i1l5802:	
 13782  06EB  1283               	bcf	3,5	;RP0=0, select bank0
 13783  06EC  1303               	bcf	3,6	;RP1=0, select bank0
 13784  06ED  0832               	movf	i1___fldiv@new_exp+1,w
 13785  06EE  3A80               	xorlw	128
 13786  06EF  00FF               	movwf	127
 13787  06F0  3080               	movlw	128
 13788  06F1  027F               	subwf	127,w
 13789  06F2  1D03               	skipz
 13790  06F3  2EF6               	goto	u574_25
 13791  06F4  3001               	movlw	1
 13792  06F5  0231               	subwf	i1___fldiv@new_exp,w
 13793  06F6                     u574_25:	
 13794  06F6  1803               	skipnc
 13795  06F7  2F01               	goto	i1l5808
 13796  06F8  1283               	bcf	3,5	;RP0=0, select bank0
 13797  06F9  1303               	bcf	3,6	;RP1=0, select bank0
 13798  06FA  01B1               	clrf	i1___fldiv@new_exp
 13799  06FB  01B2               	clrf	i1___fldiv@new_exp+1
 13800  06FC  01A4               	clrf	i1___fldiv@b
 13801  06FD  01A5               	clrf	i1___fldiv@b+1
 13802  06FE  01A6               	clrf	i1___fldiv@b+2
 13803  06FF  01A7               	clrf	i1___fldiv@b+3
 13804  0700  01B0               	clrf	i1___fldiv@sign
 13805  0701                     i1l5808:	
 13806  0701  1283               	bcf	3,5	;RP0=0, select bank0
 13807  0702  1303               	bcf	3,6	;RP1=0, select bank0
 13808  0703  0831               	movf	i1___fldiv@new_exp,w
 13809  0704  00B7               	movwf	i1___fldiv@bexp
 13810  0705  1C37               	btfss	i1___fldiv@bexp,0
 13811  0706  2F09               	goto	i1l1571
 13812  0707  17A6               	bsf	i1___fldiv@b+2,7
 13813  0708  2F0A               	goto	i1l5814
 13814  0709                     i1l1571:	
 13815  0709  13A6               	bcf	i1___fldiv@b+2,7
 13816  070A                     i1l5814:	
 13817  070A  1003               	clrc
 13818  070B  0C37               	rrf	i1___fldiv@bexp,w
 13819  070C  00A7               	movwf	i1___fldiv@b+3
 13820  070D  2E2D               	goto	L10
 13821  070E                     __end_ofi1___fldiv:	
 13822                           
 13823                           	psect	swtext1
 13824  07F1                     __pswtext1:	
 13825  07F1                     i1S7076:	
 13826  07F1  120A  158A  2845   	ljmp	i1l6690
 13827  07F4  120A  158A  284B   	ljmp	i1l6692
 13828  07F7  120A  158A  2851   	ljmp	i1l6694
 13829  07FA  120A  158A  2857   	ljmp	i1l6696
 13830  07FD  120A  158A  285B   	ljmp	i1l6698
 13831                           
 13832                           	psect	text50
 13833  1EFF                     __ptext50:	
 13834 ;; *************** function _SET_TIME_HANDLER *****************
 13835 ;; Defined at:
 13836 ;;		line 127 in file "CONTROL.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;		None
 13839 ;; Auto vars:     Size  Location     Type
 13840 ;;		None
 13841 ;; Return value:  Size  Location     Type
 13842 ;;                  1    wreg      void 
 13843 ;; Registers used:
 13844 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 13845 ;; Tracked objects:
 13846 ;;		On entry : 0/0
 13847 ;;		On exit  : 0/0
 13848 ;;		Unchanged: 0/0
 13849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13850 ;;      Params:         0       0       0       0       0
 13851 ;;      Locals:         0       0       0       0       0
 13852 ;;      Temps:          0       2       0       0       0
 13853 ;;      Totals:         0       2       0       0       0
 13854 ;;Total ram usage:        2 bytes
 13855 ;; Hardware stack levels used:    1
 13856 ;; Hardware stack levels required when called:    7
 13857 ;; This function calls:
 13858 ;;		_DISP_SHOW_TIME_AT
 13859 ;;		_SET_TIME_HANDLER_ON_WORK
 13860 ;;		_STOP_BLINKING
 13861 ;; This function is called by:
 13862 ;;		_CONTROL_UPDATE
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           
 13867                           ;psect for function _SET_TIME_HANDLER
 13868  1EFF                     _SET_TIME_HANDLER:	
 13869                           
 13870                           ;CONTROL.c: 141:         break;
 13871                           
 13872                           ;CONTROL.c: 129:     switch (HANDLERS_STATES[SET_TIME])
 13873                           
 13874                           ;incstack = 0
 13875 ;; hardware stack exceeded
 13876                           ; Regs used in _SET_TIME_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 13877  1EFF  1683               	bsf	3,5	;RP0=1, select bank3
 13878  1F00  1703               	bsf	3,6	;RP1=1, select bank3
 13879  1F01  0810               	movf	_HANDLERS_STATES^(0+384),w
 13880  1F02  1283               	bcf	3,5	;RP0=0, select bank0
 13881  1F03  1303               	bcf	3,6	;RP1=0, select bank0
 13882  1F04  00B5               	movwf	??_SET_TIME_HANDLER
 13883  1F05  01B6               	clrf	??_SET_TIME_HANDLER+1
 13884                           
 13885                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13886                           ; Switch size 1, requested type "speed"
 13887                           ; Number of cases is 1, Range of values is 0 to 0
 13888                           ; switch strategies available:
 13889                           ; Name         Instructions Cycles
 13890                           ; simple_byte            4     3 (average)
 13891                           ; direct_byte           11     8 (fixed)
 13892                           ; jumptable            260     6 (fixed)
 13893                           ;	Chosen strategy is simple_byte
 13894  1F06  0836               	movf	??_SET_TIME_HANDLER+1,w
 13895  1F07  3A00               	xorlw	0	; case 0
 13896  1F08  1903               	skipnz
 13897  1F09  2F23               	goto	i1l7078
 13898  1F0A  2F2B               	goto	i1l722
 13899  1F0B                     i1l6054:	
 13900                           
 13901                           ;CONTROL.c: 132:             STOP_BLINKING();
 13902  1F0B  120A  158A  24B2  160A  158A  	fcall	_STOP_BLINKING
 13903                           
 13904                           ;CONTROL.c: 134:             DISP_SHOW_TIME_AT(SETTED_TIME);
 13905  1F10  1283               	bcf	3,5	;RP0=0, select bank0
 13906  1F11  1303               	bcf	3,6	;RP1=0, select bank0
 13907  1F12  086B               	movf	_SETTED_TIME,w
 13908  1F13  00B1               	movwf	DISP_SHOW_TIME_AT@START_TIME
 13909  1F14  086C               	movf	_SETTED_TIME+1,w
 13910  1F15  00B2               	movwf	DISP_SHOW_TIME_AT@START_TIME+1
 13911  1F16  086D               	movf	_SETTED_TIME+2,w
 13912  1F17  00B3               	movwf	DISP_SHOW_TIME_AT@START_TIME+2
 13913  1F18  120A  158A  24A5   	fcall	_DISP_SHOW_TIME_AT
 13914                           
 13915                           ;CONTROL.c: 135:             CURRENT_DIGIT = (6);
 13916  1F1B  3006               	movlw	6
 13917  1F1C  00EF               	movwf	_CURRENT_DIGIT
 13918                           
 13919                           ;CONTROL.c: 137:            HANDLERS_STATES[SET_TIME] = ON_WORK;
 13920  1F1D  1683               	bsf	3,5	;RP0=1, select bank3
 13921  1F1E  1703               	bsf	3,6	;RP1=1, select bank3
 13922  1F1F  0190               	clrf	_HANDLERS_STATES^(0+384)
 13923  1F20  0A90               	incf	_HANDLERS_STATES^(0+384),f
 13924                           
 13925                           ;CONTROL.c: 138:         break;
 13926  1F21  0008               	return
 13927  1F22                     i1l6062:	
 13928                           
 13929                           ;CONTROL.c: 140:             SET_TIME_HANDLER_ON_WORK();
 13930  1F22  2F2C               	ljmp	i1l5008
 13931  1F23                     i1l7078:	
 13932                           
 13933                           ; Switch size 1, requested type "speed"
 13934                           ; Number of cases is 2, Range of values is 0 to 1
 13935                           ; switch strategies available:
 13936                           ; Name         Instructions Cycles
 13937                           ; simple_byte            7     4 (average)
 13938                           ; direct_byte           14     8 (fixed)
 13939                           ; jumptable            260     6 (fixed)
 13940                           ;	Chosen strategy is simple_byte
 13941  1F23  0835               	movf	??_SET_TIME_HANDLER,w
 13942  1F24  3A00               	xorlw	0	; case 0
 13943  1F25  1903               	skipnz
 13944  1F26  2F0B               	goto	i1l6054
 13945  1F27  3A01               	xorlw	1	; case 1
 13946  1F28  1903               	skipnz
 13947  1F29  2F22               	goto	i1l6062
 13948  1F2A  2F2B               	goto	i1l722
 13949  1F2B                     i1l722:	
 13950  1F2B  0008               	return
 13951  1F2C                     __end_of_SET_TIME_HANDLER:	
 13952  1F2C                     __ptext51:	
 13953 ;; *************** function _SET_TIME_HANDLER_ON_WORK *****************
 13954 ;; Defined at:
 13955 ;;		line 453 in file "CONTROL.c"
 13956 ;; Parameters:    Size  Location     Type
 13957 ;;		None
 13958 ;; Auto vars:     Size  Location     Type
 13959 ;;		None
 13960 ;; Return value:  Size  Location     Type
 13961 ;;                  1    wreg      void 
 13962 ;; Registers used:
 13963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 13964 ;; Tracked objects:
 13965 ;;		On entry : 300/0
 13966 ;;		On exit  : 800/800
 13967 ;;		Unchanged: 0/0
 13968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13969 ;;      Params:         0       0       0       0       0
 13970 ;;      Locals:         0       0       0       0       0
 13971 ;;      Temps:          0       0       0       0       0
 13972 ;;      Totals:         0       0       0       0       0
 13973 ;;Total ram usage:        0 bytes
 13974 ;; Hardware stack levels used:    1
 13975 ;; Hardware stack levels required when called:    6
 13976 ;; This function calls:
 13977 ;;		_GOTO_NEXT_DIGIT
 13978 ;;		_INCREMENT_THIS
 13979 ;;		_SW_GET_STATE
 13980 ;; This function is called by:
 13981 ;;		_SET_TIME_HANDLER
 13982 ;; This function uses a non-reentrant model
 13983 ;;
 13984                           
 13985                           
 13986                           ;psect for function _SET_TIME_HANDLER_ON_WORK
 13987  1F2C                     _SET_TIME_HANDLER_ON_WORK:	
 13988  1F2C                     i1l5008:	
 13989                           ;incstack = 0
 13990 ;; hardware stack exceeded
 13991                           ; Regs used in _SET_TIME_HANDLER_ON_WORK: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
 13992                           
 13993                           
 13994                           ;CONTROL.c: 455:             if ( PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )
 13995  1F2C  1683               	bsf	3,5	;RP0=1, select bank3
 13996  1F2D  1703               	bsf	3,6	;RP1=1, select bank3
 13997  1F2E  0B1F               	decfsz	(_PRESSED_KEY^(0+384)+1),w
 13998  1F2F  2F4D               	goto	i1l5024
 13999                           
 14000                           ;CONTROL.c: 456:             {;CONTROL.c: 457:                     if ((PRESSED_KEY.KEYP
      +                          AD_NO != KEY_RIGHRT)&
 14001  1F30  300B               	movlw	11
 14002  1F31  061E               	xorwf	_PRESSED_KEY^(0+384),w
 14003  1F32  1903               	btfsc	3,2
 14004  1F33  2F43               	goto	i1l5018
 14005  1F34  3009               	movlw	9
 14006  1F35  061E               	xorwf	_PRESSED_KEY^(0+384),w
 14007  1F36  1903               	btfsc	3,2
 14008  1F37  2F43               	goto	i1l5018
 14009  1F38  300C               	movlw	12
 14010  1F39  061E               	xorwf	_PRESSED_KEY^(0+384),w
 14011  1F3A  1903               	btfsc	3,2
 14012  1F3B  2F43               	goto	i1l5018
 14013                           
 14014                           ;CONTROL.c: 460:                     {;CONTROL.c: 462:                       INCREMENT_T
      +                          HIS ( PRESSED_KEY.KEYPAD_NO);
 14015  1F3C  081E               	movf	_PRESSED_KEY^(0+384),w
 14016  1F3D  120A  158A  22BC  160A  158A  	fcall	_INCREMENT_THIS
 14017                           
 14018                           ;CONTROL.c: 463:                     }
 14019  1F42  2F4D               	goto	i1l5024
 14020  1F43                     i1l5018:	
 14021  1F43  300B               	movlw	11
 14022  1F44  061E               	xorwf	_PRESSED_KEY^(0+384),w
 14023  1F45  1903               	btfsc	3,2
 14024  1F46  2F4B               	goto	i1l5022
 14025  1F47  3009               	movlw	9
 14026  1F48  061E               	xorwf	_PRESSED_KEY^(0+384),w
 14027  1F49  1D03               	btfss	3,2
 14028  1F4A  2F4D               	goto	i1l5024
 14029  1F4B                     i1l5022:	
 14030                           
 14031                           ;CONTROL.c: 468:                     {;CONTROL.c: 470:                        GOTO_NEXT_
      +                          DIGIT(PRESSED_KEY.KEYPAD_NO);
 14032  1F4B  081E               	movf	_PRESSED_KEY^(0+384),w
 14033  1F4C  275F               	fcall	_GOTO_NEXT_DIGIT
 14034  1F4D                     i1l5024:	
 14035                           ;CONTROL.c: 477:             }
 14036                           
 14037                           ;CONTROL.c: 471:                     }
 14038                           
 14039                           
 14040                           ;CONTROL.c: 482:             if (SW_GET_STATE(Cancel) ==SW_PRE_PRESSED )
 14041  1F4D  3001               	movlw	1
 14042  1F4E  120A  158A  2256  160A  158A  	fcall	_SW_GET_STATE
 14043  1F53  3A01               	xorlw	1
 14044  1F54  1D03               	skipz
 14045  1F55  0008               	return
 14046                           
 14047                           ;CONTROL.c: 483:             {;CONTROL.c: 484:                 SETTED_TIME.HOURS = 0;
 14048  1F56  1283               	bcf	3,5	;RP0=0, select bank0
 14049  1F57  1303               	bcf	3,6	;RP1=0, select bank0
 14050  1F58  01ED               	clrf	_SETTED_TIME+2
 14051                           
 14052                           ;CONTROL.c: 485:                 SETTED_TIME.MINUTES = 0;
 14053  1F59  01EC               	clrf	_SETTED_TIME+1
 14054                           
 14055                           ;CONTROL.c: 486:                 SETTED_TIME.SECONDS = 0;
 14056  1F5A  01EB               	clrf	_SETTED_TIME
 14057                           
 14058                           ;CONTROL.c: 487:                 HANDLERS_STATES[SET_TIME] = FIRST_TIME;
 14059  1F5B  1683               	bsf	3,5	;RP0=1, select bank3
 14060  1F5C  1703               	bsf	3,6	;RP1=1, select bank3
 14061  1F5D  0190               	clrf	_HANDLERS_STATES^(0+384)
 14062                           
 14063                           ;CONTROL.c: 488:             }
 14064  1F5E  0008               	return
 14065  1F5F                     __end_of_SET_TIME_HANDLER_ON_WORK:	
 14066  1F5F                     __ptext54:	
 14067 ;; *************** function _GOTO_NEXT_DIGIT *****************
 14068 ;; Defined at:
 14069 ;;		line 496 in file "CONTROL.c"
 14070 ;; Parameters:    Size  Location     Type
 14071 ;;  KEY             1    wreg     unsigned char 
 14072 ;; Auto vars:     Size  Location     Type
 14073 ;;  KEY             1    8[BANK0 ] unsigned char 
 14074 ;; Return value:  Size  Location     Type
 14075 ;;                  1    wreg      void 
 14076 ;; Registers used:
 14077 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14078 ;; Tracked objects:
 14079 ;;		On entry : 0/300
 14080 ;;		On exit  : 0/0
 14081 ;;		Unchanged: 0/0
 14082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14083 ;;      Params:         0       0       0       0       0
 14084 ;;      Locals:         0       1       0       0       0
 14085 ;;      Temps:          0       2       0       0       0
 14086 ;;      Totals:         0       3       0       0       0
 14087 ;;Total ram usage:        3 bytes
 14088 ;; Hardware stack levels used:    1
 14089 ;; Hardware stack levels required when called:    4
 14090 ;; This function calls:
 14091 ;;		_START_BLINKING_AT
 14092 ;; This function is called by:
 14093 ;;		_SET_TIME_HANDLER_ON_WORK
 14094 ;;		_INCREMENT_THIS
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097                           
 14098                           
 14099                           ;psect for function _GOTO_NEXT_DIGIT
 14100  1F5F                     _GOTO_NEXT_DIGIT:	
 14101                           
 14102                           ;incstack = 0
 14103 ;; hardware stack exceeded
 14104                           ; Regs used in _GOTO_NEXT_DIGIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14105                           ;GOTO_NEXT_DIGIT@KEY stored from wreg
 14106  1F5F  1283               	bcf	3,5	;RP0=0, select bank0
 14107  1F60  1303               	bcf	3,6	;RP1=0, select bank0
 14108  1F61  00A8               	movwf	GOTO_NEXT_DIGIT@KEY
 14109                           
 14110                           ;CONTROL.c: 496: static void GOTO_NEXT_DIGIT (tbyte KEY);CONTROL.c: 497: {;CONTROL.c: 49
      +                          8:     static tbyte count_right = 0 ;;CONTROL.c: 499:     static tbyte count_left =0;;CO
      +                          NTROL.c: 500:    switch ( CURRENT_DIGIT )
 14111  1F62  2FC4               	goto	i1l4610
 14112  1F63                     i1l4546:	
 14113                           
 14114                           ;CONTROL.c: 503:            if (KEY == KEY_RIGHRT)
 14115  1F63  300B               	movlw	11
 14116  1F64  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14117  1F65  1D03               	btfss	3,2
 14118  1F66  2F69               	goto	i1l4550
 14119  1F67                     i1l4548:	
 14120                           
 14121                           ;CONTROL.c: 504:            {;CONTROL.c: 505:                 CURRENT_DIGIT = (7);
 14122  1F67  3007               	movlw	7
 14123  1F68  2FA4               	goto	L20
 14124  1F69                     i1l4550:	
 14125                           ;CONTROL.c: 506:            }
 14126                           
 14127  1F69  3009               	movlw	9
 14128  1F6A  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14129  1F6B  1D03               	btfss	3,2
 14130  1F6C  2FE0               	goto	i1l4612
 14131                           
 14132                           ;CONTROL.c: 508:             {;CONTROL.c: 509:                count_left++;
 14133  1F6D  1683               	bsf	3,5	;RP0=1, select bank3
 14134  1F6E  1703               	bsf	3,6	;RP1=1, select bank3
 14135  1F6F  3002               	movlw	2
 14136  1F70  0AA4               	incf	GOTO_NEXT_DIGIT@count_left^(0+384),f
 14137                           
 14138                           ;CONTROL.c: 510:                if (count_left == 2 )
 14139  1F71  0624               	xorwf	GOTO_NEXT_DIGIT@count_left^(0+384),w
 14140  1F72  1D03               	btfss	3,2
 14141  1F73  2FE0               	goto	i1l4612
 14142                           
 14143                           ;CONTROL.c: 511:                {;CONTROL.c: 512:                     CONTROL_CURRENT_ST
      +                          ATE = SET_ROTOR_PWR ;
 14144  1F74  3002               	movlw	2
 14145  1F75  1283               	bcf	3,5	;RP0=0, select bank0
 14146  1F76  1303               	bcf	3,6	;RP1=0, select bank0
 14147  1F77  00EE               	movwf	_CONTROL_CURRENT_STATE
 14148                           
 14149                           ;CONTROL.c: 513:                     HANDLERS_STATES[SET_TIME] = FIRST_TIME;
 14150  1F78  1683               	bsf	3,5	;RP0=1, select bank3
 14151  1F79  1703               	bsf	3,6	;RP1=1, select bank3
 14152  1F7A  0190               	clrf	_HANDLERS_STATES^(0+384)
 14153                           
 14154                           ;CONTROL.c: 514:                     count_left = 0;
 14155  1F7B  01A4               	clrf	GOTO_NEXT_DIGIT@count_left^(0+384)
 14156                           
 14157                           ;CONTROL.c: 518:         break;
 14158  1F7C  2FE0               	goto	i1l4612
 14159  1F7D                     i1l4562:	
 14160                           
 14161                           ;CONTROL.c: 520:             if (KEY == KEY_RIGHRT)
 14162  1F7D  300B               	movlw	11
 14163  1F7E  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14164  1F7F  1D03               	btfss	3,2
 14165  1F80  2F83               	goto	i1l4566
 14166  1F81                     i1l4564:	
 14167                           
 14168                           ;CONTROL.c: 521:             {;CONTROL.c: 522:                 CURRENT_DIGIT = (9);
 14169  1F81  3009               	movlw	9
 14170  1F82  2FA4               	goto	L20
 14171  1F83                     i1l4566:	
 14172                           ;CONTROL.c: 523:             }
 14173                           
 14174  1F83  3009               	movlw	9
 14175  1F84  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14176  1F85  1D03               	btfss	3,2
 14177  1F86  2FE0               	goto	i1l4612
 14178                           
 14179                           ;CONTROL.c: 525:             {;CONTROL.c: 526:                 CURRENT_DIGIT = (6);
 14180  1F87  3006               	movlw	6
 14181  1F88  2FA4               	goto	L20
 14182  1F89                     i1l4570:	
 14183                           
 14184                           ;CONTROL.c: 530:             if (KEY == KEY_RIGHRT)
 14185  1F89  300B               	movlw	11
 14186  1F8A  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14187  1F8B  1D03               	btfss	3,2
 14188  1F8C  2F8F               	goto	i1l4574
 14189  1F8D                     i1l4572:	
 14190                           
 14191                           ;CONTROL.c: 531:             {;CONTROL.c: 532:                 CURRENT_DIGIT = (10);
 14192  1F8D  300A               	movlw	10
 14193  1F8E  2FA4               	goto	L20
 14194  1F8F                     i1l4574:	
 14195                           ;CONTROL.c: 533:             }
 14196                           
 14197  1F8F  3009               	movlw	9
 14198  1F90  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14199  1F91  1903               	btfsc	3,2
 14200  1F92  2F67               	goto	i1l4548
 14201  1F93  2FE0               	goto	i1l4612
 14202  1F94                     i1l4578:	
 14203                           
 14204                           ;CONTROL.c: 540:             if (KEY == KEY_RIGHRT)
 14205  1F94  300B               	movlw	11
 14206  1F95  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14207  1F96  1D03               	btfss	3,2
 14208  1F97  2F9A               	goto	i1l4582
 14209  1F98                     i1l4580:	
 14210                           
 14211                           ;CONTROL.c: 541:             {;CONTROL.c: 542:                 CURRENT_DIGIT = (12);
 14212  1F98  300C               	movlw	12
 14213  1F99  2FA4               	goto	L20
 14214  1F9A                     i1l4582:	
 14215                           ;CONTROL.c: 543:             }
 14216                           
 14217  1F9A  3009               	movlw	9
 14218  1F9B  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14219  1F9C  1903               	btfsc	3,2
 14220  1F9D  2F81               	goto	i1l4564
 14221  1F9E  2FE0               	goto	i1l4612
 14222  1F9F                     i1l4586:	
 14223                           
 14224                           ;CONTROL.c: 550:             if (KEY == KEY_RIGHRT)
 14225  1F9F  300B               	movlw	11
 14226  1FA0  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14227  1FA1  1D03               	btfss	3,2
 14228  1FA2  2FA6               	goto	i1l4590
 14229                           
 14230                           ;CONTROL.c: 551:             {;CONTROL.c: 552:                 CURRENT_DIGIT = (13);
 14231  1FA3  300D               	movlw	13
 14232  1FA4                     L20:	
 14233  1FA4  00EF               	movwf	_CURRENT_DIGIT
 14234                           
 14235                           ;CONTROL.c: 553:             }
 14236  1FA5  2FE0               	goto	i1l4612
 14237  1FA6                     i1l4590:	
 14238  1FA6  3009               	movlw	9
 14239  1FA7  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14240  1FA8  1903               	btfsc	3,2
 14241  1FA9  2F8D               	goto	i1l4572
 14242  1FAA  2FE0               	goto	i1l4612
 14243  1FAB                     i1l4594:	
 14244                           
 14245                           ;CONTROL.c: 560:             if (KEY == KEY_RIGHRT)
 14246  1FAB  300B               	movlw	11
 14247  1FAC  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14248  1FAD  1D03               	btfss	3,2
 14249  1FAE  2FBF               	goto	i1l4604
 14250                           
 14251                           ;CONTROL.c: 561:             {;CONTROL.c: 562:                count_right++;
 14252  1FAF  1683               	bsf	3,5	;RP0=1, select bank3
 14253  1FB0  1703               	bsf	3,6	;RP1=1, select bank3
 14254  1FB1  3002               	movlw	2
 14255  1FB2  0AA5               	incf	GOTO_NEXT_DIGIT@count_right^(0+384),f
 14256                           
 14257                           ;CONTROL.c: 563:                if (count_right == 2 )
 14258  1FB3  0625               	xorwf	GOTO_NEXT_DIGIT@count_right^(0+384),w
 14259  1FB4  1D03               	btfss	3,2
 14260  1FB5  2FE0               	goto	i1l4612
 14261                           
 14262                           ;CONTROL.c: 564:                {;CONTROL.c: 565:                  CONTROL_CURRENT_STATE
      +                           = SET_HEATING ;
 14263  1FB6  1283               	bcf	3,5	;RP0=0, select bank0
 14264  1FB7  1303               	bcf	3,6	;RP1=0, select bank0
 14265  1FB8  01EE               	clrf	_CONTROL_CURRENT_STATE
 14266  1FB9  0AEE               	incf	_CONTROL_CURRENT_STATE,f
 14267                           
 14268                           ;CONTROL.c: 566:                  HANDLERS_STATES[SET_TIME] = FIRST_TIME;
 14269  1FBA  1683               	bsf	3,5	;RP0=1, select bank3
 14270  1FBB  1703               	bsf	3,6	;RP1=1, select bank3
 14271  1FBC  0190               	clrf	_HANDLERS_STATES^(0+384)
 14272                           
 14273                           ;CONTROL.c: 567:                  count_right = 0;
 14274  1FBD  01A5               	clrf	GOTO_NEXT_DIGIT@count_right^(0+384)
 14275                           
 14276                           ;CONTROL.c: 568:                }
 14277  1FBE  2FE0               	goto	i1l4612
 14278  1FBF                     i1l4604:	
 14279  1FBF  3009               	movlw	9
 14280  1FC0  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14281  1FC1  1903               	btfsc	3,2
 14282  1FC2  2F98               	goto	i1l4580
 14283  1FC3  2FE0               	goto	i1l4612
 14284  1FC4                     i1l4610:	
 14285  1FC4  086F               	movf	_CURRENT_DIGIT,w
 14286  1FC5  00A6               	movwf	??_GOTO_NEXT_DIGIT
 14287  1FC6  01A7               	clrf	??_GOTO_NEXT_DIGIT+1
 14288                           
 14289                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14290                           ; Switch size 1, requested type "speed"
 14291                           ; Number of cases is 1, Range of values is 0 to 0
 14292                           ; switch strategies available:
 14293                           ; Name         Instructions Cycles
 14294                           ; simple_byte            4     3 (average)
 14295                           ; direct_byte           11     8 (fixed)
 14296                           ; jumptable            260     6 (fixed)
 14297                           ;	Chosen strategy is simple_byte
 14298  1FC7  0827               	movf	??_GOTO_NEXT_DIGIT+1,w
 14299  1FC8  3A00               	xorlw	0	; case 0
 14300  1FC9  1903               	skipnz
 14301  1FCA  2FCC               	goto	i1l7082
 14302  1FCB  2FE0               	goto	i1l4612
 14303  1FCC                     i1l7082:	
 14304                           
 14305                           ; Switch size 1, requested type "speed"
 14306                           ; Number of cases is 6, Range of values is 6 to 13
 14307                           ; switch strategies available:
 14308                           ; Name         Instructions Cycles
 14309                           ; simple_byte           19    10 (average)
 14310                           ; direct_byte           35    11 (fixed)
 14311                           ; jumptable            263     9 (fixed)
 14312                           ;	Chosen strategy is simple_byte
 14313  1FCC  0826               	movf	??_GOTO_NEXT_DIGIT,w
 14314  1FCD  3A06               	xorlw	6	; case 6
 14315  1FCE  1903               	skipnz
 14316  1FCF  2F63               	goto	i1l4546
 14317  1FD0  3A01               	xorlw	1	; case 7
 14318  1FD1  1903               	skipnz
 14319  1FD2  2F7D               	goto	i1l4562
 14320  1FD3  3A0E               	xorlw	14	; case 9
 14321  1FD4  1903               	skipnz
 14322  1FD5  2F89               	goto	i1l4570
 14323  1FD6  3A03               	xorlw	3	; case 10
 14324  1FD7  1903               	skipnz
 14325  1FD8  2F94               	goto	i1l4578
 14326  1FD9  3A06               	xorlw	6	; case 12
 14327  1FDA  1903               	skipnz
 14328  1FDB  2F9F               	goto	i1l4586
 14329  1FDC  3A01               	xorlw	1	; case 13
 14330  1FDD  1903               	skipnz
 14331  1FDE  2FAB               	goto	i1l4594
 14332  1FDF  2FE0               	goto	i1l4612
 14333  1FE0                     i1l4612:	
 14334                           
 14335                           ;CONTROL.c: 587:    if (( CURRENT_DIGIT != (13))&(KEY != KEY_RIGHRT))
 14336  1FE0  300D               	movlw	13
 14337  1FE1  1283               	bcf	3,5	;RP0=0, select bank0
 14338  1FE2  1303               	bcf	3,6	;RP1=0, select bank0
 14339  1FE3  066F               	xorwf	_CURRENT_DIGIT,w
 14340  1FE4  1903               	btfsc	3,2
 14341  1FE5  2FED               	goto	i1l4618
 14342  1FE6  300B               	movlw	11
 14343  1FE7  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14344  1FE8  1903               	btfsc	3,2
 14345  1FE9  2FED               	goto	i1l4618
 14346                           
 14347                           ;CONTROL.c: 588:    {;CONTROL.c: 589:      count_right = 0;
 14348  1FEA  1683               	bsf	3,5	;RP0=1, select bank3
 14349  1FEB  1703               	bsf	3,6	;RP1=1, select bank3
 14350  1FEC  01A5               	clrf	GOTO_NEXT_DIGIT@count_right^(0+384)
 14351  1FED                     i1l4618:	
 14352                           
 14353                           ;CONTROL.c: 591:    if (( CURRENT_DIGIT != (6))&(KEY != KEY_LEFT))
 14354  1FED  3006               	movlw	6
 14355  1FEE  1283               	bcf	3,5	;RP0=0, select bank0
 14356  1FEF  1303               	bcf	3,6	;RP1=0, select bank0
 14357  1FF0  066F               	xorwf	_CURRENT_DIGIT,w
 14358  1FF1  1903               	btfsc	3,2
 14359  1FF2  2FFA               	goto	i1l4624
 14360  1FF3  3009               	movlw	9
 14361  1FF4  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14362  1FF5  1903               	btfsc	3,2
 14363  1FF6  2FFA               	goto	i1l4624
 14364                           
 14365                           ;CONTROL.c: 592:    {;CONTROL.c: 593:      count_left = 0;
 14366  1FF7  1683               	bsf	3,5	;RP0=1, select bank3
 14367  1FF8  1703               	bsf	3,6	;RP1=1, select bank3
 14368  1FF9  01A4               	clrf	GOTO_NEXT_DIGIT@count_left^(0+384)
 14369  1FFA                     i1l4624:	
 14370                           
 14371                           ;CONTROL.c: 595:     START_BLINKING_AT(CURRENT_DIGIT);
 14372  1FFA  1283               	bcf	3,5	;RP0=0, select bank0
 14373  1FFB  1303               	bcf	3,6	;RP1=0, select bank0
 14374  1FFC  086F               	movf	_CURRENT_DIGIT,w
 14375  1FFD  120A  158A  2959   	ljmp	_START_BLINKING_AT
 14376  2000                     __end_of_GOTO_NEXT_DIGIT:	
 14377                           
 14378                           	psect	text56
 14379  1DEF                     __ptext56:	
 14380 ;; *************** function _SET_ROTOR_PWR_HANDLER *****************
 14381 ;; Defined at:
 14382 ;;		line 166 in file "CONTROL.c"
 14383 ;; Parameters:    Size  Location     Type
 14384 ;;		None
 14385 ;; Auto vars:     Size  Location     Type
 14386 ;;		None
 14387 ;; Return value:  Size  Location     Type
 14388 ;;                  1    wreg      void 
 14389 ;; Registers used:
 14390 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 14391 ;; Tracked objects:
 14392 ;;		On entry : 0/0
 14393 ;;		On exit  : 0/0
 14394 ;;		Unchanged: 0/0
 14395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14396 ;;      Params:         0       0       0       0       0
 14397 ;;      Locals:         0       0       0       0       0
 14398 ;;      Temps:          0       2       0       0       0
 14399 ;;      Totals:         0       2       0       0       0
 14400 ;;Total ram usage:        2 bytes
 14401 ;; Hardware stack levels used:    1
 14402 ;; Hardware stack levels required when called:    5
 14403 ;; This function calls:
 14404 ;;		_DISP_MOTOR_DATA
 14405 ;;		_SET_ROTOR_PWR_HANDLER_ON_WORK
 14406 ;;		_STOP_BLINKING
 14407 ;; This function is called by:
 14408 ;;		_CONTROL_UPDATE
 14409 ;; This function uses a non-reentrant model
 14410 ;;
 14411                           
 14412                           
 14413                           ;psect for function _SET_ROTOR_PWR_HANDLER
 14414  1DEF                     _SET_ROTOR_PWR_HANDLER:	
 14415                           
 14416                           ;CONTROL.c: 179:         break;
 14417                           
 14418                           ;CONTROL.c: 168:     switch (HANDLERS_STATES[SET_ROTOR_PWR])
 14419                           
 14420                           ;incstack = 0
 14421 ;; hardware stack exceeded
 14422                           ; Regs used in _SET_ROTOR_PWR_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
 14423  1DEF  1683               	bsf	3,5	;RP0=1, select bank3
 14424  1DF0  1703               	bsf	3,6	;RP1=1, select bank3
 14425  1DF1  0812               	movf	(_HANDLERS_STATES^(0+384)+2),w
 14426  1DF2  1283               	bcf	3,5	;RP0=0, select bank0
 14427  1DF3  1303               	bcf	3,6	;RP1=0, select bank0
 14428  1DF4  00AA               	movwf	??_SET_ROTOR_PWR_HANDLER
 14429  1DF5  01AB               	clrf	??_SET_ROTOR_PWR_HANDLER+1
 14430                           
 14431                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14432                           ; Switch size 1, requested type "speed"
 14433                           ; Number of cases is 1, Range of values is 0 to 0
 14434                           ; switch strategies available:
 14435                           ; Name         Instructions Cycles
 14436                           ; simple_byte            4     3 (average)
 14437                           ; direct_byte           11     8 (fixed)
 14438                           ; jumptable            260     6 (fixed)
 14439                           ;	Chosen strategy is simple_byte
 14440  1DF6  082B               	movf	??_SET_ROTOR_PWR_HANDLER+1,w
 14441  1DF7  3A00               	xorlw	0	; case 0
 14442  1DF8  1903               	skipnz
 14443  1DF9  2E0B               	goto	i1l7084
 14444  1DFA  2E13               	goto	i1l738
 14445  1DFB                     i1l6092:	
 14446                           
 14447                           ;CONTROL.c: 171:            STOP_BLINKING();
 14448  1DFB  120A  158A  24B2  160A  158A  	fcall	_STOP_BLINKING
 14449                           
 14450                           ;CONTROL.c: 173:            DISP_MOTOR_DATA();
 14451  1E00  120A  158A  25FC   	fcall	_DISP_MOTOR_DATA
 14452                           
 14453                           ;CONTROL.c: 175:            HANDLERS_STATES[SET_ROTOR_PWR] = ON_WORK ;
 14454  1E03  1683               	bsf	3,5	;RP0=1, select bank3
 14455  1E04  1703               	bsf	3,6	;RP1=1, select bank3
 14456  1E05  0192               	clrf	(_HANDLERS_STATES^(0+384)+2)
 14457  1E06  0A92               	incf	(_HANDLERS_STATES^(0+384)+2),f
 14458                           
 14459                           ;CONTROL.c: 176:         break;
 14460  1E07  0008               	return
 14461  1E08                     i1l6098:	
 14462                           
 14463                           ;CONTROL.c: 178:             SET_ROTOR_PWR_HANDLER_ON_WORK ( );
 14464  1E08  120A  158A  28FF   	ljmp	i1l5072
 14465  1E0B                     i1l7084:	
 14466                           
 14467                           ; Switch size 1, requested type "speed"
 14468                           ; Number of cases is 2, Range of values is 0 to 1
 14469                           ; switch strategies available:
 14470                           ; Name         Instructions Cycles
 14471                           ; simple_byte            7     4 (average)
 14472                           ; direct_byte           14     8 (fixed)
 14473                           ; jumptable            260     6 (fixed)
 14474                           ;	Chosen strategy is simple_byte
 14475  1E0B  082A               	movf	??_SET_ROTOR_PWR_HANDLER,w
 14476  1E0C  3A00               	xorlw	0	; case 0
 14477  1E0D  1903               	skipnz
 14478  1E0E  2DFB               	goto	i1l6092
 14479  1E0F  3A01               	xorlw	1	; case 1
 14480  1E10  1903               	skipnz
 14481  1E11  2E08               	goto	i1l6098
 14482  1E12  2E13               	goto	i1l738
 14483  1E13                     i1l738:	
 14484  1E13  0008               	return
 14485  1E14                     __end_of_SET_ROTOR_PWR_HANDLER:	
 14486                           
 14487                           	psect	text60
 14488  1DCA                     __ptext60:	
 14489 ;; *************** function _SET_HEATING_HANDLER *****************
 14490 ;; Defined at:
 14491 ;;		line 147 in file "CONTROL.c"
 14492 ;; Parameters:    Size  Location     Type
 14493 ;;		None
 14494 ;; Auto vars:     Size  Location     Type
 14495 ;;		None
 14496 ;; Return value:  Size  Location     Type
 14497 ;;                  1    wreg      void 
 14498 ;; Registers used:
 14499 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 14500 ;; Tracked objects:
 14501 ;;		On entry : 0/0
 14502 ;;		On exit  : 0/0
 14503 ;;		Unchanged: 0/0
 14504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14505 ;;      Params:         0       0       0       0       0
 14506 ;;      Locals:         0       0       0       0       0
 14507 ;;      Temps:          0       2       0       0       0
 14508 ;;      Totals:         0       2       0       0       0
 14509 ;;Total ram usage:        2 bytes
 14510 ;; Hardware stack levels used:    1
 14511 ;; Hardware stack levels required when called:    5
 14512 ;; This function calls:
 14513 ;;		_DISP_HEATER_DATA
 14514 ;;		_SET_HEATING_HANDLER_ON_WORK
 14515 ;;		_STOP_BLINKING
 14516 ;; This function is called by:
 14517 ;;		_CONTROL_UPDATE
 14518 ;; This function uses a non-reentrant model
 14519 ;;
 14520                           
 14521                           
 14522                           ;psect for function _SET_HEATING_HANDLER
 14523  1DCA                     _SET_HEATING_HANDLER:	
 14524                           
 14525                           ;CONTROL.c: 160:         break;
 14526                           
 14527                           ;CONTROL.c: 149:     switch (HANDLERS_STATES[SET_HEATING])
 14528                           
 14529                           ;incstack = 0
 14530 ;; hardware stack exceeded
 14531                           ; Regs used in _SET_HEATING_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
 14532  1DCA  1683               	bsf	3,5	;RP0=1, select bank3
 14533  1DCB  1703               	bsf	3,6	;RP1=1, select bank3
 14534  1DCC  0811               	movf	(_HANDLERS_STATES^(0+384)+1),w
 14535  1DCD  1283               	bcf	3,5	;RP0=0, select bank0
 14536  1DCE  1303               	bcf	3,6	;RP1=0, select bank0
 14537  1DCF  00A8               	movwf	??_SET_HEATING_HANDLER
 14538  1DD0  01A9               	clrf	??_SET_HEATING_HANDLER+1
 14539                           
 14540                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14541                           ; Switch size 1, requested type "speed"
 14542                           ; Number of cases is 1, Range of values is 0 to 0
 14543                           ; switch strategies available:
 14544                           ; Name         Instructions Cycles
 14545                           ; simple_byte            4     3 (average)
 14546                           ; direct_byte           11     8 (fixed)
 14547                           ; jumptable            260     6 (fixed)
 14548                           ;	Chosen strategy is simple_byte
 14549  1DD1  0829               	movf	??_SET_HEATING_HANDLER+1,w
 14550  1DD2  3A00               	xorlw	0	; case 0
 14551  1DD3  1903               	skipnz
 14552  1DD4  2DE6               	goto	i1l7088
 14553  1DD5  2DEE               	goto	i1l730
 14554  1DD6                     i1l6074:	
 14555                           
 14556                           ;CONTROL.c: 152:             STOP_BLINKING();
 14557  1DD6  120A  158A  24B2  160A  158A  	fcall	_STOP_BLINKING
 14558                           
 14559                           ;CONTROL.c: 154:             DISP_HEATER_DATA();
 14560  1DDB  120A  158A  262A   	fcall	_DISP_HEATER_DATA
 14561                           
 14562                           ;CONTROL.c: 156:             HANDLERS_STATES[SET_HEATING] = ON_WORK ;
 14563  1DDE  1683               	bsf	3,5	;RP0=1, select bank3
 14564  1DDF  1703               	bsf	3,6	;RP1=1, select bank3
 14565  1DE0  0191               	clrf	(_HANDLERS_STATES^(0+384)+1)
 14566  1DE1  0A91               	incf	(_HANDLERS_STATES^(0+384)+1),f
 14567                           
 14568                           ;CONTROL.c: 157:         break;
 14569  1DE2  0008               	return
 14570  1DE3                     i1l6080:	
 14571                           
 14572                           ;CONTROL.c: 159:             SET_HEATING_HANDLER_ON_WORK();
 14573  1DE3  120A  158A  28AE   	ljmp	i1l5028
 14574  1DE6                     i1l7088:	
 14575                           
 14576                           ; Switch size 1, requested type "speed"
 14577                           ; Number of cases is 2, Range of values is 0 to 1
 14578                           ; switch strategies available:
 14579                           ; Name         Instructions Cycles
 14580                           ; simple_byte            7     4 (average)
 14581                           ; direct_byte           14     8 (fixed)
 14582                           ; jumptable            260     6 (fixed)
 14583                           ;	Chosen strategy is simple_byte
 14584  1DE6  0828               	movf	??_SET_HEATING_HANDLER,w
 14585  1DE7  3A00               	xorlw	0	; case 0
 14586  1DE8  1903               	skipnz
 14587  1DE9  2DD6               	goto	i1l6074
 14588  1DEA  3A01               	xorlw	1	; case 1
 14589  1DEB  1903               	skipnz
 14590  1DEC  2DE3               	goto	i1l6080
 14591  1DED  2DEE               	goto	i1l730
 14592  1DEE                     i1l730:	
 14593  1DEE  0008               	return
 14594  1DEF                     __end_of_SET_HEATING_HANDLER:	
 14595                           
 14596                           	psect	text87
 14597  1E64                     __ptext87:	
 14598 ;; *************** function _utoa *****************
 14599 ;; Defined at:
 14600 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c"
 14601 ;; Parameters:    Size  Location     Type
 14602 ;;  buf             1    wreg     PTR unsigned char 
 14603 ;;		 -> LCD_SEND_A_NUMBER@string(6), 
 14604 ;;  val             2    7[COMMON] unsigned int 
 14605 ;;  base            2    9[COMMON] int 
 14606 ;; Auto vars:     Size  Location     Type
 14607 ;;  buf             1    3[BANK0 ] PTR unsigned char 
 14608 ;;		 -> LCD_SEND_A_NUMBER@string(6), 
 14609 ;;  v               2    0[BANK0 ] unsigned int 
 14610 ;;  c               1    2[BANK0 ] unsigned char 
 14611 ;; Return value:  Size  Location     Type
 14612 ;;                  1    wreg      PTR unsigned char 
 14613 ;; Registers used:
 14614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14615 ;; Tracked objects:
 14616 ;;		On entry : 300/0
 14617 ;;		On exit  : B00/0
 14618 ;;		Unchanged: 0/0
 14619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14620 ;;      Params:         4       0       0       0       0
 14621 ;;      Locals:         0       4       0       0       0
 14622 ;;      Temps:          0       0       0       0       0
 14623 ;;      Totals:         4       4       0       0       0
 14624 ;;Total ram usage:        8 bytes
 14625 ;; Hardware stack levels used:    1
 14626 ;; Hardware stack levels required when called:    1
 14627 ;; This function calls:
 14628 ;;		___lwdiv
 14629 ;;		___lwmod
 14630 ;; This function is called by:
 14631 ;;		_itoa
 14632 ;; This function uses a non-reentrant model
 14633 ;;
 14634                           
 14635                           
 14636                           ;psect for function _utoa
 14637  1E64                     _utoa:	
 14638                           
 14639                           ;incstack = 0
 14640 ;; hardware stack exceeded
 14641                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14642                           ;utoa@buf stored from wreg
 14643  1E64  00A3               	movwf	utoa@buf
 14644  1E65  0878               	movf	utoa@val+1,w
 14645  1E66  00A1               	movwf	utoa@v+1
 14646  1E67  0877               	movf	utoa@val,w
 14647  1E68  00A0               	movwf	utoa@v
 14648  1E69                     i1l4452:	
 14649  1E69  087A               	movf	utoa@base+1,w
 14650  1E6A  00F1               	movwf	___lwdiv@divisor+1
 14651  1E6B  0879               	movf	utoa@base,w
 14652  1E6C  00F0               	movwf	___lwdiv@divisor
 14653  1E6D  0821               	movf	utoa@v+1,w
 14654  1E6E  00F3               	movwf	___lwdiv@dividend+1
 14655  1E6F  0820               	movf	utoa@v,w
 14656  1E70  00F2               	movwf	___lwdiv@dividend
 14657  1E71  26B1  160A  158A   	fcall	___lwdiv
 14658  1E74  0871               	movf	?___lwdiv+1,w
 14659  1E75  00A1               	movwf	utoa@v+1
 14660  1E76  0870               	movf	?___lwdiv,w
 14661  1E77  00A0               	movwf	utoa@v
 14662  1E78  0AA3               	incf	utoa@buf,f
 14663  1E79  0421               	iorwf	utoa@v+1,w
 14664  1E7A  1D03               	btfss	3,2
 14665  1E7B  2E69               	goto	i1l4452
 14666  1E7C  0823               	movf	utoa@buf,w
 14667  1E7D  0084               	movwf	4
 14668  1E7E  1383               	bcf	3,7	;select IRP bank0
 14669  1E7F  0180               	clrf	0
 14670  1E80  03A3               	decf	utoa@buf,f
 14671  1E81                     i1l4462:	
 14672  1E81  087A               	movf	utoa@base+1,w
 14673  1E82  00F1               	movwf	___lwmod@divisor+1
 14674  1E83  0879               	movf	utoa@base,w
 14675  1E84  00F0               	movwf	___lwmod@divisor
 14676  1E85  0878               	movf	utoa@val+1,w
 14677  1E86  00F3               	movwf	___lwmod@dividend+1
 14678  1E87  0877               	movf	utoa@val,w
 14679  1E88  00F2               	movwf	___lwmod@dividend
 14680  1E89  26DB  160A  158A   	fcall	___lwmod
 14681  1E8C  0870               	movf	?___lwmod,w
 14682  1E8D  00A2               	movwf	utoa@c
 14683  1E8E  087A               	movf	utoa@base+1,w
 14684  1E8F  00F1               	movwf	___lwdiv@divisor+1
 14685  1E90  0879               	movf	utoa@base,w
 14686  1E91  00F0               	movwf	___lwdiv@divisor
 14687  1E92  0878               	movf	utoa@val+1,w
 14688  1E93  00F3               	movwf	___lwdiv@dividend+1
 14689  1E94  0877               	movf	utoa@val,w
 14690  1E95  00F2               	movwf	___lwdiv@dividend
 14691  1E96  26B1  160A  158A   	fcall	___lwdiv
 14692  1E99  0871               	movf	?___lwdiv+1,w
 14693  1E9A  00F8               	movwf	utoa@val+1
 14694  1E9B  0870               	movf	?___lwdiv,w
 14695  1E9C  00F7               	movwf	utoa@val
 14696  1E9D  300A               	movlw	10
 14697  1E9E  0222               	subwf	utoa@c,w
 14698  1E9F  1C03               	skipc
 14699  1EA0  2EA3               	goto	i1l1653
 14700  1EA1  3007               	movlw	7
 14701  1EA2  07A2               	addwf	utoa@c,f
 14702  1EA3                     i1l1653:	
 14703  1EA3  3030               	movlw	48
 14704  1EA4  07A2               	addwf	utoa@c,f
 14705  1EA5  0823               	movf	utoa@buf,w
 14706  1EA6  0084               	movwf	4
 14707  1EA7  0822               	movf	utoa@c,w
 14708  1EA8  1383               	bcf	3,7	;select IRP bank0
 14709  1EA9  0080               	movwf	0
 14710  1EAA  03A3               	decf	utoa@buf,f
 14711  1EAB  0877               	movf	utoa@val,w
 14712  1EAC  0478               	iorwf	utoa@val+1,w
 14713  1EAD  1D03               	btfss	3,2
 14714  1EAE  2E81               	goto	i1l4462
 14715                           
 14716                           ;	Return value of _utoa is never used
 14717  1EAF  0AA3               	incf	utoa@buf,f
 14718  1EB0  0008               	return
 14719  1EB1                     __end_of_utoa:	
 14720  1EB1                     __ptext89:	
 14721 ;; *************** function ___lwdiv *****************
 14722 ;; Defined at:
 14723 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
 14724 ;; Parameters:    Size  Location     Type
 14725 ;;  divisor         2    0[COMMON] unsigned int 
 14726 ;;  dividend        2    2[COMMON] unsigned int 
 14727 ;; Auto vars:     Size  Location     Type
 14728 ;;  quotient        2    4[COMMON] unsigned int 
 14729 ;;  counter         1    6[COMMON] unsigned char 
 14730 ;; Return value:  Size  Location     Type
 14731 ;;                  2    0[COMMON] unsigned int 
 14732 ;; Registers used:
 14733 ;;		wreg, status,2, status,0
 14734 ;; Tracked objects:
 14735 ;;		On entry : 300/0
 14736 ;;		On exit  : 300/0
 14737 ;;		Unchanged: 300/0
 14738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14739 ;;      Params:         4       0       0       0       0
 14740 ;;      Locals:         3       0       0       0       0
 14741 ;;      Temps:          0       0       0       0       0
 14742 ;;      Totals:         7       0       0       0       0
 14743 ;;Total ram usage:        7 bytes
 14744 ;; Hardware stack levels used:    1
 14745 ;; This function calls:
 14746 ;;		Nothing
 14747 ;; This function is called by:
 14748 ;;		_utoa
 14749 ;; This function uses a non-reentrant model
 14750 ;;
 14751                           
 14752                           
 14753                           ;psect for function ___lwdiv
 14754  1EB1                     ___lwdiv:	
 14755                           
 14756                           ;incstack = 0
 14757 ;; hardware stack exceeded
 14758                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 14759  1EB1  01F4               	clrf	___lwdiv@quotient
 14760  1EB2  01F5               	clrf	___lwdiv@quotient+1
 14761  1EB3  0870               	movf	___lwdiv@divisor,w
 14762  1EB4  0471               	iorwf	___lwdiv@divisor+1,w
 14763  1EB5  1903               	btfsc	3,2
 14764  1EB6  2ED6               	goto	i1l4404
 14765  1EB7  01F6               	clrf	___lwdiv@counter
 14766  1EB8                     L26:	
 14767  1EB8  0AF6               	incf	___lwdiv@counter,f
 14768  1EB9  1BF1               	btfsc	___lwdiv@divisor+1,7
 14769  1EBA  2EBF               	goto	i1l4392
 14770  1EBB  1003               	clrc
 14771  1EBC  0DF0               	rlf	___lwdiv@divisor,f
 14772  1EBD  0DF1               	rlf	___lwdiv@divisor+1,f
 14773  1EBE  2EB8               	goto	L26
 14774  1EBF                     i1l4392:	
 14775  1EBF  1003               	clrc
 14776  1EC0  0DF4               	rlf	___lwdiv@quotient,f
 14777  1EC1  0DF5               	rlf	___lwdiv@quotient+1,f
 14778  1EC2  0871               	movf	___lwdiv@divisor+1,w
 14779  1EC3  0273               	subwf	___lwdiv@dividend+1,w
 14780  1EC4  1D03               	skipz
 14781  1EC5  2EC8               	goto	u345_25
 14782  1EC6  0870               	movf	___lwdiv@divisor,w
 14783  1EC7  0272               	subwf	___lwdiv@dividend,w
 14784  1EC8                     u345_25:	
 14785  1EC8  1C03               	skipc
 14786  1EC9  2ED2               	goto	L27
 14787  1ECA  0870               	movf	___lwdiv@divisor,w
 14788  1ECB  02F2               	subwf	___lwdiv@dividend,f
 14789  1ECC  0871               	movf	___lwdiv@divisor+1,w
 14790  1ECD  1C03               	skipc
 14791  1ECE  03F3               	decf	___lwdiv@dividend+1,f
 14792  1ECF  02F3               	subwf	___lwdiv@dividend+1,f
 14793  1ED0  1474               	bsf	___lwdiv@quotient,0
 14794  1ED1  1003               	clrc
 14795  1ED2                     L27:	
 14796  1ED2  0CF1               	rrf	___lwdiv@divisor+1,f
 14797  1ED3  0CF0               	rrf	___lwdiv@divisor,f
 14798  1ED4  0BF6               	decfsz	___lwdiv@counter,f
 14799  1ED5  2EBF               	goto	i1l4392
 14800  1ED6                     i1l4404:	
 14801  1ED6  0875               	movf	___lwdiv@quotient+1,w
 14802  1ED7  00F1               	movwf	?___lwdiv+1
 14803  1ED8  0874               	movf	___lwdiv@quotient,w
 14804  1ED9  00F0               	movwf	?___lwdiv
 14805  1EDA  0008               	return
 14806  1EDB                     __end_of___lwdiv:	
 14807  1EDB                     __ptext88:	
 14808 ;; *************** function ___lwmod *****************
 14809 ;; Defined at:
 14810 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
 14811 ;; Parameters:    Size  Location     Type
 14812 ;;  divisor         2    0[COMMON] unsigned int 
 14813 ;;  dividend        2    2[COMMON] unsigned int 
 14814 ;; Auto vars:     Size  Location     Type
 14815 ;;  counter         1    4[COMMON] unsigned char 
 14816 ;; Return value:  Size  Location     Type
 14817 ;;                  2    0[COMMON] unsigned int 
 14818 ;; Registers used:
 14819 ;;		wreg, status,2, status,0
 14820 ;; Tracked objects:
 14821 ;;		On entry : 300/0
 14822 ;;		On exit  : 300/0
 14823 ;;		Unchanged: 300/0
 14824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14825 ;;      Params:         4       0       0       0       0
 14826 ;;      Locals:         1       0       0       0       0
 14827 ;;      Temps:          0       0       0       0       0
 14828 ;;      Totals:         5       0       0       0       0
 14829 ;;Total ram usage:        5 bytes
 14830 ;; Hardware stack levels used:    1
 14831 ;; This function calls:
 14832 ;;		Nothing
 14833 ;; This function is called by:
 14834 ;;		_utoa
 14835 ;; This function uses a non-reentrant model
 14836 ;;
 14837                           
 14838                           
 14839                           ;psect for function ___lwmod
 14840  1EDB                     ___lwmod:	
 14841                           
 14842                           ;incstack = 0
 14843 ;; hardware stack exceeded
 14844                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 14845  1EDB  0870               	movf	___lwmod@divisor,w
 14846  1EDC  0471               	iorwf	___lwmod@divisor+1,w
 14847  1EDD  1903               	btfsc	3,2
 14848  1EDE  2EFA               	goto	i1l4424
 14849  1EDF  01F4               	clrf	___lwmod@counter
 14850  1EE0                     L24:	
 14851  1EE0  0AF4               	incf	___lwmod@counter,f
 14852  1EE1  1BF1               	btfsc	___lwmod@divisor+1,7
 14853  1EE2  2EE7               	goto	i1l4416
 14854  1EE3  1003               	clrc
 14855  1EE4  0DF0               	rlf	___lwmod@divisor,f
 14856  1EE5  0DF1               	rlf	___lwmod@divisor+1,f
 14857  1EE6  2EE0               	goto	L24
 14858  1EE7                     i1l4416:	
 14859  1EE7  0871               	movf	___lwmod@divisor+1,w
 14860  1EE8  0273               	subwf	___lwmod@dividend+1,w
 14861  1EE9  1D03               	skipz
 14862  1EEA  2EED               	goto	u349_25
 14863  1EEB  0870               	movf	___lwmod@divisor,w
 14864  1EEC  0272               	subwf	___lwmod@dividend,w
 14865  1EED                     u349_25:	
 14866  1EED  1C03               	skipc
 14867  1EEE  2EF6               	goto	L25
 14868  1EEF  0870               	movf	___lwmod@divisor,w
 14869  1EF0  02F2               	subwf	___lwmod@dividend,f
 14870  1EF1  0871               	movf	___lwmod@divisor+1,w
 14871  1EF2  1C03               	skipc
 14872  1EF3  03F3               	decf	___lwmod@dividend+1,f
 14873  1EF4  02F3               	subwf	___lwmod@dividend+1,f
 14874  1EF5  1003               	clrc
 14875  1EF6                     L25:	
 14876  1EF6  0CF1               	rrf	___lwmod@divisor+1,f
 14877  1EF7  0CF0               	rrf	___lwmod@divisor,f
 14878  1EF8  0BF4               	decfsz	___lwmod@counter,f
 14879  1EF9  2EE7               	goto	i1l4416
 14880  1EFA                     i1l4424:	
 14881  1EFA  0873               	movf	___lwmod@dividend+1,w
 14882  1EFB  00F1               	movwf	?___lwmod+1
 14883  1EFC  0872               	movf	___lwmod@dividend,w
 14884  1EFD  00F0               	movwf	?___lwmod
 14885  1EFE  0008               	return
 14886  1EFF                     __end_of___lwmod:	


Data Sizes:
    Strings     155
    Constant    0
    Data        33
    BSS         38
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      80
    BANK1            80     80      80
    BANK3            96     25      93
    BANK2            96      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> LCD_SEND_A_NUMBER@string(BANK0[6]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> LCD_SEND_A_NUMBER@string(BANK0[6]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> LCD_SEND_A_NUMBER@string(BANK0[6]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 6
		 -> LCD_SEND_A_NUMBER@string(BANK0[6]), 

    DISP_STATMENT@statment	PTR unsigned char  size(1) Largest target is 17
		 -> STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), STR_14(CODE[17]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> LCD_SEND_A_NUMBER@string(BANK0[6]), 

    LCD_SEND_A_STRING@string	PTR unsigned char  size(2) Largest target is 17
		 -> STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), STR_14(CODE[17]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), 
		 -> STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[17]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), STR_4(CODE[17]), STR_3(CODE[2]), STR_2(CODE[2]), 
		 -> STR_1(CODE[17]), LCD_SEND_A_NUMBER@string(BANK0[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _SYS_UPDATE in COMMON

    _SWs_UPDATE->_GPIO_PIN_GET_STATE
    i1_CCP1_PWM_DUTY_CYCLE_LOAD->i1___xxtofl
    _KEYPAD_UPDATE->i1_GPIO_PIN_SET_STATE
    _GPIO_PIN_GET_STATE->i1___bmul
    i1_CCP2_PWM_DUTY_CYCLE_LOAD->i1___xxtofl
    i1___fltol->i1___xxtofl
    i1___flmul->i1___xxtofl
    i1___fldiv->i1___xxtofl
    _LED_SET_STATE->i1_GPIO_PIN_SET_STATE
    _SW_GET_STATE->i1___bmul
    _itoa->_utoa
    _utoa->___lwdiv
    _LCD_SEND_CHARACTER->i1_GPIO_PIN_SET_STATE
    i1_LCD_SND_COMMAND->i1_GPIO_PIN_SET_STATE
    i1_GPIO_PIN_SET_STATE->i1___bmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _SYS_UPDATE in BANK0

    _MOTOR_UPDATE->i1_CCP1_PWM_DUTY_CYCLE_LOAD
    i1_CCP1_PWM_DUTY_CYCLE_LOAD->i1___fltol
    _HEATER_UPDATE->i1_CCP2_PWM_DUTY_CYCLE_LOAD
    i1_CCP2_PWM_DUTY_CYCLE_LOAD->i1___fltol
    i1___fltol->i1___flmul
    i1___flmul->i1___fldiv
    _CONTROL_UPDATE->_HEATING_HANDLER
    _SET_TIME_HANDLER_ON_WORK->_INCREMENT_THIS
    _INCREMENT_THIS->_DISP_UPDATE_TIME_UNIT_AT
    _GOTO_NEXT_DIGIT->_START_BLINKING_AT
    _DISP_UPDATE_TIME_UNIT_AT->_LCD_SEND_A_NUMBER
    _SET_ROTOR_PWR_HANDLER->_SET_ROTOR_PWR_HANDLER_ON_WORK
    _SET_ROTOR_PWR_HANDLER_ON_WORK->_START_BLINKING_AT
    _DISP_MOTOR_DATA->_LCD_SET_CURSOR
    _SET_HEATING_HANDLER->_SET_HEATING_HANDLER_ON_WORK
    _SET_HEATING_HANDLER_ON_WORK->_START_BLINKING_AT
    _START_BLINKING_AT->_LCD_SET_CURSOR
    _DISP_HEATER_DATA->_LCD_SET_CURSOR
    _HEATING_HANDLER->_DISP_SHOW_TIME_AT
    _HEATING_HANDLER->_DISP_UPDATE_TIME
    _STOP_HEATING->_LED_SET_STATE
    _DISP_UPDATE_TIME->_UPDATE_LCD_HOURS
    _DISP_UPDATE_TIME->_UPDATE_LCD_MINUTES
    _DISP_UPDATE_TIME->_UPDATE_LCD_SECONDS
    _FINISH_HANDLER->_DISP_STATMENT
    _DEFAULT_HANDLER->_DISP_SHOW_TIME_AT
    _STOP_BLINKING->i1_LCD_SND_COMMAND
    _DISP_STATMENT->_LCD_SET_CURSOR
    _DISP_SHOW_TIME_AT->_UPDATE_LCD_HOURS
    _DISP_SHOW_TIME_AT->_UPDATE_LCD_MINUTES
    _DISP_SHOW_TIME_AT->_UPDATE_LCD_SECONDS
    _UPDATE_LCD_SECONDS->_LCD_SEND_A_NUMBER
    _UPDATE_LCD_MINUTES->_LCD_SEND_A_NUMBER
    _UPDATE_LCD_HOURS->_LCD_SEND_A_NUMBER
    _LCD_SEND_A_NUMBER->_itoa
    _itoa->_utoa
    _DISP_SHOW_TIME->_LCD_SET_CURSOR
    _LCD_SET_CURSOR->i1_LCD_SND_COMMAND
    _LCD_SEND_A_STRING->_LCD_SEND_CHARACTER
    _LCD_CLEAR->i1_LCD_SND_COMMAND

Critical Paths under _main in BANK1

    _SWs_INIT->_GPIO_PIN_INIT
    _CCP1_INIT->_GPIO_PIN_INIT
    _LEDs_INIT->_GPIO_PIN_INIT
    _LCD_INIT->_GPIO_PIN_INIT
    _LCD_SND_COMMAND->_GPIO_PIN_SET_STATE
    _KEYPAD_INIT->_GPIO_PIN_INIT
    _CCP_PWM_PERIOD_LOAD->___fladd
    ___fladd->___flmul
    ___fltol->___fladd
    ___flmul->___fldiv
    ___fldiv->___xxtofl
    _CCP2_INIT->_GPIO_PIN_INIT
    _GPIO_PIN_INIT->___bmul

Critical Paths under _SYS_UPDATE in BANK1

    None.

Critical Paths under _main in BANK3

    _MOTOR_INIT->_CCP1_PWM_DUTY_CYCLE_LOAD
    _CCP1_PWM_DUTY_CYCLE_LOAD->___fltol
    _HEATER_INIT->_CCP2_PWM_DUTY_CYCLE_LOAD
    _CCP_PWM_PERIOD_LOAD->___fltol
    _CCP2_PWM_DUTY_CYCLE_LOAD->___fltol
    ___fltol->___fladd

Critical Paths under _SYS_UPDATE in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _SYS_UPDATE in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   61954
                       _CONTROL_INIT
                    _ENABLE_INTERUPT
                        _HEATER_INIT
                        _KEYPAD_INIT
                           _LCD_INIT
                          _LEDs_INIT
                         _MOTOR_INIT
                           _SWs_INIT
                        _TIMER0_INIT
                       _TIMER0_START
                          _TIME_INIT
 ---------------------------------------------------------------------------------
 (1) _TIME_INIT                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_START                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_INIT                                          0     0      0       0
                        _TIMER0_STOP
 ---------------------------------------------------------------------------------
 (2) _TIMER0_STOP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SWs_INIT                                             3     3      0    4162
                                             18 BANK1      3     3      0
                      _GPIO_PIN_INIT
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1    1026
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (1) _MOTOR_INIT                                           0     0      0   18190
                          _CCP1_INIT
           _CCP1_PWM_DUTY_CYCLE_LOAD
                _CCP_PWM_PERIOD_LOAD
                    _MOTOR_SET_STATE
 ---------------------------------------------------------------------------------
 (2) _MOTOR_SET_STATE                                      1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _CCP1_PWM_DUTY_CYCLE_LOAD                            11     9      2    7201
                                             14 BANK3     11     9      2
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _CCP1_INIT                                            0     0      0    2949
                      _GPIO_PIN_INIT
                        _TIMER2_INIT
                       _TIMER2_START
 ---------------------------------------------------------------------------------
 (1) _LEDs_INIT                                            1     1      0    5994
                                             18 BANK1      1     1      0
                      _GPIO_PIN_INIT
                 _GPIO_PIN_SET_STATE
 ---------------------------------------------------------------------------------
 (1) _LCD_INIT                                             1     1      0    9285
                                             18 BANK1      1     1      0
                      _GPIO_PIN_INIT
                 _GPIO_PIN_SET_STATE
                    _LCD_SND_COMMAND
 ---------------------------------------------------------------------------------
 (2) _LCD_SND_COMMAND                                      1     1      0    3447
                                             11 BANK1      1     1      0
                 _GPIO_PIN_SET_STATE
                _GPIO_PORT_SET_STATE
 ---------------------------------------------------------------------------------
 (3) _GPIO_PORT_SET_STATE                                  5     4      1     514
                                              0 BANK1      5     4      1
 ---------------------------------------------------------------------------------
 (1) _KEYPAD_INIT                                          1     1      0    6065
                                             18 BANK1      1     1      0
                      _GPIO_PIN_INIT
                 _GPIO_PIN_SET_STATE
 ---------------------------------------------------------------------------------
 (2) _GPIO_PIN_SET_STATE                                  11     9      2    2889
                                              0 BANK1     11     9      2
 ---------------------------------------------------------------------------------
 (1) _HEATER_INIT                                          0     0      0   18190
                          _CCP2_INIT
           _CCP2_PWM_DUTY_CYCLE_LOAD
                _CCP_PWM_PERIOD_LOAD
                   _HEATER_SET_STATE
 ---------------------------------------------------------------------------------
 (2) _HEATER_SET_STATE                                     1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _CCP_PWM_PERIOD_LOAD                                  5     3      2    8018
                                             14 BANK3      5     3      2
                            ___fladd
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    2242
                                             64 BANK1     16     8      8
                                              0 BANK3      4     4      0
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _CCP2_PWM_DUTY_CYCLE_LOAD                            11     9      2    7201
                                             14 BANK3     11     9      2
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     865
                                              0 BANK1     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     772
                                              4 BANK3     10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3935
                                             39 BANK1     25    17      8
                          __Umul8_16
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) __Umul8_16                                            8     5      3    1097
                                              0 BANK1      8     5      3
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1406
                                             14 BANK1     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _CCP2_INIT                                            0     0      0    2949
                      _GPIO_PIN_INIT
                        _TIMER2_INIT
                       _TIMER2_START
 ---------------------------------------------------------------------------------
 (3) _TIMER2_START                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TIMER2_INIT                                          0     0      0       0
                        _TIMER2_STOP
 ---------------------------------------------------------------------------------
 (4) _TIMER2_STOP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GPIO_PIN_INIT                                       15    13      2    2949
                                              3 BANK1     15    13      2
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ENABLE_INTERUPT                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CONTROL_INIT                                         1     1      0      68
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _SYS_UPDATE                                           4     4      0  178875
                                             71 BANK0      4     4      0
                     _CONTROL_UPDATE
                      _HEATER_UPDATE
                      _KEYPAD_UPDATE
                       _MOTOR_UPDATE
                         _SWs_UPDATE
                      _TIMER0_UPDATE
                        _TIME_UPDATE
 ---------------------------------------------------------------------------------
 (6) _TIME_UPDATE                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _TIMER0_UPDATE                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _SWs_UPDATE                                           6     6      0    1537
                                             10 COMMON     3     3      0
                                              0 BANK0      3     3      0
                 _GPIO_PIN_GET_STATE
                           i1___bmul
 ---------------------------------------------------------------------------------
 (6) _MOTOR_UPDATE                                         0     0      0    4287
         i1_CCP1_PWM_DUTY_CYCLE_LOAD
 ---------------------------------------------------------------------------------
 (7) i1_CCP1_PWM_DUTY_CYCLE_LOAD                          11     9      2    4287
                                             60 BANK0     11     9      2
                          i1___fldiv
                          i1___flmul
                          i1___fltol
                         i1___xxtofl
 ---------------------------------------------------------------------------------
 (6) _KEYPAD_UPDATE                                        5     5      0    1495
                                              0 BANK0      5     5      0
                 _GPIO_PIN_GET_STATE
               i1_GPIO_PIN_SET_STATE
 ---------------------------------------------------------------------------------
 (7) _GPIO_PIN_GET_STATE                                   7     6      1     317
                                              3 COMMON     7     6      1
                           i1___bmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _HEATER_UPDATE                                        0     0      0    4287
         i1_CCP2_PWM_DUTY_CYCLE_LOAD
 ---------------------------------------------------------------------------------
 (7) i1_CCP2_PWM_DUTY_CYCLE_LOAD                          11     9      2    4287
                                             60 BANK0     11     9      2
                          i1___fldiv
                          i1___flmul
                          i1___fltol
                         i1___xxtofl
 ---------------------------------------------------------------------------------
 (8) i1___xxtofl                                          14    10      4     374
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (8) i1___fltol                                           10     6      4     281
                                             50 BANK0     10     6      4
                          i1___fldiv (ARG)
                          i1___flmul (ARG)
                         i1___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (8) i1___flmul                                           25    17      8    2303
                                             25 BANK0     25    17      8
                        i1__Umul8_16
                          i1___fldiv (ARG)
                         i1___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (9) i1__Umul8_16                                          8     5      3     647
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (8) i1___fldiv                                           25    17      8    1206
                                              0 BANK0     25    17      8
                         i1___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) _CONTROL_UPDATE                                       2     2      0  167269
                                             25 BANK0      2     2      0
                    _DEFAULT_HANDLER
                     _FINISH_HANDLER
                    _HEATING_HANDLER
             _KEYPAD_GET_PRESSED_KEY
                _SET_HEATING_HANDLER
              _SET_ROTOR_PWR_HANDLER
                   _SET_TIME_HANDLER
 ---------------------------------------------------------------------------------
 (7) _SET_TIME_HANDLER                                     2     2      0   47140
                                             21 BANK0      2     2      0
                  _DISP_SHOW_TIME_AT
           _SET_TIME_HANDLER_ON_WORK
                      _STOP_BLINKING
 ---------------------------------------------------------------------------------
 (8) _SET_TIME_HANDLER_ON_WORK                             0     0      0   18950
                    _GOTO_NEXT_DIGIT
                     _INCREMENT_THIS
                       _SW_GET_STATE
 ---------------------------------------------------------------------------------
 (9) _INCREMENT_THIS                                       3     3      0   14452
                                             18 BANK0      3     3      0
           _DISP_UPDATE_TIME_UNIT_AT
                    _GOTO_NEXT_DIGIT
                     _LCD_SET_CURSOR
                            ___lbmod
                           i1___bmul
 ---------------------------------------------------------------------------------
 (10) ___lbmod                                             5     4      1     615
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (10) _GOTO_NEXT_DIGIT                                     3     3      0    3728
                                              6 BANK0      3     3      0
                  _START_BLINKING_AT
 ---------------------------------------------------------------------------------
 (10) _DISP_UPDATE_TIME_UNIT_AT                            2     1      1    6845
                                             16 BANK0      2     1      1
                  _LCD_SEND_A_NUMBER
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (7) _SET_ROTOR_PWR_HANDLER                                2     2      0   10964
                                             10 BANK0      2     2      0
                    _DISP_MOTOR_DATA
      _SET_ROTOR_PWR_HANDLER_ON_WORK
                      _STOP_BLINKING
 ---------------------------------------------------------------------------------
 (8) _SET_ROTOR_PWR_HANDLER_ON_WORK                        4     4      0    4613
                                              6 BANK0      4     4      0
             _KEYPAD_GET_PRESSED_KEY
                  _START_BLINKING_AT
                      _STOP_BLINKING
 ---------------------------------------------------------------------------------
 (9) _KEYPAD_GET_PRESSED_KEY                               4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _DISP_MOTOR_DATA                                      0     0      0    5315
                          _LCD_CLEAR
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (7) _SET_HEATING_HANDLER                                  2     2      0   10807
                                              8 BANK0      2     2      0
                   _DISP_HEATER_DATA
        _SET_HEATING_HANDLER_ON_WORK
                      _STOP_BLINKING
 ---------------------------------------------------------------------------------
 (8) _SET_HEATING_HANDLER_ON_WORK                          2     2      0    4456
                                              6 BANK0      2     2      0
                  _START_BLINKING_AT
                      _STOP_BLINKING
 ---------------------------------------------------------------------------------
 (11) _START_BLINKING_AT                                   1     1      0    3420
                                              5 BANK0      1     1      0
                     _LCD_SET_CURSOR
                  i1_LCD_SND_COMMAND
 ---------------------------------------------------------------------------------
 (8) _DISP_HEATER_DATA                                     0     0      0    5315
                          _LCD_CLEAR
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (7) _HEATING_HANDLER                                      5     5      0   59475
                                             20 BANK0      5     5      0
                  _DISP_SHOW_TIME_AT
                      _DISP_STATMENT
                   _DISP_UPDATE_TIME
                      _LED_SET_STATE
                      _STOP_BLINKING
                       _STOP_HEATING
                       _SW_GET_STATE
                           _TIME_GET
                      _TIME_START_AT
                 i1_HEATER_SET_STATE
                  i1_MOTOR_SET_STATE
 ---------------------------------------------------------------------------------
 (8) _TIME_START_AT                                        4     1      3     294
                                              0 COMMON     4     1      3
                      _TIME_CONTINUE
 ---------------------------------------------------------------------------------
 (9) _TIME_CONTINUE                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _STOP_HEATING                                         0     0      0    1894
                      _LED_SET_STATE
                           _TIME_GET
                          _TIME_STOP
                 i1_HEATER_SET_STATE
                  i1_MOTOR_SET_STATE
 ---------------------------------------------------------------------------------
 (8) i1_MOTOR_SET_STATE                                    1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_HEATER_SET_STATE                                   1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _TIME_STOP                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TIME_GET                                             3     0      3       0
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (9) _LED_SET_STATE                                        3     2      1    1850
                                              0 BANK0      3     2      1
               i1_GPIO_PIN_SET_STATE
                           i1___bmul
 ---------------------------------------------------------------------------------
 (8) _DISP_UPDATE_TIME                                     3     0      3   21777
                                             17 BANK0      3     0      3
                   _UPDATE_LCD_HOURS
                 _UPDATE_LCD_MINUTES
                 _UPDATE_LCD_SECONDS
 ---------------------------------------------------------------------------------
 (7) _FINISH_HANDLER                                       2     2      0    5335
                                              6 BANK0      2     2      0
                      _DISP_STATMENT
                       _SW_GET_STATE
 ---------------------------------------------------------------------------------
 (7) _DEFAULT_HANDLER                                      0     0      0   33525
                  _DISP_SHOW_TIME_AT
                      _DISP_STATMENT
                      _STOP_BLINKING
                       _SW_GET_STATE
 ---------------------------------------------------------------------------------
 (9) _SW_GET_STATE                                         2     2      0     770
                                              3 COMMON     2     2      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (7) i1___bmul                                             3     2      1     725
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (8) _STOP_BLINKING                                        0     0      0    1036
                  i1_LCD_SND_COMMAND
 ---------------------------------------------------------------------------------
 (8) _DISP_STATMENT                                        1     1      0    4565
                                              5 BANK0      1     1      0
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (8) _DISP_SHOW_TIME_AT                                    3     0      3   27154
                                             17 BANK0      3     0      3
                     _DISP_SHOW_TIME
                   _UPDATE_LCD_HOURS
                 _UPDATE_LCD_MINUTES
                 _UPDATE_LCD_SECONDS
 ---------------------------------------------------------------------------------
 (9) _UPDATE_LCD_SECONDS                                   1     1      0    7181
                                             16 BANK0      1     1      0
                  _LCD_SEND_A_NUMBER
                     _LCD_SET_CURSOR
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (9) _UPDATE_LCD_MINUTES                                   1     1      0    7181
                                             16 BANK0      1     1      0
                  _LCD_SEND_A_NUMBER
                     _LCD_SET_CURSOR
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (9) _UPDATE_LCD_HOURS                                     1     1      0    7181
                                             16 BANK0      1     1      0
                  _LCD_SEND_A_NUMBER
                     _LCD_SET_CURSOR
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (10) ___lbdiv                                             4     3      1     390
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (11) _LCD_SEND_A_NUMBER                                   8     6      2    4363
                                              8 BANK0      8     6      2
                  _LCD_SEND_A_STRING
                               _itoa
 ---------------------------------------------------------------------------------
 (12) _itoa                                                6     2      4    1612
                                             11 COMMON     2     2      0
                                              4 BANK0      4     0      4
                               _utoa
 ---------------------------------------------------------------------------------
 (13) _utoa                                                8     4      4    1264
                                              7 COMMON     4     0      4
                                              0 BANK0      4     4      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (14) ___lwmod                                             5     1      4     311
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (14) ___lwdiv                                             7     3      4     466
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (9) _DISP_SHOW_TIME                                       0     0      0    5315
                          _LCD_CLEAR
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (10) _LCD_SET_CURSOR                                      4     3      1    2362
                                              1 BANK0      4     3      1
                  i1_LCD_SND_COMMAND
 ---------------------------------------------------------------------------------
 (12) _LCD_SEND_A_STRING                                   2     0      2    1917
                                              1 BANK0      2     0      2
                 _LCD_SEND_CHARACTER
 ---------------------------------------------------------------------------------
 (13) _LCD_SEND_CHARACTER                                  1     1      0    1036
                                              0 BANK0      1     1      0
               i1_GPIO_PIN_SET_STATE
              i1_GPIO_PORT_SET_STATE
 ---------------------------------------------------------------------------------
 (10) _LCD_CLEAR                                           0     0      0    1036
                  i1_LCD_SND_COMMAND
 ---------------------------------------------------------------------------------
 (9) i1_LCD_SND_COMMAND                                    1     1      0    1036
                                              0 BANK0      1     1      0
               i1_GPIO_PIN_SET_STATE
              i1_GPIO_PORT_SET_STATE
 ---------------------------------------------------------------------------------
 (10) i1_GPIO_PORT_SET_STATE                               5     4      1     199
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (7) i1_GPIO_PIN_SET_STATE                                11     9      2     793
                                              3 COMMON    11     9      2
                           i1___bmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CONTROL_INIT
   _ENABLE_INTERUPT
   _HEATER_INIT
     _CCP2_INIT
       _GPIO_PIN_INIT
         ___bmul (ARG)
       _TIMER2_INIT
         _TIMER2_STOP
       _TIMER2_START
     _CCP2_PWM_DUTY_CYCLE_LOAD
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _CCP_PWM_PERIOD_LOAD
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _HEATER_SET_STATE
   _KEYPAD_INIT
     _GPIO_PIN_INIT
       ___bmul (ARG)
     _GPIO_PIN_SET_STATE
   _LCD_INIT
     _GPIO_PIN_INIT
       ___bmul (ARG)
     _GPIO_PIN_SET_STATE
     _LCD_SND_COMMAND
       _GPIO_PIN_SET_STATE
       _GPIO_PORT_SET_STATE
   _LEDs_INIT
     _GPIO_PIN_INIT
       ___bmul (ARG)
     _GPIO_PIN_SET_STATE
   _MOTOR_INIT
     _CCP1_INIT
       _GPIO_PIN_INIT
         ___bmul (ARG)
       _TIMER2_INIT
         _TIMER2_STOP
       _TIMER2_START
     _CCP1_PWM_DUTY_CYCLE_LOAD
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _CCP_PWM_PERIOD_LOAD
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _MOTOR_SET_STATE
   _SWs_INIT
     _GPIO_PIN_INIT
       ___bmul (ARG)
     ___bmul
   _TIMER0_INIT
     _TIMER0_STOP
   _TIMER0_START
   _TIME_INIT

 _SYS_UPDATE (ROOT)
   _CONTROL_UPDATE
     _DEFAULT_HANDLER
       _DISP_SHOW_TIME_AT
         _DISP_SHOW_TIME
           _LCD_CLEAR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SEND_A_STRING
             _LCD_SEND_CHARACTER
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
         _UPDATE_LCD_HOURS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_MINUTES
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_SECONDS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
       _DISP_STATMENT
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _STOP_BLINKING
         i1_LCD_SND_COMMAND
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1_GPIO_PORT_SET_STATE
       _SW_GET_STATE
         i1___bmul
     _FINISH_HANDLER
       _DISP_STATMENT
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _SW_GET_STATE
         i1___bmul
     _HEATING_HANDLER
       _DISP_SHOW_TIME_AT
         _DISP_SHOW_TIME
           _LCD_CLEAR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SEND_A_STRING
             _LCD_SEND_CHARACTER
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
         _UPDATE_LCD_HOURS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_MINUTES
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_SECONDS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
       _DISP_STATMENT
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _DISP_UPDATE_TIME
         _UPDATE_LCD_HOURS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_MINUTES
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_SECONDS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
       _LED_SET_STATE
         i1_GPIO_PIN_SET_STATE
           i1___bmul (ARG)
         i1___bmul
       _STOP_BLINKING
         i1_LCD_SND_COMMAND
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1_GPIO_PORT_SET_STATE
       _STOP_HEATING
         _LED_SET_STATE
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1___bmul
         _TIME_GET
         _TIME_STOP
         i1_HEATER_SET_STATE
         i1_MOTOR_SET_STATE
       _SW_GET_STATE
         i1___bmul
       _TIME_GET
       _TIME_START_AT
         _TIME_CONTINUE
       i1_HEATER_SET_STATE
       i1_MOTOR_SET_STATE
     _KEYPAD_GET_PRESSED_KEY
     _SET_HEATING_HANDLER
       _DISP_HEATER_DATA
         _LCD_CLEAR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _SET_HEATING_HANDLER_ON_WORK
         _START_BLINKING_AT
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _STOP_BLINKING
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _STOP_BLINKING
         i1_LCD_SND_COMMAND
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1_GPIO_PORT_SET_STATE
     _SET_ROTOR_PWR_HANDLER
       _DISP_MOTOR_DATA
         _LCD_CLEAR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _SET_ROTOR_PWR_HANDLER_ON_WORK
         _KEYPAD_GET_PRESSED_KEY
         _START_BLINKING_AT
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _STOP_BLINKING
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _STOP_BLINKING
         i1_LCD_SND_COMMAND
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1_GPIO_PORT_SET_STATE
     _SET_TIME_HANDLER
       _DISP_SHOW_TIME_AT
         _DISP_SHOW_TIME
           _LCD_CLEAR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SEND_A_STRING
             _LCD_SEND_CHARACTER
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
         _UPDATE_LCD_HOURS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_MINUTES
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_SECONDS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
       _SET_TIME_HANDLER_ON_WORK
         _GOTO_NEXT_DIGIT
           _START_BLINKING_AT
             _LCD_SET_CURSOR
               i1_LCD_SND_COMMAND
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
         _INCREMENT_THIS
           _DISP_UPDATE_TIME_UNIT_AT
             _LCD_SEND_A_NUMBER
               _LCD_SEND_A_STRING
                 _LCD_SEND_CHARACTER
                   i1_GPIO_PIN_SET_STATE
                     i1___bmul (ARG)
                   i1_GPIO_PORT_SET_STATE
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _LCD_SET_CURSOR
               i1_LCD_SND_COMMAND
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
           _GOTO_NEXT_DIGIT
             _START_BLINKING_AT
               _LCD_SET_CURSOR
                 i1_LCD_SND_COMMAND
                   i1_GPIO_PIN_SET_STATE
                     i1___bmul (ARG)
                   i1_GPIO_PORT_SET_STATE
               i1_LCD_SND_COMMAND
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbmod
           i1___bmul
         _SW_GET_STATE
           i1___bmul
       _STOP_BLINKING
         i1_LCD_SND_COMMAND
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1_GPIO_PORT_SET_STATE
   _HEATER_UPDATE
     i1_CCP2_PWM_DUTY_CYCLE_LOAD
       i1___fldiv
         i1___xxtofl (ARG)
       i1___flmul
         i1__Umul8_16
         i1___fldiv (ARG)
           i1___xxtofl (ARG)
         i1___xxtofl (ARG)
       i1___fltol
         i1___fldiv (ARG)
           i1___xxtofl (ARG)
         i1___flmul (ARG)
           i1__Umul8_16
           i1___fldiv (ARG)
             i1___xxtofl (ARG)
           i1___xxtofl (ARG)
         i1___xxtofl (ARG)
       i1___xxtofl
   _KEYPAD_UPDATE
     _GPIO_PIN_GET_STATE
       i1___bmul (ARG)
     i1_GPIO_PIN_SET_STATE
       i1___bmul (ARG)
   _MOTOR_UPDATE
     i1_CCP1_PWM_DUTY_CYCLE_LOAD
       i1___fldiv
         i1___xxtofl (ARG)
       i1___flmul
         i1__Umul8_16
         i1___fldiv (ARG)
           i1___xxtofl (ARG)
         i1___xxtofl (ARG)
       i1___fltol
         i1___fldiv (ARG)
           i1___xxtofl (ARG)
         i1___flmul (ARG)
           i1__Umul8_16
           i1___fldiv (ARG)
             i1___xxtofl (ARG)
           i1___xxtofl (ARG)
         i1___xxtofl (ARG)
       i1___xxtofl
   _SWs_UPDATE
     _GPIO_PIN_GET_STATE
       i1___bmul (ARG)
     i1___bmul
   _TIMER0_UPDATE
   _TIME_UPDATE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     19      5D       9       96.9%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     50      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4B      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     10B      12        0.0%
ABS                  0      0     10B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Mar 15 12:13:09 2020

                       ??_MOTOR_SET_STATE 00A0                        __size_of_CCP1_INIT 0012  
                      __size_of_CCP2_INIT 0012              ?_SET_HEATING_HANDLER_ON_WORK 0070  
                            ___fldiv@aexp 00C6                              ___fldiv@bexp 00C5  
                                       pc 0002                              ___fldiv@sign 00BE  
                          ___bmul@product 00A1                               i1___fldiv@a 0020  
                             i1___fldiv@b 0024                               __CFG_CP$OFF 0000  
                             i1___flmul@a 003D                               i1___flmul@b 0039  
                                      fsr 0004               __size_of_GPIO_PIN_GET_STATE 001D  
                     __Umul8_16@word_mpld 00A6                             _GPIO_PIN_INIT 0549  
                              i1___xxtofl 0363                                       l937 07F0  
                                     _GIE 005F                                       _PR2 0092  
                            __CFG_CPD$OFF 0000                                       _PSA 040B  
                            _STOP_HEATING 0A61                   ??_SET_ROTOR_PWR_HANDLER 002A  
                                     _SWs 01B2                                       fsr0 0004  
                                     indf 0000                              i1___fltol@f1 0052  
              __size_ofi1_MOTOR_SET_STATE 0005           __size_of_KEYPAD_GET_PRESSED_KEY 000B  
                            __CFG_FOSC$HS 0000                              ?_KEYPAD_INIT 0070  
                            ___flmul@aexp 00D4                              ___flmul@bexp 00D9  
                         _DISP_MOTOR_DATA 0DFC                 UPDATE_LCD_MINUTES@MINUTES 0030  
                            ___flmul@sign 00D3                              ___flmul@temp 00DE  
                            ___flmul@prod 00DA                GOTO_NEXT_DIGIT@count_right 01A5  
                            __CFG_LVP$OFF 0000                             i1___fldiv@grs 0033  
                           i1___fldiv@rem 002C                              ___fltol@exp1 01DF  
                                    l1500 115E                                      l1600 1585  
                                    l1513 120E                                      l1507 119B  
                                    l1508 119D                                      l1533 126E  
                                    l1517 1229                                      l1542 1677  
                                    l1518 122E                                      l1543 1674  
                                    l1546 168F                                      l1626 160D  
                                    l1490 10E8                                      l1571 177E  
                                    l1547 168C                                      l1491 10E4  
                                    l1485 10C1                                      l1582 13BC  
                                    l1486 10BD                                      l1583 13BA  
                                    l1639 1643                                      l1496 1171  
                                    l1665 15EB                                      l1578 13A5  
                                    l5130 178A                                      l1498 1155  
                                    l5202 10ED                                      l1579 13A3  
                                    l1499 115C                                      l5132 178F  
                                    l5150 17B5                                      l5310 1241  
                                    l5302 1233                                      l6030 0808  
                                    l5304 1236                                      l5208 10F6  
                                    l5146 17AD                                      l5314 1244  
                                    l5250 1163                                      l5420 1707  
                                    l5500 13A9                                      l5156 17B9  
                                    l5260 117C                                      l5180 10C6  
                                    l5172 10B2                                      l5414 16E8  
                                    l5422 16D0                                      l5158 17C3  
                                    l5334 1269                                      l5326 125A  
                                    l5270 11A2                                      l5254 116B  
                                    l5238 1125                                      l5440 1722  
                                    l5424 1709                                      l5512 13C0  
                                    l5450 1738                                      l5362 167B  
                                    l5338 1270                                      l5290 121F  
                                    l5274 11AB                                      l5194 10D9  
                                    l6410 0488                                      l5460 174C  
                                    l5516 13CA                                      l5620 161A  
                                    l5612 1605                                      l5284 1200  
                                    l4726 17F4                                      l5446 1736  
                                    l5438 170F                                      l4830 159E  
                                    l5630 1637                                      l5622 1625  
                                    l6430 04B9                                      l5472 1776  
                                    l5376 1693                                      l5624 1632  
                                    l5616 1618                                      l5466 1760  
                                    l4842 15B4                                      l5570 1539  
                                    l5642 1659                                      l6442 04D8  
                                    l5396 16B4                                      l5388 16AC  
                                    l4860 15D5                                      l4836 15A9  
                                    l5564 1525                                      l5628 1641  
                                    l5478 177F                                      l4854 15CA  
                                    l5574 153B                                      l6454 04EB  
                                    l4848 15BF                                      l5584 154F  
                                    l4866 15E0                                      l5594 1578  
                                    l6394 044D                                      l6386 0427  
                                    l5588 1563                                      l6728 07B9  
                                    l6668 1D6F                                      STR_1 0795  
                                    STR_2 07B7                                      STR_3 072D  
                                    STR_4 07A6                                      STR_5 07B7  
                                    STR_6 072D                                      STR_7 0784  
                                    STR_8 07B7                                      STR_9 072D  
                          ?_LED_SET_STATE 0020                             _STOP_BLINKING 0CB2  
                                    _T0CS 040D                                      _T0SE 040C  
                                    u4124 0551                                      u4125 054F  
                                    u4134 0568                                      u4135 0566  
                                    u4144 05C4                                      u4145 05C2  
                                    u4154 05D4                                      u4155 05D2  
                                    _PEIE 005E                                      u5085 1755  
                                    u5325 1558                                      u5095 176B  
                                    u5335 156E                                      _LEDs 01CF  
                                    u4560 1149                                      u4570 114A  
                                    u4395 1798                                      u4555 113D  
                                    u4673 11BE                        __size_of_LCD_CLEAR 000B  
                                    u4985 16F6                                      u6857 0545  
                                    _TMR0 0001                                      _TMR2 0011  
                              _SYS_UPDATE 080C                  __end_of_DISP_HEATER_DATA 0E58  
                            __CFG_WRT$OFF 0000                                      _main 07B9  
             __end_of_SET_HEATING_HANDLER 1DEF                                      _itoa 0F95  
                           i1___flmul@grs 0047                                      btemp 007E  
                                    _utoa 1E64                   __end_of_ENABLE_INTERUPT 1D47  
               UPDATE_LCD_SECONDS@SECONDS 0030                                      start 0012  
                         ___fldiv@new_exp 00BF               __size_of_GPIO_PIN_SET_STATE 002A  
                       ___bmul@multiplier 00A2                             _KEYPAD_UPDATE 0D45  
                 __end_of_DEFAULT_HANDLER 09B4                     __end_of_HEATER_UPDATE 1DA6  
                      __size_of_LEDs_INIT 0030                     __end_of_TIMER0_UPDATE 1000  
                        __end_of_LCD_INIT 0549                               ?_MOTOR_INIT 0070  
           ??_SET_HEATING_HANDLER_ON_WORK 0026                            i1___fldiv@aexp 0038  
                          i1___fldiv@bexp 0037                            i1___fldiv@sign 0030  
                          ?_GPIO_PIN_INIT 00A3                             ___fltol@sign1 01DE  
                         __end_of___fladd 127B                                     ?_main 0070  
                         __end_of___fldiv 1783                                     ?_itoa 0024  
                         __end_of___lbdiv 0D07                                     STR_10 0762  
                                   STR_11 0773                                     STR_12 071E  
                                   STR_13 072F                                     STR_14 0740  
                                   STR_15 0740                                     STR_16 0751  
                                   STR_17 0773                             __CFG_WDTE$OFF 0000  
                         __end_of___lbmod 0B6D                           __end_of___flmul 1590  
                         __end_of___fltol 17D2                                     ?_utoa 0077  
                         __end_of___lwdiv 1EDB                           __end_of___lwmod 1EFF  
                                   i1l612 1E63                                     i1l294 0B79  
                                   i1l385 0ECC                                     i1l730 1DEE  
                                   i1l722 1F2B                                     i1l754 0A55  
                                   i1l738 1E13                                     i1l764 0FF9  
                                   i1l932 0827                        __size_of_TIME_INIT 0009  
                         _HEATING_HANDLER 09B4                             __CFG_PWRTE$ON 0000  
                      __size_of_TIME_STOP 0004                     __size_of_SW_GET_STATE 000B  
                        __end_of_TIME_GET 0CBE                ??_CCP2_PWM_DUTY_CYCLE_LOAD 01E2  
       __size_of_DISP_UPDATE_TIME_UNIT_AT 000C                         __end_of_CCP1_INIT 1032  
                       __end_of_CCP2_INIT 17E4                            i1___flmul@aexp 0046  
                          i1___flmul@bexp 004B                 __size_of_HEATER_SET_STATE 0005  
               ?_DISP_UPDATE_TIME_UNIT_AT 0030                            ?_STOP_BLINKING 0070  
                              _SWs_UPDATE 0B6D                            i1___flmul@sign 0045  
                          i1___flmul@temp 0050                      __size_of_HEATER_INIT 0015  
                          i1___flmul@prod 004C               __size_of_UPDATE_LCD_MINUTES 001F  
             __size_of_UPDATE_LCD_SECONDS 001F                          _DISP_UPDATE_TIME 0879  
                        __end_ofi1___bmul 0C9D                            __CFG_BOREN$OFF 0000  
                                   pclath 000A                            i1___fltol@exp1 005B  
                                   utoa@c 0022                                     utoa@v 0020  
           _CCP2_PWM_DUTY_CYCLE_LOAD$2215 01E5                                     status 0003  
                                   wtemp0 007E                        __size_ofi1___fldiv 011E  
                      __size_ofi1___flmul 01FE                        __size_ofi1___fltol 004F  
                         ___lbdiv@divisor 0070                           ___lbdiv@counter 0072  
                  _KEYPAD_GET_PRESSED_KEY 0FAF                            ?_KEYPAD_UPDATE 0070  
       __size_of_CCP1_PWM_DUTY_CYCLE_LOAD 008B                      DISP_UPDATE_TIME@time 0031  
               ?_CCP1_PWM_DUTY_CYCLE_LOAD 01E0                           __initialization 0015  
                        __end_of_SWs_INIT 045D                              __end_of_main 07F1  
                            __end_of_itoa 0FAF                              __end_of_utoa 1EB1  
            DISP_UPDATE_TIME_UNIT_AT@UNIT 0031                         __end_of_LCD_CLEAR 0ED8  
                            _SW_GET_STATE 0A56                   __end_of_DISP_MOTOR_DATA 0E2A  
                            ?_TIMER0_INIT 0070                     __end_of_TIME_CONTINUE 0D45  
                            ?_TIMER2_INIT 0070                                    ??_main 00F0  
                            ?_TIMER0_STOP 0070                               ?i1___xxtofl 0070  
                                  ??_itoa 007B                              ?_TIMER2_STOP 0070  
                                  ??_utoa 007B                    LCD_SND_COMMAND@command 00AB  
                        ??_INCREMENT_THIS 0032                      __end_of_CONTROL_INIT 1D84  
              SWs_UPDATE@SW_timer_counter 01B1                           ??_LED_SET_STATE 007E  
                       __end_of_LEDs_INIT 04B7               ?i1_CCP2_PWM_DUTY_CYCLE_LOAD 005C  
    __size_of_SET_HEATING_HANDLER_ON_WORK 0051                                    i1S7076 07F1  
                                  _CCPR1L 0015                                    _CCPR2L 001B  
                            ?_TIME_UPDATE 0070                                    i1l1402 0CF8  
                                  i1l1600 02F8                                    i1l1542 0604  
                                  i1l1543 0602                                    i1l1546 061B  
                                  i1l1626 0380                                    i1l1571 0709  
                                  i1l1547 0619                                    i1l5100 0949  
                                  i1l1653 1EA3                                    i1l5030 08AF  
                                  i1l5022 1F4B                                    i1l1582 0130  
                                  i1l1583 012E                                    i1l1639 03B6  
                                  i1l5032 08B4                                    i1l5040 08D5  
                                  i1l5024 1F4D                                    i1l5008 1F2C  
                                  i1l1665 035E                                    i1l5050 08E4  
                                  i1l5034 08B9                                    i1l5106 0952  
                                  i1l5018 1F43                                    i1l1578 0119  
                                  i1l1579 0117                                    i1l4404 1ED6  
                                  i1l5028 08AE                                    i1l6110 09CB  
                                  i1l5062 08F7                                    i1l5054 08EB  
                                  i1l5046 08DF                                    i1l5038 08BE  
                                  i1l4520 0EB2                                    i1l4416 1EE7  
                                  i1l4424 1EFA                                    i1l5072 08FF  
                                  i1l4514 0EA6                                    i1l6122 09F7  
                                  i1l5074 0900                                    i1l5082 090F  
                                  i1l4610 1FC4                                    i1l4516 0EAA  
                                  i1l4524 0EB6                                    i1l4452 1E69  
                                  i1l4508 0FA3                                    i1l4532 0CDD  
                                  i1l5092 0939                                    i1l5076 0905  
                                  i1l5084 0926                                    i1l4604 1FBF  
                                  i1l4612 1FE0                                    i1l4518 0EAE  
                                  i1l4462 1E81                                    i1l6230 09AB  
                                  i1l6222 0999                                    i1l5078 090A  
                                  i1l4550 1F69                                    i1l6062 1F22  
                                  i1l6054 1F0B                                    i1l4392 1EBF  
                                  i1l6136 0A14                                    i1l6080 1DE3  
                                  i1l5096 0940                                    i1l4624 1FFA  
                                  i1l4800 0AF6                                    i1l4490 0E86  
                                  i1l6226 09A2                                    i1l6218 0994  
                                  i1l6146 0A27                                    i1l6074 1DD6  
                                  i1l4618 1FED                                    i1l4570 1F89  
                                  i1l4562 1F7D                                    i1l4546 1F63  
                                  i1l4802 0B03                                    i1l4810 0B3E  
                                  i1l4652 0D05                                    i1l6156 0A3A  
                                  i1l6092 1DFB                                    i1l4580 1F98  
                                  i1l4572 1F8D                                    i1l4564 1F81  
                                  i1l4548 1F67                                    i1l4660 0B55  
                                  i1l4804 0B15                                    i1l6340 0B7B  
                                  i1l4638 0CF2                                    i1l4742 0CB2  
                                  i1l4590 1FA6                                    i1l4582 1F9A  
                                  i1l4574 1F8F                                    i1l4566 1F83  
                                  i1l4910 033D                                    i1l7070 1E57  
                                  i1l4496 0E86                                    i1l6176 0FBB  
                                  i1l6192 0FE5                                    i1l4816 0B4D  
                                  i1l7080 0B2A                                    i1l4808 0B22  
                                  i1l4904 0332                                    i1l7072 0C5D  
                                  i1l4770 0DF3                                    i1l4762 0CD4  
                                  i1l4754 0D1D                                    i1l6186 0FC7  
                                  i1l7090 08CA                                    i1l6098 1E08  
                                  i1l7082 1FCC                                    i1l4594 1FAB  
                                  i1l4586 1F9F                                    i1l4578 1F94  
                                  i1l7074 0869                                    i1l5802 06EB  
                                  i1l4922 0353                                    i1l5650 03E1  
                                  i1l6602 1D9D                                    i1l6530 0DCE  
                                  i1l6514 0DA3                                    i1l6354 0BEE  
                                  i1l6370 0C4A                                    i1l7092 0A4D  
                                  i1l7084 1E0B                                    i1l4668 0B69  
                                  i1l5732 0640                                    i1l5724 0638  
                                  i1l4916 0348                                    i1l5900 0299  
                                  i1l6508 0D8A                                    i1l6364 0C2F  
                                  i1l6372 0C6B                                    i1l6348 0BC4  
                                  i1l6198 0962                                    i1l7094 0FF1  
                                  i1l4782 0D42                                    i1l7086 091B  
                                  i1l7078 1F23                                    i1l6702 085F  
                                  i1l5814 070A                                    i1l5750 0674  
                                  i1l5910 02AE                                    i1l6358 0C09  
                                  i1l6630 1E35                                    i1l6614 1E22  
                                  i1l7096 0EBE                                    i1l7088 1DE6  
                                  i1l6704 0876                                    i1l5808 0701  
                                  i1l5760 0695                                    i1l5920 02C2  
                                  i1l5664 03FF                                    i1l5648 03DC  
                                  i1l6640 1E45                                    i1l6632 1E37  
                                  i1l6624 1E2E                                    i1l4970 089B  
                                  i1l4794 0AC5                                    i1l5930 02EB  
                                  i1l5906 02AC                                    i1l5674 040B  
                                  i1l6538 0DDA                                    i1l6474 0D52  
                                  i1l6570 1DC1                                    i1l6562 1DB7  
                                  i1l6642 1E47                                    i1l6618 1E27  
                                  i1l4796 0AD7                                    i1l5756 0693  
                                  i1l4892 031C                                    i1l5924 02D6  
                                  i1l5852 013E                                    i1l5836 011D  
                                  i1l5676 0415                                    i1l5668 0407  
                                  i1l6644 1E43                                    i1l6636 1E3D  
                                  i1l4798 0AE4                                    i1l5782 06C1  
                                  i1l5774 069B                                    i1l5758 065C  
                                  i1l4886 0311                                    i1l6566 1DBD  
                                  i1l6654 1E4F                                    i1l5776 06AE  
                                  i1l5848 0134                                    i1l5960 03A5  
                                  i1l5952 038B                                    i1l6496 0D76  
                                  i1l6488 0D66                                    i1l6656 1E5F  
                                  i1l6690 0845                                    i1l5786 06C3  
                                  i1l4898 0327                                    i1l6594 1D93  
                                  i1l6692 084B                                    i1l5796 06D7  
                                  i1l5964 03B4                                    i1l5956 038D  
                                  i1l5948 0378                                    i1l6694 0851  
                                  i1l5966 03AA                                    i1l5958 0398  
                                  i1l6598 1D99                                    i1l6696 0857  
                                  i1l6698 085B                                    i1l5978 03CC  
                             ?_SYS_UPDATE 0070                                    u351_24 0F4C  
                                  u351_25 0F4A                                    u352_24 0F5C  
                                  u352_25 0F5A                       __size_of_MOTOR_INIT 0015  
                                  u345_25 1EC8                                    u610_24 0F85  
                                  u610_25 0F83                                    u611_24 0F8F  
                                  u611_25 0F8D                                    u349_25 1EED  
                                  u618_20 0FD0                                    u618_22 0FD1  
                                  u546_25 03EA                                    u619_20 0FDA  
                                  u619_22 0FDB                                    u563_25 0682  
                                  u573_25 06E0                                    u574_25 06F6  
                                  _TMR0IE 005D                                    _TMR0IF 005A  
                                  u597_25 02CB                                    _TMR2IE 0461  
                                  u598_25 02E1                ??_SET_TIME_HANDLER_ON_WORK 007E  
                                  _TMR2ON 0092                     __end_of_TIME_START_AT 0D36  
                       ?_UPDATE_LCD_HOURS 0070                          __end_of___xxtofl 1662  
                 __size_of_FINISH_HANDLER 0040                          ?_ENABLE_INTERUPT 0070  
                      ??_UPDATE_LCD_HOURS 007E                __end_ofi1_HEATER_SET_STATE 0CA0  
                       __end_of_TIME_INIT 1D5C                          ??_LCD_SET_CURSOR 0022  
                       __end_of_TIME_STOP 0D2A                   LCD_SEND_A_NUMBER@string 002A  
                        ?_DEFAULT_HANDLER 0070                                    ___bmul 045D  
                               ??___fladd 00E8                                 ??___fldiv 00B6  
                               ??___lbdiv 0071                                 ??___lbmod 0071  
                               ??___flmul 00CF                   GPIO_PIN_INIT@GPIO_PORTx 00B1  
                               ??___fltol 01DA                           ??_GPIO_PIN_INIT 00A5  
                               ??___lwdiv 0074                                 ??___lwmod 0074  
                 __end_of_HEATING_HANDLER 0A56                  KEYPAD_UPDATE@ROW_counter 0023  
                       __end_ofi1___fldiv 070E                         __end_ofi1___flmul 0303  
                       __end_ofi1___fltol 0424                        __size_of__Umul8_16 0060  
                 SWs_INIT@Samples_Counter 00B3  SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY 0028  
                                  saved_w 007E                         _DISP_SHOW_TIME_AT 0CA5  
                         i1___fltol@sign1 005A                           ??_STOP_BLINKING 007E  
                   GPIO_PIN_GET_STATE@ret 0079                         i1_LCD_SND_COMMAND 0F0E  
                      ?_DISP_SHOW_TIME_AT 0031                               ?_SWs_UPDATE 0070  
                            _DESIRED_HEAT 01EB                      __size_of_KEYPAD_INIT 0043  
                        ___lbdiv@dividend 0071              __end_ofi1_GPIO_PIN_SET_STATE 0F6E  
                      ?i1_LCD_SND_COMMAND 0070                           _MOTOR_SET_STATE 17FB  
                            ___xxtofl@arg 00AA                                 ?_LCD_INIT 0070  
                            ___xxtofl@exp 00A9                              ___xxtofl@val 00A0  
            __size_of_CCP_PWM_PERIOD_LOAD 0047                  __size_of_LCD_SND_COMMAND 003A  
                         ___lbmod@divisor 0070                   __end_of__initialization 002F  
                         ___lbmod@counter 0073                         ?_SET_TIME_HANDLER 0070  
                     ??_DISP_SHOW_TIME_AT 007E                           ??_KEYPAD_UPDATE 0020  
                     __size_ofi1___xxtofl 0072               __end_of_GPIO_PORT_SET_STATE 05F0  
                        LEDs_INIT@counter 00B2                                ___fltol@f1 01D6  
                            ?i1__Umul8_16 0070                       ??i1_LCD_SND_COMMAND 007E  
                      ??_SET_TIME_HANDLER 0035                       ___bmul@multiplicand 00A0  
                       _START_BLINKING_AT 0959           i1_CCP2_PWM_DUTY_CYCLE_LOAD$2353 0061  
                          __pcstackCOMMON 0070                                 ?_TIME_GET 0070  
                            __pidataBANK0 0000                              __pidataBANK3 1000  
                      ?_START_BLINKING_AT 0070                  __size_of_GOTO_NEXT_DIGIT 00A1  
                        ___lbdiv@quotient 0073                                 ?i1___bmul 0070  
                        ?_DISP_MOTOR_DATA 0070                       __size_of_SYS_UPDATE 0026  
               __end_of_DISP_SHOW_TIME_AT 0CB2                       ??_START_BLINKING_AT 007E  
                          _OPTION_REGbits 0081                 __end_ofi1_LCD_SND_COMMAND 0F45  
                   __end_of_DISP_STATMENT 0A91            __size_of_SET_ROTOR_PWR_HANDLER 0025  
           __end_of_SET_ROTOR_PWR_HANDLER 1E14                __end_of_LCD_SEND_CHARACTER 0F0E  
                       _TIME_TICKING_TYPE 01AA                          i1___bmul@product 0072  
                           ?_TIMER0_START 0070                          _HEATER_SET_STATE 17F6  
                           ?_TIMER2_START 0070                     i1_GPIO_PORT_SET_STATE 0F6E  
                               ?_SWs_INIT 0070                             _current_angle 01AF  
                              __pbssBANK0 006B                                __pbssBANK3 0190  
                           ?_MOTOR_UPDATE 0070                                ??_LCD_INIT 00B2  
                       ?_DISP_HEATER_DATA 0070                            i1___xxtofl@arg 007A  
                          i1___xxtofl@exp 0079                            i1___xxtofl@val 0070  
               __end_of_START_BLINKING_AT 0962                         _LCD_SEND_A_NUMBER 0CDD  
                      ??_DISP_HEATER_DATA 007E                  START_BLINKING_AT@BLINKED 0025  
                       _LCD_SEND_A_STRING 0E86                         __end_of__Umul8_16 15F0  
                 __size_of_DISP_SHOW_TIME 002E                        ?_LCD_SEND_A_NUMBER 0028  
                              __pmaintext 07B9                                   ?___bmul 00A0  
     CONTROL_UPDATE@control_shift_counter 01A7                        ?_LCD_SEND_A_STRING 0021  
                              ??_TIME_GET 0073                __end_of_GPIO_PIN_GET_STATE 0F95  
                              __pintentry 0004                              ??_MOTOR_INIT 00F0  
                                 _CCP1CON 0017                                   _CCP2CON 001D  
                     __size_of_SWs_UPDATE 0106                  __end_of_DISP_UPDATE_TIME 08AE  
                   __size_of_CONTROL_INIT 0017          __end_of_DISP_UPDATE_TIME_UNIT_AT 0D42  
                        ?_HEATING_HANDLER 0070                       ??_LCD_SEND_A_NUMBER 007E  
                              ??i1___bmul 0071                       ??_LCD_SEND_A_STRING 007E  
                    __size_of_TIMER0_INIT 0008                                 ?___xxtofl 00A0  
                    __size_of_TIMER2_INIT 000E             CCP_PWM_PERIOD_LOAD@LOAD_VALUE 01E3  
                    __size_of_TIMER0_STOP 0004                   __end_of_MOTOR_SET_STATE 1800  
                    __size_of_TIMER2_STOP 0002                       i1__Umul8_16@product 0073  
                          ??_TIMER0_START 00A0                            ??_TIMER2_START 00A0  
                   DISP_STATMENT@statment 0025          __end_of_CCP1_PWM_DUTY_CYCLE_LOAD 1306  
            ??i1_CCP1_PWM_DUTY_CYCLE_LOAD 005E                            ??_MOTOR_UPDATE 007E  
                              ??_SWs_INIT 00B2                                __stringtab 070E  
              MOTOR_SET_STATE@MOTOR_STATE 00A0                   ?_KEYPAD_GET_PRESSED_KEY 0070  
               __end_of_LCD_SEND_A_NUMBER 0CEC                                 _CCP1_INIT 1020  
                      __end_of_MOTOR_INIT 1047                                 _CCP2_INIT 17D2  
                          _FINISH_HANDLER 0FBA                 __end_of_LCD_SEND_A_STRING 0EA4  
                    __size_of_TIME_UPDATE 0050                __end_of_GPIO_PIN_SET_STATE 05E6  
           GPIO_PORT_SET_STATE@GPIO_PORTx 00A4                   __size_of_CONTROL_UPDATE 0047  
                            _CONTROL_INIT 1D6D                         ??_LCD_SND_COMMAND 00AB  
            __size_of_SET_HEATING_HANDLER 0025                           __size_of___bmul 002A  
                                 ___fladd 10A3                                   ___fldiv 1662  
                                 ___lbdiv 0CEC                                   ___lbmod 0B51  
                                 ___flmul 1391                                   ___fltol 1783  
                                 ___lwdiv 1EB1                        GOTO_NEXT_DIGIT@KEY 0028  
                                 ___lwmod 1EDB                  GPIO_PIN_INIT@GPIO_PIN_NO 00A3  
                    i1_GPIO_PIN_SET_STATE 0F45                              ??i1___xxtofl 0074  
                                 __ptext1 1D53                                   __ptext2 1D47  
                                 __ptext3 0800                                   __ptext4 0808  
                                 __ptext5 0424                                   __ptext6 045D  
                                 __ptext7 1032                                   __ptext8 17FB  
                                 __ptext9 127B       __size_ofi1_CCP1_PWM_DUTY_CYCLE_LOAD 0069  
              __size_of_DISP_SHOW_TIME_AT 000D                                 _T2CONbits 0012  
                               _LCD_CLEAR 0ECD                __size_ofi1_LCD_SND_COMMAND 0037  
                              ??___xxtofl 00A4                         ??_GOTO_NEXT_DIGIT 0026  
                           ??_HEATER_INIT 00F0                       i1___bmul@multiplier 0071  
              __end_of_UPDATE_LCD_MINUTES 0CDD                __end_of_UPDATE_LCD_SECONDS 0D26  
                  ?i1_GPIO_PORT_SET_STATE 0070             _CCP1_PWM_DUTY_CYCLE_LOAD$2214 01E5  
                  __size_of_HEATER_UPDATE 0022                           SW_GET_STATE@ret 0074  
                                 clrloop0 1D4C            __end_of_KEYPAD_GET_PRESSED_KEY 0FBA  
                    end_of_initialization 002F                    __end_of_FINISH_HANDLER 0FFA  
                  __size_of_TIMER0_UPDATE 0006                              ??_SYS_UPDATE 0067  
                               _LEDs_INIT 0487                                   itoa@buf 007C  
                              ?_CCP1_INIT 0070                                   itoa@val 0024  
                              ?_CCP2_INIT 0070                __size_of_START_BLINKING_AT 0009  
                       LCD_SET_CURSOR@row 0021                        __end_ofi1___xxtofl 03D5  
       __size_of_CCP2_PWM_DUTY_CYCLE_LOAD 008B                 ?_CCP2_PWM_DUTY_CYCLE_LOAD 01E0  
             HEATING_HANDLER@current_time 0036       __end_of_SET_HEATING_HANDLER_ON_WORK 08FF  
             _SET_HEATING_HANDLER_ON_WORK 08AE                      __size_ofi1__Umul8_16 0060  
                                 utoa@buf 0023                                 _TIME_INIT 1D53  
                                 utoa@val 0077                     ?i1_GPIO_PIN_SET_STATE 0073  
                               _TIME_STOP 0D26                       _CCP_PWM_PERIOD_LOAD 105C  
               __size_of_UPDATE_LCD_HOURS 001F                     i1__Umul8_16@word_mpld 0076  
                           _DESIRED_SPEED 01EC       CONTROL_UPDATE@control_timer_counter 01A6  
                      i1_HEATER_SET_STATE 0C9D                        __end_of_SYS_UPDATE 0832  
   __end_of_SET_ROTOR_PWR_HANDLER_ON_WORK 0959    __size_of_SET_ROTOR_PWR_HANDLER_ON_WORK 005A  
           _SET_ROTOR_PWR_HANDLER_ON_WORK 08FF                               ___fladd@grs 01D5  
                              ?_LCD_CLEAR 0070                  _DISP_UPDATE_TIME_UNIT_AT 0D36  
                        ___lbmod@dividend 0072                             ___xxtofl@sign 00A8  
                        ?_MOTOR_SET_STATE 0070                              _CURRENT_TIME 0195  
                               i1___fldiv 05F0                                 i1___flmul 0105  
                             ___fldiv@grs 00C1                                 i1___fltol 03D5  
                             ___fldiv@rem 00BA                       ?i1_HEATER_SET_STATE 0070  
                            ??_SWs_UPDATE 007A                     __end_of_LED_SET_STATE 0ABC  
                         ?_FINISH_HANDLER 0070                      ?_CCP_PWM_PERIOD_LOAD 01E0  
    i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 005C        CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 01E0  
                     __end_of_HEATER_INIT 105C                               ___lbmod@rem 0074  
                              ?_LEDs_INIT 0070                 GOTO_NEXT_DIGIT@count_left 01A4  
                             ___flmul@grs 00D5                __size_of_LCD_SEND_A_NUMBER 000F  
                        _LAST_PRESSED_KEY 01A2      i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 0065  
      CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 01E9                               _CCP1CONbits 0017  
                _CCP1_PWM_DUTY_CYCLE_LOAD 127B                __size_of_LCD_SEND_A_STRING 001E  
                             _CCP2CONbits 001D                    __size_of_TIME_CONTINUE 0003  
                       __size_of_LCD_INIT 004F                            _DISP_SHOW_TIME 0E58  
                    ??i1_HEATER_SET_STATE 0070           i1GPIO_PORT_SET_STATE@GPIO_PORTx 0074  
                    __end_of_TIMER0_START 1D4B                             _HEATER_UPDATE 1D84  
                    __end_of_TIMER2_START 17F4                  __end_of_HEATER_SET_STATE 17FB  
                          __end_of___bmul 0487                                ?_TIME_INIT 0070  
                    __end_of_MOTOR_UPDATE 1DCA                             _TIMER0_UPDATE 0FFA  
                              ?_TIME_STOP 0070                  __size_of_ENABLE_INTERUPT 0003  
                       __size_of_TIME_GET 0009                        __end_of_SWs_UPDATE 0C73  
       __size_of_SET_TIME_HANDLER_ON_WORK 0033                     __end_of_GPIO_PIN_INIT 0582  
               CCP_PWM_PERIOD_LOAD@PERIOD 01E0                 __size_of_SET_TIME_HANDLER 002D  
               ?_SET_TIME_HANDLER_ON_WORK 0070                          _MOTOR_WORK_STATE 01A9  
                           ?_STOP_HEATING 0070                  __size_of_DEFAULT_HANDLER 0052  
                  __size_of_TIME_START_AT 000C               DISP_SHOW_TIME_AT@START_TIME 0031  
                       __size_ofi1___bmul 002A                       start_initialization 0015  
                           ??_KEYPAD_INIT 00B2                       HEATER@current_angle 01AD  
                    SWs_UPDATE@sw_counter 0022              HEATER_SET_STATE@HEATER_STATE 00A0  
                              ?i1___fldiv 0020        __end_ofi1_CCP1_PWM_DUTY_CYCLE_LOAD 009C  
              i1_CCP1_PWM_DUTY_CYCLE_LOAD 0033                                ?i1___flmul 0039  
                              ?i1___fltol 0052                     __end_of_STOP_BLINKING 0CB5  
            i1MOTOR_SET_STATE@MOTOR_STATE 0070                     ??_CCP_PWM_PERIOD_LOAD 00F0  
         i1_CCP1_PWM_DUTY_CYCLE_LOAD$2352 0061                               ??_CCP1_INIT 00B2  
                             ??_CCP2_INIT 00B2                   __size_of_INCREMENT_THIS 0095  
                       __size_of_SWs_INIT 0039            DISP_UPDATE_TIME_UNIT_AT@NUMBER 0030  
                  __end_of_DISP_SHOW_TIME 0E86                            _CONTROL_UPDATE 0832  
      i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE 0074          GPIO_PIN_SET_STATE@GPIO_PIN_STATE 00A1  
             GPIO_PIN_INIT@GPIO_DIRECTION 00A4                        _LCD_SEND_CHARACTER 0ED8  
                   __end_of_KEYPAD_UPDATE 0DDD                            ?_HEATER_UPDATE 0070  
                                ??___bmul 00A1                    ??i1_GPIO_PIN_SET_STATE 0075  
                              init_fetch0 1D5C                            ?_TIMER0_UPDATE 0070  
                     ?_LCD_SEND_CHARACTER 0070                                 __Umul8_16 1590  
            __size_of_GPIO_PORT_SET_STATE 000A                               __pdataBANK0 006F  
                             __pdataBANK3 01B2                 __size_of_DISP_HEATER_DATA 002E  
                       ?_DISP_UPDATE_TIME 0031                            ??_STOP_HEATING 007E  
                           _TIME_CONTINUE 0D42                                 ___fladd@a 00E4  
                               ___fladd@b 00E0                        ??_DISP_UPDATE_TIME 007E  
                 __size_of_LCD_SET_CURSOR 0029                                 ___fldiv@a 00AE  
                               ___fldiv@b 00B2                               ??_LCD_CLEAR 007E  
                               ___flmul@a 00CB                                 ___flmul@b 00C7  
                               ___latbits 0002                        _GPIO_PIN_GET_STATE 0F78  
                           __pcstackBANK0 0020                             __pcstackBANK1 00A0  
                           __pcstackBANK3 01D2      i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE 0070  
      GPIO_PORT_SET_STATE@GPIO_PORT_STATE 00A0                               _HEATER_INIT 1047  
                       __size_of___xxtofl 0072                        KEYPAD_INIT@counter 00B2  
                     _SET_HEATING_HANDLER 1DCA            ?_SET_ROTOR_PWR_HANDLER_ON_WORK 0070  
                __size_of_DISP_MOTOR_DATA 002E                      ??_LCD_SEND_CHARACTER 007E  
                   _SET_ROTOR_PWR_HANDLER 1DEF                           _LCD_SND_COMMAND 0582  
                         i1___xxtofl@sign 0078                       ?_GPIO_PIN_GET_STATE 0073  
                  __end_of_CONTROL_UPDATE 0879                       __end_of_KEYPAD_INIT 04FA  
                             ??_LEDs_INIT 00B2                         i1___fldiv@new_exp 0031  
                         ?_DISP_SHOW_TIME 0070                             _TIME_START_AT 0D2A  
                               __pnvBANK3 01EB                          ___lwdiv@dividend 0072  
                 LCD_SEND_A_STRING@string 0021                    __size_of_DISP_STATMENT 0011  
                       _HEATER_WORK_STATE 01A8                      ?_SET_HEATING_HANDLER 0070  
                i1__Umul8_16@multiplicand 0070                      LCD_SET_CURSOR@coloum 0024  
                                ?___fladd 00E0                                  ?___fldiv 00AE  
                         _GOTO_NEXT_DIGIT 1F5F                                  ?___lbdiv 0070  
                                ?___lbmod 0070                                  ?___flmul 00C7  
                       CONTROL_INIT@count 00A0                                  ?___fltol 01D6  
                              ?__Umul8_16 00A0                                  ?___lwdiv 0070  
                             ??_TIME_INIT 00A0                                  ?___lwmod 0070  
                             ??_TIME_STOP 0070                      ??_GPIO_PIN_GET_STATE 0074  
                           ?_SW_GET_STATE 0070                        _GPIO_PIN_SET_STATE 05BC  
                        _UPDATE_LCD_HOURS 0DDD                             ??_TIMER0_INIT 00A0  
                           ??_TIMER2_INIT 00A0                                 __pstrings 070E  
                           ??_TIMER0_STOP 00A0                             ??_TIMER2_STOP 00A0  
                          ?_TIME_CONTINUE 0070                                 __pswtext1 07F1  
                 ??i1_GPIO_PORT_SET_STATE 0071            i1GPIO_PIN_SET_STATE@GPIO_PORTx 007D  
                       ??_ENABLE_INTERUPT 00A0                       ?_GPIO_PIN_SET_STATE 00A0  
                             ??i1___fldiv 0028                  __size_of_HEATING_HANDLER 00A2  
                  LED_SET_STATE@LED_STATE 0020                               ??i1___flmul 0041  
                             ??i1___fltol 0056                                 _last_time 0198  
                        ___lwdiv@quotient 0074                         ??_DEFAULT_HANDLER 007E  
        __end_of_CCP2_PWM_DUTY_CYCLE_LOAD 1391              ??i1_CCP2_PWM_DUTY_CYCLE_LOAD 005E  
                           ??_TIME_UPDATE 0070                     _CONTROL_CURRENT_STATE 006E  
                                _LCD_INIT 04FA                           ?_CONTROL_UPDATE 0070  
                       interrupt_function 0004                            ?_TIME_START_AT 0070  
                   __size_of_TIMER0_START 0004                                 clear_ram0 1D4B  
                   __size_of_TIMER2_START 0002                            _keypad_sapmles 019B  
                         ??_HEATER_UPDATE 007E                        _UPDATE_LCD_MINUTES 0CBE  
                      _UPDATE_LCD_SECONDS 0D07                     i1___bmul@multiplicand 0070  
                    ??_GPIO_PIN_SET_STATE 00A2                     __size_of_MOTOR_UPDATE 0024  
                         ??_TIMER0_UPDATE 0070                     ??_SET_HEATING_HANDLER 0028  
                                _TIME_GET 0CB5                ??_DISP_UPDATE_TIME_UNIT_AT 007E  
                          ??_SW_GET_STATE 0073                       ?_UPDATE_LCD_MINUTES 0070  
                     ?_UPDATE_LCD_SECONDS 0070                    KEYPAD_UPDATE@KEY_STATE 0021  
                       SW_GET_STATE@SW_NO 0073                          _SET_TIME_HANDLER 1EFF  
                                i1___bmul 0C73                               __stringbase 071D  
                            _TICK_COUNTER 01A0       __size_ofi1_CCP2_PWM_DUTY_CYCLE_LOAD 0069  
                          _COUNT_DECISION 01AB                   __end_of_LCD_SND_COMMAND 05BC  
         MOTOR_UPDATE@motor_timer_counter 01AE                     UPDATE_LCD_HOURS@HOURS 0030  
                        ??_FINISH_HANDLER 0026                               _KEYPAD_INIT 04B7  
                           _DISP_STATMENT 0A80                ??_CCP1_PWM_DUTY_CYCLE_LOAD 01E2  
                     __end_of_TIMER0_INIT 0808                       __end_of_TIMER2_INIT 17F2  
                  ?_SET_ROTOR_PWR_HANDLER 0070                       __end_of_TIMER0_STOP 080C  
                     __end_of_TIMER2_STOP 17F6                              _TIMER0_START 1D47  
                             _KEYPAD_info 01C6                              _TIMER2_START 17F2  
                    ??_UPDATE_LCD_MINUTES 007E                      ??_UPDATE_LCD_SECONDS 007E  
                                _SWs_INIT 0424                              _MOTOR_UPDATE 1DA6  
                          _INCREMENT_THIS 0ABC                      __end_of_STOP_HEATING 0A80  
                       ??_DISP_MOTOR_DATA 007E                   __end_of_GOTO_NEXT_DIGIT 2000  
        __end_of_SET_TIME_HANDLER_ON_WORK 1F5F                             ??i1__Umul8_16 0073  
       HEATER_UPDATE@heater_timer_counter 01AC                       __end_of_TIME_UPDATE 1E64  
             KEYPAD_UPDATE@KEYPAD_counter 0022                               ??__Umul8_16 00A3  
    i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 005C        CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 01E0  
                       ?_HEATER_SET_STATE 0070                          __size_of___fladd 01D8  
                        __size_of___fldiv 0121                          __size_of___lbdiv 001B  
                         ??_TIME_CONTINUE 0070                          __size_of___lbmod 001C  
                        __size_of___flmul 01FF                          __size_of___fltol 004F  
    i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 0065        CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 01E9  
                        _DISP_HEATER_DATA 0E2A                          __size_of___lwdiv 002A  
                        __size_of___lwmod 0024                        ??_HEATER_SET_STATE 00A0  
                      __end_of__stringtab 071E                            _LCD_SET_CURSOR 0EA4  
           GPIO_PIN_GET_STATE@GPIO_PIN_NO 0073                                  ___xxtofl 15F0  
                          ?_DISP_STATMENT 0070             GPIO_PIN_SET_STATE@GPIO_PIN_NO 00A0  
                         ___lwdiv@divisor 0070                         INCREMENT_THIS@KEY 0034  
                         ___lwdiv@counter 0076                                  __ptext10 1020  
                                __ptext11 0487                                  __ptext20 10A3  
                                __ptext12 04FA                                  __ptext21 1306  
                                __ptext13 0582                                  __ptext30 17F4  
                                __ptext22 15F0                                  __ptext14 05E6  
                                __ptext31 0549                                  __ptext23 1783  
                                __ptext15 04B7                                  __ptext40 0D45  
                                __ptext32 1D44                                  __ptext24 1391  
                                __ptext16 05BC                                  __ptext41 0F78  
                                __ptext33 1D6D                                  __ptext25 1590  
                                __ptext17 1047                                  __ptext50 1EFF  
                                __ptext42 1D84                                  __ptext34 080C  
                                __ptext26 1662                                  __ptext18 17F6  
                                __ptext51 1F2C                                  __ptext43 009C  
                                __ptext35 1E14                                  __ptext27 17D2  
                                __ptext19 105C                                  __ptext60 1DCA  
                                __ptext52 0ABC                                  __ptext44 0363  
                                __ptext36 0FFA                                  __ptext28 17F2  
                                __ptext61 08AE                                  __ptext53 0B51  
                                __ptext45 03D5                                  __ptext37 0B6D  
                                __ptext29 17E4                                  __ptext70 0D26  
                                __ptext62 0959                                  __ptext54 1F5F  
                                __ptext46 0105                                  __ptext38 1DA6  
                                __ptext71 0CB5                                  __ptext63 0E2A  
                                __ptext55 0D36                                  __ptext47 0303  
                                __ptext39 0033                                  __ptext80 0CA5  
                                __ptext72 0A91                                  __ptext64 09B4  
                                __ptext56 1DEF                                  __ptext48 05F0  
                                __ptext81 0D07                                  __ptext73 0879  
                                __ptext65 0D2A                                  __ptext57 08FF  
                                __ptext49 0832                                  __ptext90 0E58  
                                __ptext82 0CBE                                  __ptext74 0FBA  
                                __ptext66 0D42                                  __ptext58 0FAF  
                                __ptext91 0EA4                                  __ptext83 0DDD  
                                __ptext75 0962                                  __ptext67 0A61  
                                __ptext59 0DFC                                  __ptext92 0E86  
                                __ptext84 0CEC                                  __ptext76 0A56  
                                __ptext68 0CA0                                  __ptext93 0ED8  
                                __ptext85 0CDD                                  __ptext77 0C73  
                                __ptext69 0C9D                                  __ptext94 0ECD  
                                __ptext86 0F95                                  __ptext78 0CB2  
                                __ptext95 0F0E                                  __ptext87 1E64  
                                __ptext79 0A80                                  __ptext96 0F6E  
                                __ptext88 1EDB                                  __ptext97 0F45  
                                __ptext89 1EB1               ?i1_CCP1_PWM_DUTY_CYCLE_LOAD 005C  
                     LED_SET_STATE@LED_NO 0022                         i1_MOTOR_SET_STATE 0CA0  
                  __end_of_INCREMENT_THIS 0B51                       _GPIO_PORT_SET_STATE 05E6  
                         ??_TIME_START_AT 0073                        ?i1_MOTOR_SET_STATE 0070  
                __size_of_MOTOR_SET_STATE 0005                         ??_HEATING_HANDLER 0034  
                           __size_of_main 0038                             __size_of_itoa 001A  
                _CCP2_PWM_DUTY_CYCLE_LOAD 1306                             __size_of_utoa 004D  
                     ??i1_MOTOR_SET_STATE 0070                TIME_START_AT@START_MINUTES 0070  
              TIME_START_AT@START_SECONDS 0073               __size_ofi1_HEATER_SET_STATE 0003  
                    ?_GPIO_PORT_SET_STATE 00A0                       __end_ofi1__Umul8_16 0363  
                i1LCD_SND_COMMAND@command 0020                    __end_of_LCD_SET_CURSOR 0ECD  
              TIME_START_AT@COUNTING_TYPE 0072                    __size_of_LED_SET_STATE 002B  
               KEYPAD_GET_PRESSED_KEY@ret 0072                               _TIMER0_INIT 0800  
                             _TIMER2_INIT 17E4                               _TIMER0_STOP 0808  
                             _TIMER2_STOP 17F4                               _SETTED_TIME 006B  
                ??_KEYPAD_GET_PRESSED_KEY 0072                        SWs_INIT@SW_Counter 00B4  
                        ?_LCD_SND_COMMAND 0070                 __end_ofi1_MOTOR_SET_STATE 0CA5  
             __end_of_CCP_PWM_PERIOD_LOAD 10A3                               _PRESSED_KEY 019E  
                            ?_HEATER_INIT 0070                                  itoa@base 0026  
                                init_ram0 1D60        __end_ofi1_CCP2_PWM_DUTY_CYCLE_LOAD 0105  
              i1_CCP2_PWM_DUTY_CYCLE_LOAD 009C                          ??_DISP_SHOW_TIME 007E  
                         ?_INCREMENT_THIS 0070                                  intlevel1 0000  
               __size_of_DISP_UPDATE_TIME 0035                      __end_of_SW_GET_STATE 0A61  
                             _TIME_UPDATE 1E14              GPIO_PIN_GET_STATE@GPIO_PORTx 0078  
                __end_of_UPDATE_LCD_HOURS 0DFC              GPIO_PIN_SET_STATE@GPIO_PORTx 00AA  
                  i1__Umul8_16@multiplier 0075                          ___lwmod@dividend 0072  
                  __size_of_GPIO_PIN_INIT 0039                  KEYPAD_UPDATE@COL_counter 0024  
                TIME_START_AT@START_HOURS 0071                          ?_GOTO_NEXT_DIGIT 0070  
                         _HANDLERS_STATES 0190                 SWs_UPDATE@samples_counter 0021  
                           ?_CONTROL_INIT 0070                                 stringcode 0718  
         ??_SET_ROTOR_PWR_HANDLER_ON_WORK 0026            i1HEATER_SET_STATE@HEATER_STATE 0070  
                _SET_TIME_HANDLER_ON_WORK 1F2C                     ??_GPIO_PORT_SET_STATE 00A1  
        KEYPAD_UPDATE@KEYPAD_TICK_counter 01B0                           _ENABLE_INTERUPT 1D44  
                      LCD_SEND_A_NUMBER@x 0028                                _MOTOR_INIT 1032  
                  __size_of_STOP_BLINKING 0003             __size_ofi1_GPIO_PIN_SET_STATE 0029  
                         ?_LCD_SET_CURSOR 0021                           _DEFAULT_HANDLER 0962  
                                utoa@base 0079                    __Umul8_16@multiplicand 00A0  
                         ??_DISP_STATMENT 007E               LCD_SEND_CHARACTER@character 0020  
                         ___lwmod@divisor 0070                           ___lwmod@counter 0074  
                                stringdir 0718            __size_ofi1_GPIO_PORT_SET_STATE 000A  
                                stringtab 070E             __end_ofi1_GPIO_PORT_SET_STATE 0F78  
                        ??_CONTROL_UPDATE 0039                    __size_of_KEYPAD_UPDATE 0098  
                           ___fladd@signs 01D2                     __size_of_STOP_HEATING 001F  
             __size_of_LCD_SEND_CHARACTER 0036           i1GPIO_PIN_SET_STATE@GPIO_PIN_NO 0073  
                           _LED_SET_STATE 0A91                  __end_of_SET_TIME_HANDLER 1F2C  
                            ___fladd@aexp 01D3                              ___fladd@bexp 01D4  
                    __Umul8_16@multiplier 00A5                            ??_CONTROL_INIT 00A0  
                             i1__Umul8_16 0303                             _CURRENT_DIGIT 006F  
                       __Umul8_16@product 00A3  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          %CMF
# %PSECTS Section
# For each object file, details of its psects are enumerated here.
# The begining of the section is indicated by %PSECTS.  The first
# line indicates the name of the first object file, e.g.
#    $foo.obj
# Each line that follows describes a psect in that object file, until
# the next object file.  The lines that describe a psect have the
# format:
#    <psect name> <class name> <space> <link address> <load addresses> <length> <delta>
# All addresses and the length are given in unqualified hexadecimal
# in delta units.  Any other numeric values are decimal.
%PSECTS
$C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
reset_vec CODE 0 0 0 3 2
end_init CODE 0 12 12 3 2
config CONFIG 0 2007 2007 1 2
$dist/default/debug\MICROWAVE.X.debug.o
cinit CODE 0 15 15 1E 2
text1 CODE 0 1D53 1D53 9 2
text2 CODE 0 1D47 1D47 4 2
text3 CODE 0 800 800 C 2
text5 CODE 0 424 424 1CC 2
text10 CODE 0 1020 1020 7E0 2
text32 CODE 0 1D44 1D44 3 2
text33 CODE 0 1D6D 1D6D 17 2
text34 CODE 0 80C 80C 7F4 2
text35 CODE 0 1E14 1E14 50 2
text38 CODE 0 1DA6 1DA6 24 2
text39 CODE 0 33 33 3F1 2
text42 CODE 0 1D84 1D84 22 2
text48 CODE 0 5F0 5F0 11E 2
text50 CODE 0 1EFF 1EFF 101 2
text56 CODE 0 1DEF 1DEF 25 2
text60 CODE 0 1DCA 1DCA 25 2
text87 CODE 0 1E64 1E64 9B 2
nvBANK3 BANK3 1 1EB 1EB 2 1
maintext CODE 0 7B9 7B9 38 2
cstackCOMMON COMMON 1 70 70 E 1
cstackBANK0 BANK0 1 20 20 4B 1
cstackBANK1 BANK1 1 A0 A0 50 1
cstackBANK3 BANK3 1 1D2 1D2 19 1
inittext CODE 0 1D5C 1D5C 11 2
intentry CODE 0 4 4 E 2
bssBANK0 BANK0 1 6B 6B 4 1
bssBANK3 BANK3 1 190 190 22 1
idataBANK3 CODE 0 1000 1000 20 2
strings STRING 0 70E 70E AB 2
swtext1 CONST 0 7F1 7F1 F 2
dataBANK0 BANK0 1 6F 6F 1 1
dataBANK3 BANK3 1 1B2 1B2 20 1
clrtext CODE 0 1D4B 1D4B 8 2
# %UNUSED Section
# This section enumerates the unused ranges of each CLASS. Each entry
# is described on a single line as follows:
#    <class name> <range> <delta>
# Addresses given in the range are in hexadecimal and units of delta.
%UNUSED
RAM 110-16F 1
RAM 1ED-1EF 1
BANK2 110-16F 1
BANK3 1ED-1EF 1
CONST 3-3 2
CONST 1800-1D43 2
ENTRY 3-3 2
ENTRY 1800-1D43 2
IDLOC 2000-2003 2
STACK 110-16F 1
CODE 3-3 2
CODE 1800-1D43 2
SFR0 0-1F 1
SFR1 80-9F 1
SFR2 100-10F 1
SFR3 180-18F 1
EEDATA 2100-21FF 2
STRCODE 3-3 2
STRCODE 1800-1D43 2
STRING 3-3 2
STRING 1800-1D43 2
# %LINETAB Section
# This section enumerates the file/line to address mappings.
# The beginning of the section is indicated by %LINETAB.
# The first line indicates the name of the first object file, e.g.
#   $foo.obj
# Each line that follows describes a single mapping until the next
# object file.  Mappings have the following format:
#    <address> <psect name> <class name> ><line number>:<file name>
# The address is absolute and given given in unqualified hex 
# in delta units of the psect. All mappings within an object file
# are in ascending order of addresses.
# All other numeric values are in decimal.
%LINETAB
$dist/default/debug\MICROWAVE.X.debug.o
15 cinit CODE >2680:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
15 cinit CODE >2683:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
15 cinit CODE >2820:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
16 cinit CODE >2819:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
17 cinit CODE >2821:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
18 cinit CODE >2822:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
19 cinit CODE >2823:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1A cinit CODE >2824:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1B cinit CODE >2825:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1C cinit CODE >2826:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D cinit CODE >2827:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1E cinit CODE >2828:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
23 cinit CODE >58:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
24 cinit CODE >2833:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
25 cinit CODE >2852:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
26 cinit CODE >2853:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
27 cinit CODE >2854:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
28 cinit CODE >2855:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
2B cinit CODE >2858:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
2C cinit CODE >2859:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
2D cinit CODE >2860:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
2E cinit CODE >2861:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
2F cinit CODE >2867:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
2F cinit CODE >2869:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
30 cinit CODE >2870:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
4 intentry CODE >33:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
1E64 text87 CODE >17:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1E65 text87 CODE >22:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1E69 text87 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1E78 text87 CODE >25:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1E79 text87 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1E7C text87 CODE >27:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1E81 text87 CODE >29:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1E8E text87 CODE >30:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1E9D text87 CODE >31:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1EA1 text87 CODE >32:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1EA3 text87 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1EA5 text87 CODE >34:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1EAB text87 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1EAF text87 CODE >36:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1EB0 text87 CODE >37:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
1EB1 text87 CODE >5:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EB1 text87 CODE >13:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EB3 text87 CODE >14:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EB7 text87 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EB8 text87 CODE >17:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EB8 text87 CODE >18:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EB9 text87 CODE >16:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EBB text87 CODE >17:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EBE text87 CODE >16:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EBF text87 CODE >21:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EC2 text87 CODE >22:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1ECA text87 CODE >23:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1ED0 text87 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1ED1 text87 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1ED4 text87 CODE >27:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1ED6 text87 CODE >29:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EDA text87 CODE >30:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c
1EDB text87 CODE >5:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EDB text87 CODE >12:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EDF text87 CODE >13:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EE0 text87 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EE0 text87 CODE >16:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EE1 text87 CODE >14:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EE3 text87 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EE6 text87 CODE >14:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EE7 text87 CODE >19:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EEF text87 CODE >20:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EF5 text87 CODE >21:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EF8 text87 CODE >22:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EFA text87 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1EFE text87 CODE >25:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c
1DCA text60 CODE >147:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1DCA text60 CODE >164:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1DD6 text60 CODE >152:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1DDB text60 CODE >154:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1DDE text60 CODE >156:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1DE2 text60 CODE >157:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1DE3 text60 CODE >159:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1DE6 text60 CODE >164:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1DEE text60 CODE >165:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1DEF text56 CODE >166:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1DEF text56 CODE >183:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1DFB text56 CODE >171:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1E00 text56 CODE >173:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1E03 text56 CODE >175:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1E07 text56 CODE >176:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1E08 text56 CODE >178:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1E0B text56 CODE >183:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1E13 text56 CODE >184:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1EFF text50 CODE >127:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1EFF text50 CODE >145:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F0B text50 CODE >132:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F10 text50 CODE >134:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F1B text50 CODE >135:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F1D text50 CODE >137:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F21 text50 CODE >138:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F22 text50 CODE >140:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F23 text50 CODE >145:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F2B text50 CODE >146:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F2C text50 CODE >453:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F2C text50 CODE >455:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F30 text50 CODE >457:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F3C text50 CODE >462:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F42 text50 CODE >463:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F43 text50 CODE >465:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F4B text50 CODE >470:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F4D text50 CODE >482:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F56 text50 CODE >484:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F59 text50 CODE >485:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F5A text50 CODE >486:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F5B text50 CODE >487:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F5E text50 CODE >493:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F5F text50 CODE >496:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F62 text50 CODE >500:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F63 text50 CODE >503:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F67 text50 CODE >505:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F69 text50 CODE >507:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F6D text50 CODE >509:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F6F text50 CODE >510:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F70 text50 CODE >509:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F71 text50 CODE >510:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F74 text50 CODE >512:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F78 text50 CODE >513:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F7B text50 CODE >514:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F7C text50 CODE >518:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F7D text50 CODE >520:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F81 text50 CODE >522:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F83 text50 CODE >524:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F87 text50 CODE >526:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F89 text50 CODE >530:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F8D text50 CODE >532:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F8F text50 CODE >534:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F94 text50 CODE >540:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F98 text50 CODE >542:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F9A text50 CODE >544:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1F9F text50 CODE >550:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FA3 text50 CODE >552:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FA5 text50 CODE >553:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FA6 text50 CODE >554:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FAB text50 CODE >560:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FAF text50 CODE >562:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FB1 text50 CODE >563:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FB2 text50 CODE >562:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FB3 text50 CODE >563:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FB6 text50 CODE >565:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FBA text50 CODE >566:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FBD text50 CODE >567:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FBE text50 CODE >568:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FBF text50 CODE >574:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FC4 text50 CODE >586:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FE0 text50 CODE >587:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FEA text50 CODE >589:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FED text50 CODE >591:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FF7 text50 CODE >593:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1FFA text50 CODE >595:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
7F1 swtext1 CONST >111:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
5F0 text48 CODE >8:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
5F0 text48 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
5F4 text48 CODE >27:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
5F7 text48 CODE >28:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
5F8 text48 CODE >29:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
5F9 text48 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
5FC text48 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
5FE text48 CODE >37:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
602 text48 CODE >38:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
602 text48 CODE >40:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
604 text48 CODE >44:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
604 text48 CODE >46:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
608 text48 CODE >49:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
60B text48 CODE >50:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
60E text48 CODE >51:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
60F text48 CODE >52:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
610 text48 CODE >56:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
613 text48 CODE >58:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
615 text48 CODE >60:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
619 text48 CODE >61:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
619 text48 CODE >63:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
61B text48 CODE >67:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
61B text48 CODE >69:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
61F text48 CODE >75:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
625 text48 CODE >77:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
626 text48 CODE >76:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
62A text48 CODE >77:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
62D text48 CODE >78:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
62F text48 CODE >79:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
638 text48 CODE >83:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
63B text48 CODE >85:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
640 text48 CODE >89:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
64B text48 CODE >92:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
653 text48 CODE >93:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
657 text48 CODE >94:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
65B text48 CODE >96:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
65C text48 CODE >97:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
660 text48 CODE >100:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
663 text48 CODE >101:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
668 text48 CODE >102:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
66D text48 CODE >103:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
66E text48 CODE >104:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
66F text48 CODE >106:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
674 text48 CODE >112:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
684 text48 CODE >115:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
685 text48 CODE >116:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
693 text48 CODE >118:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
694 text48 CODE >97:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
695 text48 CODE >122:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
69A text48 CODE >123:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
69B text48 CODE >127:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
69D text48 CODE >128:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6A2 text48 CODE >129:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6A3 text48 CODE >130:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6A4 text48 CODE >133:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6A5 text48 CODE >132:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6AA text48 CODE >133:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6AD text48 CODE >127:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6AE text48 CODE >139:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6AF text48 CODE >140:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6B1 text48 CODE >141:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6BE text48 CODE >145:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6C1 text48 CODE >142:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6C3 text48 CODE >150:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6C6 text48 CODE >151:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6CD text48 CODE >152:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6CF text48 CODE >153:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6D4 text48 CODE >154:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6D7 text48 CODE >159:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6E2 text48 CODE >160:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6E7 text48 CODE >161:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6EB text48 CODE >165:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6F8 text48 CODE >166:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
6FC text48 CODE >167:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
700 text48 CODE >169:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
701 text48 CODE >173:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
705 text48 CODE >175:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
707 text48 CODE >176:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
708 text48 CODE >177:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
709 text48 CODE >179:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
709 text48 CODE >180:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
70A text48 CODE >182:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1D84 text42 CODE >40:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D84 text42 CODE >43:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D86 text42 CODE >45:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D89 text42 CODE >47:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D8A text42 CODE >48:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D91 text42 CODE >50:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D92 text42 CODE >51:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D93 text42 CODE >52:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D97 text42 CODE >54:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D98 text42 CODE >55:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D99 text42 CODE >56:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D9C text42 CODE >58:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1D9D text42 CODE >64:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1DA5 text42 CODE >67:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
33 text39 CODE >196:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
33 text39 CODE >201:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
85 text39 CODE >203:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
9B text39 CODE >205:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
9C text39 CODE >207:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
9C text39 CODE >211:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
EE text39 CODE >213:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
104 text39 CODE >215:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
105 text39 CODE >8:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
105 text39 CODE >17:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
109 text39 CODE >18:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
10C text39 CODE >19:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
10D text39 CODE >20:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
10E text39 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
111 text39 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
113 text39 CODE >28:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
117 text39 CODE >29:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
117 text39 CODE >31:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
118 text39 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
119 text39 CODE >34:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
119 text39 CODE >36:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
11D text39 CODE >39:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
120 text39 CODE >40:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
123 text39 CODE >41:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
124 text39 CODE >42:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
125 text39 CODE >45:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
128 text39 CODE >48:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
12A text39 CODE >50:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
12E text39 CODE >51:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
12E text39 CODE >53:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
12F text39 CODE >54:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
130 text39 CODE >55:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
130 text39 CODE >57:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
134 text39 CODE >65:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
139 text39 CODE >66:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13E text39 CODE >119:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
148 text39 CODE >120:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
14C text39 CODE >121:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
151 text39 CODE >122:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
15B text39 CODE >123:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
163 text39 CODE >124:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
16C text39 CODE >125:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
176 text39 CODE >126:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
17E text39 CODE >127:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
187 text39 CODE >128:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
18E text39 CODE >129:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
198 text39 CODE >130:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1B1 text39 CODE >131:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1BB text39 CODE >132:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1D4 text39 CODE >133:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1DB text39 CODE >134:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1E5 text39 CODE >135:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1FE text39 CODE >136:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
208 text39 CODE >137:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
221 text39 CODE >138:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
22B text39 CODE >139:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
244 text39 CODE >140:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
24E text39 CODE >141:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
26E text39 CODE >145:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
277 text39 CODE >146:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
27E text39 CODE >149:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
286 text39 CODE >158:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
289 text39 CODE >152:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
28B text39 CODE >153:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
290 text39 CODE >154:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
291 text39 CODE >155:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
292 text39 CODE >158:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
293 text39 CODE >157:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
298 text39 CODE >152:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
299 text39 CODE >163:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
29A text39 CODE >164:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
29C text39 CODE >165:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2A9 text39 CODE >169:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2AC text39 CODE >166:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2AE text39 CODE >174:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2B1 text39 CODE >175:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2B8 text39 CODE >176:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2BA text39 CODE >177:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2BF text39 CODE >178:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2C2 text39 CODE >183:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2CD text39 CODE >184:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2D5 text39 CODE >185:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2D6 text39 CODE >187:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2E3 text39 CODE >188:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2E9 text39 CODE >190:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2EA text39 CODE >191:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2EB text39 CODE >194:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2EF text39 CODE >195:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2F3 text39 CODE >196:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2F4 text39 CODE >197:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2F5 text39 CODE >199:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2F8 text39 CODE >200:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2F8 text39 CODE >201:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
2FA text39 CODE >203:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
302 text39 CODE >205:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
303 text39 CODE >4:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
304 text39 CODE >5:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
306 text39 CODE >6:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
309 text39 CODE >10:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
30B text39 CODE >11:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
311 text39 CODE >13:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
314 text39 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
316 text39 CODE >16:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
31C text39 CODE >18:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
31F text39 CODE >20:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
321 text39 CODE >21:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
327 text39 CODE >23:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
32A text39 CODE >25:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
32C text39 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
332 text39 CODE >28:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
335 text39 CODE >30:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
337 text39 CODE >31:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
33D text39 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
340 text39 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
342 text39 CODE >36:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
348 text39 CODE >38:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
34B text39 CODE >40:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
34D text39 CODE >41:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
353 text39 CODE >43:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
356 text39 CODE >45:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
358 text39 CODE >46:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
35E text39 CODE >47:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
35E text39 CODE >59:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
362 text39 CODE >60:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
363 text39 CODE >10:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
364 text39 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
368 text39 CODE >16:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
377 text39 CODE >17:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
378 text39 CODE >19:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
380 text39 CODE >20:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
380 text39 CODE >21:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
386 text39 CODE >22:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
38B text39 CODE >23:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
38D text39 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
391 text39 CODE >25:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
392 text39 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
397 text39 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
398 text39 CODE >29:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
399 text39 CODE >30:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3A0 text39 CODE >31:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3A5 text39 CODE >28:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3AA text39 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3AE text39 CODE >34:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3AF text39 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3B4 text39 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3B6 text39 CODE >37:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3B7 text39 CODE >38:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3B8 text39 CODE >39:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3BA text39 CODE >40:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3C7 text39 CODE >41:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3CB text39 CODE >42:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3CC text39 CODE >43:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3D4 text39 CODE >44:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
3D5 text39 CODE >43:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
3D5 text39 CODE >47:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
3DC text39 CODE >48:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
3E1 text39 CODE >49:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
3F4 text39 CODE >52:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
3F5 text39 CODE >50:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
3F6 text39 CODE >51:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
3F7 text39 CODE >52:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
3F8 text39 CODE >53:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
3FA text39 CODE >54:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
3FF text39 CODE >57:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
404 text39 CODE >58:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
407 text39 CODE >60:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
40B text39 CODE >62:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
40E text39 CODE >63:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
413 text39 CODE >64:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
414 text39 CODE >62:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
415 text39 CODE >67:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
418 text39 CODE >68:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
423 text39 CODE >70:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
1DA6 text38 CODE >40:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DA6 text38 CODE >43:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DAA text38 CODE >45:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DAD text38 CODE >47:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DAE text38 CODE >49:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DB5 text38 CODE >51:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DB6 text38 CODE >52:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DB7 text38 CODE >53:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DBB text38 CODE >55:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DBC text38 CODE >56:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DBD text38 CODE >57:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DC0 text38 CODE >59:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DC1 text38 CODE >65:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1DC9 text38 CODE >67:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1E14 text35 CODE >54:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E14 text35 CODE >56:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E18 text35 CODE >58:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E1F text35 CODE >60:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E21 text35 CODE >61:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E22 text35 CODE >64:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E25 text35 CODE >66:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E26 text35 CODE >67:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E27 text35 CODE >70:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E29 text35 CODE >71:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E2C text35 CODE >73:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E2D text35 CODE >74:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E2E text35 CODE >77:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E30 text35 CODE >78:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E33 text35 CODE >80:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E34 text35 CODE >81:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E35 text35 CODE >84:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E37 text35 CODE >90:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E3B text35 CODE >92:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E3C text35 CODE >93:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E3D text35 CODE >96:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E41 text35 CODE >98:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E42 text35 CODE >103:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E43 text35 CODE >105:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E44 text35 CODE >106:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E45 text35 CODE >99:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E46 text35 CODE >100:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E47 text35 CODE >103:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E4B text35 CODE >111:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E4C text35 CODE >112:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E4D text35 CODE >113:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E4F text35 CODE >121:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E5F text35 CODE >125:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E63 text35 CODE >126:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1E63 text35 CODE >128:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
80C text34 CODE >33:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
80C text34 CODE >35:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
80E text34 CODE >37:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
80F text34 CODE >38:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
814 text34 CODE >39:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
819 text34 CODE >40:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
81E text34 CODE >41:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
821 text34 CODE >42:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
824 text34 CODE >43:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
825 text34 CODE >47:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
832 text34 CODE >80:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
832 text34 CODE >83:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
834 text34 CODE >86:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
835 text34 CODE >83:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
837 text34 CODE >86:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
838 text34 CODE >87:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
83C text34 CODE >89:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
83D text34 CODE >90:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
844 text34 CODE >91:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
845 text34 CODE >94:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
84A text34 CODE >95:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
84B text34 CODE >97:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
850 text34 CODE >98:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
851 text34 CODE >100:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
856 text34 CODE >101:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
857 text34 CODE >103:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
85A text34 CODE >104:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
85B text34 CODE >106:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
85E text34 CODE >107:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
85F text34 CODE >111:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
876 text34 CODE >112:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
877 text34 CODE >117:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
878 text34 CODE >119:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
879 text34 CODE >33:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
879 text34 CODE >36:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
87F text34 CODE >39:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
885 text34 CODE >40:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
88B text34 CODE >43:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
891 text34 CODE >44:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
897 text34 CODE >47:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
89B text34 CODE >51:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
8AD text34 CODE >52:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
8AE text34 CODE >349:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8AE text34 CODE >351:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8AF text34 CODE >354:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8B3 text34 CODE >355:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8B4 text34 CODE >357:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8B8 text34 CODE >358:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8B9 text34 CODE >360:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8BD text34 CODE >361:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8BE text34 CODE >365:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8D5 text34 CODE >366:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8D9 text34 CODE >368:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8DC text34 CODE >370:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8DE text34 CODE >371:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8DF text34 CODE >372:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8E1 text34 CODE >374:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8E3 text34 CODE >375:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8E4 text34 CODE >376:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8E8 text34 CODE >378:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8EA text34 CODE >379:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8EB text34 CODE >380:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8EF text34 CODE >382:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8F3 text34 CODE >383:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8F6 text34 CODE >384:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8F7 text34 CODE >386:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8FB text34 CODE >388:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8FF text34 CODE >400:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
8FF text34 CODE >402:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
900 text34 CODE >405:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
904 text34 CODE >406:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
905 text34 CODE >408:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
909 text34 CODE >409:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
90A text34 CODE >411:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
90E text34 CODE >412:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
90F text34 CODE >416:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
926 text34 CODE >417:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
92F text34 CODE >418:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
931 text34 CODE >420:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
934 text34 CODE >422:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
938 text34 CODE >423:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
939 text34 CODE >424:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
93B text34 CODE >426:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
93F text34 CODE >427:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
940 text34 CODE >428:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
944 text34 CODE >430:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
948 text34 CODE >431:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
949 text34 CODE >432:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
94D text34 CODE >434:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
94E text34 CODE >435:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
951 text34 CODE >436:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
952 text34 CODE >438:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
956 text34 CODE >440:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
959 text34 CODE >110:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
95A text34 CODE >112:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
95F text34 CODE >114:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
961 text34 CODE >115:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
962 text34 CODE >291:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
962 text34 CODE >293:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
96C text34 CODE >296:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
973 text34 CODE >299:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
97E text34 CODE >304:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
981 text34 CODE >306:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
98A text34 CODE >307:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
98C text34 CODE >308:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
990 text34 CODE >309:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
993 text34 CODE >310:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
994 text34 CODE >314:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
996 text34 CODE >315:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
999 text34 CODE >321:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9A0 text34 CODE >323:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9A2 text34 CODE >328:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9A9 text34 CODE >330:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9AB text34 CODE >335:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9B0 text34 CODE >336:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9B1 text34 CODE >335:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9B2 text34 CODE >336:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9B3 text34 CODE >337:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9B4 text34 CODE >185:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9B4 text34 CODE >187:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9BF text34 CODE >253:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9CB text34 CODE >191:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9CE text34 CODE >192:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9D4 text34 CODE >193:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9D8 text34 CODE >194:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9E0 text34 CODE >195:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9E9 text34 CODE >196:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9F2 text34 CODE >197:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9F6 text34 CODE >198:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
9F7 text34 CODE >201:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A00 text34 CODE >203:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A0B text34 CODE >207:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A0C text34 CODE >208:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A10 text34 CODE >209:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A13 text34 CODE >210:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A14 text34 CODE >213:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A1B text34 CODE >216:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A1E text34 CODE >217:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A21 text34 CODE >218:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A23 text34 CODE >219:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A24 text34 CODE >218:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A26 text34 CODE >219:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A27 text34 CODE >223:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A2E text34 CODE >226:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A31 text34 CODE >227:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A34 text34 CODE >228:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A36 text34 CODE >229:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A37 text34 CODE >228:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A39 text34 CODE >229:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A3A text34 CODE >234:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A41 text34 CODE >237:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A44 text34 CODE >238:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A47 text34 CODE >239:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A49 text34 CODE >240:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A4A text34 CODE >239:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A4C text34 CODE >240:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A4D text34 CODE >253:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A55 text34 CODE >254:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A56 text34 CODE >124:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
A57 text34 CODE >127:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
A60 text34 CODE >129:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
A61 text34 CODE >643:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A61 text34 CODE >646:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A65 text34 CODE >648:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A69 text34 CODE >650:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A70 text34 CODE >652:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A73 text34 CODE >654:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A7C text34 CODE >659:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A7F text34 CODE >660:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
A80 text34 CODE >92:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
A83 text34 CODE >94:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
A88 text34 CODE >95:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
A91 text34 CODE >52:E:\projects\test_bench\MPLABX\MICROWAVE.X\LED.c
A92 text34 CODE >56:E:\projects\test_bench\MPLABX\MICROWAVE.X\LED.c
AAE text34 CODE >57:E:\projects\test_bench\MPLABX\MICROWAVE.X\LED.c
ABB text34 CODE >59:E:\projects\test_bench\MPLABX\MICROWAVE.X\LED.c
ABC text34 CODE >598:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
ABF text34 CODE >601:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
AC2 text34 CODE >603:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
AC5 text34 CODE >608:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
AD7 text34 CODE >611:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
AE3 text34 CODE >612:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
AE4 text34 CODE >614:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
AF6 text34 CODE >617:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
B02 text34 CODE >618:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
B03 text34 CODE >620:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
B15 text34 CODE >623:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
B21 text34 CODE >624:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
B22 text34 CODE >628:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
B3E text34 CODE >630:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
B45 text34 CODE >632:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
B49 text34 CODE >634:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
B4D text34 CODE >638:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
B51 text34 CODE >4:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c
B52 text34 CODE >9:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c
B54 text34 CODE >10:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c
B55 text34 CODE >12:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c
B61 text34 CODE >13:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c
B63 text34 CODE >14:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c
B67 text34 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c
B69 text34 CODE >16:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c
B6B text34 CODE >17:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c
B6C text34 CODE >18:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c
B6D text34 CODE >31:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
B6D text34 CODE >35:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
B71 text34 CODE >37:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
B75 text34 CODE >41:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
B76 text34 CODE >43:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
B79 text34 CODE >45:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
B7B text34 CODE >48:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
B99 text34 CODE >49:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
B9B text34 CODE >51:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
BC3 text34 CODE >54:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
BC4 text34 CODE >57:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
BE0 text34 CODE >60:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
BED text34 CODE >61:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
BEE text34 CODE >69:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
BFC text34 CODE >71:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
C08 text34 CODE >72:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
C09 text34 CODE >80:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
C23 text34 CODE >83:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
C2F text34 CODE >92:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
C3C text34 CODE >94:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
C49 text34 CODE >95:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
C4A text34 CODE >105:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
C6B text34 CODE >106:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
C73 text34 CODE >4:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C74 text34 CODE >6:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C75 text34 CODE >11:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C76 text34 CODE >10:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C77 text34 CODE >11:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C78 text34 CODE >12:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C7A text34 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C7B text34 CODE >14:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C7C text34 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C7D text34 CODE >16:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C7F text34 CODE >19:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C80 text34 CODE >18:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C81 text34 CODE >19:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C82 text34 CODE >20:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C84 text34 CODE >23:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C85 text34 CODE >22:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C86 text34 CODE >23:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C87 text34 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C89 text34 CODE >27:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C8A text34 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C8B text34 CODE >27:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C8C text34 CODE >28:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C8E text34 CODE >31:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C8F text34 CODE >30:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C90 text34 CODE >31:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C91 text34 CODE >32:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C93 text34 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C94 text34 CODE >34:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C95 text34 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C96 text34 CODE >36:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C98 text34 CODE >39:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C99 text34 CODE >38:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C9A text34 CODE >39:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C9B text34 CODE >50:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C9C text34 CODE >51:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
C9D text34 CODE >71:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
C9E text34 CODE >73:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
C9F text34 CODE >74:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
CA0 text34 CODE >71:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
CA1 text34 CODE >73:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
CA4 text34 CODE >74:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
CA5 text34 CODE >59:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
CA5 text34 CODE >62:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
CA8 text34 CODE >63:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
CAC text34 CODE >64:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
CB0 text34 CODE >65:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
CB2 text34 CODE >118:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
CB2 text34 CODE >121:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
CB4 text34 CODE >122:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
CB5 text34 CODE >131:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
CB5 text34 CODE >133:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
CBD text34 CODE >134:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
CBE text34 CODE >120:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
CBF text34 CODE >123:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
CC5 text34 CODE >124:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
CD0 text34 CODE >126:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
CD4 text34 CODE >130:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
CD9 text34 CODE >131:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
CDD text34 CODE >69:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
CDD text34 CODE >73:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
CE8 text34 CODE >74:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
CEC text34 CODE >4:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
CED text34 CODE >9:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
CEE text34 CODE >10:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
CF1 text34 CODE >11:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
CF2 text34 CODE >14:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
CF3 text34 CODE >12:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
CF5 text34 CODE >13:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
CF7 text34 CODE >12:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
CF8 text34 CODE >16:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
CF8 text34 CODE >17:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
CFA text34 CODE >18:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
CFE text34 CODE >19:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
D00 text34 CODE >20:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
D01 text34 CODE >22:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
D03 text34 CODE >23:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
D05 text34 CODE >25:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
D06 text34 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c
D07 text34 CODE >106:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
D08 text34 CODE >109:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
D0E text34 CODE >110:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
D19 text34 CODE >112:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
D1D text34 CODE >116:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
D22 text34 CODE >117:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
D26 text34 CODE >48:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D26 text34 CODE >50:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D29 text34 CODE >51:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D2A text34 CODE >136:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D2B text34 CODE >138:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D2F text34 CODE >139:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D31 text34 CODE >140:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D33 text34 CODE >141:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D35 text34 CODE >143:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D36 text34 CODE >53:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
D37 text34 CODE >55:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
D3C text34 CODE >56:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
D42 text34 CODE >42:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D42 text34 CODE >44:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D44 text34 CODE >45:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
D45 text34 CODE >30:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D45 text34 CODE >33:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D49 text34 CODE >35:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D4D text34 CODE >43:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D4E text34 CODE >41:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D4F text34 CODE >43:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D52 text34 CODE >45:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D5D text34 CODE >46:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D5F text34 CODE >47:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D63 text34 CODE >48:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D66 text34 CODE >50:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D73 text34 CODE >51:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D76 text34 CODE >53:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D82 text34 CODE >54:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D89 text34 CODE >55:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D8A text34 CODE >57:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D99 text34 CODE >58:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
D9C text34 CODE >60:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DA3 text34 CODE >62:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DAA text34 CODE >63:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DB8 text34 CODE >64:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DBF text34 CODE >65:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DC9 text34 CODE >67:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DCB text34 CODE >68:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DCD text34 CODE >69:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DCE text34 CODE >70:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DD6 text34 CODE >72:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DD8 text34 CODE >73:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DD9 text34 CODE >74:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DDA text34 CODE >77:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DDC text34 CODE >80:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
DDD text34 CODE >134:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
DDE text34 CODE >137:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
DE4 text34 CODE >138:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
DEF text34 CODE >140:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
DF3 text34 CODE >144:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
DF8 text34 CODE >145:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
DFC text34 CODE >80:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
DFC text34 CODE >83:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
DFF text34 CODE >84:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E06 text34 CODE >85:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E0F text34 CODE >86:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E14 text34 CODE >87:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E1D text34 CODE >88:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E23 text34 CODE >89:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E2A text34 CODE >68:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E2A text34 CODE >71:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E2D text34 CODE >72:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E34 text34 CODE >73:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E3D text34 CODE >74:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E42 text34 CODE >75:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E4B text34 CODE >76:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E51 text34 CODE >77:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E58 text34 CODE >150:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E58 text34 CODE >153:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E5B text34 CODE >154:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E62 text34 CODE >155:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E6B text34 CODE >156:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E70 text34 CODE >157:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E79 text34 CODE >158:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E7F text34 CODE >159:E:\projects\test_bench\MPLABX\MICROWAVE.X\Display.c
E86 text34 CODE >61:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
E86 text34 CODE >63:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
E92 text34 CODE >64:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EA3 text34 CODE >63:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EA4 text34 CODE >78:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EA5 text34 CODE >80:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EA6 text34 CODE >84:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EA9 text34 CODE >85:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EAA text34 CODE >88:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EAD text34 CODE >89:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EAE text34 CODE >91:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EB1 text34 CODE >92:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EB2 text34 CODE >94:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EB5 text34 CODE >95:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EB6 text34 CODE >96:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
ECC text34 CODE >97:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
ECD text34 CODE >100:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
ECD text34 CODE >102:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
ED1 text34 CODE >103:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
ED5 text34 CODE >105:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
ED7 text34 CODE >106:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
ED8 text34 CODE >149:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
ED9 text34 CODE >152:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EE0 text34 CODE >154:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EE8 text34 CODE >156:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EF0 text34 CODE >159:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
EF7 text34 CODE >162:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F00 text34 CODE >164:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F08 text34 CODE >167:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F0D text34 CODE >169:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F0E text34 CODE >171:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F11 text34 CODE >174:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F18 text34 CODE >176:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F1F text34 CODE >178:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F27 text34 CODE >181:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F2E text34 CODE >184:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F37 text34 CODE >186:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F3F text34 CODE >189:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F44 text34 CODE >191:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
F45 text34 CODE >31:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
F46 text34 CODE >34:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
F6D text34 CODE >36:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
F6E text34 CODE >38:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
F6F text34 CODE >41:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
F77 text34 CODE >43:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
F78 text34 CODE >45:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
F79 text34 CODE >47:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
F94 text34 CODE >49:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
F95 text34 CODE >4:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
F96 text34 CODE >8:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
F98 text34 CODE >9:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
F9E text34 CODE >10:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
FA3 text34 CODE >12:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c
FAF text34 CODE >82:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
FAF text34 CODE >85:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
FB5 text34 CODE >86:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
FB9 text34 CODE >87:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
FBA text34 CODE >255:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FBA text34 CODE >257:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FBB text34 CODE >261:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FBD text34 CODE >263:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FC1 text34 CODE >265:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FC4 text34 CODE >266:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FC5 text34 CODE >267:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FC6 text34 CODE >269:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FC7 text34 CODE >272:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FE0 text34 CODE >277:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FE1 text34 CODE >278:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FE4 text34 CODE >279:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FE5 text34 CODE >289:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FF9 text34 CODE >290:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
FFA text34 CODE >40:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
FFA text34 CODE >43:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
FFE text34 CODE >45:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
FFF text34 CODE >46:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
1D6D text33 CODE >65:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D6D text33 CODE >67:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D6F text33 CODE >70:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D72 text33 CODE >71:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D73 text33 CODE >70:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D74 text33 CODE >71:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D78 text33 CODE >72:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D79 text33 CODE >76:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D7A text33 CODE >72:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D7B text33 CODE >73:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D7C text33 CODE >74:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D7D text33 CODE >75:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D7E text33 CODE >76:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D81 text33 CODE >77:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D83 text33 CODE >78:E:\projects\test_bench\MPLABX\MICROWAVE.X\CONTROL.c
1D44 text32 CODE >21:E:\projects\test_bench\MPLABX\MICROWAVE.X\util.c
1D44 text32 CODE >23:E:\projects\test_bench\MPLABX\MICROWAVE.X\util.c
1D45 text32 CODE >24:E:\projects\test_bench\MPLABX\MICROWAVE.X\util.c
1D46 text32 CODE >25:E:\projects\test_bench\MPLABX\MICROWAVE.X\util.c
1020 text10 CODE >24:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
1020 text10 CODE >40:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
1023 text10 CODE >41:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
1024 text10 CODE >42:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
102C text10 CODE >55:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
1031 text10 CODE >56:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
1032 text10 CODE >26:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1032 text10 CODE >29:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1035 text10 CODE >31:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
103D text10 CODE >33:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1043 text10 CODE >35:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1045 text10 CODE >37:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1046 text10 CODE >38:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
1047 text10 CODE >26:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1047 text10 CODE >29:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
104A text10 CODE >31:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1052 text10 CODE >33:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
1058 text10 CODE >35:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
105A text10 CODE >37:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
105B text10 CODE >38:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
105C text10 CODE >186:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
105C text10 CODE >190:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
10A0 text10 CODE >192:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
10A2 text10 CODE >194:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
10A3 text10 CODE >10:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10A3 text10 CODE >21:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10A8 text10 CODE >22:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10AD text10 CODE >23:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10B0 text10 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10B2 text10 CODE >28:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10B6 text10 CODE >30:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10B8 text10 CODE >32:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10BD text10 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10BD text10 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10BF text10 CODE >37:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10C0 text10 CODE >38:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10C1 text10 CODE >39:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10C1 text10 CODE >41:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10C6 text10 CODE >44:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10CB text10 CODE >46:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10CE text10 CODE >47:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10CF text10 CODE >49:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10D4 text10 CODE >50:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10D7 text10 CODE >51:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10D9 text10 CODE >55:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10DD text10 CODE >57:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10DF text10 CODE >59:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10E4 text10 CODE >60:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10E4 text10 CODE >62:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10E6 text10 CODE >64:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10E7 text10 CODE >65:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10E8 text10 CODE >66:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10E8 text10 CODE >68:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10ED text10 CODE >75:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10F2 text10 CODE >77:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10F4 text10 CODE >78:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10F6 text10 CODE >81:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10F8 text10 CODE >82:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10FA text10 CODE >83:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
10FC text10 CODE >84:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1100 text10 CODE >85:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1103 text10 CODE >86:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1107 text10 CODE >87:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
110A text10 CODE >88:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
110D text10 CODE >89:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1111 text10 CODE >90:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1114 text10 CODE >91:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1117 text10 CODE >92:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
111B text10 CODE >93:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
111E text10 CODE >94:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1121 text10 CODE >95:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1125 text10 CODE >98:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1127 text10 CODE >100:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
113F text10 CODE >101:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
114C text10 CODE >102:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1151 text10 CODE >103:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1154 text10 CODE >104:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1155 text10 CODE >106:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1155 text10 CODE >109:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1157 text10 CODE >110:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
115B text10 CODE >111:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
115C text10 CODE >112:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
115C text10 CODE >113:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
115E text10 CODE >114:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
115E text10 CODE >115:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1161 text10 CODE >116:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1163 text10 CODE >118:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1169 text10 CODE >119:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
116B text10 CODE >106:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1171 text10 CODE >121:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1171 text10 CODE >124:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1173 text10 CODE >127:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1176 text10 CODE >128:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
117C text10 CODE >132:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1191 text10 CODE >134:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1193 text10 CODE >135:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1196 text10 CODE >136:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
119A text10 CODE >137:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
119B text10 CODE >138:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
119B text10 CODE >139:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
119D text10 CODE >140:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
119D text10 CODE >141:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
11A0 text10 CODE >142:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
11A2 text10 CODE >144:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
11A8 text10 CODE >145:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
11AB text10 CODE >153:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
11C0 text10 CODE >154:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
11F1 text10 CODE >155:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
11F4 text10 CODE >156:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
11F6 text10 CODE >157:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
11F7 text10 CODE >158:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1200 text10 CODE >162:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
120E text10 CODE >163:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
120E text10 CODE >166:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1219 text10 CODE >167:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
121F text10 CODE >172:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1224 text10 CODE >173:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1227 text10 CODE >174:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1229 text10 CODE >175:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1229 text10 CODE >176:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
122C text10 CODE >177:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
122E text10 CODE >179:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
122E text10 CODE >180:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1230 text10 CODE >182:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1232 text10 CODE >183:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1233 text10 CODE >171:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1236 text10 CODE >192:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1238 text10 CODE >193:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
123A text10 CODE >194:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
123E text10 CODE >198:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1241 text10 CODE >195:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1244 text10 CODE >203:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1248 text10 CODE >204:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1250 text10 CODE >205:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1252 text10 CODE >206:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1257 text10 CODE >207:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1259 text10 CODE >208:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
125A text10 CODE >215:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1260 text10 CODE >216:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1265 text10 CODE >218:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1268 text10 CODE >219:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1269 text10 CODE >225:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
126B text10 CODE >226:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
126D text10 CODE >227:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
126E text10 CODE >229:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
126E text10 CODE >230:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1270 text10 CODE >232:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1275 text10 CODE >233:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
1278 text10 CODE >234:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
127A text10 CODE >237:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c
127B text10 CODE >196:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
127B text10 CODE >201:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
12E5 text10 CODE >203:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
1305 text10 CODE >205:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
1306 text10 CODE >207:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
1306 text10 CODE >211:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
1370 text10 CODE >213:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
1390 text10 CODE >215:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
1391 text10 CODE >8:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1391 text10 CODE >17:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1395 text10 CODE >18:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1398 text10 CODE >19:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1399 text10 CODE >20:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
139A text10 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
139D text10 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
139F text10 CODE >28:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13A3 text10 CODE >29:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13A3 text10 CODE >31:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13A4 text10 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13A5 text10 CODE >34:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13A5 text10 CODE >36:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13A9 text10 CODE >39:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13AC text10 CODE >40:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13AF text10 CODE >41:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13B0 text10 CODE >42:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13B1 text10 CODE >45:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13B4 text10 CODE >48:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13B6 text10 CODE >50:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13BA text10 CODE >51:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13BA text10 CODE >53:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13BB text10 CODE >54:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13BC text10 CODE >55:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13BC text10 CODE >57:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13C0 text10 CODE >65:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13C5 text10 CODE >66:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13CA text10 CODE >119:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13D4 text10 CODE >120:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13D8 text10 CODE >121:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13DD text10 CODE >122:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13E7 text10 CODE >123:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13EF text10 CODE >124:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
13F8 text10 CODE >125:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1402 text10 CODE >126:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
140A text10 CODE >127:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1413 text10 CODE >128:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
141A text10 CODE >129:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1424 text10 CODE >130:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
143D text10 CODE >131:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1447 text10 CODE >132:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1460 text10 CODE >133:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1467 text10 CODE >134:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1471 text10 CODE >135:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
148A text10 CODE >136:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1494 text10 CODE >137:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
14AD text10 CODE >138:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
14B7 text10 CODE >139:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
14D0 text10 CODE >140:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
14DA text10 CODE >141:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
14FA text10 CODE >145:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1503 text10 CODE >146:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
150A text10 CODE >149:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1512 text10 CODE >158:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1515 text10 CODE >152:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1517 text10 CODE >153:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
151C text10 CODE >154:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
151D text10 CODE >155:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
151E text10 CODE >158:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
151F text10 CODE >157:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1524 text10 CODE >152:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1525 text10 CODE >163:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1526 text10 CODE >164:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1528 text10 CODE >165:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1536 text10 CODE >169:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1539 text10 CODE >166:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
153B text10 CODE >174:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
153E text10 CODE >175:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1545 text10 CODE >176:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1547 text10 CODE >177:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
154C text10 CODE >178:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
154F text10 CODE >183:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
155A text10 CODE >184:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1562 text10 CODE >185:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1563 text10 CODE >187:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1570 text10 CODE >188:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1576 text10 CODE >190:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1577 text10 CODE >191:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1578 text10 CODE >194:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
157C text10 CODE >195:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1580 text10 CODE >196:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1581 text10 CODE >197:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1582 text10 CODE >199:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1585 text10 CODE >200:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1585 text10 CODE >201:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1587 text10 CODE >203:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
158F text10 CODE >205:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c
1590 text10 CODE >4:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
1591 text10 CODE >5:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
1593 text10 CODE >6:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
1596 text10 CODE >10:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
1598 text10 CODE >11:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
159E text10 CODE >13:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15A1 text10 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15A3 text10 CODE >16:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15A9 text10 CODE >18:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15AC text10 CODE >20:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15AE text10 CODE >21:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15B4 text10 CODE >23:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15B7 text10 CODE >25:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15B9 text10 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15BF text10 CODE >28:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15C2 text10 CODE >30:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15C4 text10 CODE >31:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15CA text10 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15CD text10 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15CF text10 CODE >36:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15D5 text10 CODE >38:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15D8 text10 CODE >40:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15DA text10 CODE >41:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15E0 text10 CODE >43:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15E3 text10 CODE >45:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15E5 text10 CODE >46:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15EB text10 CODE >47:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15EB text10 CODE >59:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15EF text10 CODE >60:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c
15F0 text10 CODE >10:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
15F1 text10 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
15F5 text10 CODE >16:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1604 text10 CODE >17:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1605 text10 CODE >19:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
160D text10 CODE >20:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
160D text10 CODE >21:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1613 text10 CODE >22:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1618 text10 CODE >23:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
161A text10 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
161E text10 CODE >25:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
161F text10 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1624 text10 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1625 text10 CODE >29:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1626 text10 CODE >30:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
162D text10 CODE >31:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1632 text10 CODE >28:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1637 text10 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
163B text10 CODE >34:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
163C text10 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1641 text10 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1643 text10 CODE >37:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1644 text10 CODE >38:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1645 text10 CODE >39:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1647 text10 CODE >40:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1654 text10 CODE >41:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1658 text10 CODE >42:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1659 text10 CODE >43:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1661 text10 CODE >44:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c
1662 text10 CODE >8:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1662 text10 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1666 text10 CODE >27:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1669 text10 CODE >28:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
166A text10 CODE >29:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
166B text10 CODE >33:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
166E text10 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1670 text10 CODE >37:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1674 text10 CODE >38:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1674 text10 CODE >40:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1675 text10 CODE >42:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1676 text10 CODE >43:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1677 text10 CODE >44:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1677 text10 CODE >46:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
167B text10 CODE >49:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
167E text10 CODE >50:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1681 text10 CODE >51:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1682 text10 CODE >52:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1683 text10 CODE >56:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1686 text10 CODE >58:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1688 text10 CODE >60:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
168C text10 CODE >61:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
168C text10 CODE >63:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
168D text10 CODE >65:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
168E text10 CODE >66:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
168F text10 CODE >67:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
168F text10 CODE >69:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1693 text10 CODE >75:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1699 text10 CODE >77:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
169A text10 CODE >76:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
169E text10 CODE >77:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16A1 text10 CODE >78:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16A3 text10 CODE >79:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16AC text10 CODE >83:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16AF text10 CODE >85:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16B4 text10 CODE >89:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16BF text10 CODE >92:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16C7 text10 CODE >93:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16CB text10 CODE >94:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16CF text10 CODE >96:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16D0 text10 CODE >97:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16D4 text10 CODE >100:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16D7 text10 CODE >101:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16DC text10 CODE >102:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16E1 text10 CODE >103:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16E2 text10 CODE >104:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16E3 text10 CODE >106:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16E8 text10 CODE >112:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16F8 text10 CODE >115:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
16F9 text10 CODE >116:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1707 text10 CODE >118:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1708 text10 CODE >97:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1709 text10 CODE >122:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
170E text10 CODE >123:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
170F text10 CODE >127:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1711 text10 CODE >128:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1716 text10 CODE >129:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1717 text10 CODE >130:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1718 text10 CODE >133:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1719 text10 CODE >132:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
171E text10 CODE >133:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1721 text10 CODE >127:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1722 text10 CODE >139:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1723 text10 CODE >140:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1725 text10 CODE >141:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1733 text10 CODE >145:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1736 text10 CODE >142:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1738 text10 CODE >150:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
173B text10 CODE >151:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1742 text10 CODE >152:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1744 text10 CODE >153:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1749 text10 CODE >154:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
174C text10 CODE >159:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1757 text10 CODE >160:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
175C text10 CODE >161:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1760 text10 CODE >165:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
176D text10 CODE >166:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1771 text10 CODE >167:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1775 text10 CODE >169:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1776 text10 CODE >173:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
177A text10 CODE >175:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
177C text10 CODE >176:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
177D text10 CODE >177:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
177E text10 CODE >179:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
177E text10 CODE >180:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
177F text10 CODE >182:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c
1783 text10 CODE >43:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
1783 text10 CODE >47:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
178A text10 CODE >48:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
178F text10 CODE >49:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17A2 text10 CODE >52:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17A3 text10 CODE >50:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17A4 text10 CODE >51:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17A5 text10 CODE >52:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17A6 text10 CODE >53:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17A8 text10 CODE >54:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17AD text10 CODE >57:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17B2 text10 CODE >58:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17B5 text10 CODE >60:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17B9 text10 CODE >62:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17BC text10 CODE >63:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17C1 text10 CODE >64:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17C2 text10 CODE >62:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17C3 text10 CODE >67:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17C6 text10 CODE >68:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17D1 text10 CODE >70:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c
17D2 text10 CODE >59:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
17D2 text10 CODE >75:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
17D5 text10 CODE >76:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
17D6 text10 CODE >77:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
17DE text10 CODE >90:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
17E3 text10 CODE >91:E:\projects\test_bench\MPLABX\MICROWAVE.X\CCP.c
17E4 text10 CODE >32:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17E4 text10 CODE >35:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17EA text10 CODE >37:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17EC text10 CODE >39:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17EE text10 CODE >41:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17F1 text10 CODE >42:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17F2 text10 CODE >54:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17F2 text10 CODE >56:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17F3 text10 CODE >57:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17F4 text10 CODE >58:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17F4 text10 CODE >60:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17F5 text10 CODE >61:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR2.c
17F6 text10 CODE >71:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
17F8 text10 CODE >73:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
17FA text10 CODE >74:E:\projects\test_bench\MPLABX\MICROWAVE.X\HEATER.c
17FB text10 CODE >71:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
17FD text10 CODE >73:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
17FF text10 CODE >74:E:\projects\test_bench\MPLABX\MICROWAVE.X\MOTOR.c
424 text5 CODE >131:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
424 text5 CODE >136:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
427 text5 CODE >139:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
441 text5 CODE >141:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
44C text5 CODE >143:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
44D text5 CODE >146:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
450 text5 CODE >147:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
451 text5 CODE >146:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
453 text5 CODE >147:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
457 text5 CODE >148:E:\projects\test_bench\MPLABX\MICROWAVE.X\SW.c
45D text5 CODE >4:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
45E text5 CODE >6:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
45F text5 CODE >11:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
460 text5 CODE >10:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
461 text5 CODE >11:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
462 text5 CODE >12:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
464 text5 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
465 text5 CODE >14:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
466 text5 CODE >15:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
467 text5 CODE >16:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
469 text5 CODE >19:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
46A text5 CODE >18:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
46B text5 CODE >19:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
46C text5 CODE >20:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
46E text5 CODE >23:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
46F text5 CODE >22:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
470 text5 CODE >23:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
471 text5 CODE >24:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
473 text5 CODE >27:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
474 text5 CODE >26:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
475 text5 CODE >27:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
476 text5 CODE >28:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
478 text5 CODE >31:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
479 text5 CODE >30:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
47A text5 CODE >31:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
47B text5 CODE >32:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
47D text5 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
47E text5 CODE >34:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
47F text5 CODE >35:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
480 text5 CODE >36:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
482 text5 CODE >39:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
483 text5 CODE >38:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
484 text5 CODE >39:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
485 text5 CODE >50:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
486 text5 CODE >51:C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c
487 text5 CODE >29:E:\projects\test_bench\MPLABX\MICROWAVE.X\LED.c
487 text5 CODE >32:E:\projects\test_bench\MPLABX\MICROWAVE.X\LED.c
488 text5 CODE >35:E:\projects\test_bench\MPLABX\MICROWAVE.X\LED.c
499 text5 CODE >36:E:\projects\test_bench\MPLABX\MICROWAVE.X\LED.c
4AB text5 CODE >37:E:\projects\test_bench\MPLABX\MICROWAVE.X\LED.c
4B2 text5 CODE >39:E:\projects\test_bench\MPLABX\MICROWAVE.X\LED.c
4B7 text5 CODE >12:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4B7 text5 CODE >14:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4B8 text5 CODE >15:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4B9 text5 CODE >17:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4C5 text5 CODE >18:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4D2 text5 CODE >19:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4D7 text5 CODE >20:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4D8 text5 CODE >22:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4E5 text5 CODE >23:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4EA text5 CODE >24:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4EB text5 CODE >26:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4F1 text5 CODE >27:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4F6 text5 CODE >28:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4F9 text5 CODE >29:E:\projects\test_bench\MPLABX\MICROWAVE.X\Keypad.c
4FA text5 CODE >27:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
4FA text5 CODE >30:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
502 text5 CODE >31:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
509 text5 CODE >32:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
510 text5 CODE >33:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
517 text5 CODE >39:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
51E text5 CODE >40:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
525 text5 CODE >41:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
52C text5 CODE >43:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
52D text5 CODE >45:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
531 text5 CODE >46:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
535 text5 CODE >49:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
539 text5 CODE >54:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
53D text5 CODE >55:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
541 text5 CODE >56:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
548 text5 CODE >58:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
549 text5 CODE >18:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
54B text5 CODE >21:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
581 text5 CODE >23:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
582 text5 CODE >171:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
585 text5 CODE >174:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
58C text5 CODE >176:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
593 text5 CODE >178:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
59B text5 CODE >181:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
5A4 text5 CODE >184:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
5AD text5 CODE >186:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
5B5 text5 CODE >189:E:\projects\test_bench\MPLABX\MICROWAVE.X\LCD.c
5BC text5 CODE >31:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
5BE text5 CODE >34:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
5E5 text5 CODE >36:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
5E6 text5 CODE >38:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
5E7 text5 CODE >41:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
5EF text5 CODE >43:E:\projects\test_bench\MPLABX\MICROWAVE.X\GPIO.c
800 text3 CODE >29:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
800 text3 CODE >32:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
803 text3 CODE >34:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
804 text3 CODE >36:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
807 text3 CODE >37:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
808 text3 CODE >84:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
808 text3 CODE >86:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
80B text3 CODE >87:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
1D47 text2 CODE >80:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
1D47 text2 CODE >82:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
1D4A text2 CODE >83:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIMR0.c
1D53 text1 CODE >32:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1D53 text1 CODE >34:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1D57 text1 CODE >35:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1D58 text1 CODE >36:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1D59 text1 CODE >37:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1D5A text1 CODE >38:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
1D5B text1 CODE >39:E:\projects\test_bench\MPLABX\MICROWAVE.X\TIME.c
7B9 maintext CODE >50:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7B9 maintext CODE >53:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7BE maintext CODE >54:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7C3 maintext CODE >55:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7C8 maintext CODE >56:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7CD maintext CODE >57:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7D2 maintext CODE >58:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7D7 maintext CODE >59:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7DC maintext CODE >60:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7E1 maintext CODE >61:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7E6 maintext CODE >62:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7EB maintext CODE >64:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7F0 maintext CODE >65:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
7F0 maintext CODE >68:E:\projects\test_bench\MPLABX\MICROWAVE.X\MICROWAVE.c
1D4B clrtext CODE >2839:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D4B clrtext CODE >2840:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D4C clrtext CODE >2841:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D4C clrtext CODE >2842:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D4D clrtext CODE >2843:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D4E clrtext CODE >2844:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D4F clrtext CODE >2845:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D50 clrtext CODE >2846:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D51 clrtext CODE >2847:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D52 clrtext CODE >2848:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D5C inittext CODE >2793:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D5C inittext CODE >2794:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D5D inittext CODE >2795:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D5E inittext CODE >2796:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D5F inittext CODE >2797:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D60 inittext CODE >2804:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D60 inittext CODE >2805:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D63 inittext CODE >2806:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D64 inittext CODE >2807:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D65 inittext CODE >2808:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D66 inittext CODE >2809:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D67 inittext CODE >2810:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D68 inittext CODE >2811:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D69 inittext CODE >2812:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D6A inittext CODE >2813:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D6B inittext CODE >2814:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
1D6C inittext CODE >2815:C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.s
# %SYMTAB Section
# An enumeration of all symbols in the program.
# The beginning of the section is indicated by %SYMTAB.
# Each line describes a single symbol as follows:
#    <label> <value> [-]<load-adj> <class> <space> <psect> <file-name>
# The value and load-adj are both in unqualified hexadecimal.
# All other numeric values are in decimal.  The load-adj is the
# quantity one needs to add to the symbol value in order to obtain the load
# address of the symbol.  This value may be signed. If the symbol
# was defined in a psect then <psect> will be "-". File-name
# is the name of the object file in which the symbol was defined.
%SYMTAB
___latbits 2 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 1E0 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
_CCP1_PWM_DUTY_CYCLE_LOAD$1939 1E5 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__size_of_KEYPAD_UPDATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
___lwmod@counter 74 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__LdataBANK0 0 0 ABS 0 dataBANK0 -
__LdataBANK3 0 0 ABS 0 dataBANK3 -
_SWs_INIT 848 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
_START_BLINKING_AT 12B2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 1E9 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__Hspace_0 2008 0 ABS 0 - -
__Hspace_1 1ED 0 ABS 0 - -
__Hspace_2 0 0 ABS 0 - -
__Hspace_3 0 0 ABS 0 - -
__end_of_GPIO_PIN_SET_STATE BCC 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__HidataBANK0 0 0 ABS 0 idataBANK0 -
__HidataBANK3 0 0 ABS 0 idataBANK3 -
i1_MOTOR_SET_STATE 1940 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
i1__Umul8_16@word_mpld 76 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
_LCD_SEND_A_NUMBER 19BA 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of_LCD_SET_CURSOR 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
HEATING_HANDLER@current_time 34 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_DESIRED_SPEED 1EC 0 BANK3 1 nvBANK3 dist/default/debug\MICROWAVE.X.debug.o
GPIO_PORT_SET_STATE@GPIO_PORTx A4 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__size_of_SET_HEATING_HANDLER_ON_WORK 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
GPIO_PIN_SET_STATE@GPIO_PIN_STATE A1 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
_LAST_PRESSED_KEY 1A2 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
i1___fldiv@a 20 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___fldiv@b 24 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_last_time 198 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
__end_of_SWs_INIT 8BA 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__Heeprom_data 0 0 EEDATA 3 eeprom_data -
i1__Umul8_16@multiplicand 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
LED_SET_STATE@LED_NO 22 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___flmul@a 3D 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___flmul@b 39 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
TIME_START_AT@START_HOURS 71 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__end_of_SET_ROTOR_PWR_HANDLER 3C28 0 CODE 0 text56 dist/default/debug\MICROWAVE.X.debug.o
__Hstrings 0 0 ABS 0 strings -
__end_of_TIME_INIT 3AB8 0 CODE 0 text1 dist/default/debug\MICROWAVE.X.debug.o
__end_of_TIME_STOP 1A54 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
UPDATE_LCD_SECONDS@SECONDS 2E 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___fldiv@new_exp 31 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
itoa@base 26 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_LEDs 1CF 0 BANK3 1 dataBANK3 dist/default/debug\MICROWAVE.X.debug.o
_PEIE 5E 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_T0CS 40D 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_T0SE 40C 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_TMR0 1 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_TMR2 11 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
___sp 0 0 STACK 2 stack C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
_itoa 1F2A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_main F72 0 CODE 0 maintext dist/default/debug\MICROWAVE.X.debug.o
_utoa 3CC8 0 CODE 0 text87 dist/default/debug\MICROWAVE.X.debug.o
TIME_START_AT@START_MINUTES 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
btemp 7E 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
HEATER_SET_STATE@HEATER_STATE A0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__size_of_TIME_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_TIME_STOP 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
start 24 0 CODE 0 init C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
GOTO_NEXT_DIGIT@count_right 1A5 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
___flmul@aexp D4 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___flmul@bexp D9 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___flmul@prod DA 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___flmul@sign D3 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___flmul@temp DE 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__end_of_TIME_CONTINUE 1A8A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE 74 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__size_of_MOTOR_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_LCD_SEND_A_STRING 1D0C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of___fladd 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of___fldiv 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of___flmul 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of___fltol 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__CFG_BOREN$OFF 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_itoa 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_main 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_utoa 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of___lbdiv 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of___lbmod 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of___lwdiv 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of___lwmod 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_MOTOR_UPDATE 3B4C 0 CODE 0 text38 dist/default/debug\MICROWAVE.X.debug.o
__size_of_SET_TIME_HANDLER_ON_WORK 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_HEATING_HANDLER 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_CCP1_PWM_DUTY_CYCLE_LOAD 260C 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
GPIO_PIN_INIT@GPIO_PIN_NO A3 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__end_of_KEYPAD_UPDATE 1BBA 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of_DISP_UPDATE_TIME_UNIT_AT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_PRESSED_KEY 19E 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
_OPTION_REGbits 81 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
UPDATE_LCD_MINUTES@MINUTES 2E 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
LCD_SEND_A_NUMBER@string 2A 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__end_of_SET_HEATING_HANDLER_ON_WORK 11FE 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_FINISH_HANDLER 1FF4 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_GPIO_PIN_SET_STATE B78 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__LidataBANK0 0 0 ABS 0 idataBANK0 -
__LidataBANK3 0 0 ABS 0 idataBANK3 -
START_BLINKING_AT@BLINKED 25 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_SET_ROTOR_PWR_HANDLER 3BDE 0 CODE 0 text56 dist/default/debug\MICROWAVE.X.debug.o
_LCD_INIT 9F4 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
GPIO_PIN_GET_STATE@GPIO_PORTx 78 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__size_of_SET_ROTOR_PWR_HANDLER_ON_WORK 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__Hpowerup 0 0 CODE 0 powerup -
LCD_SEND_A_STRING@string 21 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___bmul@multiplier 71 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
_TIME_INIT 3AA6 0 CODE 0 text1 dist/default/debug\MICROWAVE.X.debug.o
_TIME_STOP 1A4C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_ofi1_GPIO_PIN_SET_STATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1___xxtofl 7AA 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__size_of_STOP_BLINKING 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_HEATER_INIT 20B8 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
utoa@c 22 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
utoa@v 20 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_STOP_HEATING 14C2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_LCD_INIT A92 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
intlevel0 0 0 ENTRY 0 functab C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
intlevel1 0 0 ENTRY 0 functab C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
intlevel2 0 0 ENTRY 0 functab C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
intlevel3 0 0 ENTRY 0 functab C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
intlevel4 0 0 ENTRY 0 functab C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
intlevel5 0 0 ENTRY 0 functab C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
__size_of_TIME_START_AT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
___bmul@multiplicand A0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__size_of_SET_HEATING_HANDLER 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_ofi1_CCP1_PWM_DUTY_CYCLE_LOAD 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
wtemp0 7E 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
GOTO_NEXT_DIGIT@KEY 28 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__Hfunctab 0 0 ENTRY 0 functab -
__end_of_DISP_MOTOR_DATA 1C54 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of_CONTROL_UPDATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_DISP_HEATER_DATA 1C54 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1_GPIO_PIN_SET_STATE 1EDC 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of_MOTOR_UPDATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__Hclrtext 0 0 ABS 0 clrtext -
__size_of_TIME_UPDATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_HEATER_UPDATE 3B08 0 CODE 0 text42 dist/default/debug\MICROWAVE.X.debug.o
_SYS_UPDATE 1018 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_TIMER2_START 2FE4 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
_UPDATE_LCD_HOURS 1BBA 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_CCP2_PWM_DUTY_CYCLE_LOAD$1940 1E5 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1_CCP2_PWM_DUTY_CYCLE_LOAD 20A 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
_KEYPAD_INIT 96E 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
_KEYPAD_info 1C6 0 BANK3 1 dataBANK3 dist/default/debug\MICROWAVE.X.debug.o
_KEYPAD_GET_PRESSED_KEY 1F5E 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of__Umul8_16 2BE0 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
LED_SET_STATE@LED_STATE 20 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__end_of_STOP_BLINKING 196A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
i1___fltol@exp1 5B 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__size_of__Umul8_16 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_CCPR1L 15 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_CCPR2L 1B 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
CCP_PWM_PERIOD_LOAD@PERIOD 1E0 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
_TIMER0_UPDATE 1FF4 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_HEATER_WORK_STATE 1A8 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
__size_of_CCP2_PWM_DUTY_CYCLE_LOAD 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_TIME_START_AT 1A6C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of___bmul 90E 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
DISP_UPDATE_TIME@time 2F 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__size_of_STOP_HEATING 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_MOTOR_UPDATE 3B94 0 CODE 0 text38 dist/default/debug\MICROWAVE.X.debug.o
___lbdiv@dividend 71 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
___lbmod@divisor 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
i1GPIO_PIN_SET_STATE@GPIO_PORTx 7D 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__Lmaintext 0 0 ABS 0 maintext -
__end_ofi1___fldiv E1C 0 CODE 0 text48 dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1___flmul 606 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1___fltol 848 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
___fldiv@aexp C6 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___fldiv@bexp C5 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___fldiv@sign BE 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__size_of_TIME_GET 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_SWs_UPDATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__LnvBANK3 0 0 ABS 0 nvBANK3 -
_SET_HEATING_HANDLER 3B94 0 CODE 0 text60 dist/default/debug\MICROWAVE.X.debug.o
___bmul@multiplier A2 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
CONTROL_UPDATE@control_timer_counter 1A6 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
__end_of_SET_TIME_HANDLER_ON_WORK 3EBE 0 CODE 0 text50 dist/default/debug\MICROWAVE.X.debug.o
__size_ofi1___fldiv 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_ofi1___flmul 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_ofi1___fltol 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
i1_CCP1_PWM_DUTY_CYCLE_LOAD 66 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
___lwmod@divisor 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__Umul8_16 2B20 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__end_of___fladd 24F6 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__end_of___fldiv 2F06 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__end_of___flmul 2B20 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__end_of___fltol 2FA4 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1_HEATER_SET_STATE 1940 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_ofi1_GPIO_PORT_SET_STATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of___lbdiv 1A0E 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of___lbmod 16DA 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of___lwdiv 3DB6 0 CODE 0 text87 dist/default/debug\MICROWAVE.X.debug.o
__end_of___lwmod 3DFE 0 CODE 0 text87 dist/default/debug\MICROWAVE.X.debug.o
GPIO_PIN_SET_STATE@GPIO_PIN_NO A0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__end_of_UPDATE_LCD_SECONDS 1A4C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_DISP_UPDATE_TIME_UNIT_AT 1A84 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_TIMER0_INIT 1000 0 CODE 0 text3 dist/default/debug\MICROWAVE.X.debug.o
_TIMER0_STOP 1010 0 CODE 0 text3 dist/default/debug\MICROWAVE.X.debug.o
SW_GET_STATE@ret 74 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
i1___fltol@f1 52 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__end_of_DEFAULT_HANDLER 1368 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__Umul8_16@multiplicand A0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
_DISP_MOTOR_DATA 1BF8 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
___stackhi 0 0 ABS 0 - C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
___stacklo 0 0 ABS 0 - C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
HEATER@current_angle 1AD 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
_TIMER2_INIT 2FC8 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
_TIMER2_STOP 2FE8 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
_DISP_STATMENT 1500 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
?_KEYPAD_GET_PRESSED_KEY 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__size_of_TIMER2_START 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_ofi1___bmul 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
DISP_STATMENT@statment 25 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__end_of_STOP_HEATING 1500 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
___lwdiv@quotient 74 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
___fladd@a E4 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___fladd@b E0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___fldiv@a AE 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___fldiv@b B2 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___flmul@a CB 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___flmul@b C7 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
SWs_UPDATE@samples_counter 21 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___fldiv BE0 0 CODE 0 text48 dist/default/debug\MICROWAVE.X.debug.o
i1___flmul 20A 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
i1___fltol 7AA 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
itoa@buf 7C 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
itoa@val 24 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
___lwmod@dividend 72 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
_LED_SET_STATE 1522 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_SYS_UPDATE 1064 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
start_initialization 2A 0 CODE 0 cinit dist/default/debug\MICROWAVE.X.debug.o
_DISP_UPDATE_TIME 10F2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
GOTO_NEXT_DIGIT@count_left 1A4 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
__end_of_DISP_HEATER_DATA 1CB0 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
i1_HEATER_SET_STATE 193A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_TIMER2_START 2FE8 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
_UPDATE_LCD_SECONDS 1A0E 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_GOTO_NEXT_DIGIT 4000 0 CODE 0 text50 dist/default/debug\MICROWAVE.X.debug.o
i1___bmul@multiplicand 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__end_of_LCD_SND_COMMAND B78 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 5C 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
clear_ram0 3A96 0 CODE 0 clrtext dist/default/debug\MICROWAVE.X.debug.o
__pcstackBANK0 20 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__pcstackBANK1 A0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__pcstackBANK3 1D2 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__size_of_DISP_HEATER_DATA 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__end_of_UPDATE_LCD_HOURS 1BF8 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_HANDLERS_STATES 190 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
SWs_INIT@SW_Counter B4 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 65 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_TIME_GET 196A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_TMR0IE 5D 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_TMR0IF 5A 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_TMR2IE 461 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_TMR2ON 92 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_GPIO_PIN_INIT A92 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__size_of_CCP_PWM_PERIOD_LOAD 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_HEATER_UPDATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
utoa@buf 23 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
utoa@val 77 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__end_of_LCD_SEND_CHARACTER 1E1C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
DISP_UPDATE_TIME_UNIT_AT@UNIT 2F 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_DEFAULT_HANDLER 12C4 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of_UPDATE_LCD_HOURS 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_CCP2_PWM_DUTY_CYCLE_LOAD 2722 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
i1___bmul@product 72 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1__Umul8_16 6C6 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__end_of_TIME_GET 197C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
GPIO_PIN_INIT@GPIO_PORTx B1 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
_DISP_SHOW_TIME 1CB0 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
___lbdiv@counter 72 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__size_of_HEATER_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_LCD_CLEAR 1DB0 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 1E0 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__size_of_INCREMENT_THIS 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
___int_sp 0 0 STACK 2 stack C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
GPIO_PORT_SET_STATE@GPIO_PORT_STATE A0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
i1___bmul 18E6 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 1E9 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__Hbank0 0 0 ABS 0 bank0 -
__Hbank1 0 0 ABS 0 bank1 -
__Hbank2 0 0 ABS 0 bank2 -
__Hbank3 0 0 ABS 0 bank3 -
__Hcinit 66 0 CODE 0 cinit -
CCP_PWM_PERIOD_LOAD@LOAD_VALUE 1E3 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__Hidloc 0 0 IDLOC 0 idloc -
__size_of_LCD_CLEAR 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__Hstack 0 0 STACK 2 stack -
__size_of_TIMER0_UPDATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__stringbase E3A 0 STRING 0 strings dist/default/debug\MICROWAVE.X.debug.o
___lwdiv@counter 76 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__size_of___xxtofl 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__Hmaintext 0 0 ABS 0 maintext -
___xxtofl@arg AA 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___xxtofl@exp A9 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___xxtofl@val A0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
_DESIRED_HEAT 1EB 0 BANK3 1 nvBANK3 dist/default/debug\MICROWAVE.X.debug.o
SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY 28 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__Hcommon 0 0 ABS 0 common -
__Hconfig 4010 0 CONFIG 0 config -
__size_ofi1___xxtofl 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1___bmul 193A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_LEDs_INIT 96E 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__Lbank0 0 0 ABS 0 bank0 -
__Lbank1 0 0 ABS 0 bank1 -
__Lbank2 0 0 ABS 0 bank2 -
__Lbank3 0 0 ABS 0 bank3 -
__Lcinit 2A 0 CODE 0 cinit -
__size_of_LEDs_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__Lidloc 0 0 IDLOC 0 idloc -
__end_of_SET_HEATING_HANDLER 3BDE 0 CODE 0 text60 dist/default/debug\MICROWAVE.X.debug.o
__Lstack 0 0 STACK 2 stack -
__size_ofi1_LCD_SND_COMMAND 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_CONTROL_INIT 3ADA 0 CODE 0 text33 dist/default/debug\MICROWAVE.X.debug.o
__end_of_HEATER_UPDATE 3B4C 0 CODE 0 text42 dist/default/debug\MICROWAVE.X.debug.o
_LCD_CLEAR 1D9A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
___flmul@grs D5 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__size_of_GPIO_PIN_SET_STATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__Linittext 0 0 ABS 0 inittext -
?i1___xxtofl 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__size_of_DISP_MOTOR_DATA 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
GPIO_PIN_GET_STATE@GPIO_PIN_NO 73 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__size_ofi1_CCP2_PWM_DUTY_CYCLE_LOAD 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_GOTO_NEXT_DIGIT 3EBE 0 CODE 0 text50 dist/default/debug\MICROWAVE.X.debug.o
_SET_TIME_HANDLER 3DFE 0 CODE 0 text50 dist/default/debug\MICROWAVE.X.debug.o
__Habs1 0 0 ABS 0 abs1 -
__Hcode 0 0 ABS 0 code -
__Hinit 24 0 CODE 0 init -
__Hsfr0 0 0 ABS 0 sfr0 -
__Hsfr1 0 0 ABS 0 sfr1 -
__Hsfr2 0 0 ABS 0 sfr2 -
__Hsfr3 0 0 ABS 0 sfr3 -
__Htext 0 0 ABS 0 text -
_LCD_SEND_CHARACTER 1DB0 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__Labs1 0 0 ABS 0 abs1 -
__Lcode 0 0 ABS 0 code -
__Linit 24 0 CODE 0 init -
__Lsfr0 0 0 ABS 0 sfr0 -
__Lsfr1 0 0 ABS 0 sfr1 -
__Lsfr2 0 0 ABS 0 sfr2 -
__Lsfr3 0 0 ABS 0 sfr3 -
__Ltext 0 0 ABS 0 text -
__pnvBANK3 1EB 0 BANK3 1 nvBANK3 dist/default/debug\MICROWAVE.X.debug.o
___bmul 8BA 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
_LCD_SND_COMMAND B04 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
_CCP_PWM_PERIOD_LOAD 20B8 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
_LCD_SET_CURSOR 1D48 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__LcstackBANK0 0 0 ABS 0 cstackBANK0 -
__LcstackBANK1 0 0 ABS 0 cstackBANK1 -
__LcstackBANK3 0 0 ABS 0 cstackBANK3 -
__size_of_DISP_STATMENT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
SW_GET_STATE@SW_NO 73 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__HcstackCOMMON 0 0 ABS 0 cstackCOMMON -
TIME_START_AT@COUNTING_TYPE 72 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
_SET_ROTOR_PWR_HANDLER_ON_WORK 11FE 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_GIE 5F 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_PR2 92 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_PSA 40B 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_SWs 1B2 0 BANK3 1 dataBANK3 dist/default/debug\MICROWAVE.X.debug.o
__S0 2008 0 ABS 0 - -
__S1 1ED 0 ABS 0 - -
__S2 0 0 ABS 0 - -
__S3 0 0 ABS 0 - -
__end_of_TIMER0_UPDATE 2000 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_LEDs_INIT 90E 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__end_of_UPDATE_LCD_MINUTES 19BA 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_HEATER_SET_STATE 2FEC 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__end_of_KEYPAD_GET_PRESSED_KEY 1F74 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_CCP1_INIT 2064 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
_TIME_UPDATE 3C28 0 CODE 0 text35 dist/default/debug\MICROWAVE.X.debug.o
_CURRENT_TIME 195 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
__end_of_DISP_UPDATE_TIME 115C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_ENABLE_INTERUPT 3A8E 0 CODE 0 text32 dist/default/debug\MICROWAVE.X.debug.o
__size_of_LED_SET_STATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_CCP2_INIT 2FC8 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__size_of_CCP1_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_MOTOR_SET_STATE 3000 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
saved_w 7E 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_DISP_SHOW_TIME 1D0C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
LCD_SET_CURSOR@coloum 24 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__size_of_SET_ROTOR_PWR_HANDLER 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
utoa@base 79 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
i1__Umul8_16@multiplier 75 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__size_of_CCP2_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_DISP_UPDATE_TIME 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_GPIO_PORT_SET_STATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_FINISH_HANDLER 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_DISP_SHOW_TIME_AT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_SET_HEATING_HANDLER_ON_WORK 115C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_current_angle 1AF 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
___xxtofl 2BE0 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
i1_CCP1_PWM_DUTY_CYCLE_LOAD$2076 61 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__size_of_CONTROL_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
i1___flmul@aexp 46 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___flmul@bexp 4B 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
KEYPAD_INIT@counter B2 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
i1___flmul@prod 4C 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___flmul@sign 45 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___flmul@temp 50 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__end_of_GPIO_PIN_GET_STATE 1F2A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__HnvBANK3 0 0 ABS 0 nvBANK3 -
__Lintentry 8 0 CODE 0 intentry -
__end_of_DISP_STATMENT 1522 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_CCP1_INIT 2040 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__stringtab E1C 0 STRING 0 strings dist/default/debug\MICROWAVE.X.debug.o
_MOTOR_WORK_STATE 1A9 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
reset_vec 0 0 CODE 0 reset_vec C:\Users\EMBEDD~1\AppData\Local\Temp\sasg.o
__size_of_GPIO_PIN_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_CCP2_INIT 2FA4 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
i1_CCP2_PWM_DUTY_CYCLE_LOAD 138 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__end_of___xxtofl 2CC4 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
i1GPIO_PORT_SET_STATE@GPIO_PORTx 74 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__size_of_DEFAULT_HANDLER 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__pdataBANK0 6F 0 BANK0 1 dataBANK0 dist/default/debug\MICROWAVE.X.debug.o
__pdataBANK3 1B2 0 BANK3 1 dataBANK3 dist/default/debug\MICROWAVE.X.debug.o
i1__Umul8_16@product 73 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
SWs_UPDATE@SW_timer_counter 1B1 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
__size_of___bmul 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_UPDATE_LCD_MINUTES 197C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__LbssBANK0 0 0 ABS 0 bssBANK0 -
__LbssBANK3 0 0 ABS 0 bssBANK3 -
_TIMER0_START 3A8E 0 CODE 0 text2 dist/default/debug\MICROWAVE.X.debug.o
KEYPAD_UPDATE@ROW_counter 23 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
INCREMENT_THIS@KEY 32 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
LCD_SET_CURSOR@row 21 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__end_of_LED_SET_STATE 1578 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
CONTROL_UPDATE@control_shift_counter 1A7 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
i1_GPIO_PIN_SET_STATE 1E8A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_KEYPAD_INIT 9F4 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__end_of_LCD_SET_CURSOR 1D9A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of_START_BLINKING_AT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_CURRENT_DIGIT 6F 0 BANK0 1 dataBANK0 dist/default/debug\MICROWAVE.X.debug.o
__size_ofi1_MOTOR_SET_STATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
?i1__Umul8_16 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
___fladd@signs 1D2 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
_CONTROL_UPDATE 1064 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of_LCD_SEND_A_NUMBER 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_CONTROL_INIT 3B08 0 CODE 0 text33 dist/default/debug\MICROWAVE.X.debug.o
__ptext10 2040 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext11 90E 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__ptext12 9F4 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__ptext13 B04 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__ptext14 BCC 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__ptext15 96E 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__ptext16 B78 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__ptext17 208E 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext18 2FEC 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext19 20B8 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext20 2146 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext21 260C 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext22 2BE0 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext23 2F06 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext24 2722 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext25 2B20 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext26 2CC4 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext27 2FA4 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext28 2FE4 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext29 2FC8 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext30 2FE8 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext31 A92 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__ptext32 3A88 0 CODE 0 text32 dist/default/debug\MICROWAVE.X.debug.o
__ptext33 3ADA 0 CODE 0 text33 dist/default/debug\MICROWAVE.X.debug.o
__ptext34 1018 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext35 3C28 0 CODE 0 text35 dist/default/debug\MICROWAVE.X.debug.o
__ptext36 1FF4 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext37 16DA 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext38 3B4C 0 CODE 0 text38 dist/default/debug\MICROWAVE.X.debug.o
__ptext39 66 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__ptext40 1A8A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext41 1EF0 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext42 3B08 0 CODE 0 text42 dist/default/debug\MICROWAVE.X.debug.o
__ptext43 138 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__ptext44 6C6 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__ptext45 7AA 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__ptext46 20A 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__ptext47 606 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__ptext48 BE0 0 CODE 0 text48 dist/default/debug\MICROWAVE.X.debug.o
__ptext49 1064 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext50 3DFE 0 CODE 0 text50 dist/default/debug\MICROWAVE.X.debug.o
__ptext51 3E58 0 CODE 0 text50 dist/default/debug\MICROWAVE.X.debug.o
__ptext52 1578 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext53 16A2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext54 3EBE 0 CODE 0 text50 dist/default/debug\MICROWAVE.X.debug.o
__ptext55 1A6C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext56 3BDE 0 CODE 0 text56 dist/default/debug\MICROWAVE.X.debug.o
__ptext57 11FE 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext58 1F5E 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext59 1BF8 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext60 3B94 0 CODE 0 text60 dist/default/debug\MICROWAVE.X.debug.o
__ptext61 115C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext62 12B2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext63 1C54 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext64 1368 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext65 1A54 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext66 1A84 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext67 14C2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext68 1940 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext69 193A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext70 1A4C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext71 196A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext72 1522 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext73 10F2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext74 1F74 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext75 12C4 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext76 14AC 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext77 18E6 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext78 1964 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext79 1500 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext80 194A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext81 1A0E 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext82 197C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext83 1BBA 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext84 19D8 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext85 19BA 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext86 1F2A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext87 3CC8 0 CODE 0 text87 dist/default/debug\MICROWAVE.X.debug.o
__ptext88 3DB6 0 CODE 0 text87 dist/default/debug\MICROWAVE.X.debug.o
__ptext89 3D62 0 CODE 0 text87 dist/default/debug\MICROWAVE.X.debug.o
__ptext90 1CB0 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext91 1D48 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext92 1D0C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext93 1DB0 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext94 1D9A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext95 1E1C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext96 1EDC 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext97 1E8A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
___fladd 2146 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
___fldiv 2CC4 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
___flmul 2722 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
___fltol 2F06 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
___lbdiv 19D8 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
___lbmod 16A2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
___lwdiv 3D62 0 CODE 0 text87 dist/default/debug\MICROWAVE.X.debug.o
___lwmod 3DB6 0 CODE 0 text87 dist/default/debug\MICROWAVE.X.debug.o
__pmaintext F72 0 CODE 0 maintext dist/default/debug\MICROWAVE.X.debug.o
_MOTOR_INIT 2064 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__size_of_SYS_UPDATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
MOTOR_SET_STATE@MOTOR_STATE A0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
_ENABLE_INTERUPT 3A88 0 CODE 0 text32 dist/default/debug\MICROWAVE.X.debug.o
i1HEATER_SET_STATE@HEATER_STATE 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
?_TIME_GET 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
_MOTOR_SET_STATE 2FF6 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__Umul8_16@multiplier A5 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__Lcommon 0 0 ABS 0 common -
__Lconfig 400E 0 CONFIG 0 config -
__CFG_CP$OFF 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_GPIO_PORT_SET_STATE BCC 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
_GPIO_PIN_GET_STATE 1EF0 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
LCD_SEND_CHARACTER@character 20 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1LCD_SND_COMMAND@command 20 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__CFG_WDTE$OFF 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
LEDs_INIT@counter B2 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__Hinittext 0 0 ABS 0 inittext -
__end_of_SET_TIME_HANDLER 3E58 0 CODE 0 text50 dist/default/debug\MICROWAVE.X.debug.o
___lbdiv@divisor 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
___fldiv@grs C1 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___fldiv@rem BA 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__end_of_GPIO_PIN_INIT B04 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__size_of_GOTO_NEXT_DIGIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
i1___flmul@grs 47 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__size_of_LCD_SEND_A_STRING 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
LCD_SEND_A_NUMBER@x 28 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__end_of_TIMER0_INIT 1010 0 CODE 0 text3 dist/default/debug\MICROWAVE.X.debug.o
__end_of_TIMER0_STOP 1018 0 CODE 0 text3 dist/default/debug\MICROWAVE.X.debug.o
___lwdiv@divisor 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
_CCP1_PWM_DUTY_CYCLE_LOAD 24F6 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__size_of_LCD_SND_COMMAND 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_ofi1__Umul8_16 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_SET_TIME_HANDLER 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
___fldiv@new_exp BF 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__end_of_HEATER_SET_STATE 2FF6 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
CONTROL_INIT@count A0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__end_of_CCP_PWM_PERIOD_LOAD 2146 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
i1MOTOR_SET_STATE@MOTOR_STATE 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
GPIO_PIN_SET_STATE@GPIO_PORTx AA 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__end_of_TIMER2_INIT 2FE4 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__end_of_TIMER2_STOP 2FEC 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1_LCD_SND_COMMAND 1E8A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of_TIMER0_START 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
___fladd@grs 1D5 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__end_of__stringtab E3C 0 STRING 0 strings dist/default/debug\MICROWAVE.X.debug.o
__CFG_LVP$OFF 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_HEATER_SET_STATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_TIME_TICKING_TYPE 1AA 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
__size_ofi1_HEATER_SET_STATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__Lspace_0 0 0 ABS 0 - -
__Lspace_1 0 0 ABS 0 - -
__Lspace_2 0 0 ABS 0 - -
__Lspace_3 0 0 ABS 0 - -
__size_of_UPDATE_LCD_SECONDS 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_SW_GET_STATE 14AC 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
MOTOR_UPDATE@motor_timer_counter 1AE 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
init_fetch0 3AB8 0 CODE 0 inittext dist/default/debug\MICROWAVE.X.debug.o
__HcstackBANK0 0 0 ABS 0 cstackBANK0 -
__HcstackBANK1 0 0 ABS 0 cstackBANK1 -
__HcstackBANK3 0 0 ABS 0 cstackBANK3 -
__Umul8_16@product A3 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__Lend_init 24 0 CODE 0 end_init -
_TICK_COUNTER 1A0 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
__LcstackCOMMON 0 0 ABS 0 cstackCOMMON -
___fltol@exp1 1DF 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__end_of_CONTROL_UPDATE 10F2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
i1___fldiv@aexp 38 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___fldiv@bexp 37 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___fldiv@sign 30 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1_CCP2_PWM_DUTY_CYCLE_LOAD$2077 61 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_HEATER_INIT 208E 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
end_of_initialization 5E 0 CODE 0 cinit dist/default/debug\MICROWAVE.X.debug.o
__Hintentry 24 0 CODE 0 intentry -
__end_of_TIMER0_START 3A96 0 CODE 0 text2 dist/default/debug\MICROWAVE.X.debug.o
__Lstrings 0 0 ABS 0 strings -
___lwdiv@dividend 72 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
?___fladd E0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
?___fldiv AE 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
?___flmul C7 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
?___fltol 1D6 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
?___lwdiv 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
?___lwmod 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__Hreset_vec 6 0 CODE 0 reset_vec -
__end_of_MOTOR_INIT 208E 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
KEYPAD_UPDATE@KEYPAD_counter 22 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__HbssBANK0 0 0 ABS 0 bssBANK0 -
__HbssBANK3 0 0 ABS 0 bssBANK3 -
i1___fltol@sign1 5A 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
HEATER_UPDATE@heater_timer_counter 1AC 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
KEYPAD_GET_PRESSED_KEY@ret 72 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
KEYPAD_UPDATE@COL_counter 24 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_COUNT_DECISION 1AB 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
__end_of_DISP_SHOW_TIME_AT 1964 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_HEATING_HANDLER 14AC 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__ptext1 3AA6 0 CODE 0 text1 dist/default/debug\MICROWAVE.X.debug.o
__ptext2 3A8E 0 CODE 0 text2 dist/default/debug\MICROWAVE.X.debug.o
__ptext3 1000 0 CODE 0 text3 dist/default/debug\MICROWAVE.X.debug.o
__ptext4 1010 0 CODE 0 text3 dist/default/debug\MICROWAVE.X.debug.o
__ptext5 848 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__ptext6 8BA 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
__ptext7 2064 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext8 2FF6 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
__ptext9 24F6 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
GPIO_PIN_GET_STATE@ret 79 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
___lbdiv@quotient 73 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
?__Umul8_16 A0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
_TIME_CONTINUE 1A84 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1_GPIO_PORT_SET_STATE 1EF0 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
___lbmod@dividend 72 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
i1GPIO_PIN_SET_STATE@GPIO_PIN_NO 73 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__Lpowerup 0 0 CODE 0 powerup -
?___xxtofl A0 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__Leeprom_data 0 0 EEDATA 3 eeprom_data -
_SWs_UPDATE 16DA 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of_SW_GET_STATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_KEYPAD_UPDATE 1A8A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
___fladd@aexp 1D3 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
___fladd@bexp 1D4 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__Umul8_16@word_mpld A6 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___fltol@sign1 1DE 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__size_of_ENABLE_INTERUPT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_MOTOR_SET_STATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
KEYPAD_UPDATE@KEY_STATE 21 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__size_of_KEYPAD_GET_PRESSED_KEY 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__Lreset_vec 0 0 CODE 0 reset_vec -
TIME_START_AT@START_SECONDS 73 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__end_of_START_BLINKING_AT 12C4 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__CFG_FOSC$HS 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
?i1___fldiv 20 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
?i1___flmul 39 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
?i1___fltol 52 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__size_of_LCD_SEND_CHARACTER 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1_MOTOR_SET_STATE 194A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
___fltol@f1 1D6 0 BANK3 1 cstackBANK3 dist/default/debug\MICROWAVE.X.debug.o
__end_of_GPIO_PORT_SET_STATE BE0 0 CODE 0 text5 dist/default/debug\MICROWAVE.X.debug.o
_SET_TIME_HANDLER_ON_WORK 3E58 0 CODE 0 text50 dist/default/debug\MICROWAVE.X.debug.o
__end_of_LCD_SEND_A_NUMBER 19D8 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of__initialization 5E 0 CODE 0 cinit dist/default/debug\MICROWAVE.X.debug.o
i1___fldiv@grs 33 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1___fldiv@rem 2C 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__end_of_SET_ROTOR_PWR_HANDLER_ON_WORK 12B2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
i1_GPIO_PORT_SET_STATE 1EDC 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__Lfunctab 0 0 ENTRY 0 functab -
SWs_UPDATE@sw_counter 22 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_DISP_UPDATE_TIME_UNIT_AT 1A6C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_INCREMENT_THIS 1578 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__pidataBANK0 0 0 CODE 0 idataBANK0 dist/default/debug\MICROWAVE.X.debug.o
__pidataBANK3 2000 0 CODE 0 idataBANK3 dist/default/debug\MICROWAVE.X.debug.o
__size_of_KEYPAD_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__Lclrtext 0 0 ABS 0 clrtext -
i1_LCD_SND_COMMAND 1E1C 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_SW_GET_STATE 14C2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
LCD_SND_COMMAND@command AB 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__end_ofi1_CCP1_PWM_DUTY_CYCLE_LOAD 138 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__CFG_PWRTE$ON 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__pcstackCOMMON 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__end_of_LCD_SEND_A_STRING 1D48 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_HEATING_HANDLER 1368 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of_SWs_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__Hend_init 2A 0 CODE 0 end_init -
init_ram0 3AC0 0 CODE 0 inittext dist/default/debug\MICROWAVE.X.debug.o
__size_of_CCP1_PWM_DUTY_CYCLE_LOAD 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
KEYPAD_UPDATE@KEYPAD_TICK_counter 1B0 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
__end_of_TIME_UPDATE 3CC8 0 CODE 0 text35 dist/default/debug\MICROWAVE.X.debug.o
___lbmod@rem 74 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
i1___xxtofl@arg 7A 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
i1___xxtofl@exp 79 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
i1___xxtofl@val 70 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
__end_of_itoa 1F5E 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__end_of_main FE2 0 CODE 0 maintext dist/default/debug\MICROWAVE.X.debug.o
__end_of_utoa 3D62 0 CODE 0 text87 dist/default/debug\MICROWAVE.X.debug.o
_CCP2CONbits 1D 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
i1___xxtofl@sign 78 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
_CONTROL_CURRENT_STATE 6E 0 BANK0 1 bssBANK0 dist/default/debug\MICROWAVE.X.debug.o
__Hram 0 0 ABS 0 ram -
__Lram 0 0 ABS 0 ram -
interrupt_function 8 0 CODE 0 intentry dist/default/debug\MICROWAVE.X.debug.o
_STOP_BLINKING 1964 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__CFG_CPD$OFF 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_TIMER0_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_TIMER0_STOP 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_SWs_UPDATE 18E6 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_CCP1CON 17 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_CCP2CON 1D 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__pintentry 8 0 CODE 0 intentry dist/default/debug\MICROWAVE.X.debug.o
DISP_SHOW_TIME_AT@START_TIME 2F 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__size_of_UPDATE_LCD_MINUTES 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_TIME_START_AT 1A54 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__HdataBANK0 0 0 ABS 0 dataBANK0 -
__HdataBANK3 0 0 ABS 0 dataBANK3 -
__size_of_DISP_SHOW_TIME 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_TIMER2_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__size_of_TIMER2_STOP 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
SWs_INIT@Samples_Counter B3 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
_DISP_SHOW_TIME_AT 194A 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
_keypad_sapmles 19B 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
__initialization 2A 0 CODE 0 cinit dist/default/debug\MICROWAVE.X.debug.o
___bmul@product A1 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
___xxtofl@sign A8 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
__pbssBANK0 6B 0 BANK0 1 bssBANK0 dist/default/debug\MICROWAVE.X.debug.o
__pbssBANK3 190 0 BANK3 1 bssBANK3 dist/default/debug\MICROWAVE.X.debug.o
i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 5C 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_T2CONbits 12 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__CFG_WRT$OFF 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
__end_of_INCREMENT_THIS 16A2 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 65 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
__pstrings E1C 0 STRING 0 strings dist/default/debug\MICROWAVE.X.debug.o
GPIO_PIN_INIT@GPIO_DIRECTION A4 0 BANK1 1 cstackBANK1 dist/default/debug\MICROWAVE.X.debug.o
UPDATE_LCD_HOURS@HOURS 2E 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
_SETTED_TIME 6B 0 BANK0 1 bssBANK0 dist/default/debug\MICROWAVE.X.debug.o
_CCP2_PWM_DUTY_CYCLE_LOAD 260C 0 CODE 0 text10 dist/default/debug\MICROWAVE.X.debug.o
_FINISH_HANDLER 1F74 0 CODE 0 text34 dist/default/debug\MICROWAVE.X.debug.o
__size_of_LCD_INIT 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
_CCP1CONbits 17 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
i1___xxtofl 6C6 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__size_of_TIME_CONTINUE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
___lbmod@counter 73 0 COMMON 1 cstackCOMMON dist/default/debug\MICROWAVE.X.debug.o
DISP_UPDATE_TIME_UNIT_AT@NUMBER 2E 0 BANK0 1 cstackBANK0 dist/default/debug\MICROWAVE.X.debug.o
i1__Umul8_16 606 0 CODE 0 text39 dist/default/debug\MICROWAVE.X.debug.o
__pswtext1 FE2 0 CONST 0 swtext1 dist/default/debug\MICROWAVE.X.debug.o
__size_of_GPIO_PIN_GET_STATE 0 0 ABS 0 - dist/default/debug\MICROWAVE.X.debug.o
# %SPLITSTAB Section
# This section enumerates all the psect splits performed by the assembler.
# The beginning of the section is indicated by %SPLITSTAB.
# Each line is a record a particular split, where the parent psect is on
# the left and the child on the right.  Note that a child psect is always
# split form the top of the parent psect. All splits from a given parent
# are listed in the order in which they occurred.
%SPLITSTAB
# %DABS Section
# This section contains a table of all usuage of the assember
# directive DABS in the program. Each line has the following format:
#   <name> <space> <address> <size>
# If the DABS was originally labelled then that shall be <name>,
# otherwise name will be "-".  The <space> number is in decimal.
# <address> and <size> are in byte units as unqaulified hexadecimal
%DABS
- 1 7E 2
# %SEGMENTS Section
# This sections enumerates the segments of the program.  Each segment
# is described on a single line as follows:
#    <name> <space> <link address> <file address> <size> <delta>
# Addresses and size are in unqualified hexadecimal.  The link address
# and size are in units of delta. The file address is in units of bytes.
# All other numeric quantities are in decimal.
%SEGMENTS
text1 0 1D53 3AA6 9 2
text2 0 1D47 3A8E 4 2
text3 0 800 1000 C 2
text10 0 1020 2040 7E0 2
text32 0 1D44 3A88 3 2
text33 0 1D6D 3ADA 17 2
text34 0 80C 1018 814 2
text35 0 1E14 3C28 50 2
text38 0 1DA6 3B4C 24 2
text42 0 1D84 3B08 22 2
text50 0 1EFF 3DFE 101 2
text56 0 1DEF 3BDE 25 2
text60 0 1DCA 3B94 25 2
text87 0 1E64 3CC8 9B 2
maintext 0 7B9 F72 38 2
cstackCOMMON 1 70 70 E 1
cstackBANK0 1 20 20 50 1
cstackBANK1 1 A0 A0 50 1
inittext 0 1D5C 3AB8 11 2
intentry 0 4 8 70A 2
reset_vec 0 0 0 3 2
bssBANK3 1 190 190 5D 1
strings 0 70E E1C AB 2
swtext1 0 7F1 FE2 F 2
clrtext 0 1D4B 3A96 8 2
config 0 2007 400E 1 2
# OTES Section
# This section contains data of all the note-psects.  The beginning of the section
# is indicated by OTES. The first line indicates the name and decimal
# byte-length of the first note-psect, e.g.
#   $codecov_info_hdr 16
# Each line that follows contains the byte-data of the psect in hexadecimal as a
# space-separated list. These lines are limited to 16 bytes of data.
%NOTES
                                                                                          # 1 "MICROWAVE.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 288 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\language_support.h" 1 3
# 2 "<built-in>" 2
# 1 "MICROWAVE.c" 2








#pragma config FOSC = HS
#pragma config WDTE = OFF
#pragma config PWRTE = ON
#pragma config BOREN = OFF
#pragma config LVP = OFF
#pragma config CPD = OFF
#pragma config WRT = OFF
#pragma config CP = OFF





# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\xc.h" 1 3
# 18 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\xc.h" 3
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);



# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\c90\\xc8debug.h" 1 3
# 13 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\c90\\xc8debug.h" 3
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);
# 23 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\xc.h" 2 3




# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic.h" 1 3




# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\htc.h" 1 3



# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\xc.h" 1 3
# 4 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\htc.h" 2 3
# 5 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic.h" 2 3








# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic_chip_select.h" 1 3
# 2643 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic_chip_select.h" 3
# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 1 3
# 44 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\__at.h" 1 3
# 44 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 2 3








extern volatile unsigned char INDF __attribute__((address(0x000)));

__asm("INDF equ 00h");




extern volatile unsigned char TMR0 __attribute__((address(0x001)));

__asm("TMR0 equ 01h");




extern volatile unsigned char PCL __attribute__((address(0x002)));

__asm("PCL equ 02h");




extern volatile unsigned char STATUS __attribute__((address(0x003)));

__asm("STATUS equ 03h");


typedef union {
    struct {
        unsigned C :1;
        unsigned DC :1;
        unsigned Z :1;
        unsigned nPD :1;
        unsigned nTO :1;
        unsigned RP :2;
        unsigned IRP :1;
    };
    struct {
        unsigned :5;
        unsigned RP0 :1;
        unsigned RP1 :1;
    };
    struct {
        unsigned CARRY :1;
        unsigned :1;
        unsigned ZERO :1;
    };
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits __attribute__((address(0x003)));
# 159 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char FSR __attribute__((address(0x004)));

__asm("FSR equ 04h");




extern volatile unsigned char PORTA __attribute__((address(0x005)));

__asm("PORTA equ 05h");


typedef union {
    struct {
        unsigned RA0 :1;
        unsigned RA1 :1;
        unsigned RA2 :1;
        unsigned RA3 :1;
        unsigned RA4 :1;
        unsigned RA5 :1;
    };
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits __attribute__((address(0x005)));
# 216 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char PORTB __attribute__((address(0x006)));

__asm("PORTB equ 06h");


typedef union {
    struct {
        unsigned RB0 :1;
        unsigned RB1 :1;
        unsigned RB2 :1;
        unsigned RB3 :1;
        unsigned RB4 :1;
        unsigned RB5 :1;
        unsigned RB6 :1;
        unsigned RB7 :1;
    };
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits __attribute__((address(0x006)));
# 278 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char PORTC __attribute__((address(0x007)));

__asm("PORTC equ 07h");


typedef union {
    struct {
        unsigned RC0 :1;
        unsigned RC1 :1;
        unsigned RC2 :1;
        unsigned RC3 :1;
        unsigned RC4 :1;
        unsigned RC5 :1;
        unsigned RC6 :1;
        unsigned RC7 :1;
    };
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits __attribute__((address(0x007)));
# 340 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char PORTD __attribute__((address(0x008)));

__asm("PORTD equ 08h");


typedef union {
    struct {
        unsigned RD0 :1;
        unsigned RD1 :1;
        unsigned RD2 :1;
        unsigned RD3 :1;
        unsigned RD4 :1;
        unsigned RD5 :1;
        unsigned RD6 :1;
        unsigned RD7 :1;
    };
} PORTDbits_t;
extern volatile PORTDbits_t PORTDbits __attribute__((address(0x008)));
# 402 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char PORTE __attribute__((address(0x009)));

__asm("PORTE equ 09h");


typedef union {
    struct {
        unsigned RE0 :1;
        unsigned RE1 :1;
        unsigned RE2 :1;
    };
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits __attribute__((address(0x009)));
# 434 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char PCLATH __attribute__((address(0x00A)));

__asm("PCLATH equ 0Ah");


typedef union {
    struct {
        unsigned PCLATH :5;
    };
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits __attribute__((address(0x00A)));
# 454 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char INTCON __attribute__((address(0x00B)));

__asm("INTCON equ 0Bh");


typedef union {
    struct {
        unsigned RBIF :1;
        unsigned INTF :1;
        unsigned TMR0IF :1;
        unsigned RBIE :1;
        unsigned INTE :1;
        unsigned TMR0IE :1;
        unsigned PEIE :1;
        unsigned GIE :1;
    };
    struct {
        unsigned :2;
        unsigned T0IF :1;
        unsigned :2;
        unsigned T0IE :1;
    };
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits __attribute__((address(0x00B)));
# 532 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char PIR1 __attribute__((address(0x00C)));

__asm("PIR1 equ 0Ch");


typedef union {
    struct {
        unsigned TMR1IF :1;
        unsigned TMR2IF :1;
        unsigned CCP1IF :1;
        unsigned SSPIF :1;
        unsigned TXIF :1;
        unsigned RCIF :1;
        unsigned ADIF :1;
        unsigned PSPIF :1;
    };
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits __attribute__((address(0x00C)));
# 594 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char PIR2 __attribute__((address(0x00D)));

__asm("PIR2 equ 0Dh");


typedef union {
    struct {
        unsigned CCP2IF :1;
        unsigned :2;
        unsigned BCLIF :1;
        unsigned EEIF :1;
        unsigned :1;
        unsigned CMIF :1;
    };
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits __attribute__((address(0x00D)));
# 634 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned short TMR1 __attribute__((address(0x00E)));

__asm("TMR1 equ 0Eh");




extern volatile unsigned char TMR1L __attribute__((address(0x00E)));

__asm("TMR1L equ 0Eh");




extern volatile unsigned char TMR1H __attribute__((address(0x00F)));

__asm("TMR1H equ 0Fh");




extern volatile unsigned char T1CON __attribute__((address(0x010)));

__asm("T1CON equ 010h");


typedef union {
    struct {
        unsigned TMR1ON :1;
        unsigned TMR1CS :1;
        unsigned nT1SYNC :1;
        unsigned T1OSCEN :1;
        unsigned T1CKPS :2;
    };
    struct {
        unsigned :2;
        unsigned T1SYNC :1;
        unsigned :1;
        unsigned T1CKPS0 :1;
        unsigned T1CKPS1 :1;
    };
    struct {
        unsigned :2;
        unsigned T1INSYNC :1;
    };
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits __attribute__((address(0x010)));
# 730 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char TMR2 __attribute__((address(0x011)));

__asm("TMR2 equ 011h");




extern volatile unsigned char T2CON __attribute__((address(0x012)));

__asm("T2CON equ 012h");


typedef union {
    struct {
        unsigned T2CKPS :2;
        unsigned TMR2ON :1;
        unsigned TOUTPS :4;
    };
    struct {
        unsigned T2CKPS0 :1;
        unsigned T2CKPS1 :1;
        unsigned :1;
        unsigned TOUTPS0 :1;
        unsigned TOUTPS1 :1;
        unsigned TOUTPS2 :1;
        unsigned TOUTPS3 :1;
    };
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits __attribute__((address(0x012)));
# 808 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char SSPBUF __attribute__((address(0x013)));

__asm("SSPBUF equ 013h");




extern volatile unsigned char SSPCON __attribute__((address(0x014)));

__asm("SSPCON equ 014h");


typedef union {
    struct {
        unsigned SSPM :4;
        unsigned CKP :1;
        unsigned SSPEN :1;
        unsigned SSPOV :1;
        unsigned WCOL :1;
    };
    struct {
        unsigned SSPM0 :1;
        unsigned SSPM1 :1;
        unsigned SSPM2 :1;
        unsigned SSPM3 :1;
    };
} SSPCONbits_t;
extern volatile SSPCONbits_t SSPCONbits __attribute__((address(0x014)));
# 885 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned short CCPR1 __attribute__((address(0x015)));

__asm("CCPR1 equ 015h");




extern volatile unsigned char CCPR1L __attribute__((address(0x015)));

__asm("CCPR1L equ 015h");




extern volatile unsigned char CCPR1H __attribute__((address(0x016)));

__asm("CCPR1H equ 016h");




extern volatile unsigned char CCP1CON __attribute__((address(0x017)));

__asm("CCP1CON equ 017h");


typedef union {
    struct {
        unsigned CCP1M :4;
        unsigned CCP1Y :1;
        unsigned CCP1X :1;
    };
    struct {
        unsigned CCP1M0 :1;
        unsigned CCP1M1 :1;
        unsigned CCP1M2 :1;
        unsigned CCP1M3 :1;
    };
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits __attribute__((address(0x017)));
# 964 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char RCSTA __attribute__((address(0x018)));

__asm("RCSTA equ 018h");


typedef union {
    struct {
        unsigned RX9D :1;
        unsigned OERR :1;
        unsigned FERR :1;
        unsigned ADDEN :1;
        unsigned CREN :1;
        unsigned SREN :1;
        unsigned RX9 :1;
        unsigned SPEN :1;
    };
    struct {
        unsigned RCD8 :1;
        unsigned :5;
        unsigned RC9 :1;
    };
    struct {
        unsigned :6;
        unsigned nRC8 :1;
    };
    struct {
        unsigned :6;
        unsigned RC8_9 :1;
    };
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits __attribute__((address(0x018)));
# 1059 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char TXREG __attribute__((address(0x019)));

__asm("TXREG equ 019h");




extern volatile unsigned char RCREG __attribute__((address(0x01A)));

__asm("RCREG equ 01Ah");




extern volatile unsigned short CCPR2 __attribute__((address(0x01B)));

__asm("CCPR2 equ 01Bh");




extern volatile unsigned char CCPR2L __attribute__((address(0x01B)));

__asm("CCPR2L equ 01Bh");




extern volatile unsigned char CCPR2H __attribute__((address(0x01C)));

__asm("CCPR2H equ 01Ch");




extern volatile unsigned char CCP2CON __attribute__((address(0x01D)));

__asm("CCP2CON equ 01Dh");


typedef union {
    struct {
        unsigned CCP2M :4;
        unsigned CCP2Y :1;
        unsigned CCP2X :1;
    };
    struct {
        unsigned CCP2M0 :1;
        unsigned CCP2M1 :1;
        unsigned CCP2M2 :1;
        unsigned CCP2M3 :1;
    };
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits __attribute__((address(0x01D)));
# 1152 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char ADRESH __attribute__((address(0x01E)));

__asm("ADRESH equ 01Eh");




extern volatile unsigned char ADCON0 __attribute__((address(0x01F)));

__asm("ADCON0 equ 01Fh");


typedef union {
    struct {
        unsigned ADON :1;
        unsigned :1;
        unsigned GO_nDONE :1;
        unsigned CHS :3;
        unsigned ADCS :2;
    };
    struct {
        unsigned :2;
        unsigned GO :1;
        unsigned CHS0 :1;
        unsigned CHS1 :1;
        unsigned CHS2 :1;
        unsigned ADCS0 :1;
        unsigned ADCS1 :1;
    };
    struct {
        unsigned :2;
        unsigned nDONE :1;
    };
    struct {
        unsigned :2;
        unsigned GO_DONE :1;
    };
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits __attribute__((address(0x01F)));
# 1255 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char OPTION_REG __attribute__((address(0x081)));

__asm("OPTION_REG equ 081h");


typedef union {
    struct {
        unsigned PS :3;
        unsigned PSA :1;
        unsigned T0SE :1;
        unsigned T0CS :1;
        unsigned INTEDG :1;
        unsigned nRBPU :1;
    };
    struct {
        unsigned PS0 :1;
        unsigned PS1 :1;
        unsigned PS2 :1;
    };
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits __attribute__((address(0x081)));
# 1325 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char TRISA __attribute__((address(0x085)));

__asm("TRISA equ 085h");


typedef union {
    struct {
        unsigned TRISA0 :1;
        unsigned TRISA1 :1;
        unsigned TRISA2 :1;
        unsigned TRISA3 :1;
        unsigned TRISA4 :1;
        unsigned TRISA5 :1;
    };
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits __attribute__((address(0x085)));
# 1375 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char TRISB __attribute__((address(0x086)));

__asm("TRISB equ 086h");


typedef union {
    struct {
        unsigned TRISB0 :1;
        unsigned TRISB1 :1;
        unsigned TRISB2 :1;
        unsigned TRISB3 :1;
        unsigned TRISB4 :1;
        unsigned TRISB5 :1;
        unsigned TRISB6 :1;
        unsigned TRISB7 :1;
    };
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits __attribute__((address(0x086)));
# 1437 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char TRISC __attribute__((address(0x087)));

__asm("TRISC equ 087h");


typedef union {
    struct {
        unsigned TRISC0 :1;
        unsigned TRISC1 :1;
        unsigned TRISC2 :1;
        unsigned TRISC3 :1;
        unsigned TRISC4 :1;
        unsigned TRISC5 :1;
        unsigned TRISC6 :1;
        unsigned TRISC7 :1;
    };
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits __attribute__((address(0x087)));
# 1499 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char TRISD __attribute__((address(0x088)));

__asm("TRISD equ 088h");


typedef union {
    struct {
        unsigned TRISD0 :1;
        unsigned TRISD1 :1;
        unsigned TRISD2 :1;
        unsigned TRISD3 :1;
        unsigned TRISD4 :1;
        unsigned TRISD5 :1;
        unsigned TRISD6 :1;
        unsigned TRISD7 :1;
    };
} TRISDbits_t;
extern volatile TRISDbits_t TRISDbits __attribute__((address(0x088)));
# 1561 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char TRISE __attribute__((address(0x089)));

__asm("TRISE equ 089h");


typedef union {
    struct {
        unsigned TRISE0 :1;
        unsigned TRISE1 :1;
        unsigned TRISE2 :1;
        unsigned :1;
        unsigned PSPMODE :1;
        unsigned IBOV :1;
        unsigned OBF :1;
        unsigned IBF :1;
    };
} TRISEbits_t;
extern volatile TRISEbits_t TRISEbits __attribute__((address(0x089)));
# 1618 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char PIE1 __attribute__((address(0x08C)));

__asm("PIE1 equ 08Ch");


typedef union {
    struct {
        unsigned TMR1IE :1;
        unsigned TMR2IE :1;
        unsigned CCP1IE :1;
        unsigned SSPIE :1;
        unsigned TXIE :1;
        unsigned RCIE :1;
        unsigned ADIE :1;
        unsigned PSPIE :1;
    };
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits __attribute__((address(0x08C)));
# 1680 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char PIE2 __attribute__((address(0x08D)));

__asm("PIE2 equ 08Dh");


typedef union {
    struct {
        unsigned CCP2IE :1;
        unsigned :2;
        unsigned BCLIE :1;
        unsigned EEIE :1;
        unsigned :1;
        unsigned CMIE :1;
    };
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits __attribute__((address(0x08D)));
# 1720 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char PCON __attribute__((address(0x08E)));

__asm("PCON equ 08Eh");


typedef union {
    struct {
        unsigned nBOR :1;
        unsigned nPOR :1;
    };
    struct {
        unsigned nBO :1;
    };
} PCONbits_t;
extern volatile PCONbits_t PCONbits __attribute__((address(0x08E)));
# 1754 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char SSPCON2 __attribute__((address(0x091)));

__asm("SSPCON2 equ 091h");


typedef union {
    struct {
        unsigned SEN :1;
        unsigned RSEN :1;
        unsigned PEN :1;
        unsigned RCEN :1;
        unsigned ACKEN :1;
        unsigned ACKDT :1;
        unsigned ACKSTAT :1;
        unsigned GCEN :1;
    };
} SSPCON2bits_t;
extern volatile SSPCON2bits_t SSPCON2bits __attribute__((address(0x091)));
# 1816 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char PR2 __attribute__((address(0x092)));

__asm("PR2 equ 092h");




extern volatile unsigned char SSPADD __attribute__((address(0x093)));

__asm("SSPADD equ 093h");




extern volatile unsigned char SSPSTAT __attribute__((address(0x094)));

__asm("SSPSTAT equ 094h");


typedef union {
    struct {
        unsigned BF :1;
        unsigned UA :1;
        unsigned R_nW :1;
        unsigned S :1;
        unsigned P :1;
        unsigned D_nA :1;
        unsigned CKE :1;
        unsigned SMP :1;
    };
    struct {
        unsigned :2;
        unsigned R :1;
        unsigned :2;
        unsigned D :1;
    };
    struct {
        unsigned :2;
        unsigned I2C_READ :1;
        unsigned I2C_START :1;
        unsigned I2C_STOP :1;
        unsigned I2C_DATA :1;
    };
    struct {
        unsigned :2;
        unsigned nW :1;
        unsigned :2;
        unsigned nA :1;
    };
    struct {
        unsigned :2;
        unsigned nWRITE :1;
        unsigned :2;
        unsigned nADDRESS :1;
    };
    struct {
        unsigned :2;
        unsigned R_W :1;
        unsigned :2;
        unsigned D_A :1;
    };
    struct {
        unsigned :2;
        unsigned READ_WRITE :1;
        unsigned :2;
        unsigned DATA_ADDRESS :1;
    };
} SSPSTATbits_t;
extern volatile SSPSTATbits_t SSPSTATbits __attribute__((address(0x094)));
# 1999 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char TXSTA __attribute__((address(0x098)));

__asm("TXSTA equ 098h");


typedef union {
    struct {
        unsigned TX9D :1;
        unsigned TRMT :1;
        unsigned BRGH :1;
        unsigned :1;
        unsigned SYNC :1;
        unsigned TXEN :1;
        unsigned TX9 :1;
        unsigned CSRC :1;
    };
    struct {
        unsigned TXD8 :1;
        unsigned :5;
        unsigned nTX8 :1;
    };
    struct {
        unsigned :6;
        unsigned TX8_9 :1;
    };
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits __attribute__((address(0x098)));
# 2080 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char SPBRG __attribute__((address(0x099)));

__asm("SPBRG equ 099h");




extern volatile unsigned char CMCON __attribute__((address(0x09C)));

__asm("CMCON equ 09Ch");


typedef union {
    struct {
        unsigned CM :3;
        unsigned CIS :1;
        unsigned C1INV :1;
        unsigned C2INV :1;
        unsigned C1OUT :1;
        unsigned C2OUT :1;
    };
    struct {
        unsigned CM0 :1;
        unsigned CM1 :1;
        unsigned CM2 :1;
    };
} CMCONbits_t;
extern volatile CMCONbits_t CMCONbits __attribute__((address(0x09C)));
# 2157 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char CVRCON __attribute__((address(0x09D)));

__asm("CVRCON equ 09Dh");


typedef union {
    struct {
        unsigned CVR :4;
        unsigned :1;
        unsigned CVRR :1;
        unsigned CVROE :1;
        unsigned CVREN :1;
    };
    struct {
        unsigned CVR0 :1;
        unsigned CVR1 :1;
        unsigned CVR2 :1;
        unsigned CVR3 :1;
    };
} CVRCONbits_t;
extern volatile CVRCONbits_t CVRCONbits __attribute__((address(0x09D)));
# 2222 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char ADRESL __attribute__((address(0x09E)));

__asm("ADRESL equ 09Eh");




extern volatile unsigned char ADCON1 __attribute__((address(0x09F)));

__asm("ADCON1 equ 09Fh");


typedef union {
    struct {
        unsigned PCFG :4;
        unsigned :2;
        unsigned ADCS2 :1;
        unsigned ADFM :1;
    };
    struct {
        unsigned PCFG0 :1;
        unsigned PCFG1 :1;
        unsigned PCFG2 :1;
        unsigned PCFG3 :1;
    };
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits __attribute__((address(0x09F)));
# 2288 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char EEDATA __attribute__((address(0x10C)));

__asm("EEDATA equ 010Ch");




extern volatile unsigned char EEADR __attribute__((address(0x10D)));

__asm("EEADR equ 010Dh");




extern volatile unsigned char EEDATH __attribute__((address(0x10E)));

__asm("EEDATH equ 010Eh");




extern volatile unsigned char EEADRH __attribute__((address(0x10F)));

__asm("EEADRH equ 010Fh");




extern volatile unsigned char EECON1 __attribute__((address(0x18C)));

__asm("EECON1 equ 018Ch");


typedef union {
    struct {
        unsigned RD :1;
        unsigned WR :1;
        unsigned WREN :1;
        unsigned WRERR :1;
        unsigned :3;
        unsigned EEPGD :1;
    };
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits __attribute__((address(0x18C)));
# 2361 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile unsigned char EECON2 __attribute__((address(0x18D)));

__asm("EECON2 equ 018Dh");
# 2374 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic16f877a.h" 3
extern volatile __bit ACKDT __attribute__((address(0x48D)));


extern volatile __bit ACKEN __attribute__((address(0x48C)));


extern volatile __bit ACKSTAT __attribute__((address(0x48E)));


extern volatile __bit ADCS0 __attribute__((address(0xFE)));


extern volatile __bit ADCS1 __attribute__((address(0xFF)));


extern volatile __bit ADCS2 __attribute__((address(0x4FE)));


extern volatile __bit ADDEN __attribute__((address(0xC3)));


extern volatile __bit ADFM __attribute__((address(0x4FF)));


extern volatile __bit ADIE __attribute__((address(0x466)));


extern volatile __bit ADIF __attribute__((address(0x66)));


extern volatile __bit ADON __attribute__((address(0xF8)));


extern volatile __bit BCLIE __attribute__((address(0x46B)));


extern volatile __bit BCLIF __attribute__((address(0x6B)));


extern volatile __bit BF __attribute__((address(0x4A0)));


extern volatile __bit BRGH __attribute__((address(0x4C2)));


extern volatile __bit C1INV __attribute__((address(0x4E4)));


extern volatile __bit C1OUT __attribute__((address(0x4E6)));


extern volatile __bit C2INV __attribute__((address(0x4E5)));


extern volatile __bit C2OUT __attribute__((address(0x4E7)));


extern volatile __bit CARRY __attribute__((address(0x18)));


extern volatile __bit CCP1IE __attribute__((address(0x462)));


extern volatile __bit CCP1IF __attribute__((address(0x62)));


extern volatile __bit CCP1M0 __attribute__((address(0xB8)));


extern volatile __bit CCP1M1 __attribute__((address(0xB9)));


extern volatile __bit CCP1M2 __attribute__((address(0xBA)));


extern volatile __bit CCP1M3 __attribute__((address(0xBB)));


extern volatile __bit CCP1X __attribute__((address(0xBD)));


extern volatile __bit CCP1Y __attribute__((address(0xBC)));


extern volatile __bit CCP2IE __attribute__((address(0x468)));


extern volatile __bit CCP2IF __attribute__((address(0x68)));


extern volatile __bit CCP2M0 __attribute__((address(0xE8)));


extern volatile __bit CCP2M1 __attribute__((address(0xE9)));


extern volatile __bit CCP2M2 __attribute__((address(0xEA)));


extern volatile __bit CCP2M3 __attribute__((address(0xEB)));


extern volatile __bit CCP2X __attribute__((address(0xED)));


extern volatile __bit CCP2Y __attribute__((address(0xEC)));


extern volatile __bit CHS0 __attribute__((address(0xFB)));


extern volatile __bit CHS1 __attribute__((address(0xFC)));


extern volatile __bit CHS2 __attribute__((address(0xFD)));


extern volatile __bit CIS __attribute__((address(0x4E3)));


extern volatile __bit CKE __attribute__((address(0x4A6)));


extern volatile __bit CKP __attribute__((address(0xA4)));


extern volatile __bit CM0 __attribute__((address(0x4E0)));


extern volatile __bit CM1 __attribute__((address(0x4E1)));


extern volatile __bit CM2 __attribute__((address(0x4E2)));


extern volatile __bit CMIE __attribute__((address(0x46E)));


extern volatile __bit CMIF __attribute__((address(0x6E)));


extern volatile __bit CREN __attribute__((address(0xC4)));


extern volatile __bit CSRC __attribute__((address(0x4C7)));


extern volatile __bit CVR0 __attribute__((address(0x4E8)));


extern volatile __bit CVR1 __attribute__((address(0x4E9)));


extern volatile __bit CVR2 __attribute__((address(0x4EA)));


extern volatile __bit CVR3 __attribute__((address(0x4EB)));


extern volatile __bit CVREN __attribute__((address(0x4EF)));


extern volatile __bit CVROE __attribute__((address(0x4EE)));


extern volatile __bit CVRR __attribute__((address(0x4ED)));


extern volatile __bit DATA_ADDRESS __attribute__((address(0x4A5)));


extern volatile __bit DC __attribute__((address(0x19)));


extern volatile __bit D_A __attribute__((address(0x4A5)));


extern volatile __bit D_nA __attribute__((address(0x4A5)));


extern volatile __bit EEIE __attribute__((address(0x46C)));


extern volatile __bit EEIF __attribute__((address(0x6C)));


extern volatile __bit EEPGD __attribute__((address(0xC67)));


extern volatile __bit FERR __attribute__((address(0xC2)));


extern volatile __bit GCEN __attribute__((address(0x48F)));


extern volatile __bit GIE __attribute__((address(0x5F)));


extern volatile __bit GO __attribute__((address(0xFA)));


extern volatile __bit GO_DONE __attribute__((address(0xFA)));


extern volatile __bit GO_nDONE __attribute__((address(0xFA)));


extern volatile __bit I2C_DATA __attribute__((address(0x4A5)));


extern volatile __bit I2C_READ __attribute__((address(0x4A2)));


extern volatile __bit I2C_START __attribute__((address(0x4A3)));


extern volatile __bit I2C_STOP __attribute__((address(0x4A4)));


extern volatile __bit IBF __attribute__((address(0x44F)));


extern volatile __bit IBOV __attribute__((address(0x44D)));


extern volatile __bit INTE __attribute__((address(0x5C)));


extern volatile __bit INTEDG __attribute__((address(0x40E)));


extern volatile __bit INTF __attribute__((address(0x59)));


extern volatile __bit IRP __attribute__((address(0x1F)));


extern volatile __bit OBF __attribute__((address(0x44E)));


extern volatile __bit OERR __attribute__((address(0xC1)));


extern volatile __bit PCFG0 __attribute__((address(0x4F8)));


extern volatile __bit PCFG1 __attribute__((address(0x4F9)));


extern volatile __bit PCFG2 __attribute__((address(0x4FA)));


extern volatile __bit PCFG3 __attribute__((address(0x4FB)));


extern volatile __bit PEIE __attribute__((address(0x5E)));


extern volatile __bit PEN __attribute__((address(0x48A)));


extern volatile __bit PS0 __attribute__((address(0x408)));


extern volatile __bit PS1 __attribute__((address(0x409)));


extern volatile __bit PS2 __attribute__((address(0x40A)));


extern volatile __bit PSA __attribute__((address(0x40B)));


extern volatile __bit PSPIE __attribute__((address(0x467)));


extern volatile __bit PSPIF __attribute__((address(0x67)));


extern volatile __bit PSPMODE __attribute__((address(0x44C)));


extern volatile __bit RA0 __attribute__((address(0x28)));


extern volatile __bit RA1 __attribute__((address(0x29)));


extern volatile __bit RA2 __attribute__((address(0x2A)));


extern volatile __bit RA3 __attribute__((address(0x2B)));


extern volatile __bit RA4 __attribute__((address(0x2C)));


extern volatile __bit RA5 __attribute__((address(0x2D)));


extern volatile __bit RB0 __attribute__((address(0x30)));


extern volatile __bit RB1 __attribute__((address(0x31)));


extern volatile __bit RB2 __attribute__((address(0x32)));


extern volatile __bit RB3 __attribute__((address(0x33)));


extern volatile __bit RB4 __attribute__((address(0x34)));


extern volatile __bit RB5 __attribute__((address(0x35)));


extern volatile __bit RB6 __attribute__((address(0x36)));


extern volatile __bit RB7 __attribute__((address(0x37)));


extern volatile __bit RBIE __attribute__((address(0x5B)));


extern volatile __bit RBIF __attribute__((address(0x58)));


extern volatile __bit RC0 __attribute__((address(0x38)));


extern volatile __bit RC1 __attribute__((address(0x39)));


extern volatile __bit RC2 __attribute__((address(0x3A)));


extern volatile __bit RC3 __attribute__((address(0x3B)));


extern volatile __bit RC4 __attribute__((address(0x3C)));


extern volatile __bit RC5 __attribute__((address(0x3D)));


extern volatile __bit RC6 __attribute__((address(0x3E)));


extern volatile __bit RC7 __attribute__((address(0x3F)));


extern volatile __bit RC8_9 __attribute__((address(0xC6)));


extern volatile __bit RC9 __attribute__((address(0xC6)));


extern volatile __bit RCD8 __attribute__((address(0xC0)));


extern volatile __bit RCEN __attribute__((address(0x48B)));


extern volatile __bit RCIE __attribute__((address(0x465)));


extern volatile __bit RCIF __attribute__((address(0x65)));


extern volatile __bit RD __attribute__((address(0xC60)));


extern volatile __bit RD0 __attribute__((address(0x40)));


extern volatile __bit RD1 __attribute__((address(0x41)));


extern volatile __bit RD2 __attribute__((address(0x42)));


extern volatile __bit RD3 __attribute__((address(0x43)));


extern volatile __bit RD4 __attribute__((address(0x44)));


extern volatile __bit RD5 __attribute__((address(0x45)));


extern volatile __bit RD6 __attribute__((address(0x46)));


extern volatile __bit RD7 __attribute__((address(0x47)));


extern volatile __bit RE0 __attribute__((address(0x48)));


extern volatile __bit RE1 __attribute__((address(0x49)));


extern volatile __bit RE2 __attribute__((address(0x4A)));


extern volatile __bit READ_WRITE __attribute__((address(0x4A2)));


extern volatile __bit RP0 __attribute__((address(0x1D)));


extern volatile __bit RP1 __attribute__((address(0x1E)));


extern volatile __bit RSEN __attribute__((address(0x489)));


extern volatile __bit RX9 __attribute__((address(0xC6)));


extern volatile __bit RX9D __attribute__((address(0xC0)));


extern volatile __bit R_W __attribute__((address(0x4A2)));


extern volatile __bit R_nW __attribute__((address(0x4A2)));


extern volatile __bit SEN __attribute__((address(0x488)));


extern volatile __bit SMP __attribute__((address(0x4A7)));


extern volatile __bit SPEN __attribute__((address(0xC7)));


extern volatile __bit SREN __attribute__((address(0xC5)));


extern volatile __bit SSPEN __attribute__((address(0xA5)));


extern volatile __bit SSPIE __attribute__((address(0x463)));


extern volatile __bit SSPIF __attribute__((address(0x63)));


extern volatile __bit SSPM0 __attribute__((address(0xA0)));


extern volatile __bit SSPM1 __attribute__((address(0xA1)));


extern volatile __bit SSPM2 __attribute__((address(0xA2)));


extern volatile __bit SSPM3 __attribute__((address(0xA3)));


extern volatile __bit SSPOV __attribute__((address(0xA6)));


extern volatile __bit SYNC __attribute__((address(0x4C4)));


extern volatile __bit T0CS __attribute__((address(0x40D)));


extern volatile __bit T0IE __attribute__((address(0x5D)));


extern volatile __bit T0IF __attribute__((address(0x5A)));


extern volatile __bit T0SE __attribute__((address(0x40C)));


extern volatile __bit T1CKPS0 __attribute__((address(0x84)));


extern volatile __bit T1CKPS1 __attribute__((address(0x85)));


extern volatile __bit T1INSYNC __attribute__((address(0x82)));


extern volatile __bit T1OSCEN __attribute__((address(0x83)));


extern volatile __bit T1SYNC __attribute__((address(0x82)));


extern volatile __bit T2CKPS0 __attribute__((address(0x90)));


extern volatile __bit T2CKPS1 __attribute__((address(0x91)));


extern volatile __bit TMR0IE __attribute__((address(0x5D)));


extern volatile __bit TMR0IF __attribute__((address(0x5A)));


extern volatile __bit TMR1CS __attribute__((address(0x81)));


extern volatile __bit TMR1IE __attribute__((address(0x460)));


extern volatile __bit TMR1IF __attribute__((address(0x60)));


extern volatile __bit TMR1ON __attribute__((address(0x80)));


extern volatile __bit TMR2IE __attribute__((address(0x461)));


extern volatile __bit TMR2IF __attribute__((address(0x61)));


extern volatile __bit TMR2ON __attribute__((address(0x92)));


extern volatile __bit TOUTPS0 __attribute__((address(0x93)));


extern volatile __bit TOUTPS1 __attribute__((address(0x94)));


extern volatile __bit TOUTPS2 __attribute__((address(0x95)));


extern volatile __bit TOUTPS3 __attribute__((address(0x96)));


extern volatile __bit TRISA0 __attribute__((address(0x428)));


extern volatile __bit TRISA1 __attribute__((address(0x429)));


extern volatile __bit TRISA2 __attribute__((address(0x42A)));


extern volatile __bit TRISA3 __attribute__((address(0x42B)));


extern volatile __bit TRISA4 __attribute__((address(0x42C)));


extern volatile __bit TRISA5 __attribute__((address(0x42D)));


extern volatile __bit TRISB0 __attribute__((address(0x430)));


extern volatile __bit TRISB1 __attribute__((address(0x431)));


extern volatile __bit TRISB2 __attribute__((address(0x432)));


extern volatile __bit TRISB3 __attribute__((address(0x433)));


extern volatile __bit TRISB4 __attribute__((address(0x434)));


extern volatile __bit TRISB5 __attribute__((address(0x435)));


extern volatile __bit TRISB6 __attribute__((address(0x436)));


extern volatile __bit TRISB7 __attribute__((address(0x437)));


extern volatile __bit TRISC0 __attribute__((address(0x438)));


extern volatile __bit TRISC1 __attribute__((address(0x439)));


extern volatile __bit TRISC2 __attribute__((address(0x43A)));


extern volatile __bit TRISC3 __attribute__((address(0x43B)));


extern volatile __bit TRISC4 __attribute__((address(0x43C)));


extern volatile __bit TRISC5 __attribute__((address(0x43D)));


extern volatile __bit TRISC6 __attribute__((address(0x43E)));


extern volatile __bit TRISC7 __attribute__((address(0x43F)));


extern volatile __bit TRISD0 __attribute__((address(0x440)));


extern volatile __bit TRISD1 __attribute__((address(0x441)));


extern volatile __bit TRISD2 __attribute__((address(0x442)));


extern volatile __bit TRISD3 __attribute__((address(0x443)));


extern volatile __bit TRISD4 __attribute__((address(0x444)));


extern volatile __bit TRISD5 __attribute__((address(0x445)));


extern volatile __bit TRISD6 __attribute__((address(0x446)));


extern volatile __bit TRISD7 __attribute__((address(0x447)));


extern volatile __bit TRISE0 __attribute__((address(0x448)));


extern volatile __bit TRISE1 __attribute__((address(0x449)));


extern volatile __bit TRISE2 __attribute__((address(0x44A)));


extern volatile __bit TRMT __attribute__((address(0x4C1)));


extern volatile __bit TX8_9 __attribute__((address(0x4C6)));


extern volatile __bit TX9 __attribute__((address(0x4C6)));


extern volatile __bit TX9D __attribute__((address(0x4C0)));


extern volatile __bit TXD8 __attribute__((address(0x4C0)));


extern volatile __bit TXEN __attribute__((address(0x4C5)));


extern volatile __bit TXIE __attribute__((address(0x464)));


extern volatile __bit TXIF __attribute__((address(0x64)));


extern volatile __bit UA __attribute__((address(0x4A1)));


extern volatile __bit WCOL __attribute__((address(0xA7)));


extern volatile __bit WR __attribute__((address(0xC61)));


extern volatile __bit WREN __attribute__((address(0xC62)));


extern volatile __bit WRERR __attribute__((address(0xC63)));


extern volatile __bit ZERO __attribute__((address(0x1A)));


extern volatile __bit nA __attribute__((address(0x4A5)));


extern volatile __bit nADDRESS __attribute__((address(0x4A5)));


extern volatile __bit nBO __attribute__((address(0x470)));


extern volatile __bit nBOR __attribute__((address(0x470)));


extern volatile __bit nDONE __attribute__((address(0xFA)));


extern volatile __bit nPD __attribute__((address(0x1B)));


extern volatile __bit nPOR __attribute__((address(0x471)));


extern volatile __bit nRBPU __attribute__((address(0x40F)));


extern volatile __bit nRC8 __attribute__((address(0xC6)));


extern volatile __bit nT1SYNC __attribute__((address(0x82)));


extern volatile __bit nTO __attribute__((address(0x1C)));


extern volatile __bit nTX8 __attribute__((address(0x4C6)));


extern volatile __bit nW __attribute__((address(0x4A2)));


extern volatile __bit nWRITE __attribute__((address(0x4A2)));
# 2643 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic_chip_select.h" 2 3
# 13 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic.h" 2 3
# 30 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic.h" 3
#pragma intrinsic(__nop)
extern void __nop(void);
# 78 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic.h" 3
__attribute__((__unsupported__("The " "FLASH_READ" " macro function is no longer supported. Please use the MPLAB X MCC."))) unsigned char __flash_read(unsigned short addr);

__attribute__((__unsupported__("The " "FLASH_WRITE" " macro function is no longer supported. Please use the MPLAB X MCC."))) void __flash_write(unsigned short addr, unsigned short data);

__attribute__((__unsupported__("The " "FLASH_ERASE" " macro function is no longer supported. Please use the MPLAB X MCC."))) void __flash_erase(unsigned short addr);



# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\eeprom_routines.h" 1 3
# 114 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\eeprom_routines.h" 3
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
# 85 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic.h" 2 3






#pragma intrinsic(_delay)
extern __attribute__((nonreentrant)) void _delay(unsigned long);
#pragma intrinsic(_delaywdt)
extern __attribute__((nonreentrant)) void _delaywdt(unsigned long);
# 137 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\pic.h" 3
extern __bank0 unsigned char __resetbits;
extern __bank0 __bit __powerdown;
extern __bank0 __bit __timeout;
# 27 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\xc.h" 2 3
# 21 "MICROWAVE.c" 2

# 1 "./Keypad.h" 1
# 17 "./Keypad.h"
# 1 "./GPIO.h" 1
# 15 "./GPIO.h"
# 1 "./Main.h" 1
# 17 "./Main.h"
# 1 "./MACROS_INCLUDE.h" 1
# 16 "./MACROS_INCLUDE.h"
# 1 "./GPIO_MACROS.h" 1
# 16 "./MACROS_INCLUDE.h" 2

# 1 "./TIMR0_MACROS.h" 1
# 16 "./TIMR0_MACROS.h"
# 1 "./Main.h" 1
# 16 "./TIMR0_MACROS.h" 2
# 17 "./MACROS_INCLUDE.h" 2

# 1 "./TIMR1_MACROS.h" 1
# 15 "./TIMR1_MACROS.h"
# 1 "./Main.h" 1
# 15 "./TIMR1_MACROS.h" 2
# 18 "./MACROS_INCLUDE.h" 2

# 1 "./TIMR2_MACROS.h" 1
# 16 "./TIMR2_MACROS.h"
# 1 "./Main.h" 1
# 16 "./TIMR2_MACROS.h" 2
# 19 "./MACROS_INCLUDE.h" 2

# 1 "./CCP_MACROS.h" 1
# 20 "./MACROS_INCLUDE.h" 2
# 17 "./Main.h" 2

# 1 "./Port.h" 1
# 18 "./Port.h"
typedef enum{
 LAMP = 0
} tLED ;
# 31 "./Port.h"
typedef enum{
 START = 0,
    Cancel ,
    FOOD_SENSOR ,
    DOOR_SENSOR
} tSW ;
# 18 "./Main.h" 2




typedef char tbyte ;
typedef unsigned int tWORD ;
# 34 "./Main.h"
typedef enum {
 NO_ERORR ,
 PARAMETERS_ERORR ,
 INCOMPLETE_PROCESS_ERORR
}tERORR;
# 15 "./GPIO.h" 2







typedef tbyte tGPIO_PORT_NO;

typedef enum {
 GPIO_PIN_0 = 0,
 GPIO_PIN_1 ,
 GPIO_PIN_2 ,
 GPIO_PIN_3 ,
 GPIO_PIN_4 ,
 GPIO_PIN_5 ,
 GPIO_PIN_6 ,
 GPIO_PIN_7
}tGPIO_PIN_NO;


typedef enum {
 GPIO_PIN_OUT = 0 ,
 GPIO_PIN_IN = 1 ,
 GPIO_PORT_OUT = (0 ? 0xff : 0x00 ) ,
 GPIO_PORT_IN = (1 ? 0xff : 0x00 ) ,
}tGPIO_DIR;



typedef enum {
 GPIO_PIN_ON = 1 ,
 GPIO_PIN_OFF = 0 ,
 GPIO_PORT_ON = 0Xff ,
 GPIO_PORT_OFF = 0x00
}tGPIO_STATE;
# 59 "./GPIO.h"
tERORR GPIO_PIN_INIT ( tGPIO_PORT_NO GPIO_PORTx , tGPIO_PIN_NO GPIO_PIN_NO , tGPIO_DIR GPIO_DIRECTION );
tERORR GPIO_PORT_INIT ( tGPIO_PORT_NO GPIO_PORTx , tGPIO_DIR GPIO_DIRECTION);

tERORR GPIO_PIN_SET_STATE ( tGPIO_PORT_NO GPIO_PORTx , tGPIO_PIN_NO GPIO_PIN_NO , tGPIO_STATE GPIO_PIN_STATE );
tERORR GPIO_PORT_SET_STATE ( tGPIO_PORT_NO GPIO_PORTx ,tGPIO_STATE GPIO_STATE );

tGPIO_STATE GPIO_PIN_GET_STATE ( tGPIO_PORT_NO GPIO_PORTx , tGPIO_PIN_NO GPIO_PIN_NO );
tGPIO_STATE GPIO_PORT_GET_STATE ( tGPIO_PORT_NO GPIO_PORTx );
# 17 "./Keypad.h" 2
# 27 "./Keypad.h"
typedef struct {
tGPIO_PORT_NO KEYPAD_ROW_RORT ;
tGPIO_PORT_NO KEYPAD_COL_PORT ;
tGPIO_PIN_NO KEYPAD_ROW_PIN[4];
tGPIO_PIN_NO KEYPAD_COL_PIN[3];
}tKEYPAD_info;





typedef enum {

KEY_1 = 0,
KEY_2,
KEY_3,

KEY_4,
KEY_5,
KEY_6,

KEY_7,
KEY_8,
KEY_9,

KEY_LEFT,
KEY_0,
KEY_RIGHRT,

NO_KEY
} tKEYPAD_NO;

typedef enum {
 KEY_PRESSED,
 KEY_PRE_PRESSED,
 KEY_PRE_RELEASED
}tKEYPAD_STATUS;


typedef struct {
 tKEYPAD_NO KEYPAD_NO ;
 tKEYPAD_STATUS KEYPAD_STATUS ;
}tKEYPAD_PRESSED;
# 78 "./Keypad.h"
void KEYPAD_INIT (void);
void KEYPAD_UPDATE (void);
tKEYPAD_PRESSED KEYPAD_GET_PRESSED_KEY (void);
# 22 "MICROWAVE.c" 2

# 1 "./LCD.h" 1
# 15 "./LCD.h"
# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\c90\\stdlib.h" 1 3




# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\__size_t.h" 1 3



typedef unsigned size_t;
# 5 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\c90\\stdlib.h" 2 3

# 1 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\__null.h" 1 3
# 6 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\c90\\stdlib.h" 2 3

typedef unsigned short wchar_t;







typedef struct {
 int rem;
 int quot;
} div_t;
typedef struct {
 unsigned rem;
 unsigned quot;
} udiv_t;
typedef struct {
 long quot;
 long rem;
} ldiv_t;
typedef struct {
 unsigned long quot;
 unsigned long rem;
} uldiv_t;
# 65 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\c90\\stdlib.h" 3
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);



extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);



extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);
# 104 "C:\\Program Files (x86)\\Microchip\\xc8\\v2.10\\pic\\include\\c90\\stdlib.h" 3
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);
# 15 "./LCD.h" 2



# 1 "./util.h" 1
# 23 "./util.h"
void ENABLE_INTERUPT( void );
# 18 "./LCD.h" 2
# 35 "./LCD.h"
void LCD_INIT(void);
void LCD_SEND_A_STRING ( tbyte *string);
void LCD_SEND_A_NUMBER (tWORD x);
void LCD_SET_CURSOR (tbyte coloum , tbyte row);
void LCD_CLEAR(void);
void START_BLINKING_AT (tbyte BLINKED);
void STOP_BLINKING (void);
# 23 "MICROWAVE.c" 2

# 1 "./LED.h" 1
# 25 "./LED.h"
typedef enum{
 LED_OFF = 0 ,
 LED_ON = 1
 } tLED_STATE ;


 struct led_data {
  tGPIO_PORT_NO LED_PORT;
  tGPIO_PIN_NO LED_PIN ;
  tLED_STATE LED_STATE;
 };
# 45 "./LED.h"
void LEDs_INIT ( void );

tERORR LED_SET_DATA (tLED LED_NO, tGPIO_PORT_NO LED_PORT ,tGPIO_PIN_NO LED_PIN);
tERORR LED_SET_STATE ( tLED LED_NO , tLED_STATE LED_STATE );
tERORR LED_TOGGLE ( tLED LED_NO );
tLED_STATE LED_GET_STATE ( tLED LED_NO );
# 24 "MICROWAVE.c" 2

# 1 "./SW.h" 1
# 25 "./SW.h"
typedef enum {
 SW_PRESSED,
 SW_PRE_PRESSED,
 SW_RELEASED,
 SW_PRE_RELEASED
 }tSW_STATE;


struct sw_data {
 tGPIO_PORT_NO SW_PORT ;
 tGPIO_PIN_NO SW_PIN ;
    tSW_STATE SW_SAMPLES[2] ;
 tSW_STATE SW_STATE;
 };





tERORR SWs_UPDATE (void);
tERORR SW_SET_DATA (tSW SW_NO, tGPIO_PORT_NO SW_PORT ,tGPIO_PIN_NO SW_PIN);
tSW_STATE SW_GET_STATE (tSW SW_NO);
tERORR SWs_INIT (void);
# 25 "MICROWAVE.c" 2

# 1 "./MOTOR.h" 1
# 17 "./MOTOR.h"
# 1 "./CCP.h" 1
# 17 "./CCP.h"
# 1 "./TIMR1.h" 1
# 25 "./TIMR1.h"
typedef tWORD tTIMER1;

typedef enum {
 TIMER1_CLK_1 = 0,
 TIMER1_CLK_2,
 TIMER1_CLK_4,
 TIMER1_CLK_8,
}tTIMER1_PRESCALER;


typedef enum {
 TIMER1_INTERNAL = 0,
 TIMER1_EXTERNAL_SYNCHRONIZED,
 TIMER1_EXTERNAL_UNSYNCHRONIZED
}tTIMER1_CLOCKSOURCE;

typedef enum {
 TIMER1_POLLING_BASED = 0 ,
 TIMER1_INTERUPT_BASED
}tTIMER1_INTERRUPT;

typedef struct {
tTIMER1_PRESCALER PRESCALER;
tTIMER1_CLOCKSOURCE CLOCKSOURCE;
tTIMER1_INTERRUPT INTERRUPT;
}tTIMER1_CONFIG;







void TIMER1_INIT (void);
void TIMER1_UPDATE (void);

tERORR TIMER1_CONFIGURE (tTIMER1_CONFIG* TIMER1_CONFIG );
tERORR TIMER1_LOAD_START_VALUE (tTIMER1 DELAY_MS);
void TIMER1_START (void);
void TIMER1_STOP(void);
tbyte TIMER1_CheckOverFlow(void);
# 17 "./CCP.h" 2

# 1 "./TIMR2.h" 1
# 25 "./TIMR2.h"
typedef tbyte tTIMER2;


typedef enum {
 TIMER2_POST_CLK_1 = 0,
 TIMER2_POST_CLK_2,
 TIMER2_POST_CLK_3,
 TIMER2_POST_CLK_4,
 TIMER2_POST_CLK_5,
 TIMER2_POST_CLK_6,
 TIMER2_POST_CLK_7,
 TIMER2_POST_CLK_8,
 TIMER2_POST_CLK_9,
 TIMER2_POST_CLK_10,
 TIMER2_POST_CLK_11,
 TIMER2_POST_CLK_12,
 TIMER2_POST_CLK_13,
 TIMER2_POST_CLK_14,
 TIMER2_POST_CLK_15,
 TIMER2_POST_CLK_16
}tTIMER2_POSTSCALER;


typedef enum {
 TIMER2_PRE_CLK_1 = 0,
 TIMER2_PRE_CLK_4,
 TIMER2_PRE_CLK_16
}tTIMER2_PRESCALER;

typedef enum {
 TIMER2_POLLING_BASED = 0,
 TIMER2_INTERUPT_BASED
}tTIMER2_INTERRUPT;

typedef struct {
tTIMER2_PRESCALER PRESCALER ;
tTIMER2_POSTSCALER POSTSCALER;
tTIMER2_INTERRUPT INTERRUPT ;
}tTIMER2_CONFIG;







void TIMER2_INIT (void);
void TIMER2_UPDATE (void);


tERORR TIMER2_CONFIGURE (tTIMER2_CONFIG* TIMER2_CONFIG );
tERORR TIMER2_LOAD_START_VALUE (tTIMER2 DELAY_MS);
void TIMER2_START (void);
void TIMER2_STOP(void);
tbyte TIMER2_CheckOverFlow(void);
# 18 "./CCP.h" 2








typedef tWORD tPWM_CYCLE ;
typedef tWORD tPWM_DUTYCYCLE ;
typedef tWORD tCOMPARATOR;
typedef tWORD tCAPTURED;
# 45 "./CCP.h"
typedef tbyte tCCP_MODE ;







tERORR CCP_PWM_PERIOD_LOAD(tPWM_CYCLE PERIOD);

void CCP1_INIT (void );
tERORR CCP1_CONFIGURE (tCCP_MODE CCP_MODE);
tERORR CCP1_PWM_DUTY_CYCLE_LOAD(tPWM_DUTYCYCLE DUTY_CYCLE);
tERORR CCP1_COMPARATOR_LOAD(tCOMPARATOR COMPARE_VALUE);
tCAPTURED CCP1_GET_CAPTURED(void);
void CCP1_START (void);
void CCP1_STOP (void);


void CCP2_INIT (void);
tERORR CCP2_CONFIGURE (tCCP_MODE CCP_MODE);
tERORR CCP2_PWM_DUTY_CYCLE_LOAD(tPWM_DUTYCYCLE DUTY_CYCLE);
tERORR CCP2_COMPARATOR_LOAD(tCOMPARATOR COMPARE_VALUE);
tCAPTURED CCP2_GET_CAPTURED(void);
void CCP2_START (void);
void CCP2_STOP (void);
# 17 "./MOTOR.h" 2







typedef tbyte tMOTOR_STATE ;






void MOTOR_INIT (void);
void MOTOR_UPDATE (void);
void MOTOR_SET_STATE (tMOTOR_STATE MOTOR_STATE);
tMOTOR_STATE MOTOR_GET_STATE ( void);
# 26 "MICROWAVE.c" 2

# 1 "./HEATER.h" 1
# 18 "./HEATER.h"
typedef tbyte tHEATER_STATE;
# 27 "./HEATER.h"
void HEATER_INIT (void);
void HEATER_UPDATE (void);
void HEATER_SET_STATE (tHEATER_STATE HEATER_STATE);
tHEATER_STATE HEATER_GET_STATE (void );
# 27 "MICROWAVE.c" 2

# 1 "./TIMR0.h" 1
# 27 "./TIMR0.h"
typedef tbyte tTIME0;

typedef enum {
 TIMER0_CLK_2 = 0,
 TIMER0_CLK_4,
 TIMER0_CLK_8,
 TIMER0_CLK_16,
 TIMER0_CLK_32,
 TIMER0_CLK_64,
 TIMER0_CLK_128,
    TIMER0_CLK_256,
}tTIMER0_PRESCALER;

typedef enum {
 TIMER0_INTERNAL = 0,
 TIMER0_EXTERNAL_RISING_EDGE,
 TIMER0_EXTERNAL_FALLING_EDGE
}tTIMER0_CLOCKSOURCE;

typedef enum {
 TIMER0_POLLING_BASED = 0 ,
 TIMER0_INTERUPT_BASED
}tTIMER0_INTERRUPT;

typedef struct {
tTIMER0_PRESCALER PRESCALER;
tTIMER0_CLOCKSOURCE CLOCKSOURCE;
tTIMER0_INTERRUPT INTERRUPT;
}tTIMER0_CONFIG;
# 64 "./TIMR0.h"
void TIMER0_INIT (void);
void TIMER0_UPDATE (void);

tERORR TIMER0_CONFIGURE (tTIMER0_CONFIG* TIMER0_CONFIG );
tERORR TIMER0_LOAD_VALUE ( tTIME0 DELAY_MS );
void TIMER0_START (void);
void TIMER0_STOP(void);
tbyte TIMER0_CheckOverFlow(void);
# 28 "MICROWAVE.c" 2

# 1 "./TIME.h" 1
# 32 "./TIME.h"
typedef enum {
NO = 0,
YES = 1
}tTIME_state;

typedef enum {
DECREMENTAL_TO_O = 0,
CONTINOUS_INCREMENTAL = 1
}tTIME_type;


 typedef struct {
tbyte SECONDS;
tbyte MINUTES;
tbyte HOURS;
}tTIME;





void TIME_INIT (void);


void TIME_CONTINUE (void);
void TIME_STOP (void);

void TIME_START_AT (tbyte START_SECONDS , tbyte START_MINUTES , tbyte START_HOURS ,tTIME_type COUNTING_TYPE );

void TIME_UPDATE (void);
tTIME TIME_GET(void);
# 29 "MICROWAVE.c" 2

# 1 "./CONTROL.h" 1
# 18 "./CONTROL.h"
# 1 "./Display.h" 1
# 27 "./Display.h"
 void DISP_UPDATE_TIME_UNIT_AT(tbyte UNIT , tbyte NUMBER );
 void DISP_UPDATE_TIME (tTIME time);
 void DISP_SHOW_TIME_AT( tTIME START_TIME) ;
 void DISP_HEATER_DATA(void);
 void DISP_MOTOR_DATA(void);
 void DISP_STATMENT (tbyte * statment);
# 18 "./CONTROL.h" 2
# 33 "./CONTROL.h"
void CONTROL_UPDATE (void);
void CONTROL_INIT (void);
# 30 "MICROWAVE.c" 2



void __attribute__((picinterrupt(("")))) SYS_UPDATE (void)
{
    if (( TMR0IF ))
    {
        TIMER0_UPDATE();
        TIME_UPDATE();
        HEATER_UPDATE();
        MOTOR_UPDATE();
        SWs_UPDATE();
        KEYPAD_UPDATE();
        CONTROL_UPDATE ();


    }
}


void main()
{

    TIME_INIT ();
    MOTOR_INIT();
    HEATER_INIT();
    LCD_INIT();
    SWs_INIT();
    LEDs_INIT();
    TIMER0_INIT();
    KEYPAD_INIT();
    CONTROL_INIT();
    ENABLE_INTERUPT();

    TIMER0_START();
    while(1)
    {

    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Version 4.0 HI-TECH Software Intermediate Code
"53 CONTROL.c
[; ;CONTROL.c: 53: static tHANDLERS_STATES HANDLERS_STATES[5] ;
[c E1272 0 1 .. ]
[n E1272 . FIRST_TIME ON_WORK  ]
"54
[; ;CONTROL.c: 54: static tCONTROL_STATES CONTROL_CURRENT_STATE ;
[c E1265 0 1 2 3 4 .. ]
[n E1265 . SET_TIME SET_HEATING SET_ROTOR_PWR HEATING FINISH  ]
"43 ./TIME.h
[; ;./TIME.h: 43:  typedef struct {
[s S99 `uc 1 `uc 1 `uc 1 ]
[n S99 . SECONDS MINUTES HOURS ]
"59 CONTROL.c
[; ;CONTROL.c: 59: static tKEYPAD_PRESSED PRESSED_KEY;
[c E1216 0 1 2 3 4 5 6 7 8 9 10 11 12 .. ]
[n E1216 . KEY_1 KEY_2 KEY_3 KEY_4 KEY_5 KEY_6 KEY_7 KEY_8 KEY_9 KEY_LEFT KEY_0 KEY_RIGHRT NO_KEY  ]
[c E1231 0 1 2 .. ]
[n E1231 . KEY_PRESSED KEY_PRE_PRESSED KEY_PRE_RELEASED  ]
"66 ./Keypad.h
[; ;./Keypad.h: 66: typedef struct {
[s S104 `E1216 1 `E1231 1 ]
[n S104 . KEYPAD_NO KEYPAD_STATUS ]
"80
[; ;./Keypad.h: 80: tKEYPAD_PRESSED KEYPAD_GET_PRESSED_KEY (void);
[v _KEYPAD_GET_PRESSED_KEY `(S104 ~T0 @X0 0 ef ]
"28 CONTROL.c
[; ;CONTROL.c: 28: static void SET_TIME_HANDLER (void);
[v _SET_TIME_HANDLER `(v ~T0 @X0 0 sf ]
"31
[; ;CONTROL.c: 31: static void SET_HEATING_HANDLER (void);
[v _SET_HEATING_HANDLER `(v ~T0 @X0 0 sf ]
"34
[; ;CONTROL.c: 34: static void SET_ROTOR_PWR_HANDLER (void);
[v _SET_ROTOR_PWR_HANDLER `(v ~T0 @X0 0 sf ]
"37
[; ;CONTROL.c: 37: static void HEATING_HANDLER (void);
[v _HEATING_HANDLER `(v ~T0 @X0 0 sf ]
"39
[; ;CONTROL.c: 39: static void FINISH_HANDLER (void);
[v _FINISH_HANDLER `(v ~T0 @X0 0 sf ]
"41
[; ;CONTROL.c: 41: static void DEFAULT_HANDLER(void);
[v _DEFAULT_HANDLER `(v ~T0 @X0 0 sf ]
"41 ./LCD.h
[; ;./LCD.h: 41: void STOP_BLINKING (void);
[v _STOP_BLINKING `(v ~T0 @X0 0 ef ]
"29 ./Display.h
[; ;./Display.h: 29:  void DISP_SHOW_TIME_AT( tTIME START_TIME) ;
[v _DISP_SHOW_TIME_AT `(v ~T0 @X0 0 ef1`S99 ]
"29 CONTROL.c
[; ;CONTROL.c: 29: static void SET_TIME_HANDLER_ON_WORK(void);
[v _SET_TIME_HANDLER_ON_WORK `(v ~T0 @X0 0 sf ]
"30 ./Display.h
[; ;./Display.h: 30:  void DISP_HEATER_DATA(void);
[v _DISP_HEATER_DATA `(v ~T0 @X0 0 ef ]
"32 CONTROL.c
[; ;CONTROL.c: 32: static void SET_HEATING_HANDLER_ON_WORK (void );
[v _SET_HEATING_HANDLER_ON_WORK `(v ~T0 @X0 0 sf ]
"31 ./Display.h
[; ;./Display.h: 31:  void DISP_MOTOR_DATA(void);
[v _DISP_MOTOR_DATA `(v ~T0 @X0 0 ef ]
"35 CONTROL.c
[; ;CONTROL.c: 35: static void SET_ROTOR_PWR_HANDLER_ON_WORK (void );
[v _SET_ROTOR_PWR_HANDLER_ON_WORK `(v ~T0 @X0 0 sf ]
"62 ./TIME.h
[; ;./TIME.h: 62: tTIME TIME_GET(void);
[v _TIME_GET `(S99 ~T0 @X0 0 ef ]
"33 ./MOTOR.h
[; ;./MOTOR.h: 33: void MOTOR_SET_STATE (tMOTOR_STATE MOTOR_STATE);
[v _MOTOR_SET_STATE `(v ~T0 @X0 0 ef1`uc ]
"29 ./HEATER.h
[; ;./HEATER.h: 29: void HEATER_SET_STATE (tHEATER_STATE HEATER_STATE);
[v _HEATER_SET_STATE `(v ~T0 @X0 0 ef1`uc ]
"194 CONTROL.c
[; ;CONTROL.c: 194:             LED_SET_STATE(LAMP , LED_ON);
[c E850 0 .. ]
[n E850 . LAMP  ]
[c E1243 0 1 .. ]
[n E1243 . LED_OFF LED_ON  ]
[c E861 0 1 2 .. ]
[n E861 . NO_ERORR PARAMETERS_ERORR INCOMPLETE_PROCESS_ERORR  ]
"48 ./LED.h
[; ;./LED.h: 48: tERORR LED_SET_STATE ( tLED LED_NO , tLED_STATE LED_STATE );
[v _LED_SET_STATE `(E861 ~T0 @X0 0 ef2`E850`E1243 ]
"195 CONTROL.c
[; ;CONTROL.c: 195:             TIME_START_AT (SETTED_TIME.SECONDS ,SETTED_TIME.MINUTES , SETTED_TIME.HOURS , DECREMENTAL_TO_O );
[c E1050 0 1 .. ]
[n E1050 . DECREMENTAL_TO_O CONTINOUS_INCREMENTAL  ]
"59 ./TIME.h
[; ;./TIME.h: 59: void TIME_START_AT (tbyte START_SECONDS , tbyte START_MINUTES , tbyte START_HOURS ,tTIME_type COUNTING_TYPE );
[v _TIME_START_AT `(v ~T0 @X0 0 ef4`uc`uc`uc`E1050 ]
"28 ./Display.h
[; ;./Display.h: 28:  void DISP_UPDATE_TIME (tTIME time);
[v _DISP_UPDATE_TIME `(v ~T0 @X0 0 ef1`S99 ]
"45 CONTROL.c
[; ;CONTROL.c: 45: static void STOP_HEATING (void);
[v _STOP_HEATING `(v ~T0 @X0 0 sf ]
"213
[; ;CONTROL.c: 213:                 if (SW_GET_STATE(FOOD_SENSOR) != SW_RELEASED )
[c E853 0 1 2 3 .. ]
[n E853 . START Cancel FOOD_SENSOR DOOR_SENSOR  ]
[c E1191 0 1 2 3 .. ]
[n E1191 . SW_PRESSED SW_PRE_PRESSED SW_RELEASED SW_PRE_RELEASED  ]
"46 ./SW.h
[; ;./SW.h: 46: tSW_STATE SW_GET_STATE (tSW SW_NO);
[v _SW_GET_STATE `(E1191 ~T0 @X0 0 ef1`E853 ]
"32 ./Display.h
[; ;./Display.h: 32:  void DISP_STATMENT (tbyte * statment);
[v _DISP_STATMENT `(v ~T0 @X0 0 ef1`*uc ]
"40 ./LCD.h
[; ;./LCD.h: 40: void START_BLINKING_AT (tbyte BLINKED);
[v _START_BLINKING_AT `(v ~T0 @X0 0 ef1`uc ]
"43 CONTROL.c
[; ;CONTROL.c: 43: static void INCREMENT_THIS (tbyte KEY);
[v _INCREMENT_THIS `(v ~T0 @X0 0 sf1`uc ]
"44
[; ;CONTROL.c: 44: static void GOTO_NEXT_DIGIT (tbyte KEY);
[v _GOTO_NEXT_DIGIT `(v ~T0 @X0 0 sf1`uc ]
"27 ./Display.h
[; ;./Display.h: 27:  void DISP_UPDATE_TIME_UNIT_AT(tbyte UNIT , tbyte NUMBER );
[v _DISP_UPDATE_TIME_UNIT_AT `(v ~T0 @X0 0 ef2`uc`uc ]
"38 ./LCD.h
[; ;./LCD.h: 38: void LCD_SET_CURSOR (tbyte coloum , tbyte row);
[v _LCD_SET_CURSOR `(v ~T0 @X0 0 ef2`uc`uc ]
"57 ./TIME.h
[; ;./TIME.h: 57: void TIME_STOP (void);
[v _TIME_STOP `(v ~T0 @X0 0 ef ]
"54 C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 54: __asm("INDF equ 00h");
[; <" INDF equ 00h ;# ">
"61
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 61: __asm("TMR0 equ 01h");
[; <" TMR0 equ 01h ;# ">
"68
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 68: __asm("PCL equ 02h");
[; <" PCL equ 02h ;# ">
"75
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 75: __asm("STATUS equ 03h");
[; <" STATUS equ 03h ;# ">
"161
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 161: __asm("FSR equ 04h");
[; <" FSR equ 04h ;# ">
"168
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 168: __asm("PORTA equ 05h");
[; <" PORTA equ 05h ;# ">
"218
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 218: __asm("PORTB equ 06h");
[; <" PORTB equ 06h ;# ">
"280
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 280: __asm("PORTC equ 07h");
[; <" PORTC equ 07h ;# ">
"342
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 342: __asm("PORTD equ 08h");
[; <" PORTD equ 08h ;# ">
"404
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 404: __asm("PORTE equ 09h");
[; <" PORTE equ 09h ;# ">
"436
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 436: __asm("PCLATH equ 0Ah");
[; <" PCLATH equ 0Ah ;# ">
"456
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 456: __asm("INTCON equ 0Bh");
[; <" INTCON equ 0Bh ;# ">
"534
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 534: __asm("PIR1 equ 0Ch");
[; <" PIR1 equ 0Ch ;# ">
"596
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 596: __asm("PIR2 equ 0Dh");
[; <" PIR2 equ 0Dh ;# ">
"636
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 636: __asm("TMR1 equ 0Eh");
[; <" TMR1 equ 0Eh ;# ">
"643
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 643: __asm("TMR1L equ 0Eh");
[; <" TMR1L equ 0Eh ;# ">
"650
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 650: __asm("TMR1H equ 0Fh");
[; <" TMR1H equ 0Fh ;# ">
"657
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 657: __asm("T1CON equ 010h");
[; <" T1CON equ 010h ;# ">
"732
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 732: __asm("TMR2 equ 011h");
[; <" TMR2 equ 011h ;# ">
"739
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 739: __asm("T2CON equ 012h");
[; <" T2CON equ 012h ;# ">
"810
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 810: __asm("SSPBUF equ 013h");
[; <" SSPBUF equ 013h ;# ">
"817
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 817: __asm("SSPCON equ 014h");
[; <" SSPCON equ 014h ;# ">
"887
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 887: __asm("CCPR1 equ 015h");
[; <" CCPR1 equ 015h ;# ">
"894
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 894: __asm("CCPR1L equ 015h");
[; <" CCPR1L equ 015h ;# ">
"901
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 901: __asm("CCPR1H equ 016h");
[; <" CCPR1H equ 016h ;# ">
"908
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 908: __asm("CCP1CON equ 017h");
[; <" CCP1CON equ 017h ;# ">
"966
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 966: __asm("RCSTA equ 018h");
[; <" RCSTA equ 018h ;# ">
"1061
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1061: __asm("TXREG equ 019h");
[; <" TXREG equ 019h ;# ">
"1068
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1068: __asm("RCREG equ 01Ah");
[; <" RCREG equ 01Ah ;# ">
"1075
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1075: __asm("CCPR2 equ 01Bh");
[; <" CCPR2 equ 01Bh ;# ">
"1082
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1082: __asm("CCPR2L equ 01Bh");
[; <" CCPR2L equ 01Bh ;# ">
"1089
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1089: __asm("CCPR2H equ 01Ch");
[; <" CCPR2H equ 01Ch ;# ">
"1096
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1096: __asm("CCP2CON equ 01Dh");
[; <" CCP2CON equ 01Dh ;# ">
"1154
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1154: __asm("ADRESH equ 01Eh");
[; <" ADRESH equ 01Eh ;# ">
"1161
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1161: __asm("ADCON0 equ 01Fh");
[; <" ADCON0 equ 01Fh ;# ">
"1257
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1257: __asm("OPTION_REG equ 081h");
[; <" OPTION_REG equ 081h ;# ">
"1327
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1327: __asm("TRISA equ 085h");
[; <" TRISA equ 085h ;# ">
"1377
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1377: __asm("TRISB equ 086h");
[; <" TRISB equ 086h ;# ">
"1439
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1439: __asm("TRISC equ 087h");
[; <" TRISC equ 087h ;# ">
"1501
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1501: __asm("TRISD equ 088h");
[; <" TRISD equ 088h ;# ">
"1563
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1563: __asm("TRISE equ 089h");
[; <" TRISE equ 089h ;# ">
"1620
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1620: __asm("PIE1 equ 08Ch");
[; <" PIE1 equ 08Ch ;# ">
"1682
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1682: __asm("PIE2 equ 08Dh");
[; <" PIE2 equ 08Dh ;# ">
"1722
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1722: __asm("PCON equ 08Eh");
[; <" PCON equ 08Eh ;# ">
"1756
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1756: __asm("SSPCON2 equ 091h");
[; <" SSPCON2 equ 091h ;# ">
"1818
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1818: __asm("PR2 equ 092h");
[; <" PR2 equ 092h ;# ">
"1825
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1825: __asm("SSPADD equ 093h");
[; <" SSPADD equ 093h ;# ">
"1832
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 1832: __asm("SSPSTAT equ 094h");
[; <" SSPSTAT equ 094h ;# ">
"2001
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2001: __asm("TXSTA equ 098h");
[; <" TXSTA equ 098h ;# ">
"2082
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2082: __asm("SPBRG equ 099h");
[; <" SPBRG equ 099h ;# ">
"2089
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2089: __asm("CMCON equ 09Ch");
[; <" CMCON equ 09Ch ;# ">
"2159
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2159: __asm("CVRCON equ 09Dh");
[; <" CVRCON equ 09Dh ;# ">
"2224
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2224: __asm("ADRESL equ 09Eh");
[; <" ADRESL equ 09Eh ;# ">
"2231
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2231: __asm("ADCON1 equ 09Fh");
[; <" ADCON1 equ 09Fh ;# ">
"2290
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2290: __asm("EEDATA equ 010Ch");
[; <" EEDATA equ 010Ch ;# ">
"2297
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2297: __asm("EEADR equ 010Dh");
[; <" EEADR equ 010Dh ;# ">
"2304
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2304: __asm("EEDATH equ 010Eh");
[; <" EEDATH equ 010Eh ;# ">
"2311
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2311: __asm("EEADRH equ 010Fh");
[; <" EEADRH equ 010Fh ;# ">
"2318
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2318: __asm("EECON1 equ 018Ch");
[; <" EECON1 equ 018Ch ;# ">
"2363
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 2363: __asm("EECON2 equ 018Dh");
[; <" EECON2 equ 018Dh ;# ">
"53 CONTROL.c
[; ;CONTROL.c: 53: static tHANDLERS_STATES HANDLERS_STATES[5] ;
[v _HANDLERS_STATES `E1272 ~T0 @X0 -> 5 `i s ]
"54
[; ;CONTROL.c: 54: static tCONTROL_STATES CONTROL_CURRENT_STATE ;
[v _CONTROL_CURRENT_STATE `E1265 ~T0 @X0 1 s ]
"55
[; ;CONTROL.c: 55: static tTIME SETTED_TIME ;
[v _SETTED_TIME `S99 ~T0 @X0 1 s ]
"56
[; ;CONTROL.c: 56: static tHEATER_STATE MOTOR_WORK_STATE;
[v _MOTOR_WORK_STATE `uc ~T0 @X0 1 s ]
"57
[; ;CONTROL.c: 57: static tMOTOR_STATE HEATER_WORK_STATE;
[v _HEATER_WORK_STATE `uc ~T0 @X0 1 s ]
"58
[; ;CONTROL.c: 58: static tbyte CURRENT_DIGIT = (6);
[v _CURRENT_DIGIT `uc ~T0 @X0 1 s ]
[i _CURRENT_DIGIT
-> -> 6 `i `uc
]
"59
[; ;CONTROL.c: 59: static tKEYPAD_PRESSED PRESSED_KEY;
[v _PRESSED_KEY `S104 ~T0 @X0 1 s ]
"65
[; ;CONTROL.c: 65: void CONTROL_INIT (void)
[v _CONTROL_INIT `(v ~T0 @X0 1 ef ]
"66
[; ;CONTROL.c: 66: {
{
[e :U _CONTROL_INIT ]
[f ]
"67
[; ;CONTROL.c: 67:     tbyte count = 0 ;
[v _count `uc ~T0 @X0 1 a ]
[e = _count -> -> 0 `i `uc ]
"68
[; ;CONTROL.c: 68:     for ( ;count < 5 ; count++ )
{
[e $ < -> _count `i -> 5 `i 107  ]
[e $U 108  ]
[e :U 107 ]
"69
[; ;CONTROL.c: 69:     {
{
"70
[; ;CONTROL.c: 70:         HANDLERS_STATES[count] = FIRST_TIME;
[e = *U + &U _HANDLERS_STATES * -> _count `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"71
[; ;CONTROL.c: 71:     }
}
[e ++ _count -> -> 1 `i `uc ]
[e $ < -> _count `i -> 5 `i 107  ]
[e :U 108 ]
}
"72
[; ;CONTROL.c: 72:     CONTROL_CURRENT_STATE = SET_TIME ;
[e = _CONTROL_CURRENT_STATE . `E1265 0 ]
"73
[; ;CONTROL.c: 73:     SETTED_TIME.HOURS = 0;
[e = . _SETTED_TIME 2 -> -> 0 `i `uc ]
"74
[; ;CONTROL.c: 74:     SETTED_TIME.MINUTES = 0;
[e = . _SETTED_TIME 1 -> -> 0 `i `uc ]
"75
[; ;CONTROL.c: 75:     SETTED_TIME.SECONDS = 0;
[e = . _SETTED_TIME 0 -> -> 0 `i `uc ]
"76
[; ;CONTROL.c: 76:     MOTOR_WORK_STATE = 30 ;
[e = _MOTOR_WORK_STATE -> -> 30 `i `uc ]
"77
[; ;CONTROL.c: 77:     HEATER_WORK_STATE = 166 ;
[e = _HEATER_WORK_STATE -> -> 166 `i `uc ]
"78
[; ;CONTROL.c: 78: }
[e :UE 106 ]
}
"80
[; ;CONTROL.c: 80: void CONTROL_UPDATE (void)
[v _CONTROL_UPDATE `(v ~T0 @X0 1 ef ]
"81
[; ;CONTROL.c: 81: {
{
[e :U _CONTROL_UPDATE ]
[f ]
"82
[; ;CONTROL.c: 82:     static tbyte control_shift_counter = 0;
[v F1300 `uc ~T0 @X0 1 s control_shift_counter ]
[i F1300
-> -> 0 `i `uc
]
"83
[; ;CONTROL.c: 83:     if (control_shift_counter >= 5)
[e $ ! >= -> F1300 `i -> 5 `i 111  ]
"84
[; ;CONTROL.c: 84:     {
{
"85
[; ;CONTROL.c: 85:         static tbyte control_timer_counter = 0;
[v F1301 `uc ~T0 @X0 1 s control_timer_counter ]
[i F1301
-> -> 0 `i `uc
]
"86
[; ;CONTROL.c: 86:         control_timer_counter += (5);
[e =+ F1301 -> -> 5 `i `uc ]
"87
[; ;CONTROL.c: 87:         if (control_timer_counter >= 20)
[e $ ! >= -> F1301 `i -> 20 `i 112  ]
"88
[; ;CONTROL.c: 88:         {
{
"89
[; ;CONTROL.c: 89:             control_timer_counter = 0;
[e = F1301 -> -> 0 `i `uc ]
"90
[; ;CONTROL.c: 90:             PRESSED_KEY = KEYPAD_GET_PRESSED_KEY() ;
[e = _PRESSED_KEY ( _KEYPAD_GET_PRESSED_KEY ..  ]
"91
[; ;CONTROL.c: 91:             switch ( CONTROL_CURRENT_STATE )
[e $U 114  ]
"92
[; ;CONTROL.c: 92:             {
{
"93
[; ;CONTROL.c: 93:                 case(SET_TIME):
[e :U 115 ]
"94
[; ;CONTROL.c: 94:                     SET_TIME_HANDLER();
[e ( _SET_TIME_HANDLER ..  ]
"95
[; ;CONTROL.c: 95:                 break;
[e $U 113  ]
"96
[; ;CONTROL.c: 96:                 case(SET_HEATING):
[e :U 116 ]
"97
[; ;CONTROL.c: 97:                     SET_HEATING_HANDLER();
[e ( _SET_HEATING_HANDLER ..  ]
"98
[; ;CONTROL.c: 98:                 break;
[e $U 113  ]
"99
[; ;CONTROL.c: 99:                 case(SET_ROTOR_PWR):
[e :U 117 ]
"100
[; ;CONTROL.c: 100:                     SET_ROTOR_PWR_HANDLER();
[e ( _SET_ROTOR_PWR_HANDLER ..  ]
"101
[; ;CONTROL.c: 101:                 break;
[e $U 113  ]
"102
[; ;CONTROL.c: 102:                 case(HEATING):
[e :U 118 ]
"103
[; ;CONTROL.c: 103:                     HEATING_HANDLER();
[e ( _HEATING_HANDLER ..  ]
"104
[; ;CONTROL.c: 104:                 break;
[e $U 113  ]
"105
[; ;CONTROL.c: 105:                 case(FINISH):
[e :U 119 ]
"106
[; ;CONTROL.c: 106:                     FINISH_HANDLER();
[e ( _FINISH_HANDLER ..  ]
"107
[; ;CONTROL.c: 107:                 break;
[e $U 113  ]
"108
[; ;CONTROL.c: 108:                 default:
[e :U 120 ]
"110
[; ;CONTROL.c: 110:                 break;
[e $U 113  ]
"111
[; ;CONTROL.c: 111:             }
}
[e $U 113  ]
[e :U 114 ]
[e [\ -> _CONTROL_CURRENT_STATE `ui , $ -> . `E1265 0 `ui 115
 , $ -> . `E1265 1 `ui 116
 , $ -> . `E1265 2 `ui 117
 , $ -> . `E1265 3 `ui 118
 , $ -> . `E1265 4 `ui 119
 120 ]
[e :U 113 ]
"112
[; ;CONTROL.c: 112:             DEFAULT_HANDLER();
[e ( _DEFAULT_HANDLER ..  ]
"113
[; ;CONTROL.c: 113:         }
}
[e :U 112 ]
"114
[; ;CONTROL.c: 114:     }
}
[e $U 121  ]
"115
[; ;CONTROL.c: 115:     else
[e :U 111 ]
"116
[; ;CONTROL.c: 116:     {
{
"117
[; ;CONTROL.c: 117:      control_shift_counter += (5);
[e =+ F1300 -> -> 5 `i `uc ]
"118
[; ;CONTROL.c: 118:     }
}
[e :U 121 ]
"119
[; ;CONTROL.c: 119: }
[e :UE 110 ]
}
"127
[; ;CONTROL.c: 127: static void SET_TIME_HANDLER (void)
[v _SET_TIME_HANDLER `(v ~T0 @X0 1 sf ]
"128
[; ;CONTROL.c: 128: {
{
[e :U _SET_TIME_HANDLER ]
[f ]
"129
[; ;CONTROL.c: 129:     switch (HANDLERS_STATES[SET_TIME])
[e $U 124  ]
"130
[; ;CONTROL.c: 130:     {
{
"131
[; ;CONTROL.c: 131:         case (FIRST_TIME):
[e :U 125 ]
"132
[; ;CONTROL.c: 132:             STOP_BLINKING();
[e ( _STOP_BLINKING ..  ]
"134
[; ;CONTROL.c: 134:             DISP_SHOW_TIME_AT(SETTED_TIME);
[e ( _DISP_SHOW_TIME_AT (1 _SETTED_TIME ]
"135
[; ;CONTROL.c: 135:             CURRENT_DIGIT = (6);
[e = _CURRENT_DIGIT -> -> 6 `i `uc ]
"137
[; ;CONTROL.c: 137:            HANDLERS_STATES[SET_TIME] = ON_WORK;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 0 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 1 ]
"138
[; ;CONTROL.c: 138:         break;
[e $U 123  ]
"139
[; ;CONTROL.c: 139:         case(ON_WORK):
[e :U 126 ]
"140
[; ;CONTROL.c: 140:             SET_TIME_HANDLER_ON_WORK();
[e ( _SET_TIME_HANDLER_ON_WORK ..  ]
"141
[; ;CONTROL.c: 141:         break;
[e $U 123  ]
"142
[; ;CONTROL.c: 142:         default:
[e :U 127 ]
"144
[; ;CONTROL.c: 144:         break;
[e $U 123  ]
"145
[; ;CONTROL.c: 145:     }
}
[e $U 123  ]
[e :U 124 ]
[e [\ -> *U + &U _HANDLERS_STATES * -> . `E1265 0 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux `ui , $ -> . `E1272 0 `ui 125
 , $ -> . `E1272 1 `ui 126
 127 ]
[e :U 123 ]
"146
[; ;CONTROL.c: 146: }
[e :UE 122 ]
}
"147
[; ;CONTROL.c: 147: static void SET_HEATING_HANDLER (void)
[v _SET_HEATING_HANDLER `(v ~T0 @X0 1 sf ]
"148
[; ;CONTROL.c: 148: {
{
[e :U _SET_HEATING_HANDLER ]
[f ]
"149
[; ;CONTROL.c: 149:     switch (HANDLERS_STATES[SET_HEATING])
[e $U 130  ]
"150
[; ;CONTROL.c: 150:      {
{
"151
[; ;CONTROL.c: 151:         case (FIRST_TIME):
[e :U 131 ]
"152
[; ;CONTROL.c: 152:             STOP_BLINKING();
[e ( _STOP_BLINKING ..  ]
"154
[; ;CONTROL.c: 154:             DISP_HEATER_DATA();
[e ( _DISP_HEATER_DATA ..  ]
"156
[; ;CONTROL.c: 156:             HANDLERS_STATES[SET_HEATING] = ON_WORK ;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 1 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 1 ]
"157
[; ;CONTROL.c: 157:         break;
[e $U 129  ]
"158
[; ;CONTROL.c: 158:         case(ON_WORK):
[e :U 132 ]
"159
[; ;CONTROL.c: 159:             SET_HEATING_HANDLER_ON_WORK();
[e ( _SET_HEATING_HANDLER_ON_WORK ..  ]
"160
[; ;CONTROL.c: 160:         break;
[e $U 129  ]
"161
[; ;CONTROL.c: 161:         default:
[e :U 133 ]
"163
[; ;CONTROL.c: 163:         break;
[e $U 129  ]
"164
[; ;CONTROL.c: 164:     }
}
[e $U 129  ]
[e :U 130 ]
[e [\ -> *U + &U _HANDLERS_STATES * -> . `E1265 1 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux `ui , $ -> . `E1272 0 `ui 131
 , $ -> . `E1272 1 `ui 132
 133 ]
[e :U 129 ]
"165
[; ;CONTROL.c: 165: }
[e :UE 128 ]
}
"166
[; ;CONTROL.c: 166: static void SET_ROTOR_PWR_HANDLER (void)
[v _SET_ROTOR_PWR_HANDLER `(v ~T0 @X0 1 sf ]
"167
[; ;CONTROL.c: 167: {
{
[e :U _SET_ROTOR_PWR_HANDLER ]
[f ]
"168
[; ;CONTROL.c: 168:     switch (HANDLERS_STATES[SET_ROTOR_PWR])
[e $U 136  ]
"169
[; ;CONTROL.c: 169:     {
{
"170
[; ;CONTROL.c: 170:         case (FIRST_TIME):
[e :U 137 ]
"171
[; ;CONTROL.c: 171:            STOP_BLINKING();
[e ( _STOP_BLINKING ..  ]
"173
[; ;CONTROL.c: 173:            DISP_MOTOR_DATA();
[e ( _DISP_MOTOR_DATA ..  ]
"175
[; ;CONTROL.c: 175:            HANDLERS_STATES[SET_ROTOR_PWR] = ON_WORK ;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 2 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 1 ]
"176
[; ;CONTROL.c: 176:         break;
[e $U 135  ]
"177
[; ;CONTROL.c: 177:         case(ON_WORK):
[e :U 138 ]
"178
[; ;CONTROL.c: 178:             SET_ROTOR_PWR_HANDLER_ON_WORK ( );
[e ( _SET_ROTOR_PWR_HANDLER_ON_WORK ..  ]
"179
[; ;CONTROL.c: 179:         break;
[e $U 135  ]
"180
[; ;CONTROL.c: 180:         default:
[e :U 139 ]
"182
[; ;CONTROL.c: 182:         break;
[e $U 135  ]
"183
[; ;CONTROL.c: 183:     }
}
[e $U 135  ]
[e :U 136 ]
[e [\ -> *U + &U _HANDLERS_STATES * -> . `E1265 2 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux `ui , $ -> . `E1272 0 `ui 137
 , $ -> . `E1272 1 `ui 138
 139 ]
[e :U 135 ]
"184
[; ;CONTROL.c: 184: }
[e :UE 134 ]
}
"185
[; ;CONTROL.c: 185: static void HEATING_HANDLER (void)
[v _HEATING_HANDLER `(v ~T0 @X0 1 sf ]
"186
[; ;CONTROL.c: 186: {
{
[e :U _HEATING_HANDLER ]
[f ]
"187
[; ;CONTROL.c: 187:     tTIME current_time = TIME_GET();
[v _current_time `S99 ~T0 @X0 1 a ]
[e = _current_time ( _TIME_GET ..  ]
"188
[; ;CONTROL.c: 188:     switch (HANDLERS_STATES[HEATING])
[e $U 142  ]
"189
[; ;CONTROL.c: 189:     {
{
"190
[; ;CONTROL.c: 190:         case (FIRST_TIME):
[e :U 143 ]
"191
[; ;CONTROL.c: 191:             STOP_BLINKING();
[e ( _STOP_BLINKING ..  ]
"192
[; ;CONTROL.c: 192:             MOTOR_SET_STATE(MOTOR_WORK_STATE );
[e ( _MOTOR_SET_STATE (1 _MOTOR_WORK_STATE ]
"193
[; ;CONTROL.c: 193:             HEATER_SET_STATE(HEATER_WORK_STATE);
[e ( _HEATER_SET_STATE (1 _HEATER_WORK_STATE ]
"194
[; ;CONTROL.c: 194:             LED_SET_STATE(LAMP , LED_ON);
[e ( _LED_SET_STATE (2 , . `E850 0 . `E1243 1 ]
"195
[; ;CONTROL.c: 195:             TIME_START_AT (SETTED_TIME.SECONDS ,SETTED_TIME.MINUTES , SETTED_TIME.HOURS , DECREMENTAL_TO_O );
[e ( _TIME_START_AT (4 , , , . _SETTED_TIME 0 . _SETTED_TIME 1 . _SETTED_TIME 2 . `E1050 0 ]
"196
[; ;CONTROL.c: 196:             DISP_SHOW_TIME_AT( SETTED_TIME );
[e ( _DISP_SHOW_TIME_AT (1 _SETTED_TIME ]
"197
[; ;CONTROL.c: 197:             HANDLERS_STATES[HEATING] = ON_WORK ;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 3 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 1 ]
"198
[; ;CONTROL.c: 198:         break;
[e $U 141  ]
"199
[; ;CONTROL.c: 199:         case(ON_WORK):
[e :U 144 ]
"201
[; ;CONTROL.c: 201:             DISP_UPDATE_TIME(current_time);
[e ( _DISP_UPDATE_TIME (1 _current_time ]
"203
[; ;CONTROL.c: 203:             if ((current_time.HOURS == 0)&
[e $ ! & & == -> . _current_time 2 `i -> 0 `i == -> . _current_time 1 `i -> 0 `i == -> . _current_time 0 `i -> 0 `i 145  ]
"206
[; ;CONTROL.c: 206:             {
{
"207
[; ;CONTROL.c: 207:                 STOP_HEATING();
[e ( _STOP_HEATING ..  ]
"208
[; ;CONTROL.c: 208:                 CONTROL_CURRENT_STATE = FINISH;
[e = _CONTROL_CURRENT_STATE . `E1265 4 ]
"209
[; ;CONTROL.c: 209:                 HANDLERS_STATES[HEATING] = FIRST_TIME ;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 3 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"210
[; ;CONTROL.c: 210:             }
}
[e $U 146  ]
"211
[; ;CONTROL.c: 211:             else
[e :U 145 ]
"212
[; ;CONTROL.c: 212:             {
{
"213
[; ;CONTROL.c: 213:                 if (SW_GET_STATE(FOOD_SENSOR) != SW_RELEASED )
[e $ ! != -> ( _SW_GET_STATE (1 . `E853 2 `ui -> . `E1191 2 `ui 147  ]
"214
[; ;CONTROL.c: 214:                 {
{
"216
[; ;CONTROL.c: 216:                     STOP_HEATING();
[e ( _STOP_HEATING ..  ]
"217
[; ;CONTROL.c: 217:                     CONTROL_CURRENT_STATE = SET_TIME;
[e = _CONTROL_CURRENT_STATE . `E1265 0 ]
"218
[; ;CONTROL.c: 218:                     HANDLERS_STATES[SET_TIME] = ON_WORK;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 0 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 1 ]
"219
[; ;CONTROL.c: 219:                     DISP_STATMENT("< CHECK FOOD !!>");
[e ( _DISP_STATMENT (1 :s 1C ]
"220
[; ;CONTROL.c: 220:                 }
}
[e $U 148  ]
"221
[; ;CONTROL.c: 221:                 else
[e :U 147 ]
"222
[; ;CONTROL.c: 222:                 {
{
"223
[; ;CONTROL.c: 223:                     if(SW_GET_STATE(DOOR_SENSOR) != SW_RELEASED )
[e $ ! != -> ( _SW_GET_STATE (1 . `E853 3 `ui -> . `E1191 2 `ui 149  ]
"224
[; ;CONTROL.c: 224:                     {
{
"226
[; ;CONTROL.c: 226:                         STOP_HEATING();
[e ( _STOP_HEATING ..  ]
"227
[; ;CONTROL.c: 227:                         CONTROL_CURRENT_STATE = SET_TIME;
[e = _CONTROL_CURRENT_STATE . `E1265 0 ]
"228
[; ;CONTROL.c: 228:                         HANDLERS_STATES[SET_TIME] = ON_WORK;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 0 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 1 ]
"229
[; ;CONTROL.c: 229:                         DISP_STATMENT("< CLOSE DOOR !!>");
[e ( _DISP_STATMENT (1 :s 2C ]
"231
[; ;CONTROL.c: 231:                     }
}
[e $U 150  ]
"232
[; ;CONTROL.c: 232:                     else
[e :U 149 ]
"233
[; ;CONTROL.c: 233:                     {
{
"234
[; ;CONTROL.c: 234:                        if(SW_GET_STATE(Cancel) == SW_PRE_PRESSED )
[e $ ! == -> ( _SW_GET_STATE (1 . `E853 1 `ui -> . `E1191 1 `ui 151  ]
"235
[; ;CONTROL.c: 235:                        {
{
"237
[; ;CONTROL.c: 237:                          STOP_HEATING();
[e ( _STOP_HEATING ..  ]
"238
[; ;CONTROL.c: 238:                          CONTROL_CURRENT_STATE = SET_TIME;
[e = _CONTROL_CURRENT_STATE . `E1265 0 ]
"239
[; ;CONTROL.c: 239:                          HANDLERS_STATES[SET_TIME] = ON_WORK;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 0 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 1 ]
"240
[; ;CONTROL.c: 240:                          DISP_STATMENT("< CANCELLED !! >");
[e ( _DISP_STATMENT (1 :s 3C ]
"241
[; ;CONTROL.c: 241:                        }
}
[e $U 152  ]
"242
[; ;CONTROL.c: 242:                        else
[e :U 151 ]
"243
[; ;CONTROL.c: 243:                        {
{
"245
[; ;CONTROL.c: 245:                        }
}
[e :U 152 ]
"246
[; ;CONTROL.c: 246:                     }
}
[e :U 150 ]
"247
[; ;CONTROL.c: 247:                 }
}
[e :U 148 ]
"248
[; ;CONTROL.c: 248:             }
}
[e :U 146 ]
"249
[; ;CONTROL.c: 249:         break;
[e $U 141  ]
"250
[; ;CONTROL.c: 250:         default:
[e :U 153 ]
"252
[; ;CONTROL.c: 252:         break;
[e $U 141  ]
"253
[; ;CONTROL.c: 253:     }
}
[e $U 141  ]
[e :U 142 ]
[e [\ -> *U + &U _HANDLERS_STATES * -> . `E1265 3 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux `ui , $ -> . `E1272 0 `ui 143
 , $ -> . `E1272 1 `ui 144
 153 ]
[e :U 141 ]
"254
[; ;CONTROL.c: 254: }
[e :UE 140 ]
}
"255
[; ;CONTROL.c: 255: static void FINISH_HANDLER (void)
[v _FINISH_HANDLER `(v ~T0 @X0 1 sf ]
"256
[; ;CONTROL.c: 256: {
{
[e :U _FINISH_HANDLER ]
[f ]
"257
[; ;CONTROL.c: 257:    switch (HANDLERS_STATES[FINISH])
[e $U 156  ]
"258
[; ;CONTROL.c: 258:     {
{
"259
[; ;CONTROL.c: 259:         case (FIRST_TIME):
[e :U 157 ]
"261
[; ;CONTROL.c: 261:             DISP_STATMENT("< FINISHED !!! >");
[e ( _DISP_STATMENT (1 :s 4C ]
"263
[; ;CONTROL.c: 263:             HANDLERS_STATES[FINISH] = ON_WORK ;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 4 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 1 ]
"265
[; ;CONTROL.c: 265:             SETTED_TIME.HOURS = 0;
[e = . _SETTED_TIME 2 -> -> 0 `i `uc ]
"266
[; ;CONTROL.c: 266:             SETTED_TIME.MINUTES = 0;
[e = . _SETTED_TIME 1 -> -> 0 `i `uc ]
"267
[; ;CONTROL.c: 267:             SETTED_TIME.SECONDS = 0;
[e = . _SETTED_TIME 0 -> -> 0 `i `uc ]
"269
[; ;CONTROL.c: 269:         break;
[e $U 155  ]
"270
[; ;CONTROL.c: 270:         case(ON_WORK):
[e :U 158 ]
"272
[; ;CONTROL.c: 272:             if ((PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )|
[e $ ! | == -> . _PRESSED_KEY 1 `ui -> . `E1231 1 `ui == -> ( _SW_GET_STATE (1 . `E853 0 `ui -> . `E1191 1 `ui 159  ]
"275
[; ;CONTROL.c: 275:             {
{
"277
[; ;CONTROL.c: 277:               CONTROL_CURRENT_STATE = SET_TIME;
[e = _CONTROL_CURRENT_STATE . `E1265 0 ]
"278
[; ;CONTROL.c: 278:               HANDLERS_STATES[FINISH] = FIRST_TIME ;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 4 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"279
[; ;CONTROL.c: 279:             }
}
[e $U 160  ]
"280
[; ;CONTROL.c: 280:             else
[e :U 159 ]
"281
[; ;CONTROL.c: 281:             {
{
"283
[; ;CONTROL.c: 283:             }
}
[e :U 160 ]
"285
[; ;CONTROL.c: 285:         break;
[e $U 155  ]
"286
[; ;CONTROL.c: 286:         default:
[e :U 161 ]
"288
[; ;CONTROL.c: 288:         break;
[e $U 155  ]
"289
[; ;CONTROL.c: 289:     }
}
[e $U 155  ]
[e :U 156 ]
[e [\ -> *U + &U _HANDLERS_STATES * -> . `E1265 4 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux `ui , $ -> . `E1272 0 `ui 157
 , $ -> . `E1272 1 `ui 158
 161 ]
[e :U 155 ]
"290
[; ;CONTROL.c: 290: }
[e :UE 154 ]
}
"291
[; ;CONTROL.c: 291: static void DEFAULT_HANDLER(void)
[v _DEFAULT_HANDLER `(v ~T0 @X0 1 sf ]
"292
[; ;CONTROL.c: 292: {
{
[e :U _DEFAULT_HANDLER ]
[f ]
"293
[; ;CONTROL.c: 293:  if(( CONTROL_CURRENT_STATE != HEATING )&( CONTROL_CURRENT_STATE != FINISH ))
[e $ ! & != -> _CONTROL_CURRENT_STATE `ui -> . `E1265 3 `ui != -> _CONTROL_CURRENT_STATE `ui -> . `E1265 4 `ui 163  ]
"294
[; ;CONTROL.c: 294:  {
{
"296
[; ;CONTROL.c: 296:     if ( SW_GET_STATE(START) == SW_PRE_PRESSED )
[e $ ! == -> ( _SW_GET_STATE (1 . `E853 0 `ui -> . `E1191 1 `ui 164  ]
"297
[; ;CONTROL.c: 297:     {
{
"299
[; ;CONTROL.c: 299:         if ((SETTED_TIME.HOURS == 0)&
[e $ ! & & == -> . _SETTED_TIME 2 `i -> 0 `i == -> . _SETTED_TIME 1 `i -> 0 `i == -> . _SETTED_TIME 0 `i -> 0 `i 165  ]
"302
[; ;CONTROL.c: 302:             {
{
"304
[; ;CONTROL.c: 304:                 if (CONTROL_CURRENT_STATE != SET_TIME)
[e $ ! != -> _CONTROL_CURRENT_STATE `ui -> . `E1265 0 `ui 166  ]
"305
[; ;CONTROL.c: 305:                {
{
"306
[; ;CONTROL.c: 306:                     DISP_SHOW_TIME_AT(SETTED_TIME);
[e ( _DISP_SHOW_TIME_AT (1 _SETTED_TIME ]
"307
[; ;CONTROL.c: 307:                     DISP_STATMENT("< SET TIME !!! >");
[e ( _DISP_STATMENT (1 :s 5C ]
"308
[; ;CONTROL.c: 308:                     HANDLERS_STATES[SET_TIME] = ON_WORK;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 0 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 1 ]
"309
[; ;CONTROL.c: 309:                     CONTROL_CURRENT_STATE = SET_TIME;
[e = _CONTROL_CURRENT_STATE . `E1265 0 ]
"310
[; ;CONTROL.c: 310:                 }
}
[e $U 167  ]
"311
[; ;CONTROL.c: 311:                 else
[e :U 166 ]
"312
[; ;CONTROL.c: 312:                 {
{
"314
[; ;CONTROL.c: 314:                     DISP_STATMENT("< SET TIME !!! >");
[e ( _DISP_STATMENT (1 :s 6C ]
"315
[; ;CONTROL.c: 315:                     CURRENT_DIGIT = (6);
[e = _CURRENT_DIGIT -> -> 6 `i `uc ]
"316
[; ;CONTROL.c: 316:                 }
}
[e :U 167 ]
"317
[; ;CONTROL.c: 317:             }
}
[e $U 168  ]
"318
[; ;CONTROL.c: 318:         else
[e :U 165 ]
"319
[; ;CONTROL.c: 319:         {
{
"321
[; ;CONTROL.c: 321:             if (SW_GET_STATE(FOOD_SENSOR) != SW_RELEASED )
[e $ ! != -> ( _SW_GET_STATE (1 . `E853 2 `ui -> . `E1191 2 `ui 169  ]
"322
[; ;CONTROL.c: 322:             {
{
"323
[; ;CONTROL.c: 323:                 DISP_STATMENT("< PUT FOOD IN !>");
[e ( _DISP_STATMENT (1 :s 7C ]
"324
[; ;CONTROL.c: 324:             }
}
[e $U 170  ]
"325
[; ;CONTROL.c: 325:             else
[e :U 169 ]
"326
[; ;CONTROL.c: 326:             {
{
"328
[; ;CONTROL.c: 328:                 if(SW_GET_STATE(DOOR_SENSOR) != SW_RELEASED )
[e $ ! != -> ( _SW_GET_STATE (1 . `E853 3 `ui -> . `E1191 2 `ui 171  ]
"329
[; ;CONTROL.c: 329:                 {
{
"330
[; ;CONTROL.c: 330:                     DISP_STATMENT("< CLOSE DOOR !!>");
[e ( _DISP_STATMENT (1 :s 8C ]
"331
[; ;CONTROL.c: 331:                 }
}
[e $U 172  ]
"332
[; ;CONTROL.c: 332:                 else
[e :U 171 ]
"333
[; ;CONTROL.c: 333:                 {
{
"335
[; ;CONTROL.c: 335:                     HANDLERS_STATES[CONTROL_CURRENT_STATE] = FIRST_TIME;
[e = *U + &U _HANDLERS_STATES * -> _CONTROL_CURRENT_STATE `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"336
[; ;CONTROL.c: 336:                     CONTROL_CURRENT_STATE = HEATING;
[e = _CONTROL_CURRENT_STATE . `E1265 3 ]
"337
[; ;CONTROL.c: 337:                     STOP_BLINKING();
[e ( _STOP_BLINKING ..  ]
"338
[; ;CONTROL.c: 338:                 }
}
[e :U 172 ]
"339
[; ;CONTROL.c: 339:             }
}
[e :U 170 ]
"340
[; ;CONTROL.c: 340:         }
}
[e :U 168 ]
"341
[; ;CONTROL.c: 341:     }
}
[e :U 164 ]
"342
[; ;CONTROL.c: 342:   }
}
[e :U 163 ]
"343
[; ;CONTROL.c: 343: }
[e :UE 162 ]
}
"349
[; ;CONTROL.c: 349: static void SET_HEATING_HANDLER_ON_WORK (void )
[v _SET_HEATING_HANDLER_ON_WORK `(v ~T0 @X0 1 sf ]
"350
[; ;CONTROL.c: 350: {
{
[e :U _SET_HEATING_HANDLER_ON_WORK ]
[f ]
"351
[; ;CONTROL.c: 351:             switch (HEATER_WORK_STATE)
[e $U 175  ]
"352
[; ;CONTROL.c: 352:             {
{
"353
[; ;CONTROL.c: 353:                 case(45):
[e :U 176 ]
"354
[; ;CONTROL.c: 354:                     START_BLINKING_AT((11));
[e ( _START_BLINKING_AT (1 -> -> 11 `i `uc ]
"355
[; ;CONTROL.c: 355:                 break;
[e $U 174  ]
"356
[; ;CONTROL.c: 356:                 case(90):
[e :U 177 ]
"357
[; ;CONTROL.c: 357:                     START_BLINKING_AT((13));
[e ( _START_BLINKING_AT (1 -> -> 13 `i `uc ]
"358
[; ;CONTROL.c: 358:                 break;
[e $U 174  ]
"359
[; ;CONTROL.c: 359:                 case(166):
[e :U 178 ]
"360
[; ;CONTROL.c: 360:                     START_BLINKING_AT((15));
[e ( _START_BLINKING_AT (1 -> -> 15 `i `uc ]
"361
[; ;CONTROL.c: 361:                 break;
[e $U 174  ]
"362
[; ;CONTROL.c: 362:                 default:
[e :U 179 ]
"364
[; ;CONTROL.c: 364:                 break;
[e $U 174  ]
"365
[; ;CONTROL.c: 365:             }
}
[e $U 174  ]
[e :U 175 ]
[e [\ -> _HEATER_WORK_STATE `i , $ -> 45 `i 176
 , $ -> 90 `i 177
 , $ -> 166 `i 178
 179 ]
[e :U 174 ]
"366
[; ;CONTROL.c: 366:             if ( PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )
[e $ ! == -> . _PRESSED_KEY 1 `ui -> . `E1231 1 `ui 180  ]
"367
[; ;CONTROL.c: 367:             {
{
"368
[; ;CONTROL.c: 368:                     if (PRESSED_KEY.KEYPAD_NO == KEY_1)
[e $ ! == -> . _PRESSED_KEY 0 `ui -> . `E1216 0 `ui 181  ]
"369
[; ;CONTROL.c: 369:                     {
{
"370
[; ;CONTROL.c: 370:                       HEATER_WORK_STATE = 45 ;
[e = _HEATER_WORK_STATE -> -> 45 `i `uc ]
"371
[; ;CONTROL.c: 371:                     }
}
[e $U 182  ]
"372
[; ;CONTROL.c: 372:                     else if (PRESSED_KEY.KEYPAD_NO == KEY_2)
[e :U 181 ]
[e $ ! == -> . _PRESSED_KEY 0 `ui -> . `E1216 1 `ui 183  ]
"373
[; ;CONTROL.c: 373:                     {
{
"374
[; ;CONTROL.c: 374:                       HEATER_WORK_STATE = 90 ;
[e = _HEATER_WORK_STATE -> -> 90 `i `uc ]
"375
[; ;CONTROL.c: 375:                     }
}
[e $U 184  ]
"376
[; ;CONTROL.c: 376:                     else if (PRESSED_KEY.KEYPAD_NO == KEY_3)
[e :U 183 ]
[e $ ! == -> . _PRESSED_KEY 0 `ui -> . `E1216 2 `ui 185  ]
"377
[; ;CONTROL.c: 377:                     {
{
"378
[; ;CONTROL.c: 378:                       HEATER_WORK_STATE = 166 ;
[e = _HEATER_WORK_STATE -> -> 166 `i `uc ]
"379
[; ;CONTROL.c: 379:                     }
}
[e $U 186  ]
"380
[; ;CONTROL.c: 380:                     else if (PRESSED_KEY.KEYPAD_NO == KEY_RIGHRT)
[e :U 185 ]
[e $ ! == -> . _PRESSED_KEY 0 `ui -> . `E1216 11 `ui 187  ]
"381
[; ;CONTROL.c: 381:                     {
{
"382
[; ;CONTROL.c: 382:                        CONTROL_CURRENT_STATE = SET_ROTOR_PWR;
[e = _CONTROL_CURRENT_STATE . `E1265 2 ]
"383
[; ;CONTROL.c: 383:                        HANDLERS_STATES[SET_HEATING] = FIRST_TIME ;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 1 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"384
[; ;CONTROL.c: 384:                        STOP_BLINKING();
[e ( _STOP_BLINKING ..  ]
"385
[; ;CONTROL.c: 385:                     }
}
[e $U 188  ]
"386
[; ;CONTROL.c: 386:                     else if (PRESSED_KEY.KEYPAD_NO == KEY_LEFT)
[e :U 187 ]
[e $ ! == -> . _PRESSED_KEY 0 `ui -> . `E1216 9 `ui 189  ]
"387
[; ;CONTROL.c: 387:                     {
{
"388
[; ;CONTROL.c: 388:                        CONTROL_CURRENT_STATE = SET_TIME;
[e = _CONTROL_CURRENT_STATE . `E1265 0 ]
"389
[; ;CONTROL.c: 389:                         HANDLERS_STATES[SET_HEATING] = FIRST_TIME ;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 1 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"390
[; ;CONTROL.c: 390:                        STOP_BLINKING();
[e ( _STOP_BLINKING ..  ]
"391
[; ;CONTROL.c: 391:                     }
}
[e $U 190  ]
"392
[; ;CONTROL.c: 392:                     else
[e :U 189 ]
"393
[; ;CONTROL.c: 393:                     {
{
"395
[; ;CONTROL.c: 395:                     }
}
[e :U 190 ]
[e :U 188 ]
[e :U 186 ]
[e :U 184 ]
[e :U 182 ]
"396
[; ;CONTROL.c: 396:             }
}
[e :U 180 ]
"397
[; ;CONTROL.c: 397: }
[e :UE 173 ]
}
"400
[; ;CONTROL.c: 400: static void SET_ROTOR_PWR_HANDLER_ON_WORK (void )
[v _SET_ROTOR_PWR_HANDLER_ON_WORK `(v ~T0 @X0 1 sf ]
"401
[; ;CONTROL.c: 401: {
{
[e :U _SET_ROTOR_PWR_HANDLER_ON_WORK ]
[f ]
"402
[; ;CONTROL.c: 402:     switch (MOTOR_WORK_STATE)
[e $U 193  ]
"403
[; ;CONTROL.c: 403:             {
{
"404
[; ;CONTROL.c: 404:                 case(30):
[e :U 194 ]
"405
[; ;CONTROL.c: 405:                     START_BLINKING_AT((11));
[e ( _START_BLINKING_AT (1 -> -> 11 `i `uc ]
"406
[; ;CONTROL.c: 406:                 break;
[e $U 192  ]
"407
[; ;CONTROL.c: 407:                 case(50):
[e :U 195 ]
"408
[; ;CONTROL.c: 408:                     START_BLINKING_AT((13));
[e ( _START_BLINKING_AT (1 -> -> 13 `i `uc ]
"409
[; ;CONTROL.c: 409:                 break;
[e $U 192  ]
"410
[; ;CONTROL.c: 410:                 case(100):
[e :U 196 ]
"411
[; ;CONTROL.c: 411:                     START_BLINKING_AT((15));
[e ( _START_BLINKING_AT (1 -> -> 15 `i `uc ]
"412
[; ;CONTROL.c: 412:                 break;
[e $U 192  ]
"413
[; ;CONTROL.c: 413:                 default:
[e :U 197 ]
"415
[; ;CONTROL.c: 415:                 break;
[e $U 192  ]
"416
[; ;CONTROL.c: 416:             }
}
[e $U 192  ]
[e :U 193 ]
[e [\ -> _MOTOR_WORK_STATE `i , $ -> 30 `i 194
 , $ -> 50 `i 195
 , $ -> 100 `i 196
 197 ]
[e :U 192 ]
"417
[; ;CONTROL.c: 417:               tKEYPAD_PRESSED PRESSED_KEY = KEYPAD_GET_PRESSED_KEY();
[v _PRESSED_KEY `S104 ~T0 @X0 1 a ]
[e = _PRESSED_KEY ( _KEYPAD_GET_PRESSED_KEY ..  ]
"418
[; ;CONTROL.c: 418:             if ( PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )
[e $ ! == -> . _PRESSED_KEY 1 `ui -> . `E1231 1 `ui 198  ]
"419
[; ;CONTROL.c: 419:             {
{
"420
[; ;CONTROL.c: 420:                     if (PRESSED_KEY.KEYPAD_NO == KEY_1)
[e $ ! == -> . _PRESSED_KEY 0 `ui -> . `E1216 0 `ui 199  ]
"421
[; ;CONTROL.c: 421:                     {
{
"422
[; ;CONTROL.c: 422:                       MOTOR_WORK_STATE = 30 ;
[e = _MOTOR_WORK_STATE -> -> 30 `i `uc ]
"423
[; ;CONTROL.c: 423:                     }
}
[e $U 200  ]
"424
[; ;CONTROL.c: 424:                     else if (PRESSED_KEY.KEYPAD_NO == KEY_2)
[e :U 199 ]
[e $ ! == -> . _PRESSED_KEY 0 `ui -> . `E1216 1 `ui 201  ]
"425
[; ;CONTROL.c: 425:                     {
{
"426
[; ;CONTROL.c: 426:                       MOTOR_WORK_STATE = 50 ;
[e = _MOTOR_WORK_STATE -> -> 50 `i `uc ]
"427
[; ;CONTROL.c: 427:                     }
}
[e $U 202  ]
"428
[; ;CONTROL.c: 428:                     else if (PRESSED_KEY.KEYPAD_NO == KEY_3)
[e :U 201 ]
[e $ ! == -> . _PRESSED_KEY 0 `ui -> . `E1216 2 `ui 203  ]
"429
[; ;CONTROL.c: 429:                     {
{
"430
[; ;CONTROL.c: 430:                       MOTOR_WORK_STATE = 100 ;
[e = _MOTOR_WORK_STATE -> -> 100 `i `uc ]
"431
[; ;CONTROL.c: 431:                     }
}
[e $U 204  ]
"432
[; ;CONTROL.c: 432:                     else if (PRESSED_KEY.KEYPAD_NO == KEY_RIGHRT)
[e :U 203 ]
[e $ ! == -> . _PRESSED_KEY 0 `ui -> . `E1216 11 `ui 205  ]
"433
[; ;CONTROL.c: 433:                     {
{
"434
[; ;CONTROL.c: 434:                        CONTROL_CURRENT_STATE =SET_TIME ;
[e = _CONTROL_CURRENT_STATE . `E1265 0 ]
"435
[; ;CONTROL.c: 435:                        HANDLERS_STATES[SET_ROTOR_PWR] = FIRST_TIME ;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 2 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"436
[; ;CONTROL.c: 436:                        STOP_BLINKING();
[e ( _STOP_BLINKING ..  ]
"437
[; ;CONTROL.c: 437:                     }
}
[e $U 206  ]
"438
[; ;CONTROL.c: 438:                     else if (PRESSED_KEY.KEYPAD_NO == KEY_LEFT)
[e :U 205 ]
[e $ ! == -> . _PRESSED_KEY 0 `ui -> . `E1216 9 `ui 207  ]
"439
[; ;CONTROL.c: 439:                     {
{
"440
[; ;CONTROL.c: 440:                        CONTROL_CURRENT_STATE = SET_HEATING;
[e = _CONTROL_CURRENT_STATE . `E1265 1 ]
"441
[; ;CONTROL.c: 441:                        HANDLERS_STATES[SET_ROTOR_PWR] = FIRST_TIME ;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 2 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"442
[; ;CONTROL.c: 442:                        STOP_BLINKING();
[e ( _STOP_BLINKING ..  ]
"443
[; ;CONTROL.c: 443:                     }
}
[e $U 208  ]
"444
[; ;CONTROL.c: 444:                     else
[e :U 207 ]
"445
[; ;CONTROL.c: 445:                     {
{
"447
[; ;CONTROL.c: 447:                     }
}
[e :U 208 ]
[e :U 206 ]
[e :U 204 ]
[e :U 202 ]
[e :U 200 ]
"448
[; ;CONTROL.c: 448:             }
}
[e :U 198 ]
"449
[; ;CONTROL.c: 449: }
[e :UE 191 ]
}
"453
[; ;CONTROL.c: 453: static void SET_TIME_HANDLER_ON_WORK(void)
[v _SET_TIME_HANDLER_ON_WORK `(v ~T0 @X0 1 sf ]
"454
[; ;CONTROL.c: 454: {
{
[e :U _SET_TIME_HANDLER_ON_WORK ]
[f ]
"455
[; ;CONTROL.c: 455:             if ( PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )
[e $ ! == -> . _PRESSED_KEY 1 `ui -> . `E1231 1 `ui 210  ]
"456
[; ;CONTROL.c: 456:             {
{
"457
[; ;CONTROL.c: 457:                     if ((PRESSED_KEY.KEYPAD_NO != KEY_RIGHRT)&
[e $ ! & & != -> . _PRESSED_KEY 0 `ui -> . `E1216 11 `ui != -> . _PRESSED_KEY 0 `ui -> . `E1216 9 `ui != -> . _PRESSED_KEY 0 `ui -> . `E1216 12 `ui 211  ]
"460
[; ;CONTROL.c: 460:                     {
{
"462
[; ;CONTROL.c: 462:                       INCREMENT_THIS ( PRESSED_KEY.KEYPAD_NO);
[e ( _INCREMENT_THIS (1 -> . _PRESSED_KEY 0 `uc ]
"463
[; ;CONTROL.c: 463:                     }
}
[e $U 212  ]
"465
[; ;CONTROL.c: 465:                     else if ((PRESSED_KEY.KEYPAD_NO == KEY_RIGHRT)|
[e :U 211 ]
[e $ ! | == -> . _PRESSED_KEY 0 `ui -> . `E1216 11 `ui == -> . _PRESSED_KEY 0 `ui -> . `E1216 9 `ui 213  ]
"468
[; ;CONTROL.c: 468:                     {
{
"470
[; ;CONTROL.c: 470:                        GOTO_NEXT_DIGIT(PRESSED_KEY.KEYPAD_NO);
[e ( _GOTO_NEXT_DIGIT (1 -> . _PRESSED_KEY 0 `uc ]
"471
[; ;CONTROL.c: 471:                     }
}
[e $U 214  ]
"473
[; ;CONTROL.c: 473:                     else
[e :U 213 ]
"474
[; ;CONTROL.c: 474:                     {
{
"476
[; ;CONTROL.c: 476:                     }
}
[e :U 214 ]
[e :U 212 ]
"477
[; ;CONTROL.c: 477:             }
}
[e $U 215  ]
"478
[; ;CONTROL.c: 478:             else
[e :U 210 ]
"479
[; ;CONTROL.c: 479:                     {
{
"481
[; ;CONTROL.c: 481:                     }
}
[e :U 215 ]
"482
[; ;CONTROL.c: 482:             if (SW_GET_STATE(Cancel) ==SW_PRE_PRESSED )
[e $ ! == -> ( _SW_GET_STATE (1 . `E853 1 `ui -> . `E1191 1 `ui 216  ]
"483
[; ;CONTROL.c: 483:             {
{
"484
[; ;CONTROL.c: 484:                 SETTED_TIME.HOURS = 0;
[e = . _SETTED_TIME 2 -> -> 0 `i `uc ]
"485
[; ;CONTROL.c: 485:                 SETTED_TIME.MINUTES = 0;
[e = . _SETTED_TIME 1 -> -> 0 `i `uc ]
"486
[; ;CONTROL.c: 486:                 SETTED_TIME.SECONDS = 0;
[e = . _SETTED_TIME 0 -> -> 0 `i `uc ]
"487
[; ;CONTROL.c: 487:                 HANDLERS_STATES[SET_TIME] = FIRST_TIME;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 0 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"488
[; ;CONTROL.c: 488:             }
}
[e $U 217  ]
"489
[; ;CONTROL.c: 489:             else
[e :U 216 ]
"490
[; ;CONTROL.c: 490:             {
{
"492
[; ;CONTROL.c: 492:             }
}
[e :U 217 ]
"493
[; ;CONTROL.c: 493: }
[e :UE 209 ]
}
"496
[; ;CONTROL.c: 496: static void GOTO_NEXT_DIGIT (tbyte KEY)
[v _GOTO_NEXT_DIGIT `(v ~T0 @X0 1 sf1`uc ]
"497
[; ;CONTROL.c: 497: {
{
[e :U _GOTO_NEXT_DIGIT ]
"496
[; ;CONTROL.c: 496: static void GOTO_NEXT_DIGIT (tbyte KEY)
[v _KEY `uc ~T0 @X0 1 r1 ]
"497
[; ;CONTROL.c: 497: {
[f ]
"498
[; ;CONTROL.c: 498:     static tbyte count_right = 0 ;
[v F1315 `uc ~T0 @X0 1 s count_right ]
[i F1315
-> -> 0 `i `uc
]
"499
[; ;CONTROL.c: 499:     static tbyte count_left =0;
[v F1316 `uc ~T0 @X0 1 s count_left ]
[i F1316
-> -> 0 `i `uc
]
"500
[; ;CONTROL.c: 500:    switch ( CURRENT_DIGIT )
[e $U 220  ]
"501
[; ;CONTROL.c: 501:    {
{
"502
[; ;CONTROL.c: 502:        case ((6) ):
[e :U 221 ]
"503
[; ;CONTROL.c: 503:            if (KEY == KEY_RIGHRT)
[e $ ! == -> _KEY `i -> . `E1216 11 `i 222  ]
"504
[; ;CONTROL.c: 504:            {
{
"505
[; ;CONTROL.c: 505:                 CURRENT_DIGIT = (7);
[e = _CURRENT_DIGIT -> -> 7 `i `uc ]
"506
[; ;CONTROL.c: 506:            }
}
[e $U 223  ]
"507
[; ;CONTROL.c: 507:            else if (KEY == KEY_LEFT)
[e :U 222 ]
[e $ ! == -> _KEY `i -> . `E1216 9 `i 224  ]
"508
[; ;CONTROL.c: 508:             {
{
"509
[; ;CONTROL.c: 509:                count_left++;
[e ++ F1316 -> -> 1 `i `uc ]
"510
[; ;CONTROL.c: 510:                if (count_left == 2 )
[e $ ! == -> F1316 `i -> 2 `i 225  ]
"511
[; ;CONTROL.c: 511:                {
{
"512
[; ;CONTROL.c: 512:                     CONTROL_CURRENT_STATE = SET_ROTOR_PWR ;
[e = _CONTROL_CURRENT_STATE . `E1265 2 ]
"513
[; ;CONTROL.c: 513:                     HANDLERS_STATES[SET_TIME] = FIRST_TIME;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 0 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"514
[; ;CONTROL.c: 514:                     count_left = 0;
[e = F1316 -> -> 0 `i `uc ]
"515
[; ;CONTROL.c: 515:                }
}
[e :U 225 ]
"517
[; ;CONTROL.c: 517:             }
}
[e :U 224 ]
[e :U 223 ]
"518
[; ;CONTROL.c: 518:         break;
[e $U 219  ]
"519
[; ;CONTROL.c: 519:         case ((7) ):
[e :U 226 ]
"520
[; ;CONTROL.c: 520:             if (KEY == KEY_RIGHRT)
[e $ ! == -> _KEY `i -> . `E1216 11 `i 227  ]
"521
[; ;CONTROL.c: 521:             {
{
"522
[; ;CONTROL.c: 522:                 CURRENT_DIGIT = (9);
[e = _CURRENT_DIGIT -> -> 9 `i `uc ]
"523
[; ;CONTROL.c: 523:             }
}
[e $U 228  ]
"524
[; ;CONTROL.c: 524:             else if (KEY == KEY_LEFT)
[e :U 227 ]
[e $ ! == -> _KEY `i -> . `E1216 9 `i 229  ]
"525
[; ;CONTROL.c: 525:             {
{
"526
[; ;CONTROL.c: 526:                 CURRENT_DIGIT = (6);
[e = _CURRENT_DIGIT -> -> 6 `i `uc ]
"527
[; ;CONTROL.c: 527:             }
}
[e :U 229 ]
[e :U 228 ]
"528
[; ;CONTROL.c: 528:         break;
[e $U 219  ]
"529
[; ;CONTROL.c: 529:         case ((9) ):
[e :U 230 ]
"530
[; ;CONTROL.c: 530:             if (KEY == KEY_RIGHRT)
[e $ ! == -> _KEY `i -> . `E1216 11 `i 231  ]
"531
[; ;CONTROL.c: 531:             {
{
"532
[; ;CONTROL.c: 532:                 CURRENT_DIGIT = (10);
[e = _CURRENT_DIGIT -> -> 10 `i `uc ]
"533
[; ;CONTROL.c: 533:             }
}
[e $U 232  ]
"534
[; ;CONTROL.c: 534:             else if (KEY == KEY_LEFT)
[e :U 231 ]
[e $ ! == -> _KEY `i -> . `E1216 9 `i 233  ]
"535
[; ;CONTROL.c: 535:             {
{
"536
[; ;CONTROL.c: 536:                 CURRENT_DIGIT = (7);
[e = _CURRENT_DIGIT -> -> 7 `i `uc ]
"537
[; ;CONTROL.c: 537:             }
}
[e :U 233 ]
[e :U 232 ]
"538
[; ;CONTROL.c: 538:         break;
[e $U 219  ]
"539
[; ;CONTROL.c: 539:         case ((10) ):
[e :U 234 ]
"540
[; ;CONTROL.c: 540:             if (KEY == KEY_RIGHRT)
[e $ ! == -> _KEY `i -> . `E1216 11 `i 235  ]
"541
[; ;CONTROL.c: 541:             {
{
"542
[; ;CONTROL.c: 542:                 CURRENT_DIGIT = (12);
[e = _CURRENT_DIGIT -> -> 12 `i `uc ]
"543
[; ;CONTROL.c: 543:             }
}
[e $U 236  ]
"544
[; ;CONTROL.c: 544:             else if (KEY == KEY_LEFT)
[e :U 235 ]
[e $ ! == -> _KEY `i -> . `E1216 9 `i 237  ]
"545
[; ;CONTROL.c: 545:             {
{
"546
[; ;CONTROL.c: 546:                 CURRENT_DIGIT = (9);
[e = _CURRENT_DIGIT -> -> 9 `i `uc ]
"547
[; ;CONTROL.c: 547:             }
}
[e :U 237 ]
[e :U 236 ]
"548
[; ;CONTROL.c: 548:         break;
[e $U 219  ]
"549
[; ;CONTROL.c: 549:         case ((12) ):
[e :U 238 ]
"550
[; ;CONTROL.c: 550:             if (KEY == KEY_RIGHRT)
[e $ ! == -> _KEY `i -> . `E1216 11 `i 239  ]
"551
[; ;CONTROL.c: 551:             {
{
"552
[; ;CONTROL.c: 552:                 CURRENT_DIGIT = (13);
[e = _CURRENT_DIGIT -> -> 13 `i `uc ]
"553
[; ;CONTROL.c: 553:             }
}
[e $U 240  ]
"554
[; ;CONTROL.c: 554:             else if (KEY == KEY_LEFT)
[e :U 239 ]
[e $ ! == -> _KEY `i -> . `E1216 9 `i 241  ]
"555
[; ;CONTROL.c: 555:             {
{
"556
[; ;CONTROL.c: 556:                 CURRENT_DIGIT = (10);
[e = _CURRENT_DIGIT -> -> 10 `i `uc ]
"557
[; ;CONTROL.c: 557:             }
}
[e :U 241 ]
[e :U 240 ]
"558
[; ;CONTROL.c: 558:         break;
[e $U 219  ]
"559
[; ;CONTROL.c: 559:         case ((13) ):
[e :U 242 ]
"560
[; ;CONTROL.c: 560:             if (KEY == KEY_RIGHRT)
[e $ ! == -> _KEY `i -> . `E1216 11 `i 243  ]
"561
[; ;CONTROL.c: 561:             {
{
"562
[; ;CONTROL.c: 562:                count_right++;
[e ++ F1315 -> -> 1 `i `uc ]
"563
[; ;CONTROL.c: 563:                if (count_right == 2 )
[e $ ! == -> F1315 `i -> 2 `i 244  ]
"564
[; ;CONTROL.c: 564:                {
{
"565
[; ;CONTROL.c: 565:                  CONTROL_CURRENT_STATE = SET_HEATING ;
[e = _CONTROL_CURRENT_STATE . `E1265 1 ]
"566
[; ;CONTROL.c: 566:                  HANDLERS_STATES[SET_TIME] = FIRST_TIME;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 0 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"567
[; ;CONTROL.c: 567:                  count_right = 0;
[e = F1315 -> -> 0 `i `uc ]
"568
[; ;CONTROL.c: 568:                }
}
[e $U 245  ]
"569
[; ;CONTROL.c: 569:                else
[e :U 244 ]
"570
[; ;CONTROL.c: 570:                {
{
"572
[; ;CONTROL.c: 572:                }
}
[e :U 245 ]
"573
[; ;CONTROL.c: 573:             }
}
[e $U 246  ]
"574
[; ;CONTROL.c: 574:             else if (KEY == KEY_LEFT)
[e :U 243 ]
[e $ ! == -> _KEY `i -> . `E1216 9 `i 247  ]
"575
[; ;CONTROL.c: 575:             {
{
"576
[; ;CONTROL.c: 576:                 CURRENT_DIGIT = (12);
[e = _CURRENT_DIGIT -> -> 12 `i `uc ]
"577
[; ;CONTROL.c: 577:             }
}
[e $U 248  ]
"578
[; ;CONTROL.c: 578:             else
[e :U 247 ]
"579
[; ;CONTROL.c: 579:             {
{
"581
[; ;CONTROL.c: 581:             }
}
[e :U 248 ]
[e :U 246 ]
"582
[; ;CONTROL.c: 582:         break;
[e $U 219  ]
"583
[; ;CONTROL.c: 583:        default:
[e :U 249 ]
"585
[; ;CONTROL.c: 585:         break;
[e $U 219  ]
"586
[; ;CONTROL.c: 586:    }
}
[e $U 219  ]
[e :U 220 ]
[e [\ -> _CURRENT_DIGIT `i , $ -> 6 `i 221
 , $ -> 7 `i 226
 , $ -> 9 `i 230
 , $ -> 10 `i 234
 , $ -> 12 `i 238
 , $ -> 13 `i 242
 249 ]
[e :U 219 ]
"587
[; ;CONTROL.c: 587:    if (( CURRENT_DIGIT != (13))&(KEY != KEY_RIGHRT))
[e $ ! & != -> _CURRENT_DIGIT `i -> 13 `i != -> _KEY `i -> . `E1216 11 `i 250  ]
"588
[; ;CONTROL.c: 588:    {
{
"589
[; ;CONTROL.c: 589:      count_right = 0;
[e = F1315 -> -> 0 `i `uc ]
"590
[; ;CONTROL.c: 590:    }
}
[e :U 250 ]
"591
[; ;CONTROL.c: 591:    if (( CURRENT_DIGIT != (6))&(KEY != KEY_LEFT))
[e $ ! & != -> _CURRENT_DIGIT `i -> 6 `i != -> _KEY `i -> . `E1216 9 `i 251  ]
"592
[; ;CONTROL.c: 592:    {
{
"593
[; ;CONTROL.c: 593:      count_left = 0;
[e = F1316 -> -> 0 `i `uc ]
"594
[; ;CONTROL.c: 594:    }
}
[e :U 251 ]
"595
[; ;CONTROL.c: 595:     START_BLINKING_AT(CURRENT_DIGIT);
[e ( _START_BLINKING_AT (1 _CURRENT_DIGIT ]
"596
[; ;CONTROL.c: 596: }
[e :UE 218 ]
}
"598
[; ;CONTROL.c: 598: static void INCREMENT_THIS (tbyte KEY)
[v _INCREMENT_THIS `(v ~T0 @X0 1 sf1`uc ]
"599
[; ;CONTROL.c: 599: {
{
[e :U _INCREMENT_THIS ]
"598
[; ;CONTROL.c: 598: static void INCREMENT_THIS (tbyte KEY)
[v _KEY `uc ~T0 @X0 1 r1 ]
"599
[; ;CONTROL.c: 599: {
[f ]
"601
[; ;CONTROL.c: 601:     if (KEY == KEY_0 )
[e $ ! == -> _KEY `i -> . `E1216 10 `i 253  ]
"602
[; ;CONTROL.c: 602:     {
{
"603
[; ;CONTROL.c: 603:         KEY = -1;
[e = _KEY -> -U -> 1 `i `uc ]
"604
[; ;CONTROL.c: 604:     }
}
[e :U 253 ]
"605
[; ;CONTROL.c: 605:    switch ( CURRENT_DIGIT )
[e $U 255  ]
"606
[; ;CONTROL.c: 606:    {
{
"607
[; ;CONTROL.c: 607:        case ((6) ):
[e :U 256 ]
"608
[; ;CONTROL.c: 608:            SETTED_TIME.HOURS = ((SETTED_TIME.HOURS % 10 ) + ((KEY +1 )*10)) ;
[e = . _SETTED_TIME 2 -> + % -> . _SETTED_TIME 2 `i -> 10 `i * + -> _KEY `i -> 1 `i -> 10 `i `uc ]
"609
[; ;CONTROL.c: 609:         break;
[e $U 254  ]
"610
[; ;CONTROL.c: 610:         case ((7) ):
[e :U 257 ]
"611
[; ;CONTROL.c: 611:            SETTED_TIME.HOURS = ((SETTED_TIME.HOURS - (SETTED_TIME.HOURS % 10 )) + (KEY +1 )) ;
[e = . _SETTED_TIME 2 -> + - -> . _SETTED_TIME 2 `i % -> . _SETTED_TIME 2 `i -> 10 `i + -> _KEY `i -> 1 `i `uc ]
"612
[; ;CONTROL.c: 612:         break;
[e $U 254  ]
"613
[; ;CONTROL.c: 613:         case ((9) ):
[e :U 258 ]
"614
[; ;CONTROL.c: 614:            SETTED_TIME.MINUTES = ((SETTED_TIME.MINUTES % 10) + ((KEY +1 )*10)) ;
[e = . _SETTED_TIME 1 -> + % -> . _SETTED_TIME 1 `i -> 10 `i * + -> _KEY `i -> 1 `i -> 10 `i `uc ]
"615
[; ;CONTROL.c: 615:         break;
[e $U 254  ]
"616
[; ;CONTROL.c: 616:         case ((10) ):
[e :U 259 ]
"617
[; ;CONTROL.c: 617:            SETTED_TIME.MINUTES = ((SETTED_TIME.MINUTES - (SETTED_TIME.MINUTES % 10 )) + (KEY +1 )) ;
[e = . _SETTED_TIME 1 -> + - -> . _SETTED_TIME 1 `i % -> . _SETTED_TIME 1 `i -> 10 `i + -> _KEY `i -> 1 `i `uc ]
"618
[; ;CONTROL.c: 618:         break;
[e $U 254  ]
"619
[; ;CONTROL.c: 619:         case ((12) ):
[e :U 260 ]
"620
[; ;CONTROL.c: 620:            SETTED_TIME.SECONDS = ((SETTED_TIME.SECONDS % 10 ) + ((KEY +1 )*10)) ;
[e = . _SETTED_TIME 0 -> + % -> . _SETTED_TIME 0 `i -> 10 `i * + -> _KEY `i -> 1 `i -> 10 `i `uc ]
"621
[; ;CONTROL.c: 621:         break;
[e $U 254  ]
"622
[; ;CONTROL.c: 622:         case ((13) ):
[e :U 261 ]
"623
[; ;CONTROL.c: 623:            SETTED_TIME.SECONDS = ((SETTED_TIME.SECONDS - (SETTED_TIME.SECONDS % 10 )) + (KEY +1 )) ;
[e = . _SETTED_TIME 0 -> + - -> . _SETTED_TIME 0 `i % -> . _SETTED_TIME 0 `i -> 10 `i + -> _KEY `i -> 1 `i `uc ]
"624
[; ;CONTROL.c: 624:         break;
[e $U 254  ]
"625
[; ;CONTROL.c: 625:         default:
[e :U 262 ]
"627
[; ;CONTROL.c: 627:         break;
[e $U 254  ]
"628
[; ;CONTROL.c: 628:    }
}
[e $U 254  ]
[e :U 255 ]
[e [\ -> _CURRENT_DIGIT `i , $ -> 6 `i 256
 , $ -> 7 `i 257
 , $ -> 9 `i 258
 , $ -> 10 `i 259
 , $ -> 12 `i 260
 , $ -> 13 `i 261
 262 ]
[e :U 254 ]
"630
[; ;CONTROL.c: 630:    DISP_UPDATE_TIME_UNIT_AT (CURRENT_DIGIT ,(KEY +1 ));
[e ( _DISP_UPDATE_TIME_UNIT_AT (2 , _CURRENT_DIGIT -> + -> _KEY `i -> 1 `i `uc ]
"632
[; ;CONTROL.c: 632:    if (CURRENT_DIGIT == (13))
[e $ ! == -> _CURRENT_DIGIT `i -> 13 `i 263  ]
"633
[; ;CONTROL.c: 633:    {
{
"634
[; ;CONTROL.c: 634:         LCD_SET_CURSOR(0 , (13));
[e ( _LCD_SET_CURSOR (2 , -> -> 0 `i `uc -> -> 13 `i `uc ]
"635
[; ;CONTROL.c: 635:    }
}
[e $U 264  ]
"636
[; ;CONTROL.c: 636:    else
[e :U 263 ]
"637
[; ;CONTROL.c: 637:    {
{
"638
[; ;CONTROL.c: 638:         GOTO_NEXT_DIGIT(KEY_RIGHRT);
[e ( _GOTO_NEXT_DIGIT (1 -> . `E1216 11 `uc ]
"639
[; ;CONTROL.c: 639:    }
}
[e :U 264 ]
"640
[; ;CONTROL.c: 640: }
[e :UE 252 ]
}
"643
[; ;CONTROL.c: 643: static void STOP_HEATING (void)
[v _STOP_HEATING `(v ~T0 @X0 1 sf ]
"644
[; ;CONTROL.c: 644: {
{
[e :U _STOP_HEATING ]
[f ]
"646
[; ;CONTROL.c: 646:     MOTOR_SET_STATE( 0 );
[e ( _MOTOR_SET_STATE (1 -> -> 0 `i `uc ]
"648
[; ;CONTROL.c: 648:     HEATER_SET_STATE(0);
[e ( _HEATER_SET_STATE (1 -> -> 0 `i `uc ]
"650
[; ;CONTROL.c: 650:     LED_SET_STATE(LAMP , LED_OFF);
[e ( _LED_SET_STATE (2 , . `E850 0 . `E1243 0 ]
"652
[; ;CONTROL.c: 652:     TIME_STOP();
[e ( _TIME_STOP ..  ]
"654
[; ;CONTROL.c: 654:     SETTED_TIME = TIME_GET();
[e = _SETTED_TIME ( _TIME_GET ..  ]
"659
[; ;CONTROL.c: 659:     HANDLERS_STATES[HEATING] = FIRST_TIME ;
[e = *U + &U _HANDLERS_STATES * -> . `E1265 3 `ux -> -> # *U &U _HANDLERS_STATES `ui `ux . `E1272 0 ]
"660
[; ;CONTROL.c: 660: }
[e :UE 265 ]
}
[a 2C 60 32 67 76 79 83 69 32 68 79 79 82 32 33 33 62 0 ]
[a 8C 60 32 67 76 79 83 69 32 68 79 79 82 32 33 33 62 0 ]
[a 1C 60 32 67 72 69 67 75 32 70 79 79 68 32 33 33 62 0 ]
[a 7C 60 32 80 85 84 32 70 79 79 68 32 73 78 32 33 62 0 ]
[a 5C 60 32 83 69 84 32 84 73 77 69 32 33 33 33 32 62 0 ]
[a 6C 60 32 83 69 84 32 84 73 77 69 32 33 33 33 32 62 0 ]
[a 4C 60 32 70 73 78 73 83 72 69 68 32 33 33 33 32 62 0 ]
[a 3C 60 32 67 65 78 67 69 76 76 69 68 32 33 33 32 62 0 ]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Version 4.0 HI-TECH Software Intermediate Code
"55 ./CCP.h
[; ;./CCP.h: 55: void CCP1_INIT (void );
[v _CCP1_INIT `(v ~T0 @X0 0 ef ]
"31 MOTOR.c
[; ;MOTOR.c: 31:     CCP_PWM_PERIOD_LOAD( 10 );
[c E861 0 1 2 .. ]
[n E861 . NO_ERORR PARAMETERS_ERORR INCOMPLETE_PROCESS_ERORR  ]
"53 ./CCP.h
[; ;./CCP.h: 53: tERORR CCP_PWM_PERIOD_LOAD(tPWM_CYCLE PERIOD);
[v _CCP_PWM_PERIOD_LOAD `(E861 ~T0 @X0 0 ef1`ui ]
"57
[; ;./CCP.h: 57: tERORR CCP1_PWM_DUTY_CYCLE_LOAD(tPWM_DUTYCYCLE DUTY_CYCLE);
[v _CCP1_PWM_DUTY_CYCLE_LOAD `(E861 ~T0 @X0 0 ef1`ui ]
"33 ./MOTOR.h
[; ;./MOTOR.h: 33: void MOTOR_SET_STATE (tMOTOR_STATE MOTOR_STATE);
[v _MOTOR_SET_STATE `(v ~T0 @X0 0 ef1`uc ]
"54 C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 54: __asm("INDF equ 00h");
[; <" INDF equ 00h ;# ">
"61
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 61: __asm("TMR0 equ 01h");
[; <" TMR0 equ 01h ;# ">
"68
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 68: __asm("PCL equ 02h");
[; <" PCL equ 02h ;# ">
"75
[; ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\include\pic16f877a.h: 75: __asm("STATUS equ 03h");
[; <" STATUS equ 03h ;# ">
"161
[