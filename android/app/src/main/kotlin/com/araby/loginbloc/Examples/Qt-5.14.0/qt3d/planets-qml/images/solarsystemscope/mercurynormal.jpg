 	retlw	70	;'F'
  1329  1890  344F               	retlw	79	;'O'
  1330  1891  344F               	retlw	79	;'O'
  1331  1892  3444               	retlw	68	;'D'
  1332  1893  3420               	retlw	32	;' '
  1333  1894  3421               	retlw	33	;'!'
  1334  1895  3421               	retlw	33	;'!'
  1335  1896  343E               	retlw	62	;'>'
  1336  1897  3400               	retlw	0
  1337  1898                     STR_8:	
  1338  1898  343C               	retlw	60	;'<'
  1339  1899  3420               	retlw	32	;' '
  1340  189A  3443               	retlw	67	;'C'
  1341  189B  344C               	retlw	76	;'L'
  1342  189C  344F               	retlw	79	;'O'
  1343  189D  3453               	retlw	83	;'S'
  1344  189E  3445               	retlw	69	;'E'
  1345  189F  3420               	retlw	32	;' '
  1346  18A0  3444               	retlw	68	;'D'
  1347  18A1  344F               	retlw	79	;'O'
  1348  18A2  344F               	retlw	79	;'O'
  1349  18A3  3452               	retlw	82	;'R'
  1350  18A4  3420               	retlw	32	;' '
  1351  18A5  3421               	retlw	33	;'!'
  1352  18A6  3421               	retlw	33	;'!'
  1353  18A7  343E               	retlw	62	;'>'
  1354  18A8  3400               	retlw	0
  1355  18A9                     STR_2:	
  1356  18A9  343C               	retlw	60	;'<'
  1357  18AA  3400               	retlw	0
  1358  18A9                     
  1359                           ; #config settings
  1360  0000                     
  1361                           	psect	cinit
  1362  0015                     start_initialization:	
  1363  0015                     __initialization:	
  1364  0015  30B0               	movlw	low (__pdataBANK3+32)
  1365                           
  1366                           ; Initialize objects allocated to BANK3
  1367  0016  1783               	bsf	3,7	;select IRP bank2
  1368  0017  00FD               	movwf	125
  1369  0018  3010               	movlw	high __pidataBANK3
  1370  0019  00FE               	movwf	126
  1371  001A  3000               	movlw	low __pidataBANK3
  1372  001B  00FF               	movwf	127
  1373  001C  3090               	movlw	low __pdataBANK3
  1374  001D  0084               	movwf	4
  1375  001E  160A  158A  26A5  120A  118A  	fcall	init_ram0
  1376                           
  1377                           ;initializer for _CURRENT_DIGIT
  1378  0023  3006               	movlw	6
  1379  0024  00EF               	movwf	__pdataBANK0& (0+127)
  1380                           
  1381                           ; Clear objects allocated to BANK3
  1382  0025  30B0               	movlw	low __pbssBANK3
  1383  0026  0084               	movwf	4
  1384  0027  30CD               	movlw	low (__pbssBANK3+29)
  1385  0028  160A  158A  265F   	fcall	clear_ram0
  1386                           
  1387                           ; Clear objects allocated to BANK0
  1388  002B  01EB               	clrf	__pbssBANK0& (0+127)
  1389  002C  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  1390  002D  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  1391  002E  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  1392  002F                     end_of_initialization:	
  1393                           ;End of C runtime variable initialization code
  1394                           
  1395  002F                     __end_of__initialization:	
  1396  002F  0183               	clrf	3
  1397  0030  160A  158A  2EE7   	ljmp	l6466	;jump to C main() function
  1398                           
  1399                           	psect	bssBANK0
  1400  006B                     __pbssBANK0:	
  1401  006B                     _SETTED_TIME:	
  1402  006B                     	ds	3
  1403  006E                     KEYPAD_UPDATE@KEYPAD_counter:	
  1404  006E                     	ds	1
  1405                           
  1406                           	psect	dataBANK0
  1407  006F                     __pdataBANK0:	
  1408  006F                     _CURRENT_DIGIT:	
  1409  006F                     	ds	1
  1410                           
  1411                           	psect	bssBANK3
  1412  01B0                     __pbssBANK3:	
  1413  01B0                     _HANDLERS_STATES:	
  1414  01B0                     	ds	5
  1415  01B5                     _CURRENT_TIME:	
  1416  01B5                     	ds	3
  1417  01B8                     _last_time:	
  1418  01B8                     	ds	3
  1419  01BB                     _keypad_sapmles:	
  1420  01BB                     	ds	3
  1421  01BE                     _PRESSED_KEY:	
  1422  01BE                     	ds	2
  1423  01C0                     _TICK_COUNTER:	
  1424  01C0                     	ds	2
  1425  01C2                     _LAST_PRESSED_KEY:	
  1426  01C2                     	ds	2
  1427  01C4                     GOTO_NEXT_DIGIT@count_left:	
  1428  01C4                     	ds	1
  1429  01C5                     GOTO_NEXT_DIGIT@count_right:	
  1430  01C5                     	ds	1
  1431  01C6                     _HEATER_WORK_STATE:	
  1432  01C6                     	ds	1
  1433  01C7                     _MOTOR_WORK_STATE:	
  1434  01C7                     	ds	1
  1435  01C8                     _CONTROL_CURRENT_STATE:	
  1436  01C8                     	ds	1
  1437  01C9                     _TIME_TICKING_TYPE:	
  1438  01C9                     	ds	1
  1439  01CA                     _COUNT_DECISION:	
  1440  01CA                     	ds	1
  1441  01CB                     HEATER@current_angle:	
  1442  01CB                     	ds	1
  1443  01CC                     _current_angle:	
  1444  01CC                     	ds	1
  1445                           
  1446                           	psect	dataBANK3
  1447  0190                     __pdataBANK3:	
  1448  0190                     _SWs:	
  1449  0190                     	ds	20
  1450  01A4                     _KEYPAD_info:	
  1451  01A4                     	ds	9
  1452  01AD                     _LEDs:	
  1453  01AD                     	ds	3
  1454                           
  1455                           	psect	inittext
  1456  1EA1                     init_fetch0:	
  1457                           ;	Called with low address in FSR and high address in W
  1458                           
  1459  1EA1  087E               	movf	126,w
  1460  1EA2  008A               	movwf	10
  1461  1EA3  087F               	movf	127,w
  1462  1EA4  0082               	movwf	2
  1463  1EA5                     init_ram0:	
  1464                           ;Called with:
  1465                           ;	high address of idata address in btemp 
  1466                           ;	low address of idata address in btemp+1 
  1467                           ;	low address of data in FSR
  1468                           ;	high address + 1 of data in btemp-1
  1469                           
  1470  1EA5  26A1  160A  158A   	fcall	init_fetch0
  1471  1EA8  0080               	movwf	0
  1472  1EA9  0A84               	incf	4,f
  1473  1EAA  0804               	movf	4,w
  1474  1EAB  067D               	xorwf	125,w
  1475  1EAC  1903               	btfsc	3,2
  1476  1EAD  3400               	retlw	0
  1477  1EAE  0AFF               	incf	127,f
  1478  1EAF  1903               	btfsc	3,2
  1479  1EB0  0AFE               	incf	126,f
  1480  1EB1  2EA5               	goto	init_ram0
  1481                           
  1482                           	psect	clrtext
  1483  1E5F                     clear_ram0:	
  1484                           ;	Called with FSR containing the base address, and
  1485                           ;	W with the last address+1
  1486                           
  1487  1E5F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1488  1E60                     clrloop0:	
  1489  1E60  0180               	clrf	0	;clear RAM location pointed to by FSR
  1490  1E61  0A84               	incf	4,f	;increment pointer
  1491  1E62  0604               	xorwf	4,w	;XOR with final address
  1492  1E63  1903               	btfsc	3,2	;have we reached the end yet?
  1493  1E64  3400               	retlw	0	;all done for this memory range, return
  1494  1E65  0604               	xorwf	4,w	;XOR again to restore value
  1495  1E66  2E60               	goto	clrloop0	;do the next byte
  1496                           
  1497                           	psect	cstackBANK3
  1498  01CD                     __pcstackBANK3:	
  1499  01CD                     ___fladd@signs:	
  1500                           
  1501                           ; 1 bytes @ 0x0
  1502  01CD                     	ds	1
  1503  01CE                     ___fladd@aexp:	
  1504                           
  1505                           ; 1 bytes @ 0x1
  1506  01CE                     	ds	1
  1507  01CF                     ___fladd@bexp:	
  1508                           
  1509                           ; 1 bytes @ 0x2
  1510  01CF                     	ds	1
  1511  01D0                     ___fladd@grs:	
  1512                           
  1513                           ; 1 bytes @ 0x3
  1514  01D0                     	ds	1
  1515  01D1                     ?___fltol:	
  1516  01D1                     ___fltol@f1:	
  1517                           ; 4 bytes @ 0x4
  1518                           
  1519                           
  1520                           ; 4 bytes @ 0x4
  1521  01D1                     	ds	4
  1522  01D5                     ??___fltol:	
  1523                           
  1524                           ; 1 bytes @ 0x8
  1525  01D5                     	ds	4
  1526  01D9                     ___fltol@sign1:	
  1527                           
  1528                           ; 1 bytes @ 0xC
  1529  01D9                     	ds	1
  1530  01DA                     ___fltol@exp1:	
  1531                           
  1532                           ; 1 bytes @ 0xD
  1533  01DA                     	ds	1
  1534  01DB                     ?_CCP_PWM_PERIOD_LOAD:	
  1535  01DB                     ?_CCP1_PWM_DUTY_CYCLE_LOAD:	
  1536                           ; 1 bytes @ 0xE
  1537                           
  1538  01DB                     ?_CCP2_PWM_DUTY_CYCLE_LOAD:	
  1539                           ; 1 bytes @ 0xE
  1540                           
  1541  01DB                     CCP_PWM_PERIOD_LOAD@PERIOD:	
  1542                           ; 1 bytes @ 0xE
  1543                           
  1544  01DB                     CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  1545                           ; 2 bytes @ 0xE
  1546                           
  1547  01DB                     CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  1548                           ; 2 bytes @ 0xE
  1549                           
  1550                           
  1551                           ; 2 bytes @ 0xE
  1552  01DB                     	ds	2
  1553  01DD                     ??_CCP1_PWM_DUTY_CYCLE_LOAD:	
  1554  01DD                     ??_CCP2_PWM_DUTY_CYCLE_LOAD:	
  1555                           ; 1 bytes @ 0x10
  1556                           
  1557                           
  1558                           ; 1 bytes @ 0x10
  1559  01DD                     	ds	1
  1560  01DE                     CCP_PWM_PERIOD_LOAD@LOAD_VALUE:	
  1561                           
  1562                           ; 2 bytes @ 0x11
  1563  01DE                     	ds	2
  1564  01E0                     _CCP1_PWM_DUTY_CYCLE_LOAD$1938:	
  1565  01E0                     _CCP2_PWM_DUTY_CYCLE_LOAD$1939:	
  1566                           ; 4 bytes @ 0x13
  1567                           
  1568                           
  1569                           ; 4 bytes @ 0x13
  1570  01E0                     	ds	4
  1571  01E4                     CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  1572  01E4                     CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  1573                           ; 2 bytes @ 0x17
  1574                           
  1575                           
  1576                           ; 2 bytes @ 0x17
  1577  01E4                     	ds	2
  1578                           
  1579                           	psect	cstackBANK1
  1580  00A0                     __pcstackBANK1:	
  1581  00A0                     ??_TIMER2_INIT:	
  1582  00A0                     ??_TIMER2_START:	
  1583                           ; 1 bytes @ 0x0
  1584                           
  1585  00A0                     ??_TIMER0_STOP:	
  1586                           ; 1 bytes @ 0x0
  1587                           
  1588  00A0                     ??_TIMER2_STOP:	
  1589                           ; 1 bytes @ 0x0
  1590                           
  1591  00A0                     ??_MOTOR_SET_STATE:	
  1592                           ; 1 bytes @ 0x0
  1593                           
  1594  00A0                     ??_HEATER_SET_STATE:	
  1595                           ; 1 bytes @ 0x0
  1596                           
  1597  00A0                     ??_TIMER0_INIT:	
  1598                           ; 1 bytes @ 0x0
  1599                           
  1600  00A0                     ??_TIMER0_START:	
  1601                           ; 1 bytes @ 0x0
  1602                           
  1603  00A0                     ?_GPIO_PIN_SET_STATE:	
  1604                           ; 1 bytes @ 0x0
  1605                           
  1606  00A0                     ?_GPIO_PORT_SET_STATE:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609  00A0                     ??_ENABLE_INTERUPT:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612  00A0                     ??_CONTROL_INIT:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615  00A0                     ?___bmul:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618  00A0                     ?__Umul8_16:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621  00A0                     ?___xxtofl:	
  1622                           ; 2 bytes @ 0x0
  1623                           
  1624  00A0                     GPIO_PIN_SET_STATE@GPIO_PIN_NO:	
  1625                           ; 4 bytes @ 0x0
  1626                           
  1627  00A0                     GPIO_PORT_SET_STATE@GPIO_PORT_STATE:	
  1628                           ; 1 bytes @ 0x0
  1629                           
  1630  00A0                     MOTOR_SET_STATE@MOTOR_STATE:	
  1631                           ; 1 bytes @ 0x0
  1632                           
  1633  00A0                     HEATER_SET_STATE@HEATER_STATE:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636  00A0                     CONTROL_INIT@count:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639  00A0                     ___bmul@multiplicand:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642  00A0                     __Umul8_16@multiplicand:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645  00A0                     ___xxtofl@val:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648                           
  1649                           ; 4 bytes @ 0x0
  1650  00A0                     	ds	1
  1651  00A1                     ??_GPIO_PORT_SET_STATE:	
  1652  00A1                     ??___bmul:	
  1653                           ; 1 bytes @ 0x1
  1654                           
  1655  00A1                     GPIO_PIN_SET_STATE@GPIO_PIN_STATE:	
  1656                           ; 1 bytes @ 0x1
  1657                           
  1658  00A1                     ___bmul@product:	
  1659                           ; 1 bytes @ 0x1
  1660                           
  1661                           
  1662                           ; 1 bytes @ 0x1
  1663  00A1                     	ds	1
  1664  00A2                     ??_GPIO_PIN_SET_STATE:	
  1665  00A2                     ___bmul@multiplier:	
  1666                           ; 1 bytes @ 0x2
  1667                           
  1668                           
  1669                           ; 1 bytes @ 0x2
  1670  00A2                     	ds	1
  1671  00A3                     ?_GPIO_PIN_INIT:	
  1672  00A3                     ??__Umul8_16:	
  1673                           ; 1 bytes @ 0x3
  1674                           
  1675  00A3                     GPIO_PIN_INIT@GPIO_PIN_NO:	
  1676                           ; 1 bytes @ 0x3
  1677                           
  1678  00A3                     __Umul8_16@product:	
  1679                           ; 1 bytes @ 0x3
  1680                           
  1681                           
  1682                           ; 2 bytes @ 0x3
  1683  00A3                     	ds	1
  1684  00A4                     ??___xxtofl:	
  1685  00A4                     GPIO_PIN_INIT@GPIO_DIRECTION:	
  1686                           ; 1 bytes @ 0x4
  1687                           
  1688  00A4                     GPIO_PORT_SET_STATE@GPIO_PORTx:	
  1689                           ; 1 bytes @ 0x4
  1690                           
  1691                           
  1692                           ; 1 bytes @ 0x4
  1693  00A4                     	ds	1
  1694  00A5                     ??_GPIO_PIN_INIT:	
  1695  00A5                     __Umul8_16@multiplier:	
  1696                           ; 1 bytes @ 0x5
  1697                           
  1698                           
  1699                           ; 1 bytes @ 0x5
  1700  00A5                     	ds	1
  1701  00A6                     __Umul8_16@word_mpld:	
  1702                           
  1703                           ; 2 bytes @ 0x6
  1704  00A6                     	ds	2
  1705  00A8                     ___xxtofl@sign:	
  1706                           
  1707                           ; 1 bytes @ 0x8
  1708  00A8                     	ds	1
  1709  00A9                     ___xxtofl@exp:	
  1710                           
  1711                           ; 1 bytes @ 0x9
  1712  00A9                     	ds	1
  1713  00AA                     GPIO_PIN_SET_STATE@GPIO_PORTx:	
  1714  00AA                     ___xxtofl@arg:	
  1715                           ; 1 bytes @ 0xA
  1716                           
  1717                           
  1718                           ; 4 bytes @ 0xA
  1719  00AA                     	ds	1
  1720  00AB                     ??_LCD_SND_COMMAND:	
  1721  00AB                     LCD_SND_COMMAND@command:	
  1722                           ; 1 bytes @ 0xB
  1723                           
  1724                           
  1725                           ; 1 bytes @ 0xB
  1726  00AB                     	ds	3
  1727  00AE                     ?___fldiv:	
  1728  00AE                     ___fldiv@a:	
  1729                           ; 4 bytes @ 0xE
  1730                           
  1731                           
  1732                           ; 4 bytes @ 0xE
  1733  00AE                     	ds	3
  1734  00B1                     GPIO_PIN_INIT@GPIO_PORTx:	
  1735                           
  1736                           ; 1 bytes @ 0x11
  1737  00B1                     	ds	1
  1738  00B2                     ??_CCP1_INIT:	
  1739  00B2                     ??_CCP2_INIT:	
  1740                           ; 1 bytes @ 0x12
  1741                           
  1742  00B2                     ??_SWs_INIT:	
  1743                           ; 1 bytes @ 0x12
  1744                           
  1745  00B2                     ??_LCD_INIT:	
  1746                           ; 1 bytes @ 0x12
  1747                           
  1748  00B2                     ??_KEYPAD_INIT:	
  1749                           ; 1 bytes @ 0x12
  1750                           
  1751  00B2                     KEYPAD_INIT@counter:	
  1752                           ; 1 bytes @ 0x12
  1753                           
  1754  00B2                     ___fldiv@b:	
  1755                           ; 1 bytes @ 0x12
  1756                           
  1757                           
  1758                           ; 4 bytes @ 0x12
  1759  00B2                     	ds	1
  1760  00B3                     SWs_INIT@Samples_Counter:	
  1761                           
  1762                           ; 1 bytes @ 0x13
  1763  00B3                     	ds	1
  1764  00B4                     SWs_INIT@SW_Counter:	
  1765                           
  1766                           ; 1 bytes @ 0x14
  1767  00B4                     	ds	2
  1768  00B6                     ??___fldiv:	
  1769                           
  1770                           ; 1 bytes @ 0x16
  1771  00B6                     	ds	4
  1772  00BA                     ___fldiv@rem:	
  1773                           
  1774                           ; 4 bytes @ 0x1A
  1775  00BA                     	ds	4
  1776  00BE                     ___fldiv@sign:	
  1777                           
  1778                           ; 1 bytes @ 0x1E
  1779  00BE                     	ds	1
  1780  00BF                     ___fldiv@new_exp:	
  1781                           
  1782                           ; 2 bytes @ 0x1F
  1783  00BF                     	ds	2
  1784  00C1                     ___fldiv@grs:	
  1785                           
  1786                           ; 4 bytes @ 0x21
  1787  00C1                     	ds	4
  1788  00C5                     ___fldiv@bexp:	
  1789                           
  1790                           ; 1 bytes @ 0x25
  1791  00C5                     	ds	1
  1792  00C6                     ___fldiv@aexp:	
  1793                           
  1794                           ; 1 bytes @ 0x26
  1795  00C6                     	ds	1
  1796  00C7                     ?___flmul:	
  1797  00C7                     ___flmul@b:	
  1798                           ; 4 bytes @ 0x27
  1799                           
  1800                           
  1801                           ; 4 bytes @ 0x27
  1802  00C7                     	ds	4
  1803  00CB                     ___flmul@a:	
  1804                           
  1805                           ; 4 bytes @ 0x2B
  1806  00CB                     	ds	4
  1807  00CF                     ??___flmul:	
  1808                           
  1809                           ; 1 bytes @ 0x2F
  1810  00CF                     	ds	4
  1811  00D3                     ___flmul@sign:	
  1812                           
  1813                           ; 1 bytes @ 0x33
  1814  00D3                     	ds	1
  1815  00D4                     ___flmul@aexp:	
  1816                           
  1817                           ; 1 bytes @ 0x34
  1818  00D4                     	ds	1
  1819  00D5                     ___flmul@grs:	
  1820                           
  1821                           ; 4 bytes @ 0x35
  1822  00D5                     	ds	4
  1823  00D9                     ___flmul@bexp:	
  1824                           
  1825                           ; 1 bytes @ 0x39
  1826  00D9                     	ds	1
  1827  00DA                     ___flmul@prod:	
  1828                           
  1829                           ; 4 bytes @ 0x3A
  1830  00DA                     	ds	4
  1831  00DE                     ___flmul@temp:	
  1832                           
  1833                           ; 2 bytes @ 0x3E
  1834  00DE                     	ds	2
  1835  00E0                     ?___fladd:	
  1836  00E0                     ___fladd@b:	
  1837                           ; 4 bytes @ 0x40
  1838                           
  1839                           
  1840                           ; 4 bytes @ 0x40
  1841  00E0                     	ds	4
  1842  00E4                     ___fladd@a:	
  1843                           
  1844                           ; 4 bytes @ 0x44
  1845  00E4                     	ds	4
  1846  00E8                     ??___fladd:	
  1847                           
  1848                           ; 1 bytes @ 0x48
  1849  00E8                     	ds	8
  1850  00F0                     ??_CCP_PWM_PERIOD_LOAD:	
  1851  00F0                     ??_MOTOR_INIT:	
  1852                           ; 1 bytes @ 0x50
  1853                           
  1854  00F0                     ??_HEATER_INIT:	
  1855                           ; 1 bytes @ 0x50
  1856                           
  1857  00F0                     ??_main:	
  1858                           ; 1 bytes @ 0x50
  1859                           
  1860                           
  1861                           	psect	cstackCOMMON
  1862  0070                     __pcstackCOMMON:	
  1863                           ; 1 bytes @ 0x50
  1864                           
  1865  0070                     ?_TIMER2_INIT:	
  1866  0070                     ?_TIMER2_START:	
  1867                           ; 1 bytes @ 0x0
  1868                           
  1869  0070                     ?_TIMER0_STOP:	
  1870                           ; 1 bytes @ 0x0
  1871                           
  1872  0070                     ?_TIMER2_STOP:	
  1873                           ; 1 bytes @ 0x0
  1874                           
  1875  0070                     ?_LCD_SND_COMMAND:	
  1876                           ; 1 bytes @ 0x0
  1877                           
  1878  0070                     ?_LCD_SEND_CHARACTER:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  0070                     ?_MOTOR_SET_STATE:	
  1882                           ; 1 bytes @ 0x0
  1883                           
  1884  0070                     ?_HEATER_SET_STATE:	
  1885                           ; 1 bytes @ 0x0
  1886                           
  1887  0070                     ?_UPDATE_LCD_SECONDS:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  0070                     ?_UPDATE_LCD_MINUTES:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893  0070                     ?_UPDATE_LCD_HOURS:	
  1894                           ; 1 bytes @ 0x0
  1895                           
  1896  0070                     ?_DISP_SHOW_TIME:	
  1897                           ; 1 bytes @ 0x0
  1898                           
  1899  0070                     ?_SET_TIME_HANDLER:	
  1900                           ; 1 bytes @ 0x0
  1901                           
  1902  0070                     ?_SET_HEATING_HANDLER:	
  1903                           ; 1 bytes @ 0x0
  1904                           
  1905  0070                     ?_SET_ROTOR_PWR_HANDLER:	
  1906                           ; 1 bytes @ 0x0
  1907                           
  1908  0070                     ?_HEATING_HANDLER:	
  1909                           ; 1 bytes @ 0x0
  1910                           
  1911  0070                     ?_FINISH_HANDLER:	
  1912                           ; 1 bytes @ 0x0
  1913                           
  1914  0070                     ?_DEFAULT_HANDLER:	
  1915                           ; 1 bytes @ 0x0
  1916                           
  1917  0070                     ?_SET_TIME_HANDLER_ON_WORK:	
  1918                           ; 1 bytes @ 0x0
  1919                           
  1920  0070                     ?_SET_HEATING_HANDLER_ON_WORK:	
  1921                           ; 1 bytes @ 0x0
  1922                           
  1923  0070                     ?_SET_ROTOR_PWR_HANDLER_ON_WORK:	
  1924                           ; 1 bytes @ 0x0
  1925                           
  1926  0070                     ?_STOP_HEATING:	
  1927                           ; 1 bytes @ 0x0
  1928                           
  1929  0070                     ?_INCREMENT_THIS:	
  1930                           ; 1 bytes @ 0x0
  1931                           
  1932  0070                     ?_GOTO_NEXT_DIGIT:	
  1933                           ; 1 bytes @ 0x0
  1934                           
  1935  0070                     ?_CCP1_INIT:	
  1936                           ; 1 bytes @ 0x0
  1937                           
  1938  0070                     ?_CCP2_INIT:	
  1939                           ; 1 bytes @ 0x0
  1940                           
  1941  0070                     ?_TIMER0_INIT:	
  1942                           ; 1 bytes @ 0x0
  1943                           
  1944  0070                     ?_TIMER0_UPDATE:	
  1945                           ; 1 bytes @ 0x0
  1946                           
  1947  0070                     ??_TIMER0_UPDATE:	
  1948                           ; 1 bytes @ 0x0
  1949                           
  1950  0070                     ?_TIMER0_START:	
  1951                           ; 1 bytes @ 0x0
  1952                           
  1953  0070                     ?_SWs_UPDATE:	
  1954                           ; 1 bytes @ 0x0
  1955                           
  1956  0070                     ?_SW_GET_STATE:	
  1957                           ; 1 bytes @ 0x0
  1958                           
  1959  0070                     ?_SWs_INIT:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0070                     ?_LCD_INIT:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0070                     ?_LCD_CLEAR:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0070                     ?_START_BLINKING_AT:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0070                     ?_STOP_BLINKING:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0070                     ?_KEYPAD_INIT:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0070                     ?_KEYPAD_UPDATE:	
  1978                           ; 1 bytes @ 0x0
  1979                           
  1980  0070                     ?_MOTOR_INIT:	
  1981                           ; 1 bytes @ 0x0
  1982                           
  1983  0070                     ?_MOTOR_UPDATE:	
  1984                           ; 1 bytes @ 0x0
  1985                           
  1986  0070                     ?_HEATER_INIT:	
  1987                           ; 1 bytes @ 0x0
  1988                           
  1989  0070                     ?_HEATER_UPDATE:	
  1990                           ; 1 bytes @ 0x0
  1991                           
  1992  0070                     ?_ENABLE_INTERUPT:	
  1993                           ; 1 bytes @ 0x0
  1994                           
  1995  0070                     ?_DISP_HEATER_DATA:	
  1996                           ; 1 bytes @ 0x0
  1997                           
  1998  0070                     ?_DISP_MOTOR_DATA:	
  1999                           ; 1 bytes @ 0x0
  2000                           
  2001  0070                     ?_DISP_TIME_ERR:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_DISP_DOOR_ERR:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_DISP_FOOD_ERR:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_DISP_ON_WORKING_FOOD_ERR:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_DISP_CANCEL:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_DISP_FINISH:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?_TIME_CONTINUE:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ??_TIME_CONTINUE:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?_TIME_STOP:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ??_TIME_STOP:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_TIME_UPDATE:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ??_TIME_UPDATE:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_TIME_START_AT:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_CONTROL_INIT:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_CONTROL_UPDATE:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ?_SYS_UPDATE:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_main:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ?___lbdiv:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?___lbmod:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?i1_GPIO_PORT_SET_STATE:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ?i1_LCD_SND_COMMAND:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ?i1_MOTOR_SET_STATE:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ??i1_MOTOR_SET_STATE:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ?i1_HEATER_SET_STATE:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ??i1_HEATER_SET_STATE:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?i1___bmul:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ?_KEYPAD_GET_PRESSED_KEY:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  0070                     ?___lwdiv:	
  2083                           ; 2 bytes @ 0x0
  2084                           
  2085  0070                     ?___lwmod:	
  2086                           ; 2 bytes @ 0x0
  2087                           
  2088  0070                     ?i1__Umul8_16:	
  2089                           ; 2 bytes @ 0x0
  2090                           
  2091  0070                     ?_TIME_GET:	
  2092                           ; 2 bytes @ 0x0
  2093                           
  2094  0070                     ?i1___xxtofl:	
  2095                           ; 3 bytes @ 0x0
  2096                           
  2097  0070                     TIME_START_AT@START_MINUTES:	
  2098                           ; 4 bytes @ 0x0
  2099                           
  2100  0070                     ___lbdiv@divisor:	
  2101                           ; 1 bytes @ 0x0
  2102                           
  2103  0070                     ___lbmod@divisor:	
  2104                           ; 1 bytes @ 0x0
  2105                           
  2106  0070                     i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE:	
  2107                           ; 1 bytes @ 0x0
  2108                           
  2109  0070                     i1MOTOR_SET_STATE@MOTOR_STATE:	
  2110                           ; 1 bytes @ 0x0
  2111                           
  2112  0070                     i1HEATER_SET_STATE@HEATER_STATE:	
  2113                           ; 1 bytes @ 0x0
  2114                           
  2115  0070                     i1__Umul8_16@multiplicand:	
  2116                           ; 1 bytes @ 0x0
  2117                           
  2118  0070                     i1___bmul@multiplicand:	
  2119                           ; 1 bytes @ 0x0
  2120                           
  2121  0070                     ___lwdiv@divisor:	
  2122                           ; 1 bytes @ 0x0
  2123                           
  2124  0070                     ___lwmod@divisor:	
  2125                           ; 2 bytes @ 0x0
  2126                           
  2127  0070                     i1___xxtofl@val:	
  2128                           ; 2 bytes @ 0x0
  2129                           
  2130                           
  2131                           ; 4 bytes @ 0x0
  2132  0070                     	ds	1
  2133  0071                     ??___lbdiv:	
  2134  0071                     ??___lbmod:	
  2135                           ; 1 bytes @ 0x1
  2136                           
  2137  0071                     ??i1_GPIO_PORT_SET_STATE:	
  2138                           ; 1 bytes @ 0x1
  2139                           
  2140  0071                     ??i1___bmul:	
  2141                           ; 1 bytes @ 0x1
  2142                           
  2143  0071                     TIME_START_AT@START_HOURS:	
  2144                           ; 1 bytes @ 0x1
  2145                           
  2146  0071                     ___lbdiv@dividend:	
  2147                           ; 1 bytes @ 0x1
  2148                           
  2149  0071                     i1___bmul@multiplier:	
  2150                           ; 1 bytes @ 0x1
  2151                           
  2152                           
  2153                           ; 1 bytes @ 0x1
  2154  0071                     	ds	1
  2155  0072                     ??_KEYPAD_GET_PRESSED_KEY:	
  2156  0072                     TIME_START_AT@COUNTING_TYPE:	
  2157                           ; 1 bytes @ 0x2
  2158                           
  2159  0072                     ___lbdiv@counter:	
  2160                           ; 1 bytes @ 0x2
  2161                           
  2162  0072                     ___lbmod@dividend:	
  2163                           ; 1 bytes @ 0x2
  2164                           
  2165  0072                     i1___bmul@product:	
  2166                           ; 1 bytes @ 0x2
  2167                           
  2168  0072                     KEYPAD_GET_PRESSED_KEY@ret:	
  2169                           ; 1 bytes @ 0x2
  2170                           
  2171  0072                     ___lwdiv@dividend:	
  2172                           ; 2 bytes @ 0x2
  2173                           
  2174  0072                     ___lwmod@dividend:	
  2175                           ; 2 bytes @ 0x2
  2176                           
  2177                           
  2178                           ; 2 bytes @ 0x2
  2179  0072                     	ds	1
  2180  0073                     ?_GPIO_PIN_GET_STATE:	
  2181  0073                     ??_SW_GET_STATE:	
  2182                           ; 1 bytes @ 0x3
  2183                           
  2184  0073                     ??_TIME_GET:	
  2185                           ; 1 bytes @ 0x3
  2186                           
  2187  0073                     ??_TIME_START_AT:	
  2188                           ; 1 bytes @ 0x3
  2189                           
  2190  0073                     ?i1_GPIO_PIN_SET_STATE:	
  2191                           ; 1 bytes @ 0x3
  2192                           
  2193  0073                     ??i1__Umul8_16:	
  2194                           ; 1 bytes @ 0x3
  2195                           
  2196  0073                     GPIO_PIN_GET_STATE@GPIO_PIN_NO:	
  2197                           ; 1 bytes @ 0x3
  2198                           
  2199  0073                     SW_GET_STATE@SW_NO:	
  2200                           ; 1 bytes @ 0x3
  2201                           
  2202  0073                     TIME_START_AT@START_SECONDS:	
  2203                           ; 1 bytes @ 0x3
  2204                           
  2205  0073                     ___lbdiv@quotient:	
  2206                           ; 1 bytes @ 0x3
  2207                           
  2208  0073                     ___lbmod@counter:	
  2209                           ; 1 bytes @ 0x3
  2210                           
  2211  0073                     i1GPIO_PIN_SET_STATE@GPIO_PIN_NO:	
  2212                           ; 1 bytes @ 0x3
  2213                           
  2214  0073                     i1__Umul8_16@product:	
  2215                           ; 1 bytes @ 0x3
  2216                           
  2217                           
  2218                           ; 2 bytes @ 0x3
  2219  0073                     	ds	1
  2220  0074                     ??_GPIO_PIN_GET_STATE:	
  2221  0074                     ??___lwdiv:	
  2222                           ; 1 bytes @ 0x4
  2223                           
  2224  0074                     ??___lwmod:	
  2225                           ; 1 bytes @ 0x4
  2226                           
  2227  0074                     ??i1___xxtofl:	
  2228                           ; 1 bytes @ 0x4
  2229                           
  2230  0074                     SW_GET_STATE@ret:	
  2231                           ; 1 bytes @ 0x4
  2232                           
  2233  0074                     ___lbmod@rem:	
  2234                           ; 1 bytes @ 0x4
  2235                           
  2236  0074                     ___lwmod@counter:	
  2237                           ; 1 bytes @ 0x4
  2238                           
  2239  0074                     i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE:	
  2240                           ; 1 bytes @ 0x4
  2241                           
  2242  0074                     i1GPIO_PORT_SET_STATE@GPIO_PORTx:	
  2243                           ; 1 bytes @ 0x4
  2244                           
  2245  0074                     ___lwdiv@quotient:	
  2246                           ; 1 bytes @ 0x4
  2247                           
  2248                           
  2249                           ; 2 bytes @ 0x4
  2250  0074                     	ds	1
  2251  0075                     ??i1_GPIO_PIN_SET_STATE:	
  2252  0075                     i1__Umul8_16@multiplier:	
  2253                           ; 1 bytes @ 0x5
  2254                           
  2255                           
  2256                           ; 1 bytes @ 0x5
  2257  0075                     	ds	1
  2258  0076                     ___lwdiv@counter:	
  2259  0076                     i1__Umul8_16@word_mpld:	
  2260                           ; 1 bytes @ 0x6
  2261                           
  2262                           
  2263                           ; 2 bytes @ 0x6
  2264  0076                     	ds	1
  2265  0077                     ?_utoa:	
  2266  0077                     utoa@val:	
  2267                           ; 1 bytes @ 0x7
  2268                           
  2269                           
  2270                           ; 2 bytes @ 0x7
  2271  0077                     	ds	1
  2272  0078                     GPIO_PIN_GET_STATE@GPIO_PORTx:	
  2273  0078                     i1___xxtofl@sign:	
  2274                           ; 1 bytes @ 0x8
  2275                           
  2276                           
  2277                           ; 1 bytes @ 0x8
  2278  0078                     	ds	1
  2279  0079                     GPIO_PIN_GET_STATE@ret:	
  2280  0079                     i1___xxtofl@exp:	
  2281                           ; 1 bytes @ 0x9
  2282                           
  2283  0079                     utoa@base:	
  2284                           ; 1 bytes @ 0x9
  2285                           
  2286                           
  2287                           ; 2 bytes @ 0x9
  2288  0079                     	ds	1
  2289  007A                     ??_SWs_UPDATE:	
  2290  007A                     i1___xxtofl@arg:	
  2291                           ; 1 bytes @ 0xA
  2292                           
  2293                           
  2294                           ; 4 bytes @ 0xA
  2295  007A                     	ds	1
  2296  007B                     ??_itoa:	
  2297  007B                     ??_utoa:	
  2298                           ; 1 bytes @ 0xB
  2299                           
  2300                           
  2301                           ; 1 bytes @ 0xB
  2302  007B                     	ds	1
  2303  007C                     itoa@buf:	
  2304                           
  2305                           ; 1 bytes @ 0xC
  2306  007C                     	ds	1
  2307  007D                     i1GPIO_PIN_SET_STATE@GPIO_PORTx:	
  2308                           
  2309                           ; 1 bytes @ 0xD
  2310  007D                     	ds	1
  2311  007E                     ??_LCD_SEND_CHARACTER:	
  2312  007E                     ??_UPDATE_LCD_SECONDS:	
  2313                           ; 1 bytes @ 0xE
  2314                           
  2315  007E                     ??_UPDATE_LCD_MINUTES:	
  2316                           ; 1 bytes @ 0xE
  2317                           
  2318  007E                     ??_UPDATE_LCD_HOURS:	
  2319                           ; 1 bytes @ 0xE
  2320                           
  2321  007E                     ??_DISP_SHOW_TIME:	
  2322                           ; 1 bytes @ 0xE
  2323                           
  2324  007E                     ??_DEFAULT_HANDLER:	
  2325                           ; 1 bytes @ 0xE
  2326                           
  2327  007E                     ??_SET_TIME_HANDLER_ON_WORK:	
  2328                           ; 1 bytes @ 0xE
  2329                           
  2330  007E                     ??_STOP_HEATING:	
  2331                           ; 1 bytes @ 0xE
  2332                           
  2333  007E                     ??_LED_SET_STATE:	
  2334                           ; 1 bytes @ 0xE
  2335                           
  2336  007E                     ??_LCD_SEND_A_STRING:	
  2337                           ; 1 bytes @ 0xE
  2338                           
  2339  007E                     ??_LCD_SEND_A_NUMBER:	
  2340                           ; 1 bytes @ 0xE
  2341                           
  2342  007E                     ??_LCD_CLEAR:	
  2343                           ; 1 bytes @ 0xE
  2344                           
  2345  007E                     ??_START_BLINKING_AT:	
  2346                           ; 1 bytes @ 0xE
  2347                           
  2348  007E                     ??_STOP_BLINKING:	
  2349                           ; 1 bytes @ 0xE
  2350                           
  2351  007E                     ??_MOTOR_UPDATE:	
  2352                           ; 1 bytes @ 0xE
  2353                           
  2354  007E                     ??_HEATER_UPDATE:	
  2355                           ; 1 bytes @ 0xE
  2356                           
  2357  007E                     ??_DISP_UPDATE_TIME:	
  2358                           ; 1 bytes @ 0xE
  2359                           
  2360  007E                     ??_DISP_UPDATE_TIME_UNIT_AT:	
  2361                           ; 1 bytes @ 0xE
  2362                           
  2363  007E                     ??_DISP_SHOW_TIME_AT:	
  2364                           ; 1 bytes @ 0xE
  2365                           
  2366  007E                     ??_DISP_HEATER_DATA:	
  2367                           ; 1 bytes @ 0xE
  2368                           
  2369  007E                     ??_DISP_MOTOR_DATA:	
  2370                           ; 1 bytes @ 0xE
  2371                           
  2372  007E                     ??_DISP_TIME_ERR:	
  2373                           ; 1 bytes @ 0xE
  2374                           
  2375  007E                     ??_DISP_DOOR_ERR:	
  2376                           ; 1 bytes @ 0xE
  2377                           
  2378  007E                     ??_DISP_FOOD_ERR:	
  2379                           ; 1 bytes @ 0xE
  2380                           
  2381  007E                     ??_DISP_ON_WORKING_FOOD_ERR:	
  2382                           ; 1 bytes @ 0xE
  2383                           
  2384  007E                     ??_DISP_CANCEL:	
  2385                           ; 1 bytes @ 0xE
  2386                           
  2387  007E                     ??_DISP_FINISH:	
  2388                           ; 1 bytes @ 0xE
  2389                           
  2390  007E                     ??i1_LCD_SND_COMMAND:	
  2391                           ; 1 bytes @ 0xE
  2392                           
  2393                           
  2394                           	psect	cstackBANK0
  2395  0020                     __pcstackBANK0:	
  2396                           ; 1 bytes @ 0xE
  2397                           
  2398  0020                     ?_LED_SET_STATE:	
  2399  0020                     ??_KEYPAD_UPDATE:	
  2400                           ; 1 bytes @ 0x0
  2401                           
  2402  0020                     ?i1___fldiv:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0020                     LED_SET_STATE@LED_STATE:	
  2406                           ; 4 bytes @ 0x0
  2407                           
  2408  0020                     LCD_SEND_CHARACTER@character:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0020                     i1LCD_SND_COMMAND@command:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0020                     utoa@v:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0020                     i1___fldiv@a:	
  2418                           ; 2 bytes @ 0x0
  2419                           
  2420                           
  2421                           ; 4 bytes @ 0x0
  2422  0020                     	ds	1
  2423  0021                     ?_LCD_SEND_A_STRING:	
  2424  0021                     ?_LCD_SET_CURSOR:	
  2425                           ; 1 bytes @ 0x1
  2426                           
  2427  0021                     SWs_UPDATE@samples_counter:	
  2428                           ; 1 bytes @ 0x1
  2429                           
  2430  0021                     LCD_SET_CURSOR@row:	
  2431                           ; 1 bytes @ 0x1
  2432                           
  2433  0021                     KEYPAD_UPDATE@KEY_STATE:	
  2434                           ; 1 bytes @ 0x1
  2435                           
  2436  0021                     LCD_SEND_A_STRING@string:	
  2437                           ; 1 bytes @ 0x1
  2438                           
  2439                           
  2440                           ; 2 bytes @ 0x1
  2441  0021                     	ds	1
  2442  0022                     ??_LCD_SET_CURSOR:	
  2443  0022                     SWs_UPDATE@sw_counter:	
  2444                           ; 1 bytes @ 0x2
  2445                           
  2446  0022                     LED_SET_STATE@LED_NO:	
  2447                           ; 1 bytes @ 0x2
  2448                           
  2449  0022                     KEYPAD_UPDATE@COL_counter:	
  2450                           ; 1 bytes @ 0x2
  2451                           
  2452  0022                     utoa@c:	
  2453                           ; 1 bytes @ 0x2
  2454                           
  2455                           
  2456                           ; 1 bytes @ 0x2
  2457  0022                     	ds	1
  2458  0023                     KEYPAD_UPDATE@ROW_counter:	
  2459  0023                     utoa@buf:	
  2460                           ; 1 bytes @ 0x3
  2461                           
  2462                           
  2463                           ; 1 bytes @ 0x3
  2464  0023                     	ds	1
  2465  0024                     ?_itoa:	
  2466  0024                     LCD_SET_CURSOR@coloum:	
  2467                           ; 1 bytes @ 0x4
  2468                           
  2469  0024                     itoa@val:	
  2470                           ; 1 bytes @ 0x4
  2471                           
  2472  0024                     i1___fldiv@b:	
  2473                           ; 2 bytes @ 0x4
  2474                           
  2475                           
  2476                           ; 4 bytes @ 0x4
  2477  0024                     	ds	1
  2478  0025                     ??_FINISH_HANDLER:	
  2479  0025                     START_BLINKING_AT@BLINKED:	
  2480                           ; 1 bytes @ 0x5
  2481                           
  2482                           
  2483                           ; 1 bytes @ 0x5
  2484  0025                     	ds	1
  2485  0026                     ??_SET_HEATING_HANDLER_ON_WORK:	
  2486  0026                     ??_SET_ROTOR_PWR_HANDLER_ON_WORK:	
  2487                           ; 1 bytes @ 0x6
  2488                           
  2489  0026                     ??_GOTO_NEXT_DIGIT:	
  2490                           ; 1 bytes @ 0x6
  2491                           
  2492  0026                     itoa@base:	
  2493                           ; 1 bytes @ 0x6
  2494                           
  2495                           
  2496                           ; 2 bytes @ 0x6
  2497  0026                     	ds	2
  2498  0028                     ??_SET_HEATING_HANDLER:	
  2499  0028                     ?_LCD_SEND_A_NUMBER:	
  2500                           ; 1 bytes @ 0x8
  2501                           
  2502  0028                     ??i1___fldiv:	
  2503                           ; 1 bytes @ 0x8
  2504                           
  2505  0028                     GOTO_NEXT_DIGIT@KEY:	
  2506                           ; 1 bytes @ 0x8
  2507                           
  2508  0028                     LCD_SEND_A_NUMBER@x:	
  2509                           ; 1 bytes @ 0x8
  2510                           
  2511  0028                     SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY:	
  2512                           ; 2 bytes @ 0x8
  2513                           
  2514                           
  2515                           ; 2 bytes @ 0x8
  2516  0028                     	ds	2
  2517  002A                     ??_SET_ROTOR_PWR_HANDLER:	
  2518  002A                     LCD_SEND_A_NUMBER@string:	
  2519                           ; 1 bytes @ 0xA
  2520                           
  2521                           
  2522                           ; 4 bytes @ 0xA
  2523  002A                     	ds	2
  2524  002C                     i1___fldiv@rem:	
  2525                           
  2526                           ; 4 bytes @ 0xC
  2527  002C                     	ds	2
  2528  002E                     ?_DISP_UPDATE_TIME_UNIT_AT:	
  2529  002E                     DISP_UPDATE_TIME_UNIT_AT@NUMBER:	
  2530                           ; 1 bytes @ 0xE
  2531                           
  2532  002E                     UPDATE_LCD_SECONDS@SECONDS:	
  2533                           ; 1 bytes @ 0xE
  2534                           
  2535  002E                     UPDATE_LCD_MINUTES@MINUTES:	
  2536                           ; 1 bytes @ 0xE
  2537                           
  2538  002E                     UPDATE_LCD_HOURS@HOURS:	
  2539                           ; 1 bytes @ 0xE
  2540                           
  2541                           
  2542                           ; 1 bytes @ 0xE
  2543  002E                     	ds	1
  2544  002F                     ?_DISP_UPDATE_TIME:	
  2545  002F                     ?_DISP_SHOW_TIME_AT:	
  2546                           ; 1 bytes @ 0xF
  2547                           
  2548  002F                     DISP_UPDATE_TIME_UNIT_AT@UNIT:	
  2549                           ; 1 bytes @ 0xF
  2550                           
  2551  002F                     DISP_UPDATE_TIME@time:	
  2552                           ; 1 bytes @ 0xF
  2553                           
  2554  002F                     DISP_SHOW_TIME_AT@START_TIME:	
  2555                           ; 3 bytes @ 0xF
  2556                           
  2557                           
  2558                           ; 3 bytes @ 0xF
  2559  002F                     	ds	1
  2560  0030                     ??_INCREMENT_THIS:	
  2561  0030                     i1___fldiv@sign:	
  2562                           ; 1 bytes @ 0x10
  2563                           
  2564                           
  2565                           ; 1 bytes @ 0x10
  2566  0030                     	ds	1
  2567  0031                     i1___fldiv@new_exp:	
  2568                           
  2569                           ; 2 bytes @ 0x11
  2570  0031                     	ds	1
  2571  0032                     ??_HEATING_HANDLER:	
  2572  0032                     INCREMENT_THIS@KEY:	
  2573                           ; 1 bytes @ 0x12
  2574                           
  2575                           
  2576                           ; 1 bytes @ 0x12
  2577  0032                     	ds	1
  2578  0033                     ??_SET_TIME_HANDLER:	
  2579  0033                     i1___fldiv@grs:	
  2580                           ; 1 bytes @ 0x13
  2581                           
  2582                           
  2583                           ; 4 bytes @ 0x13
  2584  0033                     	ds	1
  2585  0034                     HEATING_HANDLER@current_time:	
  2586                           
  2587                           ; 3 bytes @ 0x14
  2588  0034                     	ds	3
  2589  0037                     ??_CONTROL_UPDATE:	
  2590  0037                     i1___fldiv@bexp:	
  2591                           ; 1 bytes @ 0x17
  2592                           
  2593                           
  2594                           ; 1 bytes @ 0x17
  2595  0037                     	ds	1
  2596  0038                     i1___fldiv@aexp:	
  2597                           
  2598                           ; 1 bytes @ 0x18
  2599  0038                     	ds	1
  2600  0039                     ?i1___flmul:	
  2601  0039                     i1___flmul@b:	
  2602                           ; 4 bytes @ 0x19
  2603                           
  2604                           
  2605                           ; 4 bytes @ 0x19
  2606  0039                     	ds	4
  2607  003D                     i1___flmul@a:	
  2608                           
  2609                           ; 4 bytes @ 0x1D
  2610  003D                     	ds	4
  2611  0041                     ??i1___flmul:	
  2612                           
  2613                           ; 1 bytes @ 0x21
  2614  0041                     	ds	4
  2615  0045                     i1___flmul@sign:	
  2616                           
  2617                           ; 1 bytes @ 0x25
  2618  0045                     	ds	1
  2619  0046                     i1___flmul@aexp:	
  2620                           
  2621                           ; 1 bytes @ 0x26
  2622  0046                     	ds	1
  2623  0047                     i1___flmul@grs:	
  2624                           
  2625                           ; 4 bytes @ 0x27
  2626  0047                     	ds	4
  2627  004B                     i1___flmul@bexp:	
  2628                           
  2629                           ; 1 bytes @ 0x2B
  2630  004B                     	ds	1
  2631  004C                     i1___flmul@prod:	
  2632                           
  2633                           ; 4 bytes @ 0x2C
  2634  004C                     	ds	4
  2635  0050                     i1___flmul@temp:	
  2636                           
  2637                           ; 2 bytes @ 0x30
  2638  0050                     	ds	2
  2639  0052                     ?i1___fltol:	
  2640  0052                     i1___fltol@f1:	
  2641                           ; 4 bytes @ 0x32
  2642                           
  2643                           
  2644                           ; 4 bytes @ 0x32
  2645  0052                     	ds	4
  2646  0056                     ??i1___fltol:	
  2647                           
  2648                           ; 1 bytes @ 0x36
  2649  0056                     	ds	4
  2650  005A                     i1___fltol@sign1:	
  2651                           
  2652                           ; 1 bytes @ 0x3A
  2653  005A                     	ds	1
  2654  005B                     i1___fltol@exp1:	
  2655                           
  2656                           ; 1 bytes @ 0x3B
  2657  005B                     	ds	1
  2658  005C                     ?i1_CCP1_PWM_DUTY_CYCLE_LOAD:	
  2659  005C                     ?i1_CCP2_PWM_DUTY_CYCLE_LOAD:	
  2660                           ; 1 bytes @ 0x3C
  2661                           
  2662  005C                     i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  2663                           ; 1 bytes @ 0x3C
  2664                           
  2665  005C                     i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  2666                           ; 2 bytes @ 0x3C
  2667                           
  2668                           
  2669                           ; 2 bytes @ 0x3C
  2670  005C                     	ds	2
  2671  005E                     ??i1_CCP1_PWM_DUTY_CYCLE_LOAD:	
  2672  005E                     ??i1_CCP2_PWM_DUTY_CYCLE_LOAD:	
  2673                           ; 1 bytes @ 0x3E
  2674                           
  2675                           
  2676                           ; 1 bytes @ 0x3E
  2677  005E                     	ds	3
  2678  0061                     i1_CCP1_PWM_DUTY_CYCLE_LOAD$2075:	
  2679  0061                     i1_CCP2_PWM_DUTY_CYCLE_LOAD$2076:	
  2680                           ; 4 bytes @ 0x41
  2681                           
  2682                           
  2683                           ; 4 bytes @ 0x41
  2684  0061                     	ds	4
  2685  0065                     i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  2686  0065                     i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  2687                           ; 2 bytes @ 0x45
  2688                           
  2689                           
  2690                           ; 2 bytes @ 0x45
  2691  0065                     	ds	2
  2692  0067                     ??_SYS_UPDATE:	
  2693                           
  2694                           ; 1 bytes @ 0x47
  2695  0067                     	ds	4
  2696                           
  2697                           	psect	maintext
  2698  1EE7                     __pmaintext:	
  2699 ;;
  2700 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2701 ;;
  2702 ;; *************** function _main *****************
  2703 ;; Defined at:
  2704 ;;		line 48 in file "MICROWAVE.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;		None
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;		None
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  1    wreg      void 
  2711 ;; Registers used:
  2712 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2713 ;; Tracked objects:
  2714 ;;		On entry : B00/0
  2715 ;;		On exit  : 200/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2718 ;;      Params:         0       0       0       0       0
  2719 ;;      Locals:         0       0       0       0       0
  2720 ;;      Temps:          0       0       0       0       0
  2721 ;;      Totals:         0       0       0       0       0
  2722 ;;Total ram usage:        0 bytes
  2723 ;; Hardware stack levels required when called:   14
  2724 ;; This function calls:
  2725 ;;		_CONTROL_INIT
  2726 ;;		_ENABLE_INTERUPT
  2727 ;;		_HEATER_INIT
  2728 ;;		_KEYPAD_INIT
  2729 ;;		_LCD_INIT
  2730 ;;		_MOTOR_INIT
  2731 ;;		_SWs_INIT
  2732 ;;		_TIMER0_INIT
  2733 ;;		_TIMER0_START
  2734 ;; This function is called by:
  2735 ;;		Startup code after reset
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           
  2740                           ;psect for function _main
  2741  1EE7                     _main:	
  2742  1EE7                     l6466:	
  2743                           ;incstack = 0
  2744 ;; hardware stack exceeded
  2745                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2746                           
  2747                           
  2748                           ;MICROWAVE.c: 51:     MOTOR_INIT();
  2749  1EE7  160A  118A  2032  160A  158A  	fcall	_MOTOR_INIT
  2750                           
  2751                           ;MICROWAVE.c: 52:     HEATER_INIT();
  2752  1EEC  160A  118A  2047  160A  158A  	fcall	_HEATER_INIT
  2753                           
  2754                           ;MICROWAVE.c: 53:     LCD_INIT();
  2755  1EF1  120A  118A  24D6  160A  158A  	fcall	_LCD_INIT
  2756                           
  2757                           ;MICROWAVE.c: 54:     SWs_INIT();
  2758  1EF6  120A  118A  2424  160A  158A  	fcall	_SWs_INIT
  2759                           
  2760                           ;MICROWAVE.c: 56:     TIMER0_INIT();
  2761  1EFB  160A  158A  2667  160A  158A  	fcall	_TIMER0_INIT
  2762                           
  2763                           ;MICROWAVE.c: 57:     KEYPAD_INIT();
  2764  1F00  120A  118A  2487  160A  158A  	fcall	_KEYPAD_INIT
  2765                           
  2766                           ;MICROWAVE.c: 58:     CONTROL_INIT();
  2767  1F05  160A  158A  26B2  160A  158A  	fcall	_CONTROL_INIT
  2768                           
  2769                           ;MICROWAVE.c: 59:     ENABLE_INTERUPT();
  2770  1F0A  160A  158A  265C  160A  158A  	fcall	_ENABLE_INTERUPT
  2771                           
  2772                           ;MICROWAVE.c: 61:     TIMER0_START();
  2773  1F0F  120A  158A  2001  160A  158A  	fcall	_TIMER0_START
  2774  1F14                     l931:	
  2775                           ;MICROWAVE.c: 62:     while(1)
  2776                           
  2777                           
  2778                           ;MICROWAVE.c: 63:     {;MICROWAVE.c: 65:     }
  2779  1F14  2F14               	goto	l931
  2780  1F15                     __end_of_main:	
  2781                           
  2782                           	psect	text1
  2783  0801                     __ptext1:	
  2784 ;; *************** function _TIMER0_START *****************
  2785 ;; Defined at:
  2786 ;;		line 70 in file "TIMR0.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;		None
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;		None
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  1    wreg      void 
  2793 ;; Registers used:
  2794 ;;		None
  2795 ;; Tracked objects:
  2796 ;;		On entry : B00/B00
  2797 ;;		On exit  : B00/900
  2798 ;;		Unchanged: 800/0
  2799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2800 ;;      Params:         0       0       0       0       0
  2801 ;;      Locals:         0       0       0       0       0
  2802 ;;      Temps:          0       0       0       0       0
  2803 ;;      Totals:         0       0       0       0       0
  2804 ;;Total ram usage:        0 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:   10
  2807 ;; This function calls:
  2808 ;;		Nothing
  2809 ;; This function is called by:
  2810 ;;		_main
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           
  2815                           ;psect for function _TIMER0_START
  2816  0801                     _TIMER0_START:	
  2817                           
  2818                           ;TIMR0.c: 72:  ( T0SE =( TIMER0_INTERNAL &0x01)); (T0CS = ( TIMER0_INTERNAL >>1));
  2819                           
  2820                           ;incstack = 0
  2821 ;; hardware stack exceeded
  2822                           ; Regs used in _TIMER0_START: []
  2823  0801  1303               	bcf	3,6	;RP1=0, select bank1
  2824  0802  1201               	bcf	1,4	;volatile
  2825  0803  1281               	bcf	1,5	;volatile
  2826  0804  0008               	return
  2827  0805                     __end_of_TIMER0_START:	
  2828                           
  2829                           	psect	text2
  2830  1E67                     __ptext2:	
  2831 ;; *************** function _TIMER0_INIT *****************
  2832 ;; Defined at:
  2833 ;;		line 29 in file "TIMR0.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;		None
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;		None
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  1    wreg      void 
  2840 ;; Registers used:
  2841 ;;		wreg, status,2, status,0, pclath, cstack
  2842 ;; Tracked objects:
  2843 ;;		On entry : B00/900
  2844 ;;		On exit  : B00/900
  2845 ;;		Unchanged: 800/0
  2846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2847 ;;      Params:         0       0       0       0       0
  2848 ;;      Locals:         0       0       0       0       0
  2849 ;;      Temps:          0       0       0       0       0
  2850 ;;      Totals:         0       0       0       0       0
  2851 ;;Total ram usage:        0 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:   11
  2854 ;; This function calls:
  2855 ;;		_TIMER0_STOP
  2856 ;; This function is called by:
  2857 ;;		_main
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           
  2862                           ;psect for function _TIMER0_INIT
  2863  1E67                     _TIMER0_INIT:	
  2864                           
  2865                           ;TIMR0.c: 31:  ( PSA = GPIO_PIN_OFF); (OPTION_REGbits.PS = TIMER0_CLK_256 );
  2866                           
  2867                           ;incstack = 0
  2868 ;; hardware stack exceeded
  2869                           ; Regs used in _TIMER0_INIT: [wreg+status,2+status,0+pclath+cstack]
  2870  1E67  1181               	bcf	1,3	;volatile
  2871  1E68  3007               	movlw	7
  2872  1E69  0481               	iorwf	1,f	;volatile
  2873                           
  2874                           ;TIMR0.c: 32:  (TMR0IE = TIMER0_INTERUPT_BASED );
  2875  1E6A  168B               	bsf	11,5	;volatile
  2876                           
  2877                           ;TIMR0.c: 33:     (TMR0 = ((256) - ( (5)* ((double) (8 * 1000) / ( 4 * 256 ) ) )) );
  2878  1E6B  30D8               	movlw	216
  2879  1E6C  1283               	bcf	3,5	;RP0=0, select bank0
  2880  1E6D  0081               	movwf	1	;volatile
  2881                           
  2882                           ;TIMR0.c: 34:  TIMER0_STOP();
  2883  1E6E  2E6F               	ljmp	l5838
  2884  1E6F                     __end_of_TIMER0_INIT:	
  2885  1E6F                     __ptext3:	
  2886 ;; *************** function _TIMER0_STOP *****************
  2887 ;; Defined at:
  2888 ;;		line 74 in file "TIMR0.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;		None
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;		None
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		None
  2897 ;; Tracked objects:
  2898 ;;		On entry : B00/800
  2899 ;;		On exit  : B00/900
  2900 ;;		Unchanged: 800/0
  2901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2902 ;;      Params:         0       0       0       0       0
  2903 ;;      Locals:         0       0       0       0       0
  2904 ;;      Temps:          0       0       0       0       0
  2905 ;;      Totals:         0       0       0       0       0
  2906 ;;Total ram usage:        0 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:   10
  2909 ;; This function calls:
  2910 ;;		Nothing
  2911 ;; This function is called by:
  2912 ;;		_TIMER0_INIT
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           
  2917                           ;psect for function _TIMER0_STOP
  2918  1E6F                     _TIMER0_STOP:	
  2919  1E6F                     l5838:	
  2920                           ;incstack = 0
  2921 ;; hardware stack exceeded
  2922                           ; Regs used in _TIMER0_STOP: []
  2923                           
  2924                           
  2925                           ;TIMR0.c: 76:     ( T0SE =( TIMER0_EXTERNAL_RISING_EDGE &0x01)); (T0CS = ( TIMER0_EXTERN
      +                          AL_RISING_EDGE >>1));
  2926  1E6F  1683               	bsf	3,5	;RP0=1, select bank1
  2927  1E70  1601               	bsf	1,4	;volatile
  2928  1E71  1281               	bcf	1,5	;volatile
  2929  1E72  0008               	return
  2930  1E73                     __end_of_TIMER0_STOP:	
  2931                           
  2932                           	psect	text4
  2933  0424                     __ptext4:	
  2934 ;; *************** function _SWs_INIT *****************
  2935 ;; Defined at:
  2936 ;;		line 128 in file "SW.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  SW_Counter      1   20[BANK1 ] unsigned char 
  2941 ;;  Samples_Coun    1   19[BANK1 ] unsigned char 
  2942 ;;  ret             1    0        enum E861
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      enum E861
  2945 ;; Registers used:
  2946 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/300
  2949 ;;		On exit  : B00/900
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2952 ;;      Params:         0       0       0       0       0
  2953 ;;      Locals:         0       0       3       0       0
  2954 ;;      Temps:          0       0       0       0       0
  2955 ;;      Totals:         0       0       3       0       0
  2956 ;;Total ram usage:        3 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:   11
  2959 ;; This function calls:
  2960 ;;		_GPIO_PIN_INIT
  2961 ;;		___bmul
  2962 ;; This function is called by:
  2963 ;;		_main
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           
  2968                           ;psect for function _SWs_INIT
  2969  0424                     _SWs_INIT:	
  2970                           
  2971                           ;SW.c: 131:  tbyte SW_Counter ;;SW.c: 132:  tbyte Samples_Counter;;SW.c: 133:  for (SW_C
      +                          ounter =0 ; SW_Counter < 4 ; SW_Counter++)
  2972                           
  2973                           ;incstack = 0
  2974 ;; hardware stack exceeded
  2975                           ; Regs used in _SWs_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2976  0424  1683               	bsf	3,5	;RP0=1, select bank1
  2977  0425  1303               	bcf	3,6	;RP1=0, select bank1
  2978  0426  01B4               	clrf	SWs_INIT@SW_Counter^(0+128)
  2979  0427                     l6176:	
  2980                           
  2981                           ;SW.c: 134:  {;SW.c: 135:   GPIO_PIN_INIT ( SWs[SW_Counter].SW_PORT, SWs[SW_Counter].SW_
      +                          PIN , GPIO_PIN_IN );
  2982  0427  3005               	movlw	5
  2983  0428  00A0               	movwf	___bmul@multiplicand^(0+128)
  2984  0429  0834               	movf	SWs_INIT@SW_Counter^(0+128),w
  2985  042A  245D  120A  118A   	fcall	___bmul
  2986  042D  3E91               	addlw	(low ((_SWs| (0+256)+1)))& (0+255)
  2987  042E  0084               	movwf	4
  2988  042F  1783               	bsf	3,7	;select IRP bank3
  2989  0430  0800               	movf	0,w
  2990  0431  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  2991  0432  3005               	movlw	5
  2992  0433  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  2993  0434  0AA4               	incf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128),f
  2994  0435  00A0               	movwf	___bmul@multiplicand^(0+128)
  2995  0436  0834               	movf	SWs_INIT@SW_Counter^(0+128),w
  2996  0437  245D  120A  118A   	fcall	___bmul
  2997  043A  3E90               	addlw	(low (_SWs| (0+256)))& (0+255)
  2998  043B  0084               	movwf	4
  2999  043C  1783               	bsf	3,7	;select IRP bank3
  3000  043D  0800               	movf	0,w
  3001  043E  2525  120A  118A   	fcall	_GPIO_PIN_INIT
  3002                           
  3003                           ;SW.c: 136:     SWs[SW_Counter].SW_STATE = SW_RELEASED ;
  3004  0441  3005               	movlw	5
  3005  0442  00A0               	movwf	___bmul@multiplicand^(0+128)
  3006  0443  0834               	movf	SWs_INIT@SW_Counter^(0+128),w
  3007  0444  245D  120A  118A   	fcall	___bmul
  3008  0447  3E94               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  3009  0448  0084               	movwf	4
  3010  0449  3002               	movlw	2
  3011  044A  1783               	bsf	3,7	;select IRP bank3
  3012  044B  0080               	movwf	0
  3013                           
  3014                           ;SW.c: 138:   for (Samples_Counter =0 ; Samples_Counter < 2 ; Samples_Counter++)
  3015  044C  01B3               	clrf	SWs_INIT@Samples_Counter^(0+128)
  3016  044D                     l6184:	
  3017                           
  3018                           ;SW.c: 139:   {;SW.c: 140:    SWs->SW_SAMPLES[Samples_Counter] = (1) ;
  3019  044D  0833               	movf	SWs_INIT@Samples_Counter^(0+128),w
  3020  044E  3E92               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  3021  044F  0084               	movwf	4
  3022  0450  3002               	movlw	2
  3023  0451  0180               	clrf	0
  3024  0452  0A80               	incf	0,f
  3025                           
  3026                           ;SW.c: 141:   }
  3027  0453  0AB3               	incf	SWs_INIT@Samples_Counter^(0+128),f
  3028  0454  0233               	subwf	SWs_INIT@Samples_Counter^(0+128),w
  3029  0455  1C03               	skipc
  3030  0456  2C4D               	goto	l6184
  3031  0457  3004               	movlw	4
  3032                           
  3033                           ;SW.c: 142:  }
  3034  0458  0AB4               	incf	SWs_INIT@SW_Counter^(0+128),f
  3035  0459  0234               	subwf	SWs_INIT@SW_Counter^(0+128),w
  3036  045A  1803               	btfsc	3,0
  3037  045B  0008               	return
  3038  045C  2C27               	goto	l6176
  3039  045D                     __end_of_SWs_INIT:	
  3040  045D                     __ptext5:	
  3041 ;; *************** function ___bmul *****************
  3042 ;; Defined at:
  3043 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  multiplier      1    wreg     unsigned char 
  3046 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  multiplier      1    2[BANK1 ] unsigned char 
  3049 ;;  product         1    1[BANK1 ] unsigned char 
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  1    wreg      unsigned char 
  3052 ;; Registers used:
  3053 ;;		wreg, status,2, status,0
  3054 ;; Tracked objects:
  3055 ;;		On entry : 300/100
  3056 ;;		On exit  : 300/100
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3059 ;;      Params:         0       0       1       0       0
  3060 ;;      Locals:         0       0       2       0       0
  3061 ;;      Temps:          0       0       0       0       0
  3062 ;;      Totals:         0       0       3       0       0
  3063 ;;Total ram usage:        3 bytes
  3064 ;; Hardware stack levels used:    1
  3065 ;; Hardware stack levels required when called:   10
  3066 ;; This function calls:
  3067 ;;		Nothing
  3068 ;; This function is called by:
  3069 ;;		_SWs_UPDATE
  3070 ;;		_SW_GET_STATE
  3071 ;;		_SWs_INIT
  3072 ;;		_LED_SET_STATE
  3073 ;;		_INCREMENT_THIS
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           
  3078                           ;psect for function ___bmul
  3079  045D                     ___bmul:	
  3080                           
  3081                           ;incstack = 0
  3082 ;; hardware stack exceeded
  3083                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3084                           ;___bmul@multiplier stored from wreg
  3085  045D  00A2               	movwf	___bmul@multiplier^(0+128)
  3086  045E  01A1               	clrf	___bmul@product^(0+128)
  3087  045F  0820               	movf	___bmul@multiplicand^(0+128),w
  3088  0460  1822               	btfsc	___bmul@multiplier^(0+128),0
  3089  0461  07A1               	addwf	___bmul@product^(0+128),f
  3090  0462  1003               	clrc
  3091  0463  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3092  0464  0820               	movf	___bmul@multiplicand^(0+128),w
  3093  0465  18A2               	btfsc	___bmul@multiplier^(0+128),1
  3094  0466  07A1               	addwf	___bmul@product^(0+128),f
  3095  0467  1003               	clrc
  3096  0468  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3097  0469  0820               	movf	___bmul@multiplicand^(0+128),w
  3098  046A  1922               	btfsc	___bmul@multiplier^(0+128),2
  3099  046B  07A1               	addwf	___bmul@product^(0+128),f
  3100  046C  1003               	clrc
  3101  046D  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3102  046E  0820               	movf	___bmul@multiplicand^(0+128),w
  3103  046F  19A2               	btfsc	___bmul@multiplier^(0+128),3
  3104  0470  07A1               	addwf	___bmul@product^(0+128),f
  3105  0471  1003               	clrc
  3106  0472  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3107  0473  0820               	movf	___bmul@multiplicand^(0+128),w
  3108  0474  1A22               	btfsc	___bmul@multiplier^(0+128),4
  3109  0475  07A1               	addwf	___bmul@product^(0+128),f
  3110  0476  1003               	clrc
  3111  0477  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3112  0478  0820               	movf	___bmul@multiplicand^(0+128),w
  3113  0479  1AA2               	btfsc	___bmul@multiplier^(0+128),5
  3114  047A  07A1               	addwf	___bmul@product^(0+128),f
  3115  047B  1003               	clrc
  3116  047C  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3117  047D  0820               	movf	___bmul@multiplicand^(0+128),w
  3118  047E  1B22               	btfsc	___bmul@multiplier^(0+128),6
  3119  047F  07A1               	addwf	___bmul@product^(0+128),f
  3120  0480  1003               	clrc
  3121  0481  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3122  0482  0820               	movf	___bmul@multiplicand^(0+128),w
  3123  0483  1BA2               	btfsc	___bmul@multiplier^(0+128),7
  3124  0484  07A1               	addwf	___bmul@product^(0+128),f
  3125  0485  0821               	movf	___bmul@product^(0+128),w
  3126  0486  0008               	return
  3127  0487                     __end_of___bmul:	
  3128  0487                     __ptext13:	
  3129 ;; *************** function _KEYPAD_INIT *****************
  3130 ;; Defined at:
  3131 ;;		line 26 in file "Keypad.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;		None
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  counter         1   18[BANK1 ] unsigned char 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      void 
  3138 ;; Registers used:
  3139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3140 ;; Tracked objects:
  3141 ;;		On entry : B00/900
  3142 ;;		On exit  : B00/B00
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3145 ;;      Params:         0       0       0       0       0
  3146 ;;      Locals:         0       0       1       0       0
  3147 ;;      Temps:          0       0       0       0       0
  3148 ;;      Totals:         0       0       1       0       0
  3149 ;;Total ram usage:        1 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:   11
  3152 ;; This function calls:
  3153 ;;		_GPIO_PIN_INIT
  3154 ;;		_GPIO_PIN_SET_STATE
  3155 ;; This function is called by:
  3156 ;;		_main
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           
  3161                           ;psect for function _KEYPAD_INIT
  3162  0487                     _KEYPAD_INIT:	
  3163                           
  3164                           ;Keypad.c: 28:     tbyte counter = 0 ;
  3165                           
  3166                           ;incstack = 0
  3167 ;; hardware stack exceeded
  3168                           ; Regs used in _KEYPAD_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3169  0487  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3170                           
  3171                           ;Keypad.c: 29:     for (counter = 0 ; counter <4 ; counter++ )
  3172  0488  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3173  0489                     l6206:	
  3174                           
  3175                           ;Keypad.c: 30:     {;Keypad.c: 31:         GPIO_PIN_INIT(KEYPAD_info.KEYPAD_COL_PORT , K
      +                          EYPAD_info.KEYPAD_COL_PIN[counter] , GPIO_PIN_IN);
  3176  0489  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3177  048A  3EAA               	addlw	(low ((_KEYPAD_info| (0+256)+6)))& (0+255)
  3178  048B  0084               	movwf	4
  3179  048C  1783               	bsf	3,7	;select IRP bank3
  3180  048D  0800               	movf	0,w
  3181  048E  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3182  048F  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3183  0490  0AA4               	incf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128),f
  3184  0491  1703               	bsf	3,6	;RP1=1, select bank3
  3185  0492  0825               	movf	(_KEYPAD_info^(0+384)+1),w
  3186  0493  2525  120A  118A   	fcall	_GPIO_PIN_INIT
  3187                           
  3188                           ;Keypad.c: 32:         GPIO_PIN_SET_STATE(KEYPAD_info.KEYPAD_COL_PORT , KEYPAD_info.KEYP
      +                          AD_COL_PIN[counter] , GPIO_PIN_OFF);
  3189  0496  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3190  0497  3EAA               	addlw	(low ((_KEYPAD_info| (0+256)+6)))& (0+255)
  3191  0498  0084               	movwf	4
  3192  0499  1783               	bsf	3,7	;select IRP bank3
  3193  049A  0800               	movf	0,w
  3194  049B  00A0               	movwf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3195  049C  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3196  049D  1703               	bsf	3,6	;RP1=1, select bank3
  3197  049E  0825               	movf	(_KEYPAD_info^(0+384)+1),w
  3198  049F  2596  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3199  04A2  3004               	movlw	4
  3200                           
  3201                           ;Keypad.c: 33:     }
  3202  04A3  0AB2               	incf	KEYPAD_INIT@counter^(0+128),f
  3203  04A4  0232               	subwf	KEYPAD_INIT@counter^(0+128),w
  3204  04A5  1C03               	skipc
  3205  04A6  2C89               	goto	l6206
  3206                           
  3207                           ;Keypad.c: 34:      for (counter = 0 ; counter <3 ; counter++ )
  3208  04A7  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3209  04A8                     l6218:	
  3210                           
  3211                           ;Keypad.c: 35:     {;Keypad.c: 36:         GPIO_PIN_INIT(KEYPAD_info.KEYPAD_ROW_RORT , K
      +                          EYPAD_info.KEYPAD_ROW_PIN[counter] , GPIO_PIN_OUT);
  3212  04A8  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3213  04A9  3EA6               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
  3214  04AA  0084               	movwf	4
  3215  04AB  1783               	bsf	3,7	;select IRP bank3
  3216  04AC  0800               	movf	0,w
  3217  04AD  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3218  04AE  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3219  04AF  1703               	bsf	3,6	;RP1=1, select bank3
  3220  04B0  0824               	movf	_KEYPAD_info^(0+384),w
  3221  04B1  2525  120A  118A   	fcall	_GPIO_PIN_INIT
  3222                           
  3223                           ;Keypad.c: 37:         GPIO_PIN_SET_STATE(KEYPAD_info.KEYPAD_ROW_RORT , KEYPAD_info.KEYP
      +                          AD_ROW_PIN[counter] , (1));
  3224  04B4  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3225  04B5  3EA6               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
  3226  04B6  0084               	movwf	4
  3227  04B7  1783               	bsf	3,7	;select IRP bank3
  3228  04B8  0800               	movf	0,w
  3229  04B9  00A0               	movwf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3230  04BA  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3231  04BB  0AA1               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),f
  3232  04BC  1703               	bsf	3,6	;RP1=1, select bank3
  3233  04BD  0824               	movf	_KEYPAD_info^(0+384),w
  3234  04BE  2596  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3235  04C1  3003               	movlw	3
  3236                           
  3237                           ;Keypad.c: 38:     }
  3238  04C2  0AB2               	incf	KEYPAD_INIT@counter^(0+128),f
  3239  04C3  0232               	subwf	KEYPAD_INIT@counter^(0+128),w
  3240  04C4  1C03               	skipc
  3241  04C5  2CA8               	goto	l6218
  3242                           
  3243                           ;Keypad.c: 39:     for (counter = 0 ; counter <3 ; counter++ )
  3244  04C6  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3245  04C7                     l6230:	
  3246                           
  3247                           ;Keypad.c: 40:     {;Keypad.c: 41:         keypad_sapmles[counter] = NO_KEY;
  3248  04C7  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3249  04C8  3EBB               	addlw	(low (_keypad_sapmles| (0+256)))& (0+255)
  3250  04C9  0084               	movwf	4
  3251  04CA  300C               	movlw	12
  3252  04CB  1783               	bsf	3,7	;select IRP bank3
  3253  04CC  0080               	movwf	0
  3254  04CD  3003               	movlw	3
  3255                           
  3256                           ;Keypad.c: 42:     }
  3257  04CE  0AB2               	incf	KEYPAD_INIT@counter^(0+128),f
  3258  04CF  0232               	subwf	KEYPAD_INIT@counter^(0+128),w
  3259  04D0  1C03               	skipc
  3260  04D1  2CC7               	goto	l6230
  3261                           
  3262                           ;Keypad.c: 43:  LAST_PRESSED_KEY.KEYPAD_NO = NO_KEY;
  3263  04D2  300C               	movlw	12
  3264  04D3  1703               	bsf	3,6	;RP1=1, select bank3
  3265  04D4  00C2               	movwf	_LAST_PRESSED_KEY^(0+384)
  3266  04D5  0008               	return
  3267  04D6                     __end_of_KEYPAD_INIT:	
  3268  04D6                     __ptext10:	
  3269 ;; *************** function _LCD_INIT *****************
  3270 ;; Defined at:
  3271 ;;		line 26 in file "LCD.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;		None
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;		None
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  1    wreg      void 
  3278 ;; Registers used:
  3279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3280 ;; Tracked objects:
  3281 ;;		On entry : 300/300
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3285 ;;      Params:         0       0       0       0       0
  3286 ;;      Locals:         0       0       0       0       0
  3287 ;;      Temps:          0       0       1       0       0
  3288 ;;      Totals:         0       0       1       0       0
  3289 ;;Total ram usage:        1 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; Hardware stack levels required when called:   12
  3292 ;; This function calls:
  3293 ;;		_GPIO_PIN_INIT
  3294 ;;		_GPIO_PIN_SET_STATE
  3295 ;;		_LCD_SND_COMMAND
  3296 ;; This function is called by:
  3297 ;;		_main
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           
  3302                           ;psect for function _LCD_INIT
  3303  04D6                     _LCD_INIT:	
  3304                           
  3305                           ;LCD.c: 28:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_4 , GPIO_PORT_OUT);
  3306                           
  3307                           ;incstack = 0
  3308 ;; hardware stack exceeded
  3309                           ; Regs used in _LCD_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3310  04D6  3004               	movlw	4
  3311  04D7  1303               	bcf	3,6	;RP1=0, select bank1
  3312  04D8  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3313  04D9  3008               	movlw	8
  3314  04DA  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3315  04DB  2525  120A  118A   	fcall	_GPIO_PIN_INIT
  3316                           
  3317                           ;LCD.c: 29:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_5 , GPIO_PORT_OUT);
  3318  04DE  3005               	movlw	5
  3319  04DF  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3320  04E0  3008               	movlw	8
  3321  04E1  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3322  04E2  2525  120A  118A   	fcall	_GPIO_PIN_INIT
  3323                           
  3324                           ;LCD.c: 30:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_6 , GPIO_PORT_OUT);
  3325  04E5  3006               	movlw	6
  3326  04E6  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3327  04E7  3008               	movlw	8
  3328  04E8  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3329  04E9  2525  120A  118A   	fcall	_GPIO_PIN_INIT
  3330                           
  3331                           ;LCD.c: 31:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_7 , GPIO_PORT_OUT);
  3332  04EC  3007               	movlw	7
  3333  04ED  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3334  04EE  3008               	movlw	8
  3335  04EF  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3336  04F0  2525  120A  118A   	fcall	_GPIO_PIN_INIT
  3337                           
  3338                           ;LCD.c: 35:         GPIO_PIN_INIT((0x0009) , 2 , GPIO_PIN_OUT );
  3339  04F3  3002               	movlw	2
  3340  04F4  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3341  04F5  3009               	movlw	9
  3342  04F6  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3343  04F7  2525  120A  118A   	fcall	_GPIO_PIN_INIT
  3344  04FA  3009               	movlw	9
  3345                           
  3346                           ;LCD.c: 36:         GPIO_PIN_INIT((0x0009) , 1 , GPIO_PIN_OUT );
  3347  04FB  01A3               	clrf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3348  04FC  0AA3               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),f
  3349  04FD  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3350  04FE  2525  120A  118A   	fcall	_GPIO_PIN_INIT
  3351  0501  3009               	movlw	9
  3352                           
  3353                           ;LCD.c: 37:         GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
  3354  0502  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3355  0503  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3356  0504  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3357  0505  2596  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3358                           
  3359                           ;LCD.c: 39:         _delay((unsigned long)((2)*(((8 * 1000) * 1000)/4000.0)));
  3360  0508  2D09               	nop2	;2 cycle nop
  3361                           
  3362                           ;LCD.c: 40:         LCD_SND_COMMAND(0x33);
  3363  0509  3033               	movlw	51
  3364  050A  255E  120A  118A   	fcall	_LCD_SND_COMMAND
  3365                           
  3366                           ;LCD.c: 41:         LCD_SND_COMMAND(0x32);
  3367  050D  3032               	movlw	50
  3368  050E  255E  120A  118A   	fcall	_LCD_SND_COMMAND
  3369                           
  3370                           ;LCD.c: 44:   LCD_SND_COMMAND(0x28);
  3371  0511  3028               	movlw	40
  3372  0512  255E  120A  118A   	fcall	_LCD_SND_COMMAND
  3373                           
  3374                           ;LCD.c: 49:     LCD_SND_COMMAND(0x0c);
  3375  0515  300C               	movlw	12
  3376  0516  255E  120A  118A   	fcall	_LCD_SND_COMMAND
  3377                           
  3378                           ;LCD.c: 50:     LCD_SND_COMMAND(0x01);
  3379  0519  3001               	movlw	1
  3380  051A  255E  120A  118A   	fcall	_LCD_SND_COMMAND
  3381                           
  3382                           ;LCD.c: 51:     _delay((unsigned long)((10)*(((8 * 1000) * 1000)/4000.0)));
  3383  051D  3002               	movlw	2
  3384  051E  1683               	bsf	3,5	;RP0=1, select bank1
  3385  051F  1303               	bcf	3,6	;RP1=0, select bank1
  3386  0520  00B2               	movwf	??_LCD_INIT^(0+128)
  3387  0521                     u6717:	
  3388  0521  0BB2               	decfsz	??_LCD_INIT^(0+128),f
  3389  0522  2D21               	goto	u6717
  3390  0523  2D24               	nop2
  3391  0524  0008               	return
  3392  0525                     __end_of_LCD_INIT:	
  3393  0525                     __ptext29:	
  3394 ;; *************** function _GPIO_PIN_INIT *****************
  3395 ;; Defined at:
  3396 ;;		line 10 in file "GPIO.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;  GPIO_PORTx      1    wreg     unsigned char 
  3399 ;;  GPIO_PIN_NO     1    3[BANK1 ] enum E858
  3400 ;;  GPIO_DIRECTI    1    4[BANK1 ] enum E868
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  GPIO_PORTx      1   17[BANK1 ] unsigned char 
  3403 ;;  ret             1    0        enum E852
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      enum E852
  3406 ;; Registers used:
  3407 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3408 ;; Tracked objects:
  3409 ;;		On entry : 100/900
  3410 ;;		On exit  : 300/100
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3413 ;;      Params:         0       0       2       0       0
  3414 ;;      Locals:         0       0       2       0       0
  3415 ;;      Temps:          0       0      11       0       0
  3416 ;;      Totals:         0       0      15       0       0
  3417 ;;Total ram usage:       15 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:   10
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_CCP1_INIT
  3424 ;;		_CCP2_INIT
  3425 ;;		_SWs_INIT
  3426 ;;		_LCD_INIT
  3427 ;;		_KEYPAD_INIT
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           
  3432                           ;psect for function _GPIO_PIN_INIT
  3433  0525                     _GPIO_PIN_INIT:	
  3434                           
  3435                           ;incstack = 0
  3436 ;; hardware stack exceeded
  3437                           ; Regs used in _GPIO_PIN_INIT: [wreg-fsr0h+status,2+status,0]
  3438                           ;GPIO_PIN_INIT@GPIO_PORTx stored from wreg
  3439  0525  1303               	bcf	3,6	;RP1=0, select bank1
  3440  0526  00B1               	movwf	GPIO_PIN_INIT@GPIO_PORTx^(0+128)
  3441                           
  3442                           ;GPIO.c: 13:   ( ((*((volatile unsigned char* )( GPIO_PORTx + (0x80) )))) = ((((*((volat
      +                          ile unsigned char* )( GPIO_PORTx + (0x80) )))) & (~(1<< GPIO_PIN_NO)) ) | (GPIO_DIRECTIO
      +                          N << GPIO_PIN_NO)) );
  3443  0527  0824               	movf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128),w
  3444  0528  00A5               	movwf	??_GPIO_PIN_INIT^(0+128)
  3445  0529  0A23               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),w
  3446  052A  2D2D               	goto	u4054
  3447  052B                     u4055:	
  3448  052B  1003               	clrc
  3449  052C  0DA5               	rlf	??_GPIO_PIN_INIT^(0+128),f
  3450  052D                     u4054:	
  3451  052D  3EFF               	addlw	-1
  3452  052E  1D03               	skipz
  3453  052F  2D2B               	goto	u4055
  3454  0530  0831               	movf	GPIO_PIN_INIT@GPIO_PORTx^(0+128),w
  3455  0531  00A6               	movwf	(??_GPIO_PIN_INIT+1)^(0+128)
  3456  0532  01A7               	clrf	((??_GPIO_PIN_INIT+1)^(0+128)+1)
  3457  0533  3E80               	addlw	128
  3458  0534  00A8               	movwf	(??_GPIO_PIN_INIT+3)^(0+128)
  3459  0535  0827               	movf	(??_GPIO_PIN_INIT+2)^(0+128),w
  3460  0536  1803               	skipnc
  3461  0537  3E01               	addlw	1
  3462  0538  00A9               	movwf	(??_GPIO_PIN_INIT+4)^(0+128)
  3463  0539  0828               	movf	(??_GPIO_PIN_INIT+3)^(0+128),w
  3464  053A  0084               	movwf	4
  3465  053B  1783               	bsf	3,7
  3466  053C  1C29               	btfss	(??_GPIO_PIN_INIT+4)^(0+128),0
  3467  053D  1383               	bcf	3,7
  3468  053E  3001               	movlw	1
  3469  053F  00AA               	movwf	(??_GPIO_PIN_INIT+5)^(0+128)
  3470  0540  0A23               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),w
  3471  0541  2D44               	goto	u4064
  3472  0542                     u4065:	
  3473  0542  1003               	clrc
  3474  0543  0DAA               	rlf	(??_GPIO_PIN_INIT+5)^(0+128),f
  3475  0544                     u4064:	
  3476  0544  3EFF               	addlw	-1
  3477  0545  1D03               	skipz
  3478  0546  2D42               	goto	u4065
  3479  0547  082A               	movf	(??_GPIO_PIN_INIT+5)^(0+128),w
  3480  0548  3AFF               	xorlw	255
  3481  0549  0500               	andwf	0,w
  3482  054A  0425               	iorwf	??_GPIO_PIN_INIT^(0+128),w
  3483  054B  00AB               	movwf	(??_GPIO_PIN_INIT+6)^(0+128)
  3484  054C  0831               	movf	GPIO_PIN_INIT@GPIO_PORTx^(0+128),w
  3485  054D  00AC               	movwf	(??_GPIO_PIN_INIT+7)^(0+128)
  3486  054E  01AD               	clrf	((??_GPIO_PIN_INIT+7)^(0+128)+1)
  3487  054F  3E80               	addlw	128
  3488  0550  00AE               	movwf	(??_GPIO_PIN_INIT+9)^(0+128)
  3489  0551  082D               	movf	(??_GPIO_PIN_INIT+8)^(0+128),w
  3490  0552  1803               	skipnc
  3491  0553  3E01               	addlw	1
  3492  0554  3E00               	addlw	0
  3493  0555  00AF               	movwf	(??_GPIO_PIN_INIT+10)^(0+128)
  3494  0556  082E               	movf	(??_GPIO_PIN_INIT+9)^(0+128),w
  3495  0557  0084               	movwf	4
  3496  0558  1783               	bsf	3,7
  3497  0559  1C2F               	btfss	(??_GPIO_PIN_INIT+10)^(0+128),0
  3498  055A  1383               	bcf	3,7
  3499  055B  082B               	movf	(??_GPIO_PIN_INIT+6)^(0+128),w
  3500  055C  0080               	movwf	0
  3501  055D  0008               	return
  3502  055E                     __end_of_GPIO_PIN_INIT:	
  3503  055E                     __ptext11:	
  3504 ;; *************** function _LCD_SND_COMMAND *****************
  3505 ;; Defined at:
  3506 ;;		line 154 in file "LCD.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;  command         1    wreg     unsigned char 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;  command         1   11[BANK1 ] unsigned char 
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/100
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3520 ;;      Params:         0       0       0       0       0
  3521 ;;      Locals:         0       0       1       0       0
  3522 ;;      Temps:          0       0       0       0       0
  3523 ;;      Totals:         0       0       1       0       0
  3524 ;;Total ram usage:        1 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:   11
  3527 ;; This function calls:
  3528 ;;		_GPIO_PIN_SET_STATE
  3529 ;;		_GPIO_PORT_SET_STATE
  3530 ;; This function is called by:
  3531 ;;		_LCD_INIT
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           
  3536                           ;psect for function _LCD_SND_COMMAND
  3537  055E                     _LCD_SND_COMMAND:	
  3538                           
  3539                           ;incstack = 0
  3540 ;; hardware stack exceeded
  3541                           ; Regs used in _LCD_SND_COMMAND: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3542                           ;LCD_SND_COMMAND@command stored from wreg
  3543  055E  1683               	bsf	3,5	;RP0=1, select bank1
  3544  055F  1303               	bcf	3,6	;RP1=0, select bank1
  3545  0560  00AB               	movwf	LCD_SND_COMMAND@command^(0+128)
  3546                           
  3547                           ;LCD.c: 154: static void LCD_SND_COMMAND ( tbyte command);LCD.c: 155: {;LCD.c: 156:  GPI
      +                          O_PORT_SET_STATE((0x0008) , (command &0xff) );
  3548  0561  00A0               	movwf	GPIO_PORT_SET_STATE@GPIO_PORT_STATE^(0+128)
  3549  0562  3008               	movlw	8
  3550  0563  25C0  120A  118A   	fcall	_GPIO_PORT_SET_STATE
  3551                           
  3552                           ;LCD.c: 157:  GPIO_PIN_SET_STATE((0x0009) , 2 , GPIO_PIN_OFF);
  3553  0566  3002               	movlw	2
  3554  0567  00A0               	movwf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3555  0568  3009               	movlw	9
  3556  0569  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3557  056A  2596  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3558  056D  3009               	movlw	9
  3559                           
  3560                           ;LCD.c: 158:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
  3561  056E  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3562  056F  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3563  0570  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3564  0571  0AA1               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),f
  3565  0572  2596  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3566                           
  3567                           ;LCD.c: 159:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
  3568                           ;LCD.c: 160:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
  3569  0575  1683               	bsf	3,5	;RP0=1, select bank1
  3570  0576  1303               	bcf	3,6	;RP1=0, select bank1
  3571  0577  3009               	movlw	9
  3572  0578  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3573  0579  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3574  057A  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3575  057B  2596  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3576                           
  3577                           ;LCD.c: 161:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
  3578                           ;LCD.c: 162:  GPIO_PORT_SET_STATE((0x0008) , (command <<4) );
  3579  057E  1683               	bsf	3,5	;RP0=1, select bank1
  3580  057F  1303               	bcf	3,6	;RP1=0, select bank1
  3581  0580  0E2B               	swapf	LCD_SND_COMMAND@command^(0+128),w
  3582  0581  39F0               	andlw	240
  3583  0582  00A0               	movwf	GPIO_PORT_SET_STATE@GPIO_PORT_STATE^(0+128)
  3584  0583  3008               	movlw	8
  3585  0584  25C0  120A  118A   	fcall	_GPIO_PORT_SET_STATE
  3586  0587  3009               	movlw	9
  3587                           
  3588                           ;LCD.c: 163:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
  3589  0588  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3590  0589  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3591  058A  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3592  058B  0AA1               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),f
  3593  058C  2596  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3594                           
  3595                           ;LCD.c: 164:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
  3596                           ;LCD.c: 165:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
  3597  058F  1683               	bsf	3,5	;RP0=1, select bank1
  3598  0590  1303               	bcf	3,6	;RP1=0, select bank1
  3599  0591  3009               	movlw	9
  3600  0592  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3601  0593  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3602  0594  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3603  0595  2D96               	ljmp	_GPIO_PIN_SET_STATE
  3604  0596                     __end_of_LCD_SND_COMMAND:	
  3605                           ;LCD.c: 166:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
  3606                           
  3607  0596                     __ptext14:	
  3608 ;; *************** function _GPIO_PIN_SET_STATE *****************
  3609 ;; Defined at:
  3610 ;;		line 23 in file "GPIO.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  GPIO_PORTx      1    wreg     unsigned char 
  3613 ;;  GPIO_PIN_NO     1    0[BANK1 ] enum E858
  3614 ;;  GPIO_PIN_STA    1    1[BANK1 ] enum E874
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  GPIO_PORTx      1   10[BANK1 ] unsigned char 
  3617 ;;  ret             1    0        enum E852
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      enum E852
  3620 ;; Registers used:
  3621 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3622 ;; Tracked objects:
  3623 ;;		On entry : 100/100
  3624 ;;		On exit  : 300/100
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3627 ;;      Params:         0       0       2       0       0
  3628 ;;      Locals:         0       0       2       0       0
  3629 ;;      Temps:          0       0       7       0       0
  3630 ;;      Totals:         0       0      11       0       0
  3631 ;;Total ram usage:       11 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:   10
  3634 ;; This function calls:
  3635 ;;		Nothing
  3636 ;; This function is called by:
  3637 ;;		_LCD_INIT
  3638 ;;		_LCD_SND_COMMAND
  3639 ;;		_KEYPAD_INIT
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           
  3644                           ;psect for function _GPIO_PIN_SET_STATE
  3645  0596                     _GPIO_PIN_SET_STATE:	
  3646                           
  3647                           ;incstack = 0
  3648 ;; hardware stack exceeded
  3649                           ; Regs used in _GPIO_PIN_SET_STATE: [wreg-fsr0h+status,2+status,0]
  3650                           ;GPIO_PIN_SET_STATE@GPIO_PORTx stored from wreg
  3651  0596  1303               	bcf	3,6	;RP1=0, select bank1
  3652  0597  00AA               	movwf	GPIO_PIN_SET_STATE@GPIO_PORTx^(0+128)
  3653                           
  3654                           ;GPIO.c: 26:   ( (*((volatile unsigned char* )( GPIO_PORTx + (0x00) ))) = (((*((volatile
      +                           unsigned char* )( GPIO_PORTx + (0x00) ))) & (~(1<< GPIO_PIN_NO)) ) | (GPIO_PIN_STATE <<
      +                           GPIO_PIN_NO)) );
  3655  0598  0821               	movf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),w
  3656  0599  00A2               	movwf	??_GPIO_PIN_SET_STATE^(0+128)
  3657  059A  0A20               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),w
  3658  059B  2D9E               	goto	u4074
  3659  059C                     u4075:	
  3660  059C  1003               	clrc
  3661  059D  0DA2               	rlf	??_GPIO_PIN_SET_STATE^(0+128),f
  3662  059E                     u4074:	
  3663  059E  3EFF               	addlw	-1
  3664  059F  1D03               	skipz
  3665  05A0  2D9C               	goto	u4075
  3666  05A1  082A               	movf	GPIO_PIN_SET_STATE@GPIO_PORTx^(0+128),w
  3667  05A2  00A3               	movwf	(??_GPIO_PIN_SET_STATE+1)^(0+128)
  3668  05A3  01A4               	clrf	((??_GPIO_PIN_SET_STATE+1)^(0+128)+1)
  3669  05A4  0084               	movwf	4
  3670  05A5  1783               	bsf	3,7
  3671  05A6  1C24               	btfss	(??_GPIO_PIN_SET_STATE+2)^(0+128),0
  3672  05A7  1383               	bcf	3,7
  3673  05A8  3001               	movlw	1
  3674  05A9  00A5               	movwf	(??_GPIO_PIN_SET_STATE+3)^(0+128)
  3675  05AA  0A20               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),w
  3676  05AB  2DAE               	goto	u4084
  3677  05AC                     u4085:	
  3678  05AC  1003               	clrc
  3679  05AD  0DA5               	rlf	(??_GPIO_PIN_SET_STATE+3)^(0+128),f
  3680  05AE                     u4084:	
  3681  05AE  3EFF               	addlw	-1
  3682  05AF  1D03               	skipz
  3683  05B0  2DAC               	goto	u4085
  3684  05B1  0825               	movf	(??_GPIO_PIN_SET_STATE+3)^(0+128),w
  3685  05B2  3AFF               	xorlw	255
  3686  05B3  0500               	andwf	0,w
  3687  05B4  0422               	iorwf	??_GPIO_PIN_SET_STATE^(0+128),w
  3688  05B5  00A6               	movwf	(??_GPIO_PIN_SET_STATE+4)^(0+128)
  3689  05B6  082A               	movf	GPIO_PIN_SET_STATE@GPIO_PORTx^(0+128),w
  3690  05B7  00A7               	movwf	(??_GPIO_PIN_SET_STATE+5)^(0+128)
  3691  05B8  01A8               	clrf	((??_GPIO_PIN_SET_STATE+5)^(0+128)+1)
  3692  05B9  0084               	movwf	4
  3693  05BA  1783               	bsf	3,7
  3694  05BB  1C28               	btfss	(??_GPIO_PIN_SET_STATE+6)^(0+128),0
  3695  05BC  1383               	bcf	3,7
  3696  05BD  0826               	movf	(??_GPIO_PIN_SET_STATE+4)^(0+128),w
  3697  05BE  0080               	movwf	0
  3698  05BF  0008               	return
  3699  05C0                     __end_of_GPIO_PIN_SET_STATE:	
  3700  05C0                     __ptext12:	
  3701 ;; *************** function _GPIO_PORT_SET_STATE *****************
  3702 ;; Defined at:
  3703 ;;		line 30 in file "GPIO.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  GPIO_PORTx      1    wreg     unsigned char 
  3706 ;;  GPIO_PORT_ST    1    0[BANK1 ] enum E874
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;  GPIO_PORTx      1    4[BANK1 ] unsigned char 
  3709 ;;  ret             1    0        enum E852
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      enum E852
  3712 ;; Registers used:
  3713 ;;		wreg, fsr0l, fsr0h, status,2
  3714 ;; Tracked objects:
  3715 ;;		On entry : 300/100
  3716 ;;		On exit  : 300/100
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3719 ;;      Params:         0       0       1       0       0
  3720 ;;      Locals:         0       0       2       0       0
  3721 ;;      Temps:          0       0       2       0       0
  3722 ;;      Totals:         0       0       5       0       0
  3723 ;;Total ram usage:        5 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:   10
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_LCD_SND_COMMAND
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           
  3734                           ;psect for function _GPIO_PORT_SET_STATE
  3735  05C0                     _GPIO_PORT_SET_STATE:	
  3736                           
  3737                           ;incstack = 0
  3738 ;; hardware stack exceeded
  3739                           ; Regs used in _GPIO_PORT_SET_STATE: [wreg-fsr0h+status,2]
  3740                           ;GPIO_PORT_SET_STATE@GPIO_PORTx stored from wreg
  3741  05C0  00A4               	movwf	GPIO_PORT_SET_STATE@GPIO_PORTx^(0+128)
  3742                           
  3743                           ;GPIO.c: 33:   (*((volatile unsigned char* )( GPIO_PORTx + (0x00) ))) = GPIO_PORT_STATE 
      +                          ;
  3744  05C1  00A1               	movwf	??_GPIO_PORT_SET_STATE^(0+128)
  3745  05C2  01A2               	clrf	(??_GPIO_PORT_SET_STATE^(0+128)+1)
  3746  05C3  0084               	movwf	4
  3747  05C4  1783               	bsf	3,7
  3748  05C5  1C22               	btfss	(??_GPIO_PORT_SET_STATE+1)^(0+128),0
  3749  05C6  1383               	bcf	3,7
  3750  05C7  0820               	movf	GPIO_PORT_SET_STATE@GPIO_PORT_STATE^(0+128),w
  3751  05C8  0080               	movwf	0
  3752  05C9  0008               	return
  3753  05CA                     __end_of_GPIO_PORT_SET_STATE:	
  3754                           
  3755                           	psect	text9
  3756  1020                     __ptext9:	
  3757 ;; *************** function _CCP1_INIT *****************
  3758 ;; Defined at:
  3759 ;;		line 24 in file "CCP.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;		None
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;		None
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  1    wreg      void 
  3766 ;; Registers used:
  3767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3768 ;; Tracked objects:
  3769 ;;		On entry : B00/0
  3770 ;;		On exit  : 300/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3773 ;;      Params:         0       0       0       0       0
  3774 ;;      Locals:         0       0       0       0       0
  3775 ;;      Temps:          0       0       0       0       0
  3776 ;;      Totals:         0       0       0       0       0
  3777 ;;Total ram usage:        0 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:   12
  3780 ;; This function calls:
  3781 ;;		_GPIO_PIN_INIT
  3782 ;;		_TIMER2_INIT
  3783 ;;		_TIMER2_START
  3784 ;; This function is called by:
  3785 ;;		_MOTOR_INIT
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           
  3790                           ;psect for function _CCP1_INIT
  3791  1020                     _CCP1_INIT:	
  3792                           
  3793                           ;CCP.c: 38:  {;CCP.c: 39:   TIMER2_INIT();
  3794                           
  3795                           ;incstack = 0
  3796 ;; hardware stack exceeded
  3797                           ; Regs used in _CCP1_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3798  1020  27E4  160A  118A   	fcall	_TIMER2_INIT
  3799                           
  3800                           ;CCP.c: 40:         TIMER2_START();
  3801  1023  27F2               	fcall	_TIMER2_START
  3802                           
  3803                           ;CCP.c: 41:   GPIO_PIN_INIT( (0x0007), GPIO_PIN_2, GPIO_PIN_OUT );
  3804  1024  3002               	movlw	2
  3805  1025  1683               	bsf	3,5	;RP0=1, select bank1
  3806  1026  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3807  1027  3007               	movlw	7
  3808  1028  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3809  1029  120A  118A  2525   	fcall	_GPIO_PIN_INIT
  3810                           
  3811                           ;CCP.c: 42:  };CCP.c: 54:  (CCP1CONbits.CCP1M = 12 ) ;
  3812  102C  1283               	bcf	3,5	;RP0=0, select bank0
  3813  102D  0817               	movf	23,w	;volatile
  3814  102E  39F0               	andlw	-16
  3815  102F  380C               	iorlw	12
  3816  1030  0097               	movwf	23	;volatile
  3817  1031  0008               	return
  3818  1032                     __end_of_CCP1_INIT:	
  3819  1032                     __ptext6:	
  3820 ;; *************** function _MOTOR_INIT *****************
  3821 ;; Defined at:
  3822 ;;		line 26 in file "MOTOR.c"
  3823 ;; Parameters:    Size  Location     Type
  3824 ;;		None
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;		None
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  1    wreg      void 
  3829 ;; Registers used:
  3830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3831 ;; Tracked objects:
  3832 ;;		On entry : B00/0
  3833 ;;		On exit  : 300/300
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3836 ;;      Params:         0       0       0       0       0
  3837 ;;      Locals:         0       0       0       0       0
  3838 ;;      Temps:          0       0       0       0       0
  3839 ;;      Totals:         0       0       0       0       0
  3840 ;;Total ram usage:        0 bytes
  3841 ;; Hardware stack levels used:    1
  3842 ;; Hardware stack levels required when called:   13
  3843 ;; This function calls:
  3844 ;;		_CCP1_INIT
  3845 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  3846 ;;		_CCP_PWM_PERIOD_LOAD
  3847 ;;		_MOTOR_SET_STATE
  3848 ;; This function is called by:
  3849 ;;		_main
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853                           
  3854                           ;psect for function _MOTOR_INIT
  3855  1032                     _MOTOR_INIT:	
  3856                           
  3857                           ;MOTOR.c: 28:     CCP1_INIT ( );
  3858                           
  3859                           ;incstack = 0
  3860 ;; hardware stack exceeded
  3861                           ; Regs used in _MOTOR_INIT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3862  1032  2020  160A  118A   	fcall	_CCP1_INIT
  3863                           
  3864                           ;MOTOR.c: 29:     CCP_PWM_PERIOD_LOAD( 20 );
  3865  1035  3014               	movlw	20
  3866  1036  1683               	bsf	3,5	;RP0=1, select bank3
  3867  1037  1703               	bsf	3,6	;RP1=1, select bank3
  3868  1038  00DB               	movwf	CCP_PWM_PERIOD_LOAD@PERIOD^(0+384)
  3869  1039  01DC               	clrf	(CCP_PWM_PERIOD_LOAD@PERIOD+1)^(0+384)
  3870  103A  205C  160A  118A   	fcall	_CCP_PWM_PERIOD_LOAD
  3871                           
  3872                           ;MOTOR.c: 30:     CCP1_PWM_DUTY_CYCLE_LOAD(0);
  3873  103D  1703               	bsf	3,6	;RP1=1, select bank3
  3874  103E  01DB               	clrf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384)
  3875  103F  01DC               	clrf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384)
  3876  1040  227B  160A  118A   	fcall	_CCP1_PWM_DUTY_CYCLE_LOAD
  3877                           
  3878                           ;MOTOR.c: 31:     MOTOR_SET_STATE(0);
  3879  1043  3000               	movlw	0
  3880  1044  27FB               	fcall	_MOTOR_SET_STATE
  3881                           
  3882                           ;MOTOR.c: 32:     current_angle = 0 ;
  3883  1045  01CC               	clrf	_current_angle^(0+384)
  3884  1046  0008               	return
  3885  1047                     __end_of_MOTOR_INIT:	
  3886  1047                     __ptext15:	
  3887 ;; *************** function _HEATER_INIT *****************
  3888 ;; Defined at:
  3889 ;;		line 26 in file "HEATER.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;		None
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;		None
  3894 ;; Return value:  Size  Location     Type
  3895 ;;                  1    wreg      void 
  3896 ;; Registers used:
  3897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3898 ;; Tracked objects:
  3899 ;;		On entry : 300/300
  3900 ;;		On exit  : 300/300
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3903 ;;      Params:         0       0       0       0       0
  3904 ;;      Locals:         0       0       0       0       0
  3905 ;;      Temps:          0       0       0       0       0
  3906 ;;      Totals:         0       0       0       0       0
  3907 ;;Total ram usage:        0 bytes
  3908 ;; Hardware stack levels used:    1
  3909 ;; Hardware stack levels required when called:   13
  3910 ;; This function calls:
  3911 ;;		_CCP2_INIT
  3912 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  3913 ;;		_CCP_PWM_PERIOD_LOAD
  3914 ;;		_HEATER_SET_STATE
  3915 ;; This function is called by:
  3916 ;;		_main
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           
  3921                           ;psect for function _HEATER_INIT
  3922  1047                     _HEATER_INIT:	
  3923                           
  3924                           ;HEATER.c: 28:     CCP2_INIT ( );
  3925                           
  3926                           ;incstack = 0
  3927 ;; hardware stack exceeded
  3928                           ; Regs used in _HEATER_INIT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3929  1047  27D2  160A  118A   	fcall	_CCP2_INIT
  3930                           
  3931                           ;HEATER.c: 29:     CCP_PWM_PERIOD_LOAD( 20 );
  3932  104A  3014               	movlw	20
  3933  104B  1683               	bsf	3,5	;RP0=1, select bank3
  3934  104C  1703               	bsf	3,6	;RP1=1, select bank3
  3935  104D  00DB               	movwf	CCP_PWM_PERIOD_LOAD@PERIOD^(0+384)
  3936  104E  01DC               	clrf	(CCP_PWM_PERIOD_LOAD@PERIOD+1)^(0+384)
  3937  104F  205C  160A  118A   	fcall	_CCP_PWM_PERIOD_LOAD
  3938                           
  3939                           ;HEATER.c: 30:     CCP2_PWM_DUTY_CYCLE_LOAD(0);
  3940  1052  1703               	bsf	3,6	;RP1=1, select bank3
  3941  1053  01DB               	clrf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384)
  3942  1054  01DC               	clrf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384)
  3943  1055  2306  160A  118A   	fcall	_CCP2_PWM_DUTY_CYCLE_LOAD
  3944                           
  3945                           ;HEATER.c: 31:     HEATER_SET_STATE(0);
  3946  1058  3000               	movlw	0
  3947  1059  27F6               	fcall	_HEATER_SET_STATE
  3948                           
  3949                           ;HEATER.c: 32:     current_angle = 0 ;
  3950  105A  01CB               	clrf	HEATER@current_angle^(0+384)
  3951  105B  0008               	return
  3952  105C                     __end_of_HEATER_INIT:	
  3953  105C                     __ptext17:	
  3954 ;; *************** function _CCP_PWM_PERIOD_LOAD *****************
  3955 ;; Defined at:
  3956 ;;		line 178 in file "CCP.c"
  3957 ;; Parameters:    Size  Location     Type
  3958 ;;  PERIOD          2   14[BANK3 ] unsigned int 
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;  LOAD_VALUE      2   17[BANK3 ] unsigned int 
  3961 ;;  ret             1    0        enum E852
  3962 ;; Return value:  Size  Location     Type
  3963 ;;                  1    wreg      enum E852
  3964 ;; Registers used:
  3965 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3966 ;; Tracked objects:
  3967 ;;		On entry : 300/300
  3968 ;;		On exit  : 300/100
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3971 ;;      Params:         0       0       0       2       0
  3972 ;;      Locals:         0       0       0       3       0
  3973 ;;      Temps:          0       0       0       0       0
  3974 ;;      Totals:         0       0       0       5       0
  3975 ;;Total ram usage:        5 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:   12
  3978 ;; This function calls:
  3979 ;;		___fladd
  3980 ;;		___flmul
  3981 ;;		___fltol
  3982 ;;		___xxtofl
  3983 ;; This function is called by:
  3984 ;;		_MOTOR_INIT
  3985 ;;		_HEATER_INIT
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           
  3990                           ;psect for function _CCP_PWM_PERIOD_LOAD
  3991  105C                     _CCP_PWM_PERIOD_LOAD:	
  3992                           
  3993                           ;CCP.c: 181:     tPWM_CYCLE LOAD_VALUE = ((PERIOD * ((double) (8 * 1000) / ( 4 * 256 ) )
      +                          )-1);
  3994                           
  3995                           ;incstack = 0
  3996 ;; hardware stack exceeded
  3997                           ; Regs used in _CCP_PWM_PERIOD_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3998  105C  085B               	movf	CCP_PWM_PERIOD_LOAD@PERIOD^(0+384),w
  3999  105D  1303               	bcf	3,6	;RP1=0, select bank1
  4000  105E  00A0               	movwf	___xxtofl@val^(0+128)
  4001  105F  1703               	bsf	3,6	;RP1=1, select bank3
  4002  1060  085C               	movf	(CCP_PWM_PERIOD_LOAD@PERIOD+1)^(0+384),w
  4003  1061  1303               	bcf	3,6	;RP1=0, select bank1
  4004  1062  00A1               	movwf	(___xxtofl@val^(0+128)+1)
  4005  1063  3000               	movlw	0
  4006  1064  01A2               	clrf	(___xxtofl@val^(0+128)+2)
  4007  1065  01A3               	clrf	(___xxtofl@val^(0+128)+3)
  4008  1066  25F0  160A  118A   	fcall	___xxtofl
  4009  1069  0823               	movf	(?___xxtofl+3)^(0+128),w
  4010  106A  00CE               	movwf	(___flmul@a+3)^(0+128)
  4011  106B  0822               	movf	(?___xxtofl+2)^(0+128),w
  4012  106C  00CD               	movwf	(___flmul@a+2)^(0+128)
  4013  106D  0821               	movf	(?___xxtofl+1)^(0+128),w
  4014  106E  00CC               	movwf	(___flmul@a+1)^(0+128)
  4015  106F  0820               	movf	?___xxtofl^(0+128),w
  4016  1070  00CB               	movwf	___flmul@a^(0+128)
  4017  1071  3040               	movlw	64
  4018  1072  00CA               	movwf	(___flmul@b+3)^(0+128)
  4019  1073  30FA               	movlw	250
  4020  1074  00C9               	movwf	(___flmul@b+2)^(0+128)
  4021  1075  01C8               	clrf	(___flmul@b+1)^(0+128)
  4022  1076  01C7               	clrf	___flmul@b^(0+128)
  4023  1077  2391  160A  118A   	fcall	___flmul
  4024  107A  084A               	movf	(?___flmul+3)^(0+128),w
  4025  107B  00E7               	movwf	(___fladd@a+3)^(0+128)
  4026  107C  0849               	movf	(?___flmul+2)^(0+128),w
  4027  107D  00E6               	movwf	(___fladd@a+2)^(0+128)
  4028  107E  0848               	movf	(?___flmul+1)^(0+128),w
  4029  107F  00E5               	movwf	(___fladd@a+1)^(0+128)
  4030  1080  0847               	movf	?___flmul^(0+128),w
  4031  1081  00E4               	movwf	___fladd@a^(0+128)
  4032  1082  30BF               	movlw	191
  4033  1083  00E3               	movwf	(___fladd@b+3)^(0+128)
  4034  1084  3080               	movlw	128
  4035  1085  00E2               	movwf	(___fladd@b+2)^(0+128)
  4036  1086  01E1               	clrf	(___fladd@b+1)^(0+128)
  4037  1087  01E0               	clrf	___fladd@b^(0+128)
  4038  1088  20A3  160A  118A   	fcall	___fladd
  4039  108B  1303               	bcf	3,6	;RP1=0, select bank1
  4040  108C  0863               	movf	(?___fladd+3)^(0+128),w
  4041  108D  1703               	bsf	3,6	;RP1=1, select bank3
  4042  108E  00D4               	movwf	(___fltol@f1+3)^(0+384)
  4043  108F  1303               	bcf	3,6	;RP1=0, select bank1
  4044  1090  0862               	movf	(?___fladd+2)^(0+128),w
  4045  1091  1703               	bsf	3,6	;RP1=1, select bank3
  4046  1092  00D3               	movwf	(___fltol@f1+2)^(0+384)
  4047  1093  1303               	bcf	3,6	;RP1=0, select bank1
  4048  1094  0861               	movf	(?___fladd+1)^(0+128),w
  4049  1095  1703               	bsf	3,6	;RP1=1, select bank3
  4050  1096  00D2               	movwf	(___fltol@f1+1)^(0+384)
  4051  1097  1303               	bcf	3,6	;RP1=0, select bank1
  4052  1098  0860               	movf	?___fladd^(0+128),w
  4053  1099  1703               	bsf	3,6	;RP1=1, select bank3
  4054  109A  00D1               	movwf	___fltol@f1^(0+384)
  4055  109B  2783               	fcall	___fltol
  4056  109C  0852               	movf	(?___fltol+1)^(0+384),w
  4057  109D  00DF               	movwf	(CCP_PWM_PERIOD_LOAD@LOAD_VALUE+1)^(0+384)
  4058  109E  0851               	movf	?___fltol^(0+384),w
  4059  109F  00DE               	movwf	CCP_PWM_PERIOD_LOAD@LOAD_VALUE^(0+384)
  4060                           
  4061                           ;CCP.c: 182:     (PR2 = LOAD_VALUE);
  4062  10A0  1303               	bcf	3,6	;RP1=0, select bank1
  4063  10A1  0092               	movwf	18	;volatile
  4064  10A2  0008               	return
  4065  10A3                     __end_of_CCP_PWM_PERIOD_LOAD:	
  4066  10A3                     __ptext18:	
  4067 ;; *************** function ___fladd *****************
  4068 ;; Defined at:
  4069 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  b               4   64[BANK1 ] enum E852
  4072 ;;  a               4   68[BANK1 ] enum E852
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  grs             1    3[BANK3 ] unsigned char 
  4075 ;;  bexp            1    2[BANK3 ] unsigned char 
  4076 ;;  aexp            1    1[BANK3 ] unsigned char 
  4077 ;;  signs           1    0[BANK3 ] unsigned char 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  4   64[BANK1 ] unsigned char 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0, btemp+1
  4082 ;; Tracked objects:
  4083 ;;		On entry : 300/100
  4084 ;;		On exit  : 100/100
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4087 ;;      Params:         0       0       8       0       0
  4088 ;;      Locals:         0       0       0       4       0
  4089 ;;      Temps:          0       0       8       0       0
  4090 ;;      Totals:         0       0      16       4       0
  4091 ;;Total ram usage:       20 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:   10
  4094 ;; This function calls:
  4095 ;;		Nothing
  4096 ;; This function is called by:
  4097 ;;		_CCP_PWM_PERIOD_LOAD
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           
  4102                           ;psect for function ___fladd
  4103  10A3                     ___fladd:	
  4104                           
  4105                           ;incstack = 0
  4106 ;; hardware stack exceeded
  4107                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
  4108  10A3  0863               	movf	(___fladd@b^(0+128)+3),w
  4109  10A4  1703               	bsf	3,6	;RP1=1, select bank3
  4110  10A5  00CD               	movwf	___fladd@signs^(0+384)
  4111  10A6  3080               	movlw	128
  4112  10A7  05CD               	andwf	___fladd@signs^(0+384),f
  4113  10A8  1303               	bcf	3,6	;RP1=0, select bank1
  4114  10A9  1003               	clrc
  4115  10AA  0D63               	rlf	(___fladd@b^(0+128)+3),w
  4116  10AB  1703               	bsf	3,6	;RP1=1, select bank3
  4117  10AC  00CF               	movwf	___fladd@bexp^(0+384)
  4118  10AD  1303               	bcf	3,6	;RP1=0, select bank1
  4119  10AE  1FE2               	btfss	(___fladd@b^(0+128)+2),7
  4120  10AF  28B2               	goto	l4980
  4121  10B0  1703               	bsf	3,6	;RP1=1, select bank3
  4122  10B1  144F               	bsf	___fladd@bexp^(0+384),0
  4123  10B2                     l4980:	
  4124  10B2  1703               	bsf	3,6	;RP1=1, select bank3
  4125  10B3  084F               	movf	___fladd@bexp^(0+384),w
  4126  10B4  1903               	btfsc	3,2
  4127  10B5  28C1               	goto	l1311
  4128  10B6  0F4F               	incfsz	___fladd@bexp^(0+384),w
  4129  10B7  28BD               	goto	l1312
  4130  10B8  1303               	bcf	3,6	;RP1=0, select bank1
  4131  10B9  01E0               	clrf	___fladd@b^(0+128)
  4132  10BA  01E1               	clrf	(___fladd@b+1)^(0+128)
  4133  10BB  01E2               	clrf	(___fladd@b+2)^(0+128)
  4134  10BC  01E3               	clrf	(___fladd@b+3)^(0+128)
  4135  10BD                     l1312:	
  4136  10BD  1303               	bcf	3,6	;RP1=0, select bank1
  4137  10BE  17E2               	bsf	(___fladd@b^(0+128)+2),7
  4138  10BF  01E3               	clrf	(___fladd@b^(0+128)+3)
  4139  10C0  28C6               	goto	l4988
  4140  10C1                     l1311:	
  4141  10C1  1303               	bcf	3,6	;RP1=0, select bank1
  4142  10C2  01E0               	clrf	___fladd@b^(0+128)
  4143  10C3  01E1               	clrf	(___fladd@b+1)^(0+128)
  4144  10C4  01E2               	clrf	(___fladd@b+2)^(0+128)
  4145  10C5  01E3               	clrf	(___fladd@b+3)^(0+128)
  4146  10C6                     l4988:	
  4147  10C6  0867               	movf	(___fladd@a^(0+128)+3),w
  4148  10C7  1703               	bsf	3,6	;RP1=1, select bank3
  4149  10C8  00CE               	movwf	___fladd@aexp^(0+384)
  4150  10C9  3080               	movlw	128
  4151  10CA  05CE               	andwf	___fladd@aexp^(0+384),f
  4152  10CB  084E               	movf	___fladd@aexp^(0+384),w
  4153  10CC  064D               	xorwf	___fladd@signs^(0+384),w
  4154  10CD  1D03               	btfss	3,2
  4155  10CE  174D               	bsf	___fladd@signs^(0+384),6
  4156  10CF  1303               	bcf	3,6	;RP1=0, select bank1
  4157  10D0  1003               	clrc
  4158  10D1  0D67               	rlf	(___fladd@a^(0+128)+3),w
  4159  10D2  1703               	bsf	3,6	;RP1=1, select bank3
  4160  10D3  00CE               	movwf	___fladd@aexp^(0+384)
  4161  10D4  1303               	bcf	3,6	;RP1=0, select bank1
  4162  10D5  1FE6               	btfss	(___fladd@a^(0+128)+2),7
  4163  10D6  28D9               	goto	l5002
  4164  10D7  1703               	bsf	3,6	;RP1=1, select bank3
  4165  10D8  144E               	bsf	___fladd@aexp^(0+384),0
  4166  10D9                     l5002:	
  4167  10D9  1703               	bsf	3,6	;RP1=1, select bank3
  4168  10DA  084E               	movf	___fladd@aexp^(0+384),w
  4169  10DB  1903               	btfsc	3,2
  4170  10DC  28E8               	goto	l1316
  4171  10DD  0F4E               	incfsz	___fladd@aexp^(0+384),w
  4172  10DE  28E4               	goto	l1317
  4173  10DF  1303               	bcf	3,6	;RP1=0, select bank1
  4174  10E0  01E4               	clrf	___fladd@a^(0+128)
  4175  10E1  01E5               	clrf	(___fladd@a+1)^(0+128)
  4176  10E2  01E6               	clrf	(___fladd@a+2)^(0+128)
  4177  10E3  01E7               	clrf	(___fladd@a+3)^(0+128)
  4178  10E4                     l1317:	
  4179  10E4  1303               	bcf	3,6	;RP1=0, select bank1
  4180  10E5  17E6               	bsf	(___fladd@a^(0+128)+2),7
  4181  10E6  01E7               	clrf	(___fladd@a^(0+128)+3)
  4182  10E7  28ED               	goto	l5010
  4183  10E8                     l1316:	
  4184  10E8  1303               	bcf	3,6	;RP1=0, select bank1
  4185  10E9  01E4               	clrf	___fladd@a^(0+128)
  4186  10EA  01E5               	clrf	(___fladd@a+1)^(0+128)
  4187  10EB  01E6               	clrf	(___fladd@a+2)^(0+128)
  4188  10EC  01E7               	clrf	(___fladd@a+3)^(0+128)
  4189  10ED                     l5010:	
  4190  10ED  1703               	bsf	3,6	;RP1=1, select bank3
  4191  10EE  084F               	movf	___fladd@bexp^(0+384),w
  4192  10EF  024E               	subwf	___fladd@aexp^(0+384),w
  4193  10F0  1803               	skipnc
  4194  10F1  2925               	goto	l5046
  4195  10F2  1F4D               	btfss	___fladd@signs^(0+384),6
  4196  10F3  28F6               	goto	l5016
  4197  10F4  3080               	movlw	128
  4198  10F5  06CD               	xorwf	___fladd@signs^(0+384),f
  4199  10F6                     l5016:	
  4200  10F6  084F               	movf	___fladd@bexp^(0+384),w
  4201  10F7  00D0               	movwf	___fladd@grs^(0+384)
  4202  10F8  084E               	movf	___fladd@aexp^(0+384),w
  4203  10F9  00CF               	movwf	___fladd@bexp^(0+384)
  4204  10FA  0850               	movf	___fladd@grs^(0+384),w
  4205  10FB  00CE               	movwf	___fladd@aexp^(0+384)
  4206  10FC  1303               	bcf	3,6	;RP1=0, select bank1
  4207  10FD  0860               	movf	___fladd@b^(0+128),w
  4208  10FE  1703               	bsf	3,6	;RP1=1, select bank3
  4209  10FF  00D0               	movwf	___fladd@grs^(0+384)
  4210  1100  1303               	bcf	3,6	;RP1=0, select bank1
  4211  1101  0864               	movf	___fladd@a^(0+128),w
  4212  1102  00E0               	movwf	___fladd@b^(0+128)
  4213  1103  1703               	bsf	3,6	;RP1=1, select bank3
  4214  1104  0850               	movf	___fladd@grs^(0+384),w
  4215  1105  1303               	bcf	3,6	;RP1=0, select bank1
  4216  1106  00E4               	movwf	___fladd@a^(0+128)
  4217  1107  0861               	movf	(___fladd@b^(0+128)+1),w
  4218  1108  1703               	bsf	3,6	;RP1=1, select bank3
  4219  1109  00D0               	movwf	___fladd@grs^(0+384)
  4220  110A  1303               	bcf	3,6	;RP1=0, select bank1
  4221  110B  0865               	movf	(___fladd@a^(0+128)+1),w
  4222  110C  00E1               	movwf	(___fladd@b^(0+128)+1)
  4223  110D  1703               	bsf	3,6	;RP1=1, select bank3
  4224  110E  0850               	movf	___fladd@grs^(0+384),w
  4225  110F  1303               	bcf	3,6	;RP1=0, select bank1
  4226  1110  00E5               	movwf	(___fladd@a^(0+128)+1)
  4227  1111  0862               	movf	(___fladd@b^(0+128)+2),w
  4228  1112  1703               	bsf	3,6	;RP1=1, select bank3
  4229  1113  00D0               	movwf	___fladd@grs^(0+384)
  4230  1114  1303               	bcf	3,6	;RP1=0, select bank1
  4231  1115  0866               	movf	(___fladd@a^(0+128)+2),w
  4232  1116  00E2               	movwf	(___fladd@b^(0+128)+2)
  4233  1117  1703               	bsf	3,6	;RP1=1, select bank3
  4234  1118  0850               	movf	___fladd@grs^(0+384),w
  4235  1119  1303               	bcf	3,6	;RP1=0, select bank1
  4236  111A  00E6               	movwf	(___fladd@a^(0+128)+2)
  4237  111B  0863               	movf	(___fladd@b^(0+128)+3),w
  4238  111C  1703               	bsf	3,6	;RP1=1, select bank3
  4239  111D  00D0               	movwf	___fladd@grs^(0+384)
  4240  111E  1303               	bcf	3,6	;RP1=0, select bank1
  4241  111F  0867               	movf	(___fladd@a^(0+128)+3),w
  4242  1120  00E3               	movwf	(___fladd@b^(0+128)+3)
  4243  1121  1703               	bsf	3,6	;RP1=1, select bank3
  4244  1122  0850               	movf	___fladd@grs^(0+384),w
  4245  1123  1303               	bcf	3,6	;RP1=0, select bank1
  4246  1124  00E7               	movwf	(___fladd@a^(0+128)+3)
  4247  1125                     l5046:	
  4248  1125  1703               	bsf	3,6	;RP1=1, select bank3
  4249  1126  01D0               	clrf	___fladd@grs^(0+384)
  4250  1127  084E               	movf	___fladd@aexp^(0+384),w
  4251  1128  1303               	bcf	3,6	;RP1=0, select bank1
  4252  1129  00E8               	movwf	??___fladd^(0+128)
  4253  112A  01E9               	clrf	(??___fladd^(0+128)+1)
  4254  112B  0869               	movf	(??___fladd+1)^(0+128),w
  4255  112C  00EB               	movwf	((??___fladd+2)^(0+128)+1)
  4256  112D  1703               	bsf	3,6	;RP1=1, select bank3
  4257  112E  084F               	movf	___fladd@bexp^(0+384),w
  4258  112F  1303               	bcf	3,6	;RP1=0, select bank1
  4259  1130  0268               	subwf	??___fladd^(0+128),w
  4260  1131  00EA               	movwf	(??___fladd+2)^(0+128)
  4261  1132  1C03               	skipc
  4262  1133  03EB               	decf	((??___fladd+2)^(0+128)+1),f
  4263  1134  086B               	movf	(??___fladd+3)^(0+128),w
  4264  1135  3A80               	xorlw	128
  4265  1136  00FF               	movwf	127
  4266  1137  3080               	movlw	128
  4267  1138  027F               	subwf	127,w
  4268  1139  1D03               	skipz
  4269  113A  293D               	goto	u4485
  4270  113B  301A               	movlw	26
  4271  113C  026A               	subwf	(??___fladd+2)^(0+128),w
  4272  113D                     u4485:	
  4273  113D  1C03               	skipc
  4274  113E  296B               	goto	l5062
  4275  113F  1683               	bsf	3,5	;RP0=1, select bank1
  4276  1140  1303               	bcf	3,6	;RP1=0, select bank1
  4277  1141  0863               	movf	(___fladd@b+3)^(0+128),w
  4278  1142  0462               	iorwf	(___fladd@b+2)^(0+128),w
  4279  1143  0461               	iorwf	(___fladd@b+1)^(0+128),w
  4280  1144  0460               	iorwf	___fladd@b^(0+128),w
  4281  1145  1903               	btfsc	3,2
  4282  1146  2949               	goto	u4490
  4283  1147  3001               	movlw	1
  4284  1148  294A               	goto	u4500
  4285  1149                     u4490:	
  4286  1149  3000               	movlw	0
  4287  114A                     u4500:	
  4288  114A  1703               	bsf	3,6	;RP1=1, select bank3
  4289  114B  00D0               	movwf	___fladd@grs^(0+384)
  4290  114C  1303               	bcf	3,6	;RP1=0, select bank1
  4291  114D  01E0               	clrf	___fladd@b^(0+128)
  4292  114E  01E1               	clrf	(___fladd@b+1)^(0+128)
  4293  114F  01E2               	clrf	(___fladd@b+2)^(0+128)
  4294  1150  01E3               	clrf	(___fladd@b+3)^(0+128)
  4295  1151  1703               	bsf	3,6	;RP1=1, select bank3
  4296  1152  084E               	movf	___fladd@aexp^(0+384),w
  4297  1153  00CF               	movwf	___fladd@bexp^(0+384)
  4298  1154  2971               	goto	l1322
  4299  1155                     l1324:	
  4300  1155  1C50               	btfss	___fladd@grs^(0+384),0
  4301  1156  295C               	goto	l1325
  4302  1157  1003               	clrc
  4303  1158  0C50               	rrf	___fladd@grs^(0+384),w
  4304  1159  3801               	iorlw	1
  4305  115A  00D0               	movwf	___fladd@grs^(0+384)
  4306  115B  295E               	goto	l1326
  4307  115C                     l1325:	
  4308  115C  1003               	clrc
  4309  115D  0CD0               	rrf	___fladd@grs^(0+384),f
  4310  115E                     l1326:	
  4311  115E  1303               	bcf	3,6	;RP1=0, select bank1
  4312  115F  1C60               	btfss	___fladd@b^(0+128),0
  4313  1160  2963               	goto	l5058
  4314  1161  1703               	bsf	3,6	;RP1=1, select bank3
  4315  1162  17D0               	bsf	___fladd@grs^(0+384),7
  4316  1163                     l5058:	
  4317  1163  1303               	bcf	3,6	;RP1=0, select bank1
  4318  1164  0D63               	rlf	(___fladd@b+3)^(0+128),w
  4319  1165  0CE3               	rrf	(___fladd@b+3)^(0+128),f
  4320  1166  0CE2               	rrf	(___fladd@b+2)^(0+128),f
  4321  1167  0CE1               	rrf	(___fladd@b+1)^(0+128),f
  4322  1168  0CE0               	rrf	___fladd@b^(0+128),f
  4323  1169  1703               	bsf	3,6	;RP1=1, select bank3
  4324  116A  0ACF               	incf	___fladd@bexp^(0+384),f
  4325  116B                     l5062:	
  4326  116B  1683               	bsf	3,5	;RP0=1, select bank3
  4327  116C  1703               	bsf	3,6	;RP1=1, select bank3
  4328  116D  084E               	movf	___fladd@aexp^(0+384),w
  4329  116E  024F               	subwf	___fladd@bexp^(0+384),w
  4330  116F  1C03               	skipc
  4331  1170  2955               	goto	l1324
  4332  1171                     l1322:	
  4333  1171  1B4D               	btfsc	___fladd@signs^(0+384),6
  4334  1172  29AB               	goto	l5082
  4335  1173  084F               	movf	___fladd@bexp^(0+384),w
  4336  1174  1D03               	btfss	3,2
  4337  1175  297C               	goto	l5068
  4338  1176  1303               	bcf	3,6	;RP1=0, select bank1
  4339  1177  01E0               	clrf	?___fladd^(0+128)
  4340  1178  01E1               	clrf	(?___fladd+1)^(0+128)
  4341  1179  01E2               	clrf	(?___fladd+2)^(0+128)
  4342  117A  01E3               	clrf	(?___fladd+3)^(0+128)
  4343  117B  0008               	return
  4344  117C                     l5068:	
  4345  117C  1303               	bcf	3,6	;RP1=0, select bank1
  4346  117D  0864               	movf	___fladd@a^(0+128),w
  4347  117E  07E0               	addwf	___fladd@b^(0+128),f
  4348  117F  0865               	movf	(___fladd@a+1)^(0+128),w
  4349  1180  1103               	clrz
  4350  1181  1803               	skipnc
  4351  1182  3E01               	addlw	1
  4352  1183  1D03               	btfss	3,2
  4353  1184  07E1               	addwf	(___fladd@b+1)^(0+128),f
  4354  1185  0866               	movf	(___fladd@a+2)^(0+128),w
  4355  1186  1103               	clrz
  4356  1187  1803               	skipnc
  4357  1188  3E01               	addlw	1
  4358  1189  1D03               	btfss	3,2
  4359  118A  07E2               	addwf	(___fladd@b+2)^(0+128),f
  4360  118B  0867               	movf	(___fladd@a+3)^(0+128),w
  4361  118C  1103               	clrz
  4362  118D  1803               	skipnc
  4363  118E  3E01               	addlw	1
  4364  118F  1D03               	btfss	3,2
  4365  1190  07E3               	addwf	(___fladd@b+3)^(0+128),f
  4366  1191  1C63               	btfss	(___fladd@b+3)^(0+128),0
  4367  1192  2A36               	goto	l5112
  4368  1193  1703               	bsf	3,6	;RP1=1, select bank3
  4369  1194  1C50               	btfss	___fladd@grs^(0+384),0
  4370  1195  299B               	goto	l1333
  4371  1196  1003               	clrc
  4372  1197  0C50               	rrf	___fladd@grs^(0+384),w
  4373  1198  3801               	iorlw	1
  4374  1199  00D0               	movwf	___fladd@grs^(0+384)
  4375  119A  299D               	goto	l1334
  4376  119B                     l1333:	
  4377  119B  1003               	clrc
  4378  119C  0CD0               	rrf	___fladd@grs^(0+384),f
  4379  119D                     l1334:	
  4380  119D  1303               	bcf	3,6	;RP1=0, select bank1
  4381  119E  1C60               	btfss	___fladd@b^(0+128),0
  4382  119F  29A2               	goto	l5078
  4383  11A0  1703               	bsf	3,6	;RP1=1, select bank3
  4384  11A1  17D0               	bsf	___fladd@grs^(0+384),7
  4385  11A2                     l5078:	
  4386  11A2  1303               	bcf	3,6	;RP1=0, select bank1
  4387  11A3  0D63               	rlf	(___fladd@b+3)^(0+128),w
  4388  11A4  0CE3               	rrf	(___fladd@b+3)^(0+128),f
  4389  11A5  0CE2               	rrf	(___fladd@b+2)^(0+128),f
  4390  11A6  0CE1               	rrf	(___fladd@b+1)^(0+128),f
  4391  11A7  0CE0               	rrf	___fladd@b^(0+128),f
  4392  11A8  1703               	bsf	3,6	;RP1=1, select bank3
  4393  11A9  0ACF               	incf	___fladd@bexp^(0+384),f
  4394  11AA  2A36               	goto	l5112
  4395  11AB                     l5082:	
  4396  11AB  1303               	bcf	3,6	;RP1=0, select bank1
  4397  11AC  0863               	movf	(___fladd@b+3)^(0+128),w
  4398  11AD  3A80               	xorlw	128
  4399  11AE  00FF               	movwf	127
  4400  11AF  0867               	movf	(___fladd@a+3)^(0+128),w
  4401  11B0  3A80               	xorlw	128
  4402  11B1  027F               	subwf	127,w
  4403  11B2  1D03               	skipz
  4404  11B3  29BE               	goto	u4603
  4405  11B4  0866               	movf	(___fladd@a+2)^(0+128),w
  4406  11B5  0262               	subwf	(___fladd@b+2)^(0+128),w
  4407  11B6  1D03               	skipz
  4408  11B7  29BE               	goto	u4603
  4409  11B8  0865               	movf	(___fladd@a+1)^(0+128),w
  4410  11B9  0261               	subwf	(___fladd@b+1)^(0+128),w
  4411  11BA  1D03               	skipz
  4412  11BB  29BE               	goto	u4603
  4413  11BC  0864               	movf	___fladd@a^(0+128),w
  4414  11BD  0260               	subwf	___fladd@b^(0+128),w
  4415  11BE                     u4603:	
  4416  11BE  1803               	skipnc
  4417  11BF  2A00               	goto	l5092
  4418  11C0  30FF               	movlw	255
  4419  11C1  00E8               	movwf	??___fladd^(0+128)
  4420  11C2  00E9               	movwf	(??___fladd^(0+128)+1)
  4421  11C3  00EA               	movwf	(??___fladd^(0+128)+2)
  4422  11C4  00EB               	movwf	(??___fladd^(0+128)+3)
  4423  11C5  0864               	movf	___fladd@a^(0+128),w
  4424  11C6  00EC               	movwf	(??___fladd+4)^(0+128)
  4425  11C7  0865               	movf	(___fladd@a+1)^(0+128),w
  4426  11C8  00ED               	movwf	((??___fladd+4)^(0+128)+1)
  4427  11C9  0866               	movf	(___fladd@a+2)^(0+128),w
  4428  11CA  00EE               	movwf	((??___fladd+4)^(0+128)+2)
  4429  11CB  0867               	movf	(___fladd@a+3)^(0+128),w
  4430  11CC  00EF               	movwf	((??___fladd+4)^(0+128)+3)
  4431  11CD  0860               	movf	___fladd@b^(0+128),w
  4432  11CE  02EC               	subwf	(??___fladd+4)^(0+128),f
  4433  11CF  0861               	movf	(___fladd@b+1)^(0+128),w
  4434  11D0  1C03               	skipc
  4435  11D1  0F61               	incfsz	(___fladd@b+1)^(0+128),w
  4436  11D2  02ED               	subwf	((??___fladd+4)^(0+128)+1),f
  4437  11D3  0862               	movf	(___fladd@b+2)^(0+128),w
  4438  11D4  1C03               	skipc
  4439  11D5  0F62               	incfsz	(___fladd@b+2)^(0+128),w
  4440  11D6  02EE               	subwf	((??___fladd+4)^(0+128)+2),f
  4441  11D7  0863               	movf	(___fladd@b+3)^(0+128),w
  4442  11D8  1C03               	skipc
  4443  11D9  0F63               	incfsz	(___fladd@b+3)^(0+128),w
  4444  11DA  02EF               	subwf	((??___fladd+4)^(0+128)+3),f
  4445  11DB  086C               	movf	(??___fladd+4)^(0+128),w
  4446  11DC  07E8               	addwf	??___fladd^(0+128),f
  4447  11DD  086D               	movf	(??___fladd+5)^(0+128),w
  4448  11DE  1803               	skipnc
  4449  11DF  0F6D               	incfsz	(??___fladd+5)^(0+128),w
  4450  11E0  07E9               	addwf	(??___fladd^(0+128)+1),f
  4451  11E1  086E               	movf	(??___fladd+6)^(0+128),w
  4452  11E2  1803               	skipnc
  4453  11E3  0F6E               	incfsz	(??___fladd+6)^(0+128),w
  4454  11E4  07EA               	addwf	(??___fladd^(0+128)+2),f
  4455  11E5  086F               	movf	(??___fladd+7)^(0+128),w
  4456  11E6  1803               	skipnc
  4457  11E7  0A6F               	incf	(??___fladd+7)^(0+128),w
  4458  11E8  07EB               	addwf	(??___fladd^(0+128)+3),f
  4459  11E9  086B               	movf	(??___fladd+3)^(0+128),w
  4460  11EA  00E3               	movwf	(___fladd@b+3)^(0+128)
  4461  11EB  086A               	movf	(??___fladd+2)^(0+128),w
  4462  11EC  00E2               	movwf	(___fladd@b+2)^(0+128)
  4463  11ED  0869               	movf	(??___fladd+1)^(0+128),w
  4464  11EE  00E1               	movwf	(___fladd@b+1)^(0+128)
  4465  11EF  0868               	movf	??___fladd^(0+128),w
  4466  11F0  00E0               	movwf	___fladd@b^(0+128)
  4467  11F1  3080               	movlw	128
  4468  11F2  1703               	bsf	3,6	;RP1=1, select bank3
  4469  11F3  06CD               	xorwf	___fladd@signs^(0+384),f
  4470  11F4  09D0               	comf	___fladd@grs^(0+384),f
  4471  11F5  0FD0               	incfsz	___fladd@grs^(0+384),f
  4472  11F6  2A0E               	goto	l1339
  4473  11F7  1303               	bcf	3,6	;RP1=0, select bank1
  4474  11F8  0AE0               	incf	___fladd@b^(0+128),f
  4475  11F9  1903               	skipnz
  4476  11FA  0AE1               	incf	(___fladd@b+1)^(0+128),f
  4477  11FB  1903               	skipnz
  4478  11FC  0AE2               	incf	(___fladd@b+2)^(0+128),f
  4479  11FD  1903               	skipnz
  4480  11FE  0AE3               	incf	(___fladd@b+3)^(0+128),f
  4481  11FF  2A0E               	goto	l1339
  4482  1200                     l5092:	
  4483  1200  0864               	movf	___fladd@a^(0+128),w
  4484  1201  02E0               	subwf	___fladd@b^(0+128),f
  4485  1202  0865               	movf	(___fladd@a+1)^(0+128),w
  4486  1203  1C03               	skipc
  4487  1204  0F65               	incfsz	(___fladd@a+1)^(0+128),w
  4488  1205  02E1               	subwf	(___fladd@b+1)^(0+128),f
  4489  1206  0866               	movf	(___fladd@a+2)^(0+128),w
  4490  1207  1C03               	skipc
  4491  1208  0F66               	incfsz	(___fladd@a+2)^(0+128),w
  4492  1209  02E2               	subwf	(___fladd@b+2)^(0+128),f
  4493  120A  0867               	movf	(___fladd@a+3)^(0+128),w
  4494  120B  1C03               	skipc
  4495  120C  0F67               	incfsz	(___fladd@a+3)^(0+128),w
  4496  120D  02E3               	subwf	(___fladd@b+3)^(0+128),f
  4497  120E                     l1339:	
  4498  120E  1303               	bcf	3,6	;RP1=0, select bank1
  4499  120F  0863               	movf	(___fladd@b+3)^(0+128),w
  4500  1210  0462               	iorwf	(___fladd@b+2)^(0+128),w
  4501  1211  0461               	iorwf	(___fladd@b+1)^(0+128),w
  4502  1212  0460               	iorwf	___fladd@b^(0+128),w
  4503  1213  1D03               	skipz
  4504  1214  2A33               	goto	l5110
  4505  1215  1703               	bsf	3,6	;RP1=1, select bank3
  4506  1216  0850               	movf	___fladd@grs^(0+384),w
  4507  1217  1D03               	btfss	3,2
  4508  1218  2A33               	goto	l5110
  4509  1219  1303               	bcf	3,6	;RP1=0, select bank1
  4510  121A  01E0               	clrf	?___fladd^(0+128)
  4511  121B  01E1               	clrf	(?___fladd+1)^(0+128)
  4512  121C  01E2               	clrf	(?___fladd+2)^(0+128)
  4513  121D  01E3               	clrf	(?___fladd+3)^(0+128)
  4514  121E  0008               	return
  4515  121F                     l5098:	
  4516  121F  1003               	clrc
  4517  1220  0DE0               	rlf	___fladd@b^(0+128),f
  4518  1221  0DE1               	rlf	(___fladd@b+1)^(0+128),f
  4519  1222  0DE2               	rlf	(___fladd@b+2)^(0+128),f
  4520  1223  0DE3               	rlf	(___fladd@b+3)^(0+128),f
  4521  1224  1703               	bsf	3,6	;RP1=1, select bank3
  4522  1225  1FD0               	btfss	___fladd@grs^(0+384),7
  4523  1226  2A29               	goto	l1343
  4524  1227  1303               	bcf	3,6	;RP1=0, select bank1
  4525  1228  1460               	bsf	___fladd@b^(0+128),0
  4526  1229                     l1343:	
  4527  1229  1703               	bsf	3,6	;RP1=1, select bank3
  4528  122A  1C50               	btfss	___fladd@grs^(0+384),0
  4529  122B  2A2E               	goto	l1344
  4530  122C  1403               	setc
  4531  122D  2A2F               	goto	L1
  4532  122E                     l1344:	
  4533  122E  1003               	clrc
  4534  122F                     L1:	
  4535  122F  0DD0               	rlf	___fladd@grs^(0+384),f
  4536  1230  084F               	movf	___fladd@bexp^(0+384),w
  4537  1231  1D03               	btfss	3,2
  4538  1232  03CF               	decf	___fladd@bexp^(0+384),f
  4539  1233                     l5110:	
  4540  1233  1303               	bcf	3,6	;RP1=0, select bank1
  4541  1234  1FE2               	btfss	(___fladd@b+2)^(0+128),7
  4542  1235  2A1F               	goto	l5098
  4543  1236                     l5112:	
  4544  1236  1703               	bsf	3,6	;RP1=1, select bank3
  4545  1237  01CE               	clrf	___fladd@aexp^(0+384)
  4546  1238  1FD0               	btfss	___fladd@grs^(0+384),7
  4547  1239  2A44               	goto	l5122
  4548  123A  0850               	movf	___fladd@grs^(0+384),w
  4549  123B  397F               	andlw	127
  4550  123C  1D03               	btfss	3,2
  4551  123D  2A41               	goto	l5118
  4552  123E  1303               	bcf	3,6	;RP1=0, select bank1
  4553  123F  1C60               	btfss	___fladd@b^(0+128),0
  4554  1240  2A44               	goto	l5122
  4555  1241                     l5118:	
  4556  1241  1703               	bsf	3,6	;RP1=1, select bank3
  4557  1242  01CE               	clrf	___fladd@aexp^(0+384)
  4558  1243  0ACE               	incf	___fladd@aexp^(0+384),f
  4559  1244                     l5122:	
  4560  1244  1703               	bsf	3,6	;RP1=1, select bank3
  4561  1245  084E               	movf	___fladd@aexp^(0+384),w
  4562  1246  1903               	btfsc	3,2
  4563  1247  2A5A               	goto	l5134
  4564  1248  1303               	bcf	3,6	;RP1=0, select bank1
  4565  1249  0AE0               	incf	___fladd@b^(0+128),f
  4566  124A  1903               	skipnz
  4567  124B  0AE1               	incf	(___fladd@b+1)^(0+128),f
  4568  124C  1903               	skipnz
  4569  124D  0AE2               	incf	(___fladd@b+2)^(0+128),f
  4570  124E  1903               	skipnz
  4571  124F  0AE3               	incf	(___fladd@b+3)^(0+128),f
  4572  1250  1C63               	btfss	(___fladd@b+3)^(0+128),0
  4573  1251  2A5A               	goto	l5134
  4574  1252  0D63               	rlf	(___fladd@b+3)^(0+128),w
  4575  1253  0CE3               	rrf	(___fladd@b+3)^(0+128),f
  4576  1254  0CE2               	rrf	(___fladd@b+2)^(0+128),f
  4577  1255  0CE1               	rrf	(___fladd@b+1)^(0+128),f
  4578  1256  0CE0               	rrf	___fladd@b^(0+128),f
  4579  1257  1703               	bsf	3,6	;RP1=1, select bank3
  4580  1258  0F4F               	incfsz	___fladd@bexp^(0+384),w
  4581  1259  0ACF               	incf	___fladd@bexp^(0+384),f
  4582  125A                     l5134:	
  4583  125A  1703               	bsf	3,6	;RP1=1, select bank3
  4584  125B  0A4F               	incf	___fladd@bexp^(0+384),w
  4585  125C  1D03               	btfss	3,2
  4586  125D  084F               	movf	___fladd@bexp^(0+384),w
  4587  125E  1D03               	btfss	3,2
  4588  125F  2A69               	goto	l5142
  4589  1260  1303               	bcf	3,6	;RP1=0, select bank1
  4590  1261  01E0               	clrf	___fladd@b^(0+128)
  4591  1262  01E1               	clrf	(___fladd@b+1)^(0+128)
  4592  1263  01E2               	clrf	(___fladd@b+2)^(0+128)
  4593  1264  01E3               	clrf	(___fladd@b+3)^(0+128)
  4594  1265  1703               	bsf	3,6	;RP1=1, select bank3
  4595  1266  084F               	movf	___fladd@bexp^(0+384),w
  4596  1267  1903               	btfsc	3,2
  4597  1268  01CD               	clrf	___fladd@signs^(0+384)
  4598  1269                     l5142:	
  4599  1269  1C4F               	btfss	___fladd@bexp^(0+384),0
  4600  126A  2A6E               	goto	l1359
  4601  126B  1303               	bcf	3,6	;RP1=0, select bank1
  4602  126C  17E2               	bsf	(___fladd@b^(0+128)+2),7
  4603  126D  2A70               	goto	l5146
  4604  126E                     l1359:	
  4605  126E  1303               	bcf	3,6	;RP1=0, select bank1
  4606  126F  13E2               	bcf	(___fladd@b^(0+128)+2),7
  4607  1270                     l5146:	
  4608  1270  1703               	bsf	3,6	;RP1=1, select bank3
  4609  1271  1003               	clrc
  4610  1272  0C4F               	rrf	___fladd@bexp^(0+384),w
  4611  1273  1303               	bcf	3,6	;RP1=0, select bank1
  4612  1274  00E3               	movwf	(___fladd@b^(0+128)+3)
  4613  1275  1703               	bsf	3,6	;RP1=1, select bank3
  4614  1276  1FCD               	btfss	___fladd@signs^(0+384),7
  4615  1277  0008               	return
  4616  1278  1303               	bcf	3,6	;RP1=0, select bank1
  4617  1279  17E3               	bsf	(___fladd@b^(0+128)+3),7
  4618  127A  0008               	return
  4619  127B                     __end_of___fladd:	
  4620  127B                     __ptext8:	
  4621 ;; *************** function _CCP1_PWM_DUTY_CYCLE_LOAD *****************
  4622 ;; Defined at:
  4623 ;;		line 186 in file "CCP.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;  DUTY_CYCLE      2   14[BANK3 ] unsigned int 
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;  DUTY_VALUE      2   23[BANK3 ] unsigned int 
  4628 ;;  ret             1    0        enum E852
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1    wreg      enum E852
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4633 ;; Tracked objects:
  4634 ;;		On entry : 300/300
  4635 ;;		On exit  : 300/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4638 ;;      Params:         0       0       0       2       0
  4639 ;;      Locals:         0       0       0       7       0
  4640 ;;      Temps:          0       0       0       2       0
  4641 ;;      Totals:         0       0       0      11       0
  4642 ;;Total ram usage:       11 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:   12
  4645 ;; This function calls:
  4646 ;;		___fldiv
  4647 ;;		___flmul
  4648 ;;		___fltol
  4649 ;;		___xxtofl
  4650 ;; This function is called by:
  4651 ;;		_MOTOR_INIT
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           
  4656                           ;psect for function _CCP1_PWM_DUTY_CYCLE_LOAD
  4657  127B                     _CCP1_PWM_DUTY_CYCLE_LOAD:	
  4658                           
  4659                           ;CCP.c: 189:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 190:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 20 * ((double) (8 * 1000) / 256 ) ));
  4660                           
  4661                           ;incstack = 0
  4662 ;; hardware stack exceeded
  4663                           ; Regs used in _CCP1_PWM_DUTY_CYCLE_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4664  127B  085B               	movf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384),w
  4665  127C  1303               	bcf	3,6	;RP1=0, select bank1
  4666  127D  00A0               	movwf	___xxtofl@val^(0+128)
  4667  127E  1703               	bsf	3,6	;RP1=1, select bank3
  4668  127F  085C               	movf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384),w
  4669  1280  1303               	bcf	3,6	;RP1=0, select bank1
  4670  1281  00A1               	movwf	(___xxtofl@val^(0+128)+1)
  4671  1282  3000               	movlw	0
  4672  1283  01A2               	clrf	(___xxtofl@val^(0+128)+2)
  4673  1284  01A3               	clrf	(___xxtofl@val^(0+128)+3)
  4674  1285  25F0  160A  118A   	fcall	___xxtofl
  4675  1288  0823               	movf	(?___xxtofl+3)^(0+128),w
  4676  1289  00B5               	movwf	(___fldiv@b+3)^(0+128)
  4677  128A  0822               	movf	(?___xxtofl+2)^(0+128),w
  4678  128B  00B4               	movwf	(___fldiv@b+2)^(0+128)
  4679  128C  0821               	movf	(?___xxtofl+1)^(0+128),w
  4680  128D  00B3               	movwf	(___fldiv@b+1)^(0+128)
  4681  128E  0820               	movf	?___xxtofl^(0+128),w
  4682  128F  00B2               	movwf	___fldiv@b^(0+128)
  4683  1290  3043               	movlw	67
  4684  1291  00B1               	movwf	(___fldiv@a+3)^(0+128)
  4685  1292  3034               	movlw	52
  4686  1293  00B0               	movwf	(___fldiv@a+2)^(0+128)
  4687  1294  01AF               	clrf	(___fldiv@a+1)^(0+128)
  4688  1295  01AE               	clrf	___fldiv@a^(0+128)
  4689  1296  2662  160A  118A   	fcall	___fldiv
  4690  1299  0831               	movf	(?___fldiv+3)^(0+128),w
  4691  129A  00CE               	movwf	(___flmul@a+3)^(0+128)
  4692  129B  0830               	movf	(?___fldiv+2)^(0+128),w
  4693  129C  00CD               	movwf	(___flmul@a+2)^(0+128)
  4694  129D  082F               	movf	(?___fldiv+1)^(0+128),w
  4695  129E  00CC               	movwf	(___flmul@a+1)^(0+128)
  4696  129F  082E               	movf	?___fldiv^(0+128),w
  4697  12A0  00CB               	movwf	___flmul@a^(0+128)
  4698  12A1  3041               	movlw	65
  4699  12A2  00CA               	movwf	(___flmul@b+3)^(0+128)
  4700  12A3  30A0               	movlw	160
  4701  12A4  00C9               	movwf	(___flmul@b+2)^(0+128)
  4702  12A5  01C8               	clrf	(___flmul@b+1)^(0+128)
  4703  12A6  01C7               	clrf	___flmul@b^(0+128)
  4704  12A7  2391  160A  118A   	fcall	___flmul
  4705  12AA  084A               	movf	(?___flmul+3)^(0+128),w
  4706  12AB  1703               	bsf	3,6	;RP1=1, select bank3
  4707  12AC  00E3               	movwf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1938+3)^(0+384)
  4708  12AD  1303               	bcf	3,6	;RP1=0, select bank1
  4709  12AE  0849               	movf	(?___flmul+2)^(0+128),w
  4710  12AF  1703               	bsf	3,6	;RP1=1, select bank3
  4711  12B0  00E2               	movwf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1938+2)^(0+384)
  4712  12B1  1303               	bcf	3,6	;RP1=0, select bank1
  4713  12B2  0848               	movf	(?___flmul+1)^(0+128),w
  4714  12B3  1703               	bsf	3,6	;RP1=1, select bank3
  4715  12B4  00E1               	movwf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1938+1)^(0+384)
  4716  12B5  1303               	bcf	3,6	;RP1=0, select bank1
  4717  12B6  0847               	movf	?___flmul^(0+128),w
  4718  12B7  1703               	bsf	3,6	;RP1=1, select bank3
  4719  12B8  00E0               	movwf	_CCP1_PWM_DUTY_CYCLE_LOAD$1938^(0+384)
  4720                           
  4721                           ;CCP.c: 189:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 190:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 20 * ((double) (8 * 1000) / 256 ) ));
  4722  12B9  0863               	movf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1938+3)^(0+384),w
  4723  12BA  1303               	bcf	3,6	;RP1=0, select bank1
  4724  12BB  00CE               	movwf	(___flmul@a+3)^(0+128)
  4725  12BC  1703               	bsf	3,6	;RP1=1, select bank3
  4726  12BD  0862               	movf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1938+2)^(0+384),w
  4727  12BE  1303               	bcf	3,6	;RP1=0, select bank1
  4728  12BF  00CD               	movwf	(___flmul@a+2)^(0+128)
  4729  12C0  1703               	bsf	3,6	;RP1=1, select bank3
  4730  12C1  0861               	movf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1938+1)^(0+384),w
  4731  12C2  1303               	bcf	3,6	;RP1=0, select bank1
  4732  12C3  00CC               	movwf	(___flmul@a+1)^(0+128)
  4733  12C4  1703               	bsf	3,6	;RP1=1, select bank3
  4734  12C5  0860               	movf	_CCP1_PWM_DUTY_CYCLE_LOAD$1938^(0+384),w
  4735  12C6  1303               	bcf	3,6	;RP1=0, select bank1
  4736  12C7  00CB               	movwf	___flmul@a^(0+128)
  4737  12C8  3041               	movlw	65
  4738  12C9  00CA               	movwf	(___flmul@b+3)^(0+128)
  4739  12CA  30FA               	movlw	250
  4740  12CB  00C9               	movwf	(___flmul@b+2)^(0+128)
  4741  12CC  01C8               	clrf	(___flmul@b+1)^(0+128)
  4742  12CD  01C7               	clrf	___flmul@b^(0+128)
  4743  12CE  2391  160A  118A   	fcall	___flmul
  4744  12D1  084A               	movf	(?___flmul+3)^(0+128),w
  4745  12D2  1703               	bsf	3,6	;RP1=1, select bank3
  4746  12D3  00D4               	movwf	(___fltol@f1+3)^(0+384)
  4747  12D4  1303               	bcf	3,6	;RP1=0, select bank1
  4748  12D5  0849               	movf	(?___flmul+2)^(0+128),w
  4749  12D6  1703               	bsf	3,6	;RP1=1, select bank3
  4750  12D7  00D3               	movwf	(___fltol@f1+2)^(0+384)
  4751  12D8  1303               	bcf	3,6	;RP1=0, select bank1
  4752  12D9  0848               	movf	(?___flmul+1)^(0+128),w
  4753  12DA  1703               	bsf	3,6	;RP1=1, select bank3
  4754  12DB  00D2               	movwf	(___fltol@f1+1)^(0+384)
  4755  12DC  1303               	bcf	3,6	;RP1=0, select bank1
  4756  12DD  0847               	movf	?___flmul^(0+128),w
  4757  12DE  1703               	bsf	3,6	;RP1=1, select bank3
  4758  12DF  00D1               	movwf	___fltol@f1^(0+384)
  4759  12E0  2783               	fcall	___fltol
  4760  12E1  0852               	movf	(?___fltol+1)^(0+384),w
  4761  12E2  00E5               	movwf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384)
  4762  12E3  0851               	movf	?___fltol^(0+384),w
  4763  12E4  00E4               	movwf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384)
  4764                           
  4765                           ;CCP.c: 191:  (CCPR1L =((tbyte)(DUTY_VALUE >>2))); ( CCP1CON =((CCP1CON & 0b11001111)| (
      +                          (DUTY_VALUE&0x0003)<<4)));
  4766  12E5  0865               	movf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384),w
  4767  12E6  00DE               	movwf	(??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)+1)
  4768  12E7  0864               	movf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  4769  12E8  00DD               	movwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)
  4770  12E9  1003               	clrc
  4771  12EA  0CDE               	rrf	(??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  4772  12EB  0CDD               	rrf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),f
  4773  12EC  1003               	clrc
  4774  12ED  0CDE               	rrf	(??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  4775  12EE  0CDD               	rrf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),f
  4776  12EF  085D               	movf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),w
  4777  12F0  1283               	bcf	3,5	;RP0=0, select bank0
  4778  12F1  1303               	bcf	3,6	;RP1=0, select bank0
  4779  12F2  0095               	movwf	21	;volatile
  4780  12F3  1683               	bsf	3,5	;RP0=1, select bank3
  4781  12F4  1703               	bsf	3,6	;RP1=1, select bank3
  4782  12F5  0864               	movf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  4783  12F6  3903               	andlw	3
  4784  12F7  00DD               	movwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)
  4785  12F8  0E5D               	swapf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),w
  4786  12F9  39F0               	andlw	240
  4787  12FA  00DD               	movwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)
  4788  12FB  1283               	bcf	3,5	;RP0=0, select bank0
  4789  12FC  1303               	bcf	3,6	;RP1=0, select bank0
  4790  12FD  0817               	movf	23,w	;volatile
  4791  12FE  39CF               	andlw	207
  4792  12FF  1683               	bsf	3,5	;RP0=1, select bank3
  4793  1300  1703               	bsf	3,6	;RP1=1, select bank3
  4794  1301  045D               	iorwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),w
  4795  1302  1283               	bcf	3,5	;RP0=0, select bank0
  4796  1303  1303               	bcf	3,6	;RP1=0, select bank0
  4797  1304  0097               	movwf	23	;volatile
  4798  1305  0008               	return
  4799  1306                     __end_of_CCP1_PWM_DUTY_CYCLE_LOAD:	
  4800  1306                     __ptext19:	
  4801 ;; *************** function _CCP2_PWM_DUTY_CYCLE_LOAD *****************
  4802 ;; Defined at:
  4803 ;;		line 195 in file "CCP.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  DUTY_CYCLE      2   14[BANK3 ] unsigned int 
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;  DUTY_VALUE      2   23[BANK3 ] unsigned int 
  4808 ;;  ret             1    0        enum E852
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      enum E852
  4811 ;; Registers used:
  4812 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4813 ;; Tracked objects:
  4814 ;;		On entry : 300/300
  4815 ;;		On exit  : 300/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4818 ;;      Params:         0       0       0       2       0
  4819 ;;      Locals:         0       0       0       7       0
  4820 ;;      Temps:          0       0       0       2       0
  4821 ;;      Totals:         0       0       0      11       0
  4822 ;;Total ram usage:       11 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:   12
  4825 ;; This function calls:
  4826 ;;		___fldiv
  4827 ;;		___flmul
  4828 ;;		___fltol
  4829 ;;		___xxtofl
  4830 ;; This function is called by:
  4831 ;;		_HEATER_INIT
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           
  4836                           ;psect for function _CCP2_PWM_DUTY_CYCLE_LOAD
  4837  1306                     _CCP2_PWM_DUTY_CYCLE_LOAD:	
  4838                           
  4839                           ;CCP.c: 198:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 199:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 20 * ((double) (8 * 1000) / 256 ) ));
  4840                           
  4841                           ;incstack = 0
  4842 ;; hardware stack exceeded
  4843                           ; Regs used in _CCP2_PWM_DUTY_CYCLE_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4844  1306  085B               	movf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384),w
  4845  1307  1303               	bcf	3,6	;RP1=0, select bank1
  4846  1308  00A0               	movwf	___xxtofl@val^(0+128)
  4847  1309  1703               	bsf	3,6	;RP1=1, select bank3
  4848  130A  085C               	movf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384),w
  4849  130B  1303               	bcf	3,6	;RP1=0, select bank1
  4850  130C  00A1               	movwf	(___xxtofl@val^(0+128)+1)
  4851  130D  3000               	movlw	0
  4852  130E  01A2               	clrf	(___xxtofl@val^(0+128)+2)
  4853  130F  01A3               	clrf	(___xxtofl@val^(0+128)+3)
  4854  1310  25F0  160A  118A   	fcall	___xxtofl
  4855  1313  0823               	movf	(?___xxtofl+3)^(0+128),w
  4856  1314  00B5               	movwf	(___fldiv@b+3)^(0+128)
  4857  1315  0822               	movf	(?___xxtofl+2)^(0+128),w
  4858  1316  00B4               	movwf	(___fldiv@b+2)^(0+128)
  4859  1317  0821               	movf	(?___xxtofl+1)^(0+128),w
  4860  1318  00B3               	movwf	(___fldiv@b+1)^(0+128)
  4861  1319  0820               	movf	?___xxtofl^(0+128),w
  4862  131A  00B2               	movwf	___fldiv@b^(0+128)
  4863  131B  3043               	movlw	67
  4864  131C  00B1               	movwf	(___fldiv@a+3)^(0+128)
  4865  131D  3034               	movlw	52
  4866  131E  00B0               	movwf	(___fldiv@a+2)^(0+128)
  4867  131F  01AF               	clrf	(___fldiv@a+1)^(0+128)
  4868  1320  01AE               	clrf	___fldiv@a^(0+128)
  4869  1321  2662  160A  118A   	fcall	___fldiv
  4870  1324  0831               	movf	(?___fldiv+3)^(0+128),w
  4871  1325  00CE               	movwf	(___flmul@a+3)^(0+128)
  4872  1326  0830               	movf	(?___fldiv+2)^(0+128),w
  4873  1327  00CD               	movwf	(___flmul@a+2)^(0+128)
  4874  1328  082F               	movf	(?___fldiv+1)^(0+128),w
  4875  1329  00CC               	movwf	(___flmul@a+1)^(0+128)
  4876  132A  082E               	movf	?___fldiv^(0+128),w
  4877  132B  00CB               	movwf	___flmul@a^(0+128)
  4878  132C  3041               	movlw	65
  4879  132D  00CA               	movwf	(___flmul@b+3)^(0+128)
  4880  132E  30A0               	movlw	160
  4881  132F  00C9               	movwf	(___flmul@b+2)^(0+128)
  4882  1330  01C8               	clrf	(___flmul@b+1)^(0+128)
  4883  1331  01C7               	clrf	___flmul@b^(0+128)
  4884  1332  2391  160A  118A   	fcall	___flmul
  4885  1335  084A               	movf	(?___flmul+3)^(0+128),w
  4886  1336  1703               	bsf	3,6	;RP1=1, select bank3
  4887  1337  00E3               	movwf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1939+3)^(0+384)
  4888  1338  1303               	bcf	3,6	;RP1=0, select bank1
  4889  1339  0849               	movf	(?___flmul+2)^(0+128),w
  4890  133A  1703               	bsf	3,6	;RP1=1, select bank3
  4891  133B  00E2               	movwf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1939+2)^(0+384)
  4892  133C  1303               	bcf	3,6	;RP1=0, select bank1
  4893  133D  0848               	movf	(?___flmul+1)^(0+128),w
  4894  133E  1703               	bsf	3,6	;RP1=1, select bank3
  4895  133F  00E1               	movwf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1939+1)^(0+384)
  4896  1340  1303               	bcf	3,6	;RP1=0, select bank1
  4897  1341  0847               	movf	?___flmul^(0+128),w
  4898  1342  1703               	bsf	3,6	;RP1=1, select bank3
  4899  1343  00E0               	movwf	_CCP2_PWM_DUTY_CYCLE_LOAD$1939^(0+384)
  4900                           
  4901                           ;CCP.c: 198:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 199:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 20 * ((double) (8 * 1000) / 256 ) ));
  4902  1344  0863               	movf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1939+3)^(0+384),w
  4903  1345  1303               	bcf	3,6	;RP1=0, select bank1
  4904  1346  00CE               	movwf	(___flmul@a+3)^(0+128)
  4905  1347  1703               	bsf	3,6	;RP1=1, select bank3
  4906  1348  0862               	movf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1939+2)^(0+384),w
  4907  1349  1303               	bcf	3,6	;RP1=0, select bank1
  4908  134A  00CD               	movwf	(___flmul@a+2)^(0+128)
  4909  134B  1703               	bsf	3,6	;RP1=1, select bank3
  4910  134C  0861               	movf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1939+1)^(0+384),w
  4911  134D  1303               	bcf	3,6	;RP1=0, select bank1
  4912  134E  00CC               	movwf	(___flmul@a+1)^(0+128)
  4913  134F  1703               	bsf	3,6	;RP1=1, select bank3
  4914  1350  0860               	movf	_CCP2_PWM_DUTY_CYCLE_LOAD$1939^(0+384),w
  4915  1351  1303               	bcf	3,6	;RP1=0, select bank1
  4916  1352  00CB               	movwf	___flmul@a^(0+128)
  4917  1353  3041               	movlw	65
  4918  1354  00CA               	movwf	(___flmul@b+3)^(0+128)
  4919  1355  30FA               	movlw	250
  4920  1356  00C9               	movwf	(___flmul@b+2)^(0+128)
  4921  1357  01C8               	clrf	(___flmul@b+1)^(0+128)
  4922  1358  01C7               	clrf	___flmul@b^(0+128)
  4923  1359  2391  160A  118A   	fcall	___flmul
  4924  135C  084A               	movf	(?___flmul+3)^(0+128),w
  4925  135D  1703               	bsf	3,6	;RP1=1, select bank3
  4926  135E  00D4               	movwf	(___fltol@f1+3)^(0+384)
  4927  135F  1303               	bcf	3,6	;RP1=0, select bank1
  4928  1360  0849               	movf	(?___flmul+2)^(0+128),w
  4929  1361  1703               	bsf	3,6	;RP1=1, select bank3
  4930  1362  00D3               	movwf	(___fltol@f1+2)^(0+384)
  4931  1363  1303               	bcf	3,6	;RP1=0, select bank1
  4932  1364  0848               	movf	(?___flmul+1)^(0+128),w
  4933  1365  1703               	bsf	3,6	;RP1=1, select bank3
  4934  1366  00D2               	movwf	(___fltol@f1+1)^(0+384)
  4935  1367  1303               	bcf	3,6	;RP1=0, select bank1
  4936  1368  0847               	movf	?___flmul^(0+128),w
  4937  1369  1703               	bsf	3,6	;RP1=1, select bank3
  4938  136A  00D1               	movwf	___fltol@f1^(0+384)
  4939  136B  2783               	fcall	___fltol
  4940  136C  0852               	movf	(?___fltol+1)^(0+384),w
  4941  136D  00E5               	movwf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384)
  4942  136E  0851               	movf	?___fltol^(0+384),w
  4943  136F  00E4               	movwf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384)
  4944                           
  4945                           ;CCP.c: 200:  (CCPR2L =((tbyte)(DUTY_VALUE >>2))); ( CCP2CON =((CCP2CON & 0b11001111)| (
      +                          (DUTY_VALUE&0x0003)<<4)));
  4946  1370  0865               	movf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384),w
  4947  1371  00DE               	movwf	(??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)+1)
  4948  1372  0864               	movf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  4949  1373  00DD               	movwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)
  4950  1374  1003               	clrc
  4951  1375  0CDE               	rrf	(??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  4952  1376  0CDD               	rrf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),f
  4953  1377  1003               	clrc
  4954  1378  0CDE               	rrf	(??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  4955  1379  0CDD               	rrf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),f
  4956  137A  085D               	movf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),w
  4957  137B  1283               	bcf	3,5	;RP0=0, select bank0
  4958  137C  1303               	bcf	3,6	;RP1=0, select bank0
  4959  137D  009B               	movwf	27	;volatile
  4960  137E  1683               	bsf	3,5	;RP0=1, select bank3
  4961  137F  1703               	bsf	3,6	;RP1=1, select bank3
  4962  1380  0864               	movf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  4963  1381  3903               	andlw	3
  4964  1382  00DD               	movwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)
  4965  1383  0E5D               	swapf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),w
  4966  1384  39F0               	andlw	240
  4967  1385  00DD               	movwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)
  4968  1386  1283               	bcf	3,5	;RP0=0, select bank0
  4969  1387  1303               	bcf	3,6	;RP1=0, select bank0
  4970  1388  081D               	movf	29,w	;volatile
  4971  1389  39CF               	andlw	207
  4972  138A  1683               	bsf	3,5	;RP0=1, select bank3
  4973  138B  1703               	bsf	3,6	;RP1=1, select bank3
  4974  138C  045D               	iorwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),w
  4975  138D  1283               	bcf	3,5	;RP0=0, select bank0
  4976  138E  1303               	bcf	3,6	;RP1=0, select bank0
  4977  138F  009D               	movwf	29	;volatile
  4978  1390  0008               	return
  4979  1391                     __end_of_CCP2_PWM_DUTY_CYCLE_LOAD:	
  4980  1391                     __ptext22:	
  4981 ;; *************** function ___flmul *****************
  4982 ;; Defined at:
  4983 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  b               4   39[BANK1 ] long 
  4986 ;;  a               4   43[BANK1 ] long 
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;  prod            4   58[BANK1 ] struct .
  4989 ;;  grs             4   53[BANK1 ] unsigned long 
  4990 ;;  temp            2   62[BANK1 ] struct .
  4991 ;;  bexp            1   57[BANK1 ] unsigned char 
  4992 ;;  aexp            1   52[BANK1 ] unsigned char 
  4993 ;;  sign            1   51[BANK1 ] unsigned char 
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  4   39[BANK1 ] unsigned char 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 300/100
  5000 ;;		On exit  : 300/100
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5003 ;;      Params:         0       0       8       0       0
  5004 ;;      Locals:         0       0      13       0       0
  5005 ;;      Temps:          0       0       4       0       0
  5006 ;;      Totals:         0       0      25       0       0
  5007 ;;Total ram usage:       25 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:   11
  5010 ;; This function calls:
  5011 ;;		__Umul8_16
  5012 ;; This function is called by:
  5013 ;;		_CCP_PWM_PERIOD_LOAD
  5014 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  5015 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           
  5020                           ;psect for function ___flmul
  5021  1391                     ___flmul:	
  5022                           
  5023                           ;incstack = 0
  5024 ;; hardware stack exceeded
  5025                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5026  1391  084A               	movf	(___flmul@b^(0+128)+3),w
  5027  1392  00D3               	movwf	___flmul@sign^(0+128)
  5028  1393  3080               	movlw	128
  5029  1394  05D3               	andwf	___flmul@sign^(0+128),f
  5030  1395  1003               	clrc
  5031  1396  0D4A               	rlf	(___flmul@b^(0+128)+3),w
  5032  1397  00D9               	movwf	___flmul@bexp^(0+128)
  5033  1398  1BC9               	btfsc	(___flmul@b^(0+128)+2),7
  5034  1399  1459               	bsf	___flmul@bexp^(0+128),0
  5035  139A  0859               	movf	___flmul@bexp^(0+128),w
  5036  139B  1903               	btfsc	3,2
  5037  139C  2BA5               	goto	l1404
  5038  139D  0F59               	incfsz	___flmul@bexp^(0+128),w
  5039  139E  2BA3               	goto	l1405
  5040  139F  01C7               	clrf	___flmul@b^(0+128)
  5041  13A0  01C8               	clrf	(___flmul@b+1)^(0+128)
  5042  13A1  01C9               	clrf	(___flmul@b+2)^(0+128)
  5043  13A2  01CA               	clrf	(___flmul@b+3)^(0+128)
  5044  13A3                     l1405:	
  5045  13A3  17C9               	bsf	(___flmul@b^(0+128)+2),7
  5046  13A4  2BA9               	goto	l5308
  5047  13A5                     l1404:	
  5048  13A5  01C7               	clrf	___flmul@b^(0+128)
  5049  13A6  01C8               	clrf	(___flmul@b+1)^(0+128)
  5050  13A7  01C9               	clrf	(___flmul@b+2)^(0+128)
  5051  13A8  01CA               	clrf	(___flmul@b+3)^(0+128)
  5052  13A9                     l5308:	
  5053  13A9  084E               	movf	(___flmul@a^(0+128)+3),w
  5054  13AA  3980               	andlw	128
  5055  13AB  06D3               	xorwf	___flmul@sign^(0+128),f
  5056  13AC  1003               	clrc
  5057  13AD  0D4E               	rlf	(___flmul@a^(0+128)+3),w
  5058  13AE  00D4               	movwf	___flmul@aexp^(0+128)
  5059  13AF  1BCD               	btfsc	(___flmul@a^(0+128)+2),7
  5060  13B0  1454               	bsf	___flmul@aexp^(0+128),0
  5061  13B1  0854               	movf	___flmul@aexp^(0+128),w
  5062  13B2  1903               	btfsc	3,2
  5063  13B3  2BBC               	goto	l1408
  5064  13B4  0F54               	incfsz	___flmul@aexp^(0+128),w
  5065  13B5  2BBA               	goto	l1409
  5066  13B6  01CB               	clrf	___flmul@a^(0+128)
  5067  13B7  01CC               	clrf	(___flmul@a+1)^(0+128)
  5068  13B8  01CD               	clrf	(___flmul@a+2)^(0+128)
  5069  13B9  01CE               	clrf	(___flmul@a+3)^(0+128)
  5070  13BA                     l1409:	
  5071  13BA  17CD               	bsf	(___flmul@a^(0+128)+2),7
  5072  13BB  2BC0               	goto	l5320
  5073  13BC                     l1408:	
  5074  13BC  01CB               	clrf	___flmul@a^(0+128)
  5075  13BD  01CC               	clrf	(___flmul@a+1)^(0+128)
  5076  13BE  01CD               	clrf	(___flmul@a+2)^(0+128)
  5077  13BF  01CE               	clrf	(___flmul@a+3)^(0+128)
  5078  13C0                     l5320:	
  5079  13C0  0854               	movf	___flmul@aexp^(0+128),w
  5080  13C1  1D03               	btfss	3,2
  5081  13C2  0859               	movf	___flmul@bexp^(0+128),w
  5082  13C3  1D03               	btfss	3,2
  5083  13C4  2BCA               	goto	l5324
  5084  13C5  01C7               	clrf	?___flmul^(0+128)
  5085  13C6  01C8               	clrf	(?___flmul+1)^(0+128)
  5086  13C7  01C9               	clrf	(?___flmul+2)^(0+128)
  5087  13C8  01CA               	clrf	(?___flmul+3)^(0+128)
  5088  13C9  0008               	return
  5089  13CA                     l5324:	
  5090  13CA  0847               	movf	___flmul@b^(0+128),w
  5091  13CB  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5092  13CC  084D               	movf	(___flmul@a^(0+128)+2),w
  5093  13CD  2590  160A  118A   	fcall	__Umul8_16
  5094  13D0  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5095  13D1  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5096  13D2  0820               	movf	?__Umul8_16^(0+128),w
  5097  13D3  00DE               	movwf	___flmul@temp^(0+128)
  5098  13D4  00D5               	movwf	___flmul@grs^(0+128)
  5099  13D5  01D6               	clrf	(___flmul@grs+1)^(0+128)
  5100  13D6  01D7               	clrf	(___flmul@grs+2)^(0+128)
  5101  13D7  01D8               	clrf	(___flmul@grs+3)^(0+128)
  5102  13D8  085F               	movf	(___flmul@temp^(0+128)+1),w
  5103  13D9  00DA               	movwf	___flmul@prod^(0+128)
  5104  13DA  01DB               	clrf	(___flmul@prod+1)^(0+128)
  5105  13DB  01DC               	clrf	(___flmul@prod+2)^(0+128)
  5106  13DC  01DD               	clrf	(___flmul@prod+3)^(0+128)
  5107  13DD  0848               	movf	(___flmul@b^(0+128)+1),w
  5108  13DE  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5109  13DF  084C               	movf	(___flmul@a^(0+128)+1),w
  5110  13E0  2590  160A  118A   	fcall	__Umul8_16
  5111  13E3  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5112  13E4  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5113  13E5  0820               	movf	?__Umul8_16^(0+128),w
  5114  13E6  00DE               	movwf	___flmul@temp^(0+128)
  5115  13E7  07D5               	addwf	___flmul@grs^(0+128),f
  5116  13E8  3001               	movlw	1
  5117  13E9  1803               	skipnc
  5118  13EA  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5119  13EB  1803               	skipnc
  5120  13EC  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5121  13ED  1803               	skipnc
  5122  13EE  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5123  13EF  085F               	movf	(___flmul@temp^(0+128)+1),w
  5124  13F0  07DA               	addwf	___flmul@prod^(0+128),f
  5125  13F1  3001               	movlw	1
  5126  13F2  1803               	skipnc
  5127  13F3  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5128  13F4  1803               	skipnc
  5129  13F5  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5130  13F6  1803               	skipnc
  5131  13F7  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5132  13F8  0849               	movf	(___flmul@b^(0+128)+2),w
  5133  13F9  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5134  13FA  084B               	movf	___flmul@a^(0+128),w
  5135  13FB  2590  160A  118A   	fcall	__Umul8_16
  5136  13FE  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5137  13FF  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5138  1400  0820               	movf	?__Umul8_16^(0+128),w
  5139  1401  00DE               	movwf	___flmul@temp^(0+128)
  5140  1402  07D5               	addwf	___flmul@grs^(0+128),f
  5141  1403  3001               	movlw	1
  5142  1404  1803               	skipnc
  5143  1405  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5144  1406  1803               	skipnc
  5145  1407  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5146  1408  1803               	skipnc
  5147  1409  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5148  140A  085F               	movf	(___flmul@temp^(0+128)+1),w
  5149  140B  07DA               	addwf	___flmul@prod^(0+128),f
  5150  140C  3001               	movlw	1
  5151  140D  1803               	skipnc
  5152  140E  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5153  140F  1803               	skipnc
  5154  1410  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5155  1411  1803               	skipnc
  5156  1412  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5157  1413  0857               	movf	(___flmul@grs+2)^(0+128),w
  5158  1414  00D8               	movwf	(___flmul@grs+3)^(0+128)
  5159  1415  0856               	movf	(___flmul@grs+1)^(0+128),w
  5160  1416  00D7               	movwf	(___flmul@grs+2)^(0+128)
  5161  1417  0855               	movf	___flmul@grs^(0+128),w
  5162  1418  00D6               	movwf	(___flmul@grs+1)^(0+128)
  5163  1419  01D5               	clrf	___flmul@grs^(0+128)
  5164  141A  0848               	movf	(___flmul@b^(0+128)+1),w
  5165  141B  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5166  141C  084B               	movf	___flmul@a^(0+128),w
  5167  141D  2590  160A  118A   	fcall	__Umul8_16
  5168  1420  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5169  1421  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5170  1422  0820               	movf	?__Umul8_16^(0+128),w
  5171  1423  00DE               	movwf	___flmul@temp^(0+128)
  5172  1424  00CF               	movwf	??___flmul^(0+128)
  5173  1425  085F               	movf	(___flmul@temp+1)^(0+128),w
  5174  1426  00D0               	movwf	(??___flmul^(0+128)+1)
  5175  1427  01D1               	clrf	(??___flmul^(0+128)+2)
  5176  1428  01D2               	clrf	(??___flmul^(0+128)+3)
  5177  1429  084F               	movf	??___flmul^(0+128),w
  5178  142A  07D5               	addwf	___flmul@grs^(0+128),f
  5179  142B  0850               	movf	(??___flmul+1)^(0+128),w
  5180  142C  1103               	clrz
  5181  142D  1803               	skipnc
  5182  142E  3E01               	addlw	1
  5183  142F  1D03               	btfss	3,2
  5184  1430  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5185  1431  0851               	movf	(??___flmul+2)^(0+128),w
  5186  1432  1103               	clrz
  5187  1433  1803               	skipnc
  5188  1434  3E01               	addlw	1
  5189  1435  1D03               	btfss	3,2
  5190  1436  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5191  1437  0852               	movf	(??___flmul+3)^(0+128),w
  5192  1438  1103               	clrz
  5193  1439  1803               	skipnc
  5194  143A  3E01               	addlw	1
  5195  143B  1D03               	btfss	3,2
  5196  143C  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5197  143D  0847               	movf	___flmul@b^(0+128),w
  5198  143E  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5199  143F  084C               	movf	(___flmul@a^(0+128)+1),w
  5200  1440  2590  160A  118A   	fcall	__Umul8_16
  5201  1443  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5202  1444  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5203  1445  0820               	movf	?__Umul8_16^(0+128),w
  5204  1446  00DE               	movwf	___flmul@temp^(0+128)
  5205  1447  00CF               	movwf	??___flmul^(0+128)
  5206  1448  085F               	movf	(___flmul@temp+1)^(0+128),w
  5207  1449  00D0               	movwf	(??___flmul^(0+128)+1)
  5208  144A  01D1               	clrf	(??___flmul^(0+128)+2)
  5209  144B  01D2               	clrf	(??___flmul^(0+128)+3)
  5210  144C  084F               	movf	??___flmul^(0+128),w
  5211  144D  07D5               	addwf	___flmul@grs^(0+128),f
  5212  144E  0850               	movf	(??___flmul+1)^(0+128),w
  5213  144F  1103               	clrz
  5214  1450  1803               	skipnc
  5215  1451  3E01               	addlw	1
  5216  1452  1D03               	btfss	3,2
  5217  1453  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5218  1454  0851               	movf	(??___flmul+2)^(0+128),w
  5219  1455  1103               	clrz
  5220  1456  1803               	skipnc
  5221  1457  3E01               	addlw	1
  5222  1458  1D03               	btfss	3,2
  5223  1459  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5224  145A  0852               	movf	(??___flmul+3)^(0+128),w
  5225  145B  1103               	clrz
  5226  145C  1803               	skipnc
  5227  145D  3E01               	addlw	1
  5228  145E  1D03               	btfss	3,2
  5229  145F  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5230  1460  0857               	movf	(___flmul@grs+2)^(0+128),w
  5231  1461  00D8               	movwf	(___flmul@grs+3)^(0+128)
  5232  1462  0856               	movf	(___flmul@grs+1)^(0+128),w
  5233  1463  00D7               	movwf	(___flmul@grs+2)^(0+128)
  5234  1464  0855               	movf	___flmul@grs^(0+128),w
  5235  1465  00D6               	movwf	(___flmul@grs+1)^(0+128)
  5236  1466  01D5               	clrf	___flmul@grs^(0+128)
  5237  1467  0847               	movf	___flmul@b^(0+128),w
  5238  1468  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5239  1469  084B               	movf	___flmul@a^(0+128),w
  5240  146A  2590  160A  118A   	fcall	__Umul8_16
  5241  146D  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5242  146E  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5243  146F  0820               	movf	?__Umul8_16^(0+128),w
  5244  1470  00DE               	movwf	___flmul@temp^(0+128)
  5245  1471  00CF               	movwf	??___flmul^(0+128)
  5246  1472  085F               	movf	(___flmul@temp+1)^(0+128),w
  5247  1473  00D0               	movwf	(??___flmul^(0+128)+1)
  5248  1474  01D1               	clrf	(??___flmul^(0+128)+2)
  5249  1475  01D2               	clrf	(??___flmul^(0+128)+3)
  5250  1476  084F               	movf	??___flmul^(0+128),w
  5251  1477  07D5               	addwf	___flmul@grs^(0+128),f
  5252  1478  0850               	movf	(??___flmul+1)^(0+128),w
  5253  1479  1103               	clrz
  5254  147A  1803               	skipnc
  5255  147B  3E01               	addlw	1
  5256  147C  1D03               	btfss	3,2
  5257  147D  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5258  147E  0851               	movf	(??___flmul+2)^(0+128),w
  5259  147F  1103               	clrz
  5260  1480  1803               	skipnc
  5261  1481  3E01               	addlw	1
  5262  1482  1D03               	btfss	3,2
  5263  1483  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5264  1484  0852               	movf	(??___flmul+3)^(0+128),w
  5265  1485  1103               	clrz
  5266  1486  1803               	skipnc
  5267  1487  3E01               	addlw	1
  5268  1488  1D03               	btfss	3,2
  5269  1489  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5270  148A  0848               	movf	(___flmul@b^(0+128)+1),w
  5271  148B  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5272  148C  084D               	movf	(___flmul@a^(0+128)+2),w
  5273  148D  2590  160A  118A   	fcall	__Umul8_16
  5274  1490  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5275  1491  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5276  1492  0820               	movf	?__Umul8_16^(0+128),w
  5277  1493  00DE               	movwf	___flmul@temp^(0+128)
  5278  1494  00CF               	movwf	??___flmul^(0+128)
  5279  1495  085F               	movf	(___flmul@temp+1)^(0+128),w
  5280  1496  00D0               	movwf	(??___flmul^(0+128)+1)
  5281  1497  01D1               	clrf	(??___flmul^(0+128)+2)
  5282  1498  01D2               	clrf	(??___flmul^(0+128)+3)
  5283  1499  084F               	movf	??___flmul^(0+128),w
  5284  149A  07DA               	addwf	___flmul@prod^(0+128),f
  5285  149B  0850               	movf	(??___flmul+1)^(0+128),w
  5286  149C  1103               	clrz
  5287  149D  1803               	skipnc
  5288  149E  3E01               	addlw	1
  5289  149F  1D03               	btfss	3,2
  5290  14A0  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5291  14A1  0851               	movf	(??___flmul+2)^(0+128),w
  5292  14A2  1103               	clrz
  5293  14A3  1803               	skipnc
  5294  14A4  3E01               	addlw	1
  5295  14A5  1D03               	btfss	3,2
  5296  14A6  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5297  14A7  0852               	movf	(??___flmul+3)^(0+128),w
  5298  14A8  1103               	clrz
  5299  14A9  1803               	skipnc
  5300  14AA  3E01               	addlw	1
  5301  14AB  1D03               	btfss	3,2
  5302  14AC  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5303  14AD  0849               	movf	(___flmul@b^(0+128)+2),w
  5304  14AE  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5305  14AF  084C               	movf	(___flmul@a^(0+128)+1),w
  5306  14B0  2590  160A  118A   	fcall	__Umul8_16
  5307  14B3  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5308  14B4  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5309  14B5  0820               	movf	?__Umul8_16^(0+128),w
  5310  14B6  00DE               	movwf	___flmul@temp^(0+128)
  5311  14B7  00CF               	movwf	??___flmul^(0+128)
  5312  14B8  085F               	movf	(___flmul@temp+1)^(0+128),w
  5313  14B9  00D0               	movwf	(??___flmul^(0+128)+1)
  5314  14BA  01D1               	clrf	(??___flmul^(0+128)+2)
  5315  14BB  01D2               	clrf	(??___flmul^(0+128)+3)
  5316  14BC  084F               	movf	??___flmul^(0+128),w
  5317  14BD  07DA               	addwf	___flmul@prod^(0+128),f
  5318  14BE  0850               	movf	(??___flmul+1)^(0+128),w
  5319  14BF  1103               	clrz
  5320  14C0  1803               	skipnc
  5321  14C1  3E01               	addlw	1
  5322  14C2  1D03               	btfss	3,2
  5323  14C3  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5324  14C4  0851               	movf	(??___flmul+2)^(0+128),w
  5325  14C5  1103               	clrz
  5326  14C6  1803               	skipnc
  5327  14C7  3E01               	addlw	1
  5328  14C8  1D03               	btfss	3,2
  5329  14C9  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5330  14CA  0852               	movf	(??___flmul+3)^(0+128),w
  5331  14CB  1103               	clrz
  5332  14CC  1803               	skipnc
  5333  14CD  3E01               	addlw	1
  5334  14CE  1D03               	btfss	3,2
  5335  14CF  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5336  14D0  0849               	movf	(___flmul@b^(0+128)+2),w
  5337  14D1  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5338  14D2  084D               	movf	(___flmul@a^(0+128)+2),w
  5339  14D3  2590  160A  118A   	fcall	__Umul8_16
  5340  14D6  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5341  14D7  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5342  14D8  0820               	movf	?__Umul8_16^(0+128),w
  5343  14D9  00DE               	movwf	___flmul@temp^(0+128)
  5344  14DA  00CF               	movwf	??___flmul^(0+128)
  5345  14DB  085F               	movf	(___flmul@temp+1)^(0+128),w
  5346  14DC  00D0               	movwf	(??___flmul^(0+128)+1)
  5347  14DD  01D1               	clrf	(??___flmul^(0+128)+2)
  5348  14DE  01D2               	clrf	(??___flmul^(0+128)+3)
  5349  14DF  0851               	movf	(??___flmul^(0+128)+2),w
  5350  14E0  00D2               	movwf	(??___flmul^(0+128)+3)
  5351  14E1  0850               	movf	(??___flmul^(0+128)+1),w
  5352  14E2  00D1               	movwf	(??___flmul^(0+128)+2)
  5353  14E3  084F               	movf	??___flmul^(0+128),w
  5354  14E4  00D0               	movwf	(??___flmul^(0+128)+1)
  5355  14E5  01CF               	clrf	??___flmul^(0+128)
  5356  14E6  084F               	movf	??___flmul^(0+128),w
  5357  14E7  07DA               	addwf	___flmul@prod^(0+128),f
  5358  14E8  0850               	movf	(??___flmul+1)^(0+128),w
  5359  14E9  1103               	clrz
  5360  14EA  1803               	skipnc
  5361  14EB  3E01               	addlw	1
  5362  14EC  1D03               	btfss	3,2
  5363  14ED  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5364  14EE  0851               	movf	(??___flmul+2)^(0+128),w
  5365  14EF  1103               	clrz
  5366  14F0  1803               	skipnc
  5367  14F1  3E01               	addlw	1
  5368  14F2  1D03               	btfss	3,2
  5369  14F3  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5370  14F4  0852               	movf	(??___flmul+3)^(0+128),w
  5371  14F5  1103               	clrz
  5372  14F6  1803               	skipnc
  5373  14F7  3E01               	addlw	1
  5374  14F8  1D03               	btfss	3,2
  5375  14F9  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5376  14FA  0858               	movf	(___flmul@grs^(0+128)+3),w
  5377  14FB  07DA               	addwf	___flmul@prod^(0+128),f
  5378  14FC  3001               	movlw	1
  5379  14FD  1803               	skipnc
  5380  14FE  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5381  14FF  1803               	skipnc
  5382  1500  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5383  1501  1803               	skipnc
  5384  1502  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5385  1503  0857               	movf	(___flmul@grs+2)^(0+128),w
  5386  1504  00D8               	movwf	(___flmul@grs+3)^(0+128)
  5387  1505  0856               	movf	(___flmul@grs+1)^(0+128),w
  5388  1506  00D7               	movwf	(___flmul@grs+2)^(0+128)
  5389  1507  0855               	movf	___flmul@grs^(0+128),w
  5390  1508  00D6               	movwf	(___flmul@grs+1)^(0+128)
  5391  1509  01D5               	clrf	___flmul@grs^(0+128)
  5392  150A  0859               	movf	___flmul@bexp^(0+128),w
  5393  150B  00DE               	movwf	___flmul@temp^(0+128)
  5394  150C  01DF               	clrf	(___flmul@temp+1)^(0+128)
  5395  150D  0854               	movf	___flmul@aexp^(0+128),w
  5396  150E  07DE               	addwf	___flmul@temp^(0+128),f
  5397  150F  1803               	skipnc
  5398  1510  0ADF               	incf	(___flmul@temp+1)^(0+128),f
  5399  1511  3082               	movlw	-126
  5400  1512                     L2:	
  5401  1512  07DE               	addwf	___flmul@temp^(0+128),f
  5402  1513  1C03               	skipc
  5403  1514  03DF               	decf	(___flmul@temp+1)^(0+128),f
  5404  1515  1BDC               	btfsc	(___flmul@prod+2)^(0+128),7
  5405  1516  2D25               	goto	l5372
  5406  1517  1003               	clrc
  5407  1518  0DDA               	rlf	___flmul@prod^(0+128),f
  5408  1519  0DDB               	rlf	(___flmul@prod+1)^(0+128),f
  5409  151A  0DDC               	rlf	(___flmul@prod+2)^(0+128),f
  5410  151B  0DDD               	rlf	(___flmul@prod+3)^(0+128),f
  5411  151C  1BD8               	btfsc	(___flmul@grs+3)^(0+128),7
  5412  151D  145A               	bsf	___flmul@prod^(0+128),0
  5413  151E  30FF               	movlw	-1
  5414  151F  1003               	clrc
  5415  1520  0DD5               	rlf	___flmul@grs^(0+128),f
  5416  1521  0DD6               	rlf	(___flmul@grs+1)^(0+128),f
  5417  1522  0DD7               	rlf	(___flmul@grs+2)^(0+128),f
  5418  1523  0DD8               	rlf	(___flmul@grs+3)^(0+128),f
  5419  1524  2D12               	goto	L2
  5420  1525                     l5372:	
  5421  1525  01D4               	clrf	___flmul@aexp^(0+128)
  5422  1526  1FD8               	btfss	(___flmul@grs+3)^(0+128),7
  5423  1527  2D3B               	goto	l5382
  5424  1528  0855               	movf	___flmul@grs^(0+128),w
  5425  1529  00CF               	movwf	??___flmul^(0+128)
  5426  152A  0856               	movf	(___flmul@grs+1)^(0+128),w
  5427  152B  00D0               	movwf	(??___flmul^(0+128)+1)
  5428  152C  0857               	movf	(___flmul@grs+2)^(0+128),w
  5429  152D  00D1               	movwf	(??___flmul^(0+128)+2)
  5430  152E  307F               	movlw	127
  5431  152F  0558               	andwf	(___flmul@grs+3)^(0+128),w
  5432  1530  00D2               	movwf	(??___flmul^(0+128)+3)
  5433  1531  0852               	movf	(??___flmul+3)^(0+128),w
  5434  1532  0451               	iorwf	(??___flmul+2)^(0+128),w
  5435  1533  0450               	iorwf	(??___flmul+1)^(0+128),w
  5436  1534  044F               	iorwf	??___flmul^(0+128),w
  5437  1535  1903               	skipnz
  5438  1536  185A               	btfsc	___flmul@prod^(0+128),0
  5439  1537  2D39               	goto	l5378
  5440  1538  2D3B               	goto	l5382
  5441  1539                     l5378:	
  5442  1539  01D4               	clrf	___flmul@aexp^(0+128)
  5443  153A  0AD4               	incf	___flmul@aexp^(0+128),f
  5444  153B                     l5382:	
  5445  153B  0854               	movf	___flmul@aexp^(0+128),w
  5446  153C  1903               	btfsc	3,2
  5447  153D  2D4F               	goto	l5392
  5448  153E  0ADA               	incf	___flmul@prod^(0+128),f
  5449  153F  1903               	skipnz
  5450  1540  0ADB               	incf	(___flmul@prod+1)^(0+128),f
  5451  1541  1903               	skipnz
  5452  1542  0ADC               	incf	(___flmul@prod+2)^(0+128),f
  5453  1543  1903               	skipnz
  5454  1544  0ADD               	incf	(___flmul@prod+3)^(0+128),f
  5455  1545  1C5D               	btfss	(___flmul@prod+3)^(0+128),0
  5456  1546  2D4F               	goto	l5392
  5457  1547  0D5D               	rlf	(___flmul@prod+3)^(0+128),w
  5458  1548  0CDD               	rrf	(___flmul@prod+3)^(0+128),f
  5459  1549  0CDC               	rrf	(___flmul@prod+2)^(0+128),f
  5460  154A  0CDB               	rrf	(___flmul@prod+1)^(0+128),f
  5461  154B  0CDA               	rrf	___flmul@prod^(0+128),f
  5462  154C  0ADE               	incf	___flmul@temp^(0+128),f
  5463  154D  1903               	skipnz
  5464  154E  0ADF               	incf	(___flmul@temp+1)^(0+128),f
  5465  154F                     l5392:	
  5466  154F  085F               	movf	(___flmul@temp+1)^(0+128),w
  5467  1550  3A80               	xorlw	128
  5468  1551  00FF               	movwf	127
  5469  1552  3080               	movlw	128
  5470  1553  027F               	subwf	127,w
  5471  1554  1D03               	skipz
  5472  1555  2D58               	goto	u5255
  5473  1556  30FF               	movlw	255
  5474  1557  025E               	subwf	___flmul@temp^(0+128),w
  5475  1558                     u5255:	
  5476  1558  1C03               	skipc
  5477  1559  2D63               	goto	l5396
  5478  155A  307F               	movlw	127
  5479  155B  1683               	bsf	3,5	;RP0=1, select bank1
  5480  155C  1303               	bcf	3,6	;RP1=0, select bank1
  5481  155D  00DD               	movwf	(___flmul@prod+3)^(0+128)
  5482  155E  3080               	movlw	128
  5483  155F  00DC               	movwf	(___flmul@prod+2)^(0+128)
  5484  1560  01DB               	clrf	(___flmul@prod+1)^(0+128)
  5485  1561  01DA               	clrf	___flmul@prod^(0+128)
  5486  1562  2D85               	goto	l1426
  5487  1563                     l5396:	
  5488  1563  1683               	bsf	3,5	;RP0=1, select bank1
  5489  1564  1303               	bcf	3,6	;RP1=0, select bank1
  5490  1565  085F               	movf	(___flmul@temp+1)^(0+128),w
  5491  1566  3A80               	xorlw	128
  5492  1567  00FF               	movwf	127
  5493  1568  3080               	movlw	128
  5494  1569  027F               	subwf	127,w
  5495  156A  1D03               	skipz
  5496  156B  2D6E               	goto	u5265
  5497  156C  3001               	movlw	1
  5498  156D  025E               	subwf	___flmul@temp^(0+128),w
  5499  156E                     u5265:	
  5500  156E  1803               	skipnc
  5501  156F  2D78               	goto	l5402
  5502  1570  1683               	bsf	3,5	;RP0=1, select bank1
  5503  1571  1303               	bcf	3,6	;RP1=0, select bank1
  5504  1572  01DA               	clrf	___flmul@prod^(0+128)
  5505  1573  01DB               	clrf	(___flmul@prod+1)^(0+128)
  5506  1574  01DC               	clrf	(___flmul@prod+2)^(0+128)
  5507  1575  01DD               	clrf	(___flmul@prod+3)^(0+128)
  5508  1576  01D3               	clrf	___flmul@sign^(0+128)
  5509  1577  2D85               	goto	l1426
  5510  1578                     l5402:	
  5511  1578  1683               	bsf	3,5	;RP0=1, select bank1
  5512  1579  1303               	bcf	3,6	;RP1=0, select bank1
  5513  157A  085E               	movf	___flmul@temp^(0+128),w
  5514  157B  00D9               	movwf	___flmul@bexp^(0+128)
  5515  157C  307F               	movlw	127
  5516  157D  05DC               	andwf	(___flmul@prod+2)^(0+128),f
  5517  157E  3000               	movlw	0
  5518  157F  01DD               	clrf	(___flmul@prod+3)^(0+128)
  5519  1580  1859               	btfsc	___flmul@bexp^(0+128),0
  5520  1581  17DC               	bsf	(___flmul@prod^(0+128)+2),7
  5521  1582  1003               	clrc
  5522  1583  0C59               	rrf	___flmul@bexp^(0+128),w
  5523  1584  00DD               	movwf	(___flmul@prod^(0+128)+3)
  5524  1585                     l1426:	
  5525  1585  0853               	movf	___flmul@sign^(0+128),w
  5526  1586  04DD               	iorwf	(___flmul@prod^(0+128)+3),f
  5527  1587  085D               	movf	(___flmul@prod+3)^(0+128),w
  5528  1588  00CA               	movwf	(?___flmul+3)^(0+128)
  5529  1589  085C               	movf	(___flmul@prod+2)^(0+128),w
  5530  158A  00C9               	movwf	(?___flmul+2)^(0+128)
  5531  158B  085B               	movf	(___flmul@prod+1)^(0+128),w
  5532  158C  00C8               	movwf	(?___flmul+1)^(0+128)
  5533  158D  085A               	movf	___flmul@prod^(0+128),w
  5534  158E  00C7               	movwf	?___flmul^(0+128)
  5535  158F  0008               	return
  5536  1590                     __end_of___flmul:	
  5537  1590                     __ptext23:	
  5538 ;; *************** function __Umul8_16 *****************
  5539 ;; Defined at:
  5540 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;  multiplier      1    wreg     unsigned char 
  5543 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;  multiplier      1    5[BANK1 ] unsigned char 
  5546 ;;  word_mpld       2    6[BANK1 ] unsigned int 
  5547 ;;  product         2    3[BANK1 ] unsigned int 
  5548 ;; Return value:  Size  Location     Type
  5549 ;;                  2    0[BANK1 ] unsigned int 
  5550 ;; Registers used:
  5551 ;;		wreg, status,2, status,0
  5552 ;; Tracked objects:
  5553 ;;		On entry : 300/100
  5554 ;;		On exit  : 300/100
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5557 ;;      Params:         0       0       3       0       0
  5558 ;;      Locals:         0       0       5       0       0
  5559 ;;      Temps:          0       0       0       0       0
  5560 ;;      Totals:         0       0       8       0       0
  5561 ;;Total ram usage:        8 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:   10
  5564 ;; This function calls:
  5565 ;;		Nothing
  5566 ;; This function is called by:
  5567 ;;		___flmul
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           
  5572                           ;psect for function __Umul8_16
  5573  1590                     __Umul8_16:	
  5574                           
  5575                           ;incstack = 0
  5576 ;; hardware stack exceeded
  5577                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  5578                           ;__Umul8_16@multiplier stored from wreg
  5579  1590  00A5               	movwf	__Umul8_16@multiplier^(0+128)
  5580  1591  01A3               	clrf	__Umul8_16@product^(0+128)
  5581  1592  01A4               	clrf	(__Umul8_16@product+1)^(0+128)
  5582  1593  0820               	movf	__Umul8_16@multiplicand^(0+128),w
  5583  1594  00A6               	movwf	__Umul8_16@word_mpld^(0+128)
  5584  1595  01A7               	clrf	(__Umul8_16@word_mpld+1)^(0+128)
  5585  1596  1C25               	btfss	__Umul8_16@multiplier^(0+128),0
  5586  1597  2D9E               	goto	l4614
  5587  1598  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5588  1599  07A3               	addwf	__Umul8_16@product^(0+128),f
  5589  159A  1803               	skipnc
  5590  159B  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5591  159C  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5592  159D  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5593  159E                     l4614:	
  5594  159E  1003               	clrc
  5595  159F  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5596  15A0  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5597  15A1  1CA5               	btfss	__Umul8_16@multiplier^(0+128),1
  5598  15A2  2DA9               	goto	l4620
  5599  15A3  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5600  15A4  07A3               	addwf	__Umul8_16@product^(0+128),f
  5601  15A5  1803               	skipnc
  5602  15A6  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5603  15A7  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5604  15A8  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5605  15A9                     l4620:	
  5606  15A9  1003               	clrc
  5607  15AA  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5608  15AB  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5609  15AC  1D25               	btfss	__Umul8_16@multiplier^(0+128),2
  5610  15AD  2DB4               	goto	l4626
  5611  15AE  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5612  15AF  07A3               	addwf	__Umul8_16@product^(0+128),f
  5613  15B0  1803               	skipnc
  5614  15B1  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5615  15B2  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5616  15B3  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5617  15B4                     l4626:	
  5618  15B4  1003               	clrc
  5619  15B5  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5620  15B6  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5621  15B7  1DA5               	btfss	__Umul8_16@multiplier^(0+128),3
  5622  15B8  2DBF               	goto	l4632
  5623  15B9  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5624  15BA  07A3               	addwf	__Umul8_16@product^(0+128),f
  5625  15BB  1803               	skipnc
  5626  15BC  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5627  15BD  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5628  15BE  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5629  15BF                     l4632:	
  5630  15BF  1003               	clrc
  5631  15C0  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5632  15C1  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5633  15C2  1E25               	btfss	__Umul8_16@multiplier^(0+128),4
  5634  15C3  2DCA               	goto	l4638
  5635  15C4  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5636  15C5  07A3               	addwf	__Umul8_16@product^(0+128),f
  5637  15C6  1803               	skipnc
  5638  15C7  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5639  15C8  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5640  15C9  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5641  15CA                     l4638:	
  5642  15CA  1003               	clrc
  5643  15CB  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5644  15CC  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5645  15CD  1EA5               	btfss	__Umul8_16@multiplier^(0+128),5
  5646  15CE  2DD5               	goto	l4644
  5647  15CF  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5648  15D0  07A3               	addwf	__Umul8_16@product^(0+128),f
  5649  15D1  1803               	skipnc
  5650  15D2  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5651  15D3  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5652  15D4  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5653  15D5                     l4644:	
  5654  15D5  1003               	clrc
  5655  15D6  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5656  15D7  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5657  15D8  1F25               	btfss	__Umul8_16@multiplier^(0+128),6
  5658  15D9  2DE0               	goto	l4650
  5659  15DA  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5660  15DB  07A3               	addwf	__Umul8_16@product^(0+128),f
  5661  15DC  1803               	skipnc
  5662  15DD  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5663  15DE  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5664  15DF  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5665  15E0                     l4650:	
  5666  15E0  1003               	clrc
  5667  15E1  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5668  15E2  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5669  15E3  1FA5               	btfss	__Umul8_16@multiplier^(0+128),7
  5670  15E4  2DEB               	goto	l1491
  5671  15E5  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5672  15E6  07A3               	addwf	__Umul8_16@product^(0+128),f
  5673  15E7  1803               	skipnc
  5674  15E8  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5675  15E9  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5676  15EA  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5677  15EB                     l1491:	
  5678  15EB  0824               	movf	(__Umul8_16@product+1)^(0+128),w
  5679  15EC  00A1               	movwf	(?__Umul8_16+1)^(0+128)
  5680  15ED  0823               	movf	__Umul8_16@product^(0+128),w
  5681  15EE  00A0               	movwf	?__Umul8_16^(0+128)
  5682  15EF  0008               	return
  5683  15F0                     __end_of__Umul8_16:	
  5684  15F0                     __ptext20:	
  5685 ;; *************** function ___xxtofl *****************
  5686 ;; Defined at:
  5687 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;  sign            1    wreg     unsigned char 
  5690 ;;  val             4    0[BANK1 ] long 
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;  sign            1    8[BANK1 ] unsigned char 
  5693 ;;  arg             4   10[BANK1 ] unsigned long 
  5694 ;;  exp             1    9[BANK1 ] unsigned char 
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  4    0[BANK1 ] unsigned char 
  5697 ;; Registers used:
  5698 ;;		wreg, status,2, status,0
  5699 ;; Tracked objects:
  5700 ;;		On entry : 300/100
  5701 ;;		On exit  : 300/100
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5704 ;;      Params:         0       0       4       0       0
  5705 ;;      Locals:         0       0       6       0       0
  5706 ;;      Temps:          0       0       4       0       0
  5707 ;;      Totals:         0       0      14       0       0
  5708 ;;Total ram usage:       14 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:   10
  5711 ;; This function calls:
  5712 ;;		Nothing
  5713 ;; This function is called by:
  5714 ;;		_CCP_PWM_PERIOD_LOAD
  5715 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  5716 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           
  5721                           ;psect for function ___xxtofl
  5722  15F0                     ___xxtofl:	
  5723                           
  5724                           ;incstack = 0
  5725 ;; hardware stack exceeded
  5726                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  5727                           ;___xxtofl@sign stored from wreg
  5728  15F0  00A8               	movwf	___xxtofl@sign^(0+128)
  5729  15F1  0828               	movf	___xxtofl@sign^(0+128),w
  5730  15F2  1D03               	btfss	3,2
  5731  15F3  1FA3               	btfss	(___xxtofl@val+3)^(0+128),7
  5732  15F4  2E05               	goto	l5420
  5733  15F5  0920               	comf	___xxtofl@val^(0+128),w
  5734  15F6  00AA               	movwf	___xxtofl@arg^(0+128)
  5735  15F7  0921               	comf	(___xxtofl@val^(0+128)+1),w
  5736  15F8  00AB               	movwf	(___xxtofl@arg+1)^(0+128)
  5737  15F9  0922               	comf	(___xxtofl@val^(0+128)+2),w
  5738  15FA  00AC               	movwf	(___xxtofl@arg+2)^(0+128)
  5739  15FB  0923               	comf	(___xxtofl@val^(0+128)+3),w
  5740  15FC  00AD               	movwf	(___xxtofl@arg+3)^(0+128)
  5741  15FD  0AAA               	incf	___xxtofl@arg^(0+128),f
  5742  15FE  1903               	skipnz
  5743  15FF  0AAB               	incf	(___xxtofl@arg+1)^(0+128),f
  5744  1600  1903               	skipnz
  5745  1601  0AAC               	incf	(___xxtofl@arg+2)^(0+128),f
  5746  1602  1903               	skipnz
  5747  1603  0AAD               	incf	(___xxtofl@arg+3)^(0+128),f
  5748  1604  2E0D               	goto	l1452
  5749  1605                     l5420:	
  5750  1605  0823               	movf	(___xxtofl@val+3)^(0+128),w
  5751  1606  00AD               	movwf	(___xxtofl@arg+3)^(0+128)
  5752  1607  0822               	movf	(___xxtofl@val+2)^(0+128),w
  5753  1608  00AC               	movwf	(___xxtofl@arg+2)^(0+128)
  5754  1609  0821               	movf	(___xxtofl@val+1)^(0+128),w
  5755  160A  00AB               	movwf	(___xxtofl@arg+1)^(0+128)
  5756  160B  0820               	movf	___xxtofl@val^(0+128),w
  5757  160C  00AA               	movwf	___xxtofl@arg^(0+128)
  5758  160D                     l1452:	
  5759  160D  0823               	movf	(___xxtofl@val+3)^(0+128),w
  5760  160E  0422               	iorwf	(___xxtofl@val+2)^(0+128),w
  5761  160F  0421               	iorwf	(___xxtofl@val+1)^(0+128),w
  5762  1610  0420               	iorwf	___xxtofl@val^(0+128),w
  5763  1611  1D03               	skipz
  5764  1612  2E18               	goto	l5424
  5765  1613  01A0               	clrf	?___xxtofl^(0+128)
  5766  1614  01A1               	clrf	(?___xxtofl+1)^(0+128)
  5767  1615  01A2               	clrf	(?___xxtofl+2)^(0+128)
  5768  1616  01A3               	clrf	(?___xxtofl+3)^(0+128)
  5769  1617  0008               	return
  5770  1618                     l5424:	
  5771  1618  3096               	movlw	150
  5772  1619  00A9               	movwf	___xxtofl@exp^(0+128)
  5773  161A                     l5428:	
  5774  161A  30FE               	movlw	254
  5775  161B  052D               	andwf	(___xxtofl@arg+3)^(0+128),w
  5776  161C  1903               	btfsc	3,2
  5777  161D  2E32               	goto	l5432
  5778  161E  0AA9               	incf	___xxtofl@exp^(0+128),f
  5779  161F  1003               	clrc
  5780  1620  0CAD               	rrf	(___xxtofl@arg+3)^(0+128),f
  5781  1621  0CAC               	rrf	(___xxtofl@arg+2)^(0+128),f
  5782  1622  0CAB               	rrf	(___xxtofl@arg+1)^(0+128),f
  5783  1623  0CAA               	rrf	___xxtofl@arg^(0+128),f
  5784  1624  2E1A               	goto	l5428
  5785  1625                     l5430:	
  5786  1625  0AA9               	incf	___xxtofl@exp^(0+128),f
  5787  1626  0AAA               	incf	___xxtofl@arg^(0+128),f
  5788  1627  1903               	skipnz
  5789  1628  0AAB               	incf	(___xxtofl@arg+1)^(0+128),f
  5790  1629  1903               	skipnz
  5791  162A  0AAC               	incf	(___xxtofl@arg+2)^(0+128),f
  5792  162B  1903               	skipnz
  5793  162C  0AAD               	incf	(___xxtofl@arg+3)^(0+128),f
  5794  162D  1003               	clrc
  5795  162E  0CAD               	rrf	(___xxtofl@arg+3)^(0+128),f
  5796  162F  0CAC               	rrf	(___xxtofl@arg+2)^(0+128),f
  5797  1630  0CAB               	rrf	(___xxtofl@arg+1)^(0+128),f
  5798  1631  0CAA               	rrf	___xxtofl@arg^(0+128),f
  5799  1632                     l5432:	
  5800  1632  30FF               	movlw	255
  5801  1633  052D               	andwf	(___xxtofl@arg+3)^(0+128),w
  5802  1634  1903               	btfsc	3,2
  5803  1635  2E41               	goto	l5436
  5804  1636  2E25               	goto	l5430
  5805  1637                     l5438:	
  5806  1637  3002               	movlw	2
  5807  1638  0229               	subwf	___xxtofl@exp^(0+128),w
  5808  1639  1C03               	btfss	3,0
  5809  163A  2E43               	goto	l1465
  5810  163B  03A9               	decf	___xxtofl@exp^(0+128),f
  5811  163C  1003               	clrc
  5812  163D  0DAA               	rlf	___xxtofl@arg^(0+128),f
  5813  163E  0DAB               	rlf	(___xxtofl@arg+1)^(0+128),f
  5814  163F  0DAC               	rlf	(___xxtofl@arg+2)^(0+128),f
  5815  1640  0DAD               	rlf	(___xxtofl@arg+3)^(0+128),f
  5816  1641                     l5436:	
  5817  1641  1FAC               	btfss	(___xxtofl@arg+2)^(0+128),7
  5818  1642  2E37               	goto	l5438
  5819  1643                     l1465:	
  5820  1643  1C29               	btfss	___xxtofl@exp^(0+128),0
  5821  1644  13AC               	bcf	(___xxtofl@arg^(0+128)+2),7
  5822  1645  1003               	clrc
  5823  1646  0CA9               	rrf	___xxtofl@exp^(0+128),f
  5824  1647  0829               	movf	___xxtofl@exp^(0+128),w
  5825  1648  00A7               	movwf	(??___xxtofl^(0+128)+3)
  5826  1649  01A6               	clrf	(??___xxtofl^(0+128)+2)
  5827  164A  01A5               	clrf	(??___xxtofl^(0+128)+1)
  5828  164B  01A4               	clrf	??___xxtofl^(0+128)
  5829  164C  0824               	movf	??___xxtofl^(0+128),w
  5830  164D  04AA               	iorwf	___xxtofl@arg^(0+128),f
  5831  164E  0825               	movf	(??___xxtofl+1)^(0+128),w
  5832  164F  04AB               	iorwf	(___xxtofl@arg+1)^(0+128),f
  5833  1650  0826               	movf	(??___xxtofl+2)^(0+128),w
  5834  1651  04AC               	iorwf	(___xxtofl@arg+2)^(0+128),f
  5835  1652  0827               	movf	(??___xxtofl+3)^(0+128),w
  5836  1653  04AD               	iorwf	(___xxtofl@arg+3)^(0+128),f
  5837  1654  0828               	movf	___xxtofl@sign^(0+128),w
  5838  1655  1D03               	btfss	3,2
  5839  1656  1FA3               	btfss	(___xxtofl@val+3)^(0+128),7
  5840  1657  2E59               	goto	l5450
  5841  1658  17AD               	bsf	(___xxtofl@arg^(0+128)+3),7
  5842  1659                     l5450:	
  5843  1659  082D               	movf	(___xxtofl@arg+3)^(0+128),w
  5844  165A  00A3               	movwf	(?___xxtofl+3)^(0+128)
  5845  165B  082C               	movf	(___xxtofl@arg+2)^(0+128),w
  5846  165C  00A2               	movwf	(?___xxtofl+2)^(0+128)
  5847  165D  082B               	movf	(___xxtofl@arg+1)^(0+128),w
  5848  165E  00A1               	movwf	(?___xxtofl+1)^(0+128)
  5849  165F  082A               	movf	___xxtofl@arg^(0+128),w
  5850  1660  00A0               	movwf	?___xxtofl^(0+128)
  5851  1661  0008               	return
  5852  1662                     __end_of___xxtofl:	
  5853  1662                     __ptext24:	
  5854 ;; *************** function ___fldiv *****************
  5855 ;; Defined at:
  5856 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  a               4   14[BANK1 ] unsigned int 
  5859 ;;  b               4   18[BANK1 ] unsigned int 
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;  grs             4   33[BANK1 ] unsigned long 
  5862 ;;  rem             4   26[BANK1 ] unsigned long 
  5863 ;;  new_exp         2   31[BANK1 ] int 
  5864 ;;  aexp            1   38[BANK1 ] unsigned char 
  5865 ;;  bexp            1   37[BANK1 ] unsigned char 
  5866 ;;  sign            1   30[BANK1 ] unsigned char 
  5867 ;; Return value:  Size  Location     Type
  5868 ;;                  4   14[BANK1 ] unsigned char 
  5869 ;; Registers used:
  5870 ;;		wreg, status,2, status,0, btemp+1
  5871 ;; Tracked objects:
  5872 ;;		On entry : 300/100
  5873 ;;		On exit  : 300/100
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5876 ;;      Params:         0       0       8       0       0
  5877 ;;      Locals:         0       0      13       0       0
  5878 ;;      Temps:          0       0       4       0       0
  5879 ;;      Totals:         0       0      25       0       0
  5880 ;;Total ram usage:       25 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:   10
  5883 ;; This function calls:
  5884 ;;		Nothing
  5885 ;; This function is called by:
  5886 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  5887 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891                           
  5892                           ;psect for function ___fldiv
  5893  1662                     ___fldiv:	
  5894                           
  5895                           ;incstack = 0
  5896 ;; hardware stack exceeded
  5897                           ; Regs used in ___fldiv: [wreg+status,2+status,0+btemp+1]
  5898  1662  0835               	movf	(___fldiv@b^(0+128)+3),w
  5899  1663  00BE               	movwf	___fldiv@sign^(0+128)
  5900  1664  3080               	movlw	128
  5901  1665  05BE               	andwf	___fldiv@sign^(0+128),f
  5902  1666  1003               	clrc
  5903  1667  0D35               	rlf	(___fldiv@b^(0+128)+3),w
  5904  1668  00C5               	movwf	___fldiv@bexp^(0+128)
  5905  1669  1BB4               	btfsc	(___fldiv@b^(0+128)+2),7
  5906  166A  1445               	bsf	___fldiv@bexp^(0+128),0
  5907  166B  0845               	movf	___fldiv@bexp^(0+128),w
  5908  166C  1903               	btfsc	3,2
  5909  166D  2E77               	goto	l1368
  5910  166E  0F45               	incfsz	___fldiv@bexp^(0+128),w
  5911  166F  2E74               	goto	l1369
  5912  1670  01B2               	clrf	___fldiv@b^(0+128)
  5913  1671  01B3               	clrf	(___fldiv@b+1)^(0+128)
  5914  1672  01B4               	clrf	(___fldiv@b+2)^(0+128)
  5915  1673  01B5               	clrf	(___fldiv@b+3)^(0+128)
  5916  1674                     l1369:	
  5917  1674  17B4               	bsf	(___fldiv@b^(0+128)+2),7
  5918  1675  01B5               	clrf	(___fldiv@b^(0+128)+3)
  5919  1676  2E7B               	goto	l5170
  5920  1677                     l1368:	
  5921  1677  01B2               	clrf	___fldiv@b^(0+128)
  5922  1678  01B3               	clrf	(___fldiv@b+1)^(0+128)
  5923  1679  01B4               	clrf	(___fldiv@b+2)^(0+128)
  5924  167A  01B5               	clrf	(___fldiv@b+3)^(0+128)
  5925  167B                     l5170:	
  5926  167B  0831               	movf	(___fldiv@a^(0+128)+3),w
  5927  167C  3980               	andlw	128
  5928  167D  06BE               	xorwf	___fldiv@sign^(0+128),f
  5929  167E  1003               	clrc
  5930  167F  0D31               	rlf	(___fldiv@a^(0+128)+3),w
  5931  1680  00C6               	movwf	___fldiv@aexp^(0+128)
  5932  1681  1BB0               	btfsc	(___fldiv@a^(0+128)+2),7
  5933  1682  1446               	bsf	___fldiv@aexp^(0+128),0
  5934  1683  0846               	movf	___fldiv@aexp^(0+128),w
  5935  1684  1903               	btfsc	3,2
  5936  1685  2E8F               	goto	l1372
  5937  1686  0F46               	incfsz	___fldiv@aexp^(0+128),w
  5938  1687  2E8C               	goto	l1373
  5939  1688  01AE               	clrf	___fldiv@a^(0+128)
  5940  1689  01AF               	clrf	(___fldiv@a+1)^(0+128)
  5941  168A  01B0               	clrf	(___fldiv@a+2)^(0+128)
  5942  168B  01B1               	clrf	(___fldiv@a+3)^(0+128)
  5943  168C                     l1373:	
  5944  168C  17B0               	bsf	(___fldiv@a^(0+128)+2),7
  5945  168D  01B1               	clrf	(___fldiv@a^(0+128)+3)
  5946  168E  2E93               	goto	l5184
  5947  168F                     l1372:	
  5948  168F  01AE               	clrf	___fldiv@a^(0+128)
  5949  1690  01AF               	clrf	(___fldiv@a+1)^(0+128)
  5950  1691  01B0               	clrf	(___fldiv@a+2)^(0+128)
  5951  1692  01B1               	clrf	(___fldiv@a+3)^(0+128)
  5952  1693                     l5184:	
  5953  1693  0831               	movf	(___fldiv@a+3)^(0+128),w
  5954  1694  0430               	iorwf	(___fldiv@a+2)^(0+128),w
  5955  1695  042F               	iorwf	(___fldiv@a+1)^(0+128),w
  5956  1696  042E               	iorwf	___fldiv@a^(0+128),w
  5957  1697  1D03               	skipz
  5958  1698  2EAC               	goto	l5196
  5959  1699  3080               	movlw	128
  5960  169A  01B2               	clrf	___fldiv@b^(0+128)
  5961  169B  01B3               	clrf	(___fldiv@b+1)^(0+128)
  5962  169C  01B4               	clrf	(___fldiv@b+2)^(0+128)
  5963  169D  01B5               	clrf	(___fldiv@b+3)^(0+128)
  5964  169E  04B4               	iorwf	(___fldiv@b^(0+128)+2),f
  5965  169F  307F               	movlw	127
  5966  16A0  04B5               	iorwf	((___fldiv@b+1)^(0+128)+2),f
  5967  16A1                     L3:	
  5968  16A1  083E               	movf	___fldiv@sign^(0+128),w
  5969  16A2  04B5               	iorwf	(___fldiv@b^(0+128)+3),f
  5970  16A3  0835               	movf	(___fldiv@b+3)^(0+128),w
  5971  16A4  00B1               	movwf	(?___fldiv+3)^(0+128)
  5972  16A5  0834               	movf	(___fldiv@b+2)^(0+128),w
  5973  16A6  00B0               	movwf	(?___fldiv+2)^(0+128)
  5974  16A7  0833               	movf	(___fldiv@b+1)^(0+128),w
  5975  16A8  00AF               	movwf	(?___fldiv+1)^(0+128)
  5976  16A9  0832               	movf	___fldiv@b^(0+128),w
  5977  16AA  00AE               	movwf	?___fldiv^(0+128)
  5978  16AB  0008               	return
  5979  16AC                     l5196:	
  5980  16AC  0845               	movf	___fldiv@bexp^(0+128),w
  5981  16AD  1D03               	btfss	3,2
  5982  16AE  2EB4               	goto	l5204
  5983  16AF  01AE               	clrf	?___fldiv^(0+128)
  5984  16B0  01AF               	clrf	(?___fldiv+1)^(0+128)
  5985  16B1  01B0               	clrf	(?___fldiv+2)^(0+128)
  5986  16B2  01B1               	clrf	(?___fldiv+3)^(0+128)
  5987  16B3  0008               	return
  5988  16B4                     l5204:	
  5989  16B4  0845               	movf	___fldiv@bexp^(0+128),w
  5990  16B5  00BF               	movwf	___fldiv@new_exp^(0+128)
  5991  16B6  01C0               	clrf	(___fldiv@new_exp+1)^(0+128)
  5992  16B7  0846               	movf	___fldiv@aexp^(0+128),w
  5993  16B8  02BF               	subwf	___fldiv@new_exp^(0+128),f
  5994  16B9  1C03               	skipc
  5995  16BA  03C0               	decf	(___fldiv@new_exp+1)^(0+128),f
  5996  16BB  307F               	movlw	127
  5997  16BC  07BF               	addwf	___fldiv@new_exp^(0+128),f
  5998  16BD  1803               	skipnc
  5999  16BE  0AC0               	incf	(___fldiv@new_exp+1)^(0+128),f
  6000  16BF  0835               	movf	(___fldiv@b+3)^(0+128),w
  6001  16C0  00BD               	movwf	(___fldiv@rem+3)^(0+128)
  6002  16C1  0834               	movf	(___fldiv@b+2)^(0+128),w
  6003  16C2  00BC               	movwf	(___fldiv@rem+2)^(0+128)
  6004  16C3  0833               	movf	(___fldiv@b+1)^(0+128),w
  6005  16C4  00BB               	movwf	(___fldiv@rem+1)^(0+128)
  6006  16C5  0832               	movf	___fldiv@b^(0+128),w
  6007  16C6  00BA               	movwf	___fldiv@rem^(0+128)
  6008  16C7  01B2               	clrf	___fldiv@b^(0+128)
  6009  16C8  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6010  16C9  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6011  16CA  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6012  16CB  01C1               	clrf	___fldiv@grs^(0+128)
  6013  16CC  01C2               	clrf	(___fldiv@grs+1)^(0+128)
  6014  16CD  01C3               	clrf	(___fldiv@grs+2)^(0+128)
  6015  16CE  01C4               	clrf	(___fldiv@grs+3)^(0+128)
  6016  16CF  01C6               	clrf	___fldiv@aexp^(0+128)
  6017  16D0                     l5230:	
  6018  16D0  301A               	movlw	26
  6019  16D1  0246               	subwf	___fldiv@aexp^(0+128),w
  6020  16D2  1803               	btfsc	3,0
  6021  16D3  2F09               	goto	l5232
  6022  16D4  0846               	movf	___fldiv@aexp^(0+128),w
  6023  16D5  1903               	btfsc	3,2
  6024  16D6  2EE8               	goto	l5222
  6025  16D7  1003               	clrc
  6026  16D8  0DBA               	rlf	___fldiv@rem^(0+128),f
  6027  16D9  0DBB               	rlf	(___fldiv@rem+1)^(0+128),f
  6028  16DA  0DBC               	rlf	(___fldiv@rem+2)^(0+128),f
  6029  16DB  0DBD               	rlf	(___fldiv@rem+3)^(0+128),f
  6030  16DC  1003               	clrc
  6031  16DD  0DB2               	rlf	___fldiv@b^(0+128),f
  6032  16DE  0DB3               	rlf	(___fldiv@b+1)^(0+128),f
  6033  16DF  0DB4               	rlf	(___fldiv@b+2)^(0+128),f
  6034  16E0  0DB5               	rlf	(___fldiv@b+3)^(0+128),f
  6035  16E1  1BC4               	btfsc	(___fldiv@grs+3)^(0+128),7
  6036  16E2  1432               	bsf	___fldiv@b^(0+128),0
  6037  16E3  1003               	clrc
  6038  16E4  0DC1               	rlf	___fldiv@grs^(0+128),f
  6039  16E5  0DC2               	rlf	(___fldiv@grs+1)^(0+128),f
  6040  16E6  0DC3               	rlf	(___fldiv@grs+2)^(0+128),f
  6041  16E7  0DC4               	rlf	(___fldiv@grs+3)^(0+128),f
  6042  16E8                     l5222:	
  6043  16E8  0831               	movf	(___fldiv@a+3)^(0+128),w
  6044  16E9  023D               	subwf	(___fldiv@rem+3)^(0+128),w
  6045  16EA  1D03               	skipz
  6046  16EB  2EF6               	goto	u4915
  6047  16EC  0830               	movf	(___fldiv@a+2)^(0+128),w
  6048  16ED  023C               	subwf	(___fldiv@rem+2)^(0+128),w
  6049  16EE  1D03               	skipz
  6050  16EF  2EF6               	goto	u4915
  6051  16F0  082F               	movf	(___fldiv@a+1)^(0+128),w
  6052  16F1  023B               	subwf	(___fldiv@rem+1)^(0+128),w
  6053  16F2  1D03               	skipz
  6054  16F3  2EF6               	goto	u4915
  6055  16F4  082E               	movf	___fldiv@a^(0+128),w
  6056  16F5  023A               	subwf	___fldiv@rem^(0+128),w
  6057  16F6                     u4915:	
  6058  16F6  1C03               	skipc
  6059  16F7  2F07               	goto	l5228
  6060  16F8  1744               	bsf	(___fldiv@grs^(0+128)+3),6
  6061  16F9  082E               	movf	___fldiv@a^(0+128),w
  6062  16FA  02BA               	subwf	___fldiv@rem^(0+128),f
  6063  16FB  082F               	movf	(___fldiv@a+1)^(0+128),w
  6064  16FC  1C03               	skipc
  6065  16FD  0F2F               	incfsz	(___fldiv@a+1)^(0+128),w
  6066  16FE  02BB               	subwf	(___fldiv@rem+1)^(0+128),f
  6067  16FF  0830               	movf	(___fldiv@a+2)^(0+128),w
  6068  1700  1C03               	skipc
  6069  1701  0F30               	incfsz	(___fldiv@a+2)^(0+128),w
  6070  1702  02BC               	subwf	(___fldiv@rem+2)^(0+128),f
  6071  1703  0831               	movf	(___fldiv@a+3)^(0+128),w
  6072  1704  1C03               	skipc
  6073  1705  0F31               	incfsz	(___fldiv@a+3)^(0+128),w
  6074  1706  02BD               	subwf	(___fldiv@rem+3)^(0+128),f
  6075  1707                     l5228:	
  6076  1707  0AC6               	incf	___fldiv@aexp^(0+128),f
  6077  1708  2ED0               	goto	l5230
  6078  1709                     l5232:	
  6079  1709  083D               	movf	(___fldiv@rem+3)^(0+128),w
  6080  170A  043C               	iorwf	(___fldiv@rem+2)^(0+128),w
  6081  170B  043B               	iorwf	(___fldiv@rem+1)^(0+128),w
  6082  170C  043A               	iorwf	___fldiv@rem^(0+128),w
  6083  170D  1D03               	btfss	3,2
  6084  170E  1441               	bsf	___fldiv@grs^(0+128),0
  6085  170F                     l5246:	
  6086  170F  1BB4               	btfsc	(___fldiv@b+2)^(0+128),7
  6087  1710  2F22               	goto	l5248
  6088  1711  1003               	clrc
  6089  1712  0DB2               	rlf	___fldiv@b^(0+128),f
  6090  1713  0DB3               	rlf	(___fldiv@b+1)^(0+128),f
  6091  1714  0DB4               	rlf	(___fldiv@b+2)^(0+128),f
  6092  1715  0DB5               	rlf	(___fldiv@b+3)^(0+128),f
  6093  1716  1BC4               	btfsc	(___fldiv@grs+3)^(0+128),7
  6094  1717  1432               	bsf	___fldiv@b^(0+128),0
  6095  1718  30FF               	movlw	-1
  6096  1719  1003               	clrc
  6097  171A  0DC1               	rlf	___fldiv@grs^(0+128),f
  6098  171B  0DC2               	rlf	(___fldiv@grs+1)^(0+128),f
  6099  171C  0DC3               	rlf	(___fldiv@grs+2)^(0+128),f
  6100  171D  0DC4               	rlf	(___fldiv@grs+3)^(0+128),f
  6101  171E  07BF               	addwf	___fldiv@new_exp^(0+128),f
  6102  171F  1C03               	skipc
  6103  1720  03C0               	decf	(___fldiv@new_exp+1)^(0+128),f
  6104  1721  2F0F               	goto	l5246
  6105  1722                     l5248:	
  6106  1722  01C6               	clrf	___fldiv@aexp^(0+128)
  6107  1723  1FC4               	btfss	(___fldiv@grs+3)^(0+128),7
  6108  1724  2F38               	goto	l5258
  6109  1725  0841               	movf	___fldiv@grs^(0+128),w
  6110  1726  00B6               	movwf	??___fldiv^(0+128)
  6111  1727  0842               	movf	(___fldiv@grs+1)^(0+128),w
  6112  1728  00B7               	movwf	(??___fldiv^(0+128)+1)
  6113  1729  0843               	movf	(___fldiv@grs+2)^(0+128),w
  6114  172A  00B8               	movwf	(??___fldiv^(0+128)+2)
  6115  172B  307F               	movlw	127
  6116  172C  0544               	andwf	(___fldiv@grs+3)^(0+128),w
  6117  172D  00B9               	movwf	(??___fldiv^(0+128)+3)
  6118  172E  0839               	movf	(??___fldiv+3)^(0+128),w
  6119  172F  0438               	iorwf	(??___fldiv+2)^(0+128),w
  6120  1730  0437               	iorwf	(??___fldiv+1)^(0+128),w
  6121  1731  0436               	iorwf	??___fldiv^(0+128),w
  6122  1732  1903               	skipnz
  6123  1733  1832               	btfsc	___fldiv@b^(0+128),0
  6124  1734  2F36               	goto	l5254
  6125  1735  2F38               	goto	l5258
  6126  1736                     l5254:	
  6127  1736  01C6               	clrf	___fldiv@aexp^(0+128)
  6128  1737  0AC6               	incf	___fldiv@aexp^(0+128),f
  6129  1738                     l5258:	
  6130  1738  0846               	movf	___fldiv@aexp^(0+128),w
  6131  1739  1903               	btfsc	3,2
  6132  173A  2F4C               	goto	l5268
  6133  173B  0AB2               	incf	___fldiv@b^(0+128),f
  6134  173C  1903               	skipnz
  6135  173D  0AB3               	incf	(___fldiv@b+1)^(0+128),f
  6136  173E  1903               	skipnz
  6137  173F  0AB4               	incf	(___fldiv@b+2)^(0+128),f
  6138  1740  1903               	skipnz
  6139  1741  0AB5               	incf	(___fldiv@b+3)^(0+128),f
  6140  1742  1C35               	btfss	(___fldiv@b+3)^(0+128),0
  6141  1743  2F4C               	goto	l5268
  6142  1744  0D35               	rlf	(___fldiv@b+3)^(0+128),w
  6143  1745  0CB5               	rrf	(___fldiv@b+3)^(0+128),f
  6144  1746  0CB4               	rrf	(___fldiv@b+2)^(0+128),f
  6145  1747  0CB3               	rrf	(___fldiv@b+1)^(0+128),f
  6146  1748  0CB2               	rrf	___fldiv@b^(0+128),f
  6147  1749  0ABF               	incf	___fldiv@new_exp^(0+128),f
  6148  174A  1903               	skipnz
  6149  174B  0AC0               	incf	(___fldiv@new_exp+1)^(0+128),f
  6150  174C                     l5268:	
  6151  174C  0840               	movf	(___fldiv@new_exp+1)^(0+128),w
  6152  174D  3A80               	xorlw	128
  6153  174E  00FF               	movwf	127
  6154  174F  3080               	movlw	128
  6155  1750  027F               	subwf	127,w
  6156  1751  1D03               	skipz
  6157  1752  2F55               	goto	u5015
  6158  1753  30FF               	movlw	255
  6159  1754  023F               	subwf	___fldiv@new_exp^(0+128),w
  6160  1755                     u5015:	
  6161  1755  1C03               	skipc
  6162  1756  2F60               	goto	l5274
  6163  1757  30FF               	movlw	255
  6164  1758  1683               	bsf	3,5	;RP0=1, select bank1
  6165  1759  1303               	bcf	3,6	;RP1=0, select bank1
  6166  175A  00BF               	movwf	___fldiv@new_exp^(0+128)
  6167  175B  01C0               	clrf	(___fldiv@new_exp+1)^(0+128)
  6168  175C  01B2               	clrf	___fldiv@b^(0+128)
  6169  175D  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6170  175E  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6171  175F  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6172  1760                     l5274:	
  6173  1760  1683               	bsf	3,5	;RP0=1, select bank1
  6174  1761  1303               	bcf	3,6	;RP1=0, select bank1
  6175  1762  0840               	movf	(___fldiv@new_exp+1)^(0+128),w
  6176  1763  3A80               	xorlw	128
  6177  1764  00FF               	movwf	127
  6178  1765  3080               	movlw	128
  6179  1766  027F               	subwf	127,w
  6180  1767  1D03               	skipz
  6181  1768  2F6B               	goto	u5025
  6182  1769  3001               	movlw	1
  6183  176A  023F               	subwf	___fldiv@new_exp^(0+128),w
  6184  176B                     u5025:	
  6185  176B  1803               	skipnc
  6186  176C  2F76               	goto	l5280
  6187  176D  1683               	bsf	3,5	;RP0=1, select bank1
  6188  176E  1303               	bcf	3,6	;RP1=0, select bank1
  6189  176F  01BF               	clrf	___fldiv@new_exp^(0+128)
  6190  1770  01C0               	clrf	(___fldiv@new_exp+1)^(0+128)
  6191  1771  01B2               	clrf	___fldiv@b^(0+128)
  6192  1772  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6193  1773  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6194  1774  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6195  1775  01BE               	clrf	___fldiv@sign^(0+128)
  6196  1776                     l5280:	
  6197  1776  1683               	bsf	3,5	;RP0=1, select bank1
  6198  1777  1303               	bcf	3,6	;RP1=0, select bank1
  6199  1778  083F               	movf	___fldiv@new_exp^(0+128),w
  6200  1779  00C5               	movwf	___fldiv@bexp^(0+128)
  6201  177A  1C45               	btfss	___fldiv@bexp^(0+128),0
  6202  177B  2F7E               	goto	l1397
  6203  177C  17B4               	bsf	(___fldiv@b^(0+128)+2),7
  6204  177D  2F7F               	goto	l5286
  6205  177E                     l1397:	
  6206  177E  13B4               	bcf	(___fldiv@b^(0+128)+2),7
  6207  177F                     l5286:	
  6208  177F  1003               	clrc
  6209  1780  0C45               	rrf	___fldiv@bexp^(0+128),w
  6210  1781  00B5               	movwf	(___fldiv@b^(0+128)+3)
  6211  1782  2EA1               	goto	L3
  6212  1783                     __end_of___fldiv:	
  6213  1783                     __ptext21:	
  6214 ;; *************** function ___fltol *****************
  6215 ;; Defined at:
  6216 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;  f1              4    4[BANK3 ] unsigned char 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  exp1            1   13[BANK3 ] unsigned char 
  6221 ;;  sign1           1   12[BANK3 ] unsigned char 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  4    4[BANK3 ] long 
  6224 ;; Registers used:
  6225 ;;		wreg, status,2, status,0
  6226 ;; Tracked objects:
  6227 ;;		On entry : 300/300
  6228 ;;		On exit  : 300/300
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6231 ;;      Params:         0       0       0       4       0
  6232 ;;      Locals:         0       0       0       2       0
  6233 ;;      Temps:          0       0       0       4       0
  6234 ;;      Totals:         0       0       0      10       0
  6235 ;;Total ram usage:       10 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:   10
  6238 ;; This function calls:
  6239 ;;		Nothing
  6240 ;; This function is called by:
  6241 ;;		_CCP_PWM_PERIOD_LOAD
  6242 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  6243 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  6244 ;; This function uses a non-reentrant model
  6245 ;;
  6246                           
  6247                           
  6248                           ;psect for function ___fltol
  6249  1783                     ___fltol:	
  6250                           
  6251                           ;incstack = 0
  6252 ;; hardware stack exceeded
  6253                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  6254  1783  1003               	clrc
  6255  1784  0D53               	rlf	(___fltol@f1+2)^(0+384),w
  6256  1785  0D54               	rlf	(___fltol@f1+3)^(0+384),w
  6257  1786  00DA               	movwf	___fltol@exp1^(0+384)
  6258  1787  085A               	movf	___fltol@exp1^(0+384),w
  6259  1788  1D03               	btfss	3,2
  6260  1789  2F8F               	goto	l4940
  6261  178A                     l4938:	
  6262  178A  01D1               	clrf	?___fltol^(0+384)
  6263  178B  01D2               	clrf	(?___fltol+1)^(0+384)
  6264  178C  01D3               	clrf	(?___fltol+2)^(0+384)
  6265  178D  01D4               	clrf	(?___fltol+3)^(0+384)
  6266  178E  0008               	return
  6267  178F                     l4940:	
  6268  178F  0851               	movf	___fltol@f1^(0+384),w
  6269  1790  00D5               	movwf	??___fltol^(0+384)
  6270  1791  0852               	movf	(___fltol@f1+1)^(0+384),w
  6271  1792  00D6               	movwf	(??___fltol^(0+384)+1)
  6272  1793  0853               	movf	(___fltol@f1+2)^(0+384),w
  6273  1794  00D7               	movwf	(??___fltol^(0+384)+2)
  6274  1795  0854               	movf	(___fltol@f1+3)^(0+384),w
  6275  1796  00D8               	movwf	(??___fltol^(0+384)+3)
  6276  1797  301F               	movlw	31
  6277  1798                     u4325:	
  6278  1798  1003               	clrc
  6279  1799  0CD8               	rrf	(??___fltol^(0+384)+3),f
  6280  179A  0CD7               	rrf	(??___fltol^(0+384)+2),f
  6281  179B  0CD6               	rrf	(??___fltol^(0+384)+1),f
  6282  179C  0CD5               	rrf	??___fltol^(0+384),f
  6283  179D  3EFF               	addlw	-1
  6284  179E  1D03               	skipz
  6285  179F  2F98               	goto	u4325
  6286  17A0  0855               	movf	??___fltol^(0+384),w
  6287  17A1  00D9               	movwf	___fltol@sign1^(0+384)
  6288  17A2  3096               	movlw	150
  6289  17A3  17D3               	bsf	(___fltol@f1^(0+384)+2),7
  6290  17A4  01D4               	clrf	(___fltol@f1+3)^(0+384)
  6291  17A5  02DA               	subwf	___fltol@exp1^(0+384),f
  6292  17A6  1FDA               	btfss	___fltol@exp1^(0+384),7
  6293  17A7  2FB5               	goto	l4958
  6294  17A8  085A               	movf	___fltol@exp1^(0+384),w
  6295  17A9  3A80               	xorlw	128
  6296  17AA  3E97               	addlw	151
  6297  17AB  1C03               	btfss	3,0
  6298  17AC  2F8A               	goto	l4938
  6299  17AD                     l4954:	
  6300  17AD  1003               	clrc
  6301  17AE  0CD4               	rrf	(___fltol@f1+3)^(0+384),f
  6302  17AF  0CD3               	rrf	(___fltol@f1+2)^(0+384),f
  6303  17B0  0CD2               	rrf	(___fltol@f1+1)^(0+384),f
  6304  17B1  0CD1               	rrf	___fltol@f1^(0+384),f
  6305  17B2  0FDA               	incfsz	___fltol@exp1^(0+384),f
  6306  17B3  2FAD               	goto	l4954
  6307  17B4  2FC3               	goto	l4966
  6308  17B5                     l4958:	
  6309  17B5  3020               	movlw	32
  6310  17B6  025A               	subwf	___fltol@exp1^(0+384),w
  6311  17B7  1803               	btfsc	3,0
  6312  17B8  2F8A               	goto	l4938
  6313  17B9                     l4964:	
  6314  17B9  085A               	movf	___fltol@exp1^(0+384),w
  6315  17BA  1903               	btfsc	3,2
  6316  17BB  2FC3               	goto	l4966
  6317  17BC  1003               	clrc
  6318  17BD  0DD1               	rlf	___fltol@f1^(0+384),f
  6319  17BE  0DD2               	rlf	(___fltol@f1+1)^(0+384),f
  6320  17BF  0DD3               	rlf	(___fltol@f1+2)^(0+384),f
  6321  17C0  0DD4               	rlf	(___fltol@f1+3)^(0+384),f
  6322  17C1  03DA               	decf	___fltol@exp1^(0+384),f
  6323  17C2  2FB9               	goto	l4964
  6324  17C3                     l4966:	
  6325  17C3  0859               	movf	___fltol@sign1^(0+384),w
  6326  17C4  1903               	btfsc	3,2
  6327  17C5  0008               	return
  6328  17C6  09D1               	comf	___fltol@f1^(0+384),f
  6329  17C7  09D2               	comf	(___fltol@f1+1)^(0+384),f
  6330  17C8  09D3               	comf	(___fltol@f1+2)^(0+384),f
  6331  17C9  09D4               	comf	(___fltol@f1+3)^(0+384),f
  6332  17CA  0AD1               	incf	___fltol@f1^(0+384),f
  6333  17CB  1903               	skipnz
  6334  17CC  0AD2               	incf	(___fltol@f1+1)^(0+384),f
  6335  17CD  1903               	skipnz
  6336  17CE  0AD3               	incf	(___fltol@f1+2)^(0+384),f
  6337  17CF  1903               	skipnz
  6338  17D0  0AD4               	incf	(___fltol@f1+3)^(0+384),f
  6339  17D1  0008               	return
  6340  17D2                     __end_of___fltol:	
  6341  17D2                     __ptext25:	
  6342 ;; *************** function _CCP2_INIT *****************
  6343 ;; Defined at:
  6344 ;;		line 58 in file "CCP.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;		None
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;		None
  6349 ;; Return value:  Size  Location     Type
  6350 ;;                  1    wreg      void 
  6351 ;; Registers used:
  6352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 300/300
  6355 ;;		On exit  : 300/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6358 ;;      Params:         0       0       0       0       0
  6359 ;;      Locals:         0       0       0       0       0
  6360 ;;      Temps:          0       0       0       0       0
  6361 ;;      Totals:         0       0       0       0       0
  6362 ;;Total ram usage:        0 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:   12
  6365 ;; This function calls:
  6366 ;;		_GPIO_PIN_INIT
  6367 ;;		_TIMER2_INIT
  6368 ;;		_TIMER2_START
  6369 ;; This function is called by:
  6370 ;;		_HEATER_INIT
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           
  6375                           ;psect for function _CCP2_INIT
  6376  17D2                     _CCP2_INIT:	
  6377                           
  6378                           ;CCP.c: 73:  {;CCP.c: 74:   TIMER2_INIT();
  6379                           
  6380                           ;incstack = 0
  6381 ;; hardware stack exceeded
  6382                           ; Regs used in _CCP2_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6383  17D2  27E4  160A  118A   	fcall	_TIMER2_INIT
  6384                           
  6385                           ;CCP.c: 75:         TIMER2_START();
  6386  17D5  27F2               	fcall	_TIMER2_START
  6387                           
  6388                           ;CCP.c: 76:   GPIO_PIN_INIT( (0x0007), GPIO_PIN_1, GPIO_PIN_OUT );
  6389  17D6  1683               	bsf	3,5	;RP0=1, select bank1
  6390  17D7  3007               	movlw	7
  6391  17D8  01A3               	clrf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  6392  17D9  0AA3               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),f
  6393  17DA  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  6394  17DB  120A  118A  2525   	fcall	_GPIO_PIN_INIT
  6395                           
  6396                           ;CCP.c: 77:  };CCP.c: 89:  (CCP2CONbits.CCP2M = 12 ) ;
  6397  17DE  1283               	bcf	3,5	;RP0=0, select bank0
  6398  17DF  081D               	movf	29,w	;volatile
  6399  17E0  39F0               	andlw	-16
  6400  17E1  380C               	iorlw	12
  6401  17E2  009D               	movwf	29	;volatile
  6402  17E3  0008               	return
  6403  17E4                     __end_of_CCP2_INIT:	
  6404  17E4                     __ptext27:	
  6405 ;; *************** function _TIMER2_INIT *****************
  6406 ;; Defined at:
  6407 ;;		line 32 in file "TIMR2.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;		None
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;		None
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  1    wreg      void 
  6414 ;; Registers used:
  6415 ;;		wreg, status,2, status,0, pclath, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 300/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6421 ;;      Params:         0       0       0       0       0
  6422 ;;      Locals:         0       0       0       0       0
  6423 ;;      Temps:          0       0       0       0       0
  6424 ;;      Totals:         0       0       0       0       0
  6425 ;;Total ram usage:        0 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:   11
  6428 ;; This function calls:
  6429 ;;		_TIMER2_STOP
  6430 ;; This function is called by:
  6431 ;;		_CCP1_INIT
  6432 ;;		_CCP2_INIT
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           
  6437                           ;psect for function _TIMER2_INIT
  6438  17E4                     _TIMER2_INIT:	
  6439                           
  6440                           ;TIMR2.c: 34:  ( T2CONbits.T2CKPS = TIMER2_PRE_CLK_16 );
  6441                           
  6442                           ;incstack = 0
  6443 ;; hardware stack exceeded
  6444                           ; Regs used in _TIMER2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6445  17E4  1283               	bcf	3,5	;RP0=0, select bank0
  6446  17E5  1303               	bcf	3,6	;RP1=0, select bank0
  6447  17E6  0812               	movf	18,w	;volatile
  6448  17E7  39FC               	andlw	-4
  6449  17E8  3802               	iorlw	2
  6450  17E9  0092               	movwf	18	;volatile
  6451                           
  6452                           ;TIMR2.c: 35:  (T2CONbits.TOUTPS = TIMER2_POST_CLK_16 );
  6453  17EA  3078               	movlw	120
  6454  17EB  0492               	iorwf	18,f	;volatile
  6455                           
  6456                           ;TIMR2.c: 36:  ( TMR2IE = TIMER2_POLLING_BASED );
  6457  17EC  1683               	bsf	3,5	;RP0=1, select bank1
  6458  17ED  108C               	bcf	12,1	;volatile
  6459                           
  6460                           ;TIMR2.c: 37:  (TMR2 = ((256) - ((0) * ((double) (8 * 1000) / ( 4 * 256 ) ) )) );
  6461  17EE  3000               	movlw	0
  6462  17EF  1283               	bcf	3,5	;RP0=0, select bank0
  6463  17F0  0191               	clrf	17	;volatile
  6464                           
  6465                           ;TIMR2.c: 38:     TIMER2_STOP();
  6466  17F1  2FF4               	ljmp	l4510
  6467  17F2                     __end_of_TIMER2_INIT:	
  6468  17F2                     __ptext26:	
  6469 ;; *************** function _TIMER2_START *****************
  6470 ;; Defined at:
  6471 ;;		line 42 in file "TIMR2.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;		None
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;		None
  6476 ;; Return value:  Size  Location     Type
  6477 ;;                  1    wreg      void 
  6478 ;; Registers used:
  6479 ;;		None
  6480 ;; Tracked objects:
  6481 ;;		On entry : 300/0
  6482 ;;		On exit  : 300/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6485 ;;      Params:         0       0       0       0       0
  6486 ;;      Locals:         0       0       0       0       0
  6487 ;;      Temps:          0       0       0       0       0
  6488 ;;      Totals:         0       0       0       0       0
  6489 ;;Total ram usage:        0 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; Hardware stack levels required when called:   10
  6492 ;; This function calls:
  6493 ;;		Nothing
  6494 ;; This function is called by:
  6495 ;;		_CCP1_INIT
  6496 ;;		_CCP2_INIT
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           
  6501                           ;psect for function _TIMER2_START
  6502  17F2                     _TIMER2_START:	
  6503                           
  6504                           ;TIMR2.c: 44:     ( TMR2ON = GPIO_PIN_ON );
  6505                           
  6506                           ;incstack = 0
  6507 ;; hardware stack exceeded
  6508                           ; Regs used in _TIMER2_START: []
  6509  17F2  1512               	bsf	18,2	;volatile
  6510  17F3  0008               	return
  6511  17F4                     __end_of_TIMER2_START:	
  6512  17F4                     __ptext28:	
  6513 ;; *************** function _TIMER2_STOP *****************
  6514 ;; Defined at:
  6515 ;;		line 46 in file "TIMR2.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;		None
  6518 ;; Auto vars:     Size  Location     Type
  6519 ;;		None
  6520 ;; Return value:  Size  Location     Type
  6521 ;;                  1    wreg      void 
  6522 ;; Registers used:
  6523 ;;		None
  6524 ;; Tracked objects:
  6525 ;;		On entry : 300/0
  6526 ;;		On exit  : 300/0
  6527 ;;		Unchanged: 0/0
  6528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6529 ;;      Params:         0       0       0       0       0
  6530 ;;      Locals:         0       0       0       0       0
  6531 ;;      Temps:          0       0       0       0       0
  6532 ;;      Totals:         0       0       0       0       0
  6533 ;;Total ram usage:        0 bytes
  6534 ;; Hardware stack levels used:    1
  6535 ;; Hardware stack levels required when called:   10
  6536 ;; This function calls:
  6537 ;;		Nothing
  6538 ;; This function is called by:
  6539 ;;		_TIMER2_INIT
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           
  6544                           ;psect for function _TIMER2_STOP
  6545  17F4                     _TIMER2_STOP:	
  6546  17F4                     l4510:	
  6547                           ;incstack = 0
  6548 ;; hardware stack exceeded
  6549                           ; Regs used in _TIMER2_STOP: []
  6550                           
  6551                           
  6552                           ;TIMR2.c: 48:     ( TMR2ON = GPIO_PIN_OFF );
  6553  17F4  1112               	bcf	18,2	;volatile
  6554  17F5  0008               	return
  6555  17F6                     __end_of_TIMER2_STOP:	
  6556  17F6                     __ptext16:	
  6557 ;; *************** function _HEATER_SET_STATE *****************
  6558 ;; Defined at:
  6559 ;;		line 59 in file "HEATER.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;  HEATER_STATE    1    wreg     unsigned char 
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  HEATER_STATE    1    0[BANK1 ] unsigned char 
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  1    wreg      void 
  6566 ;; Registers used:
  6567 ;;		wreg
  6568 ;; Tracked objects:
  6569 ;;		On entry : 300/0
  6570 ;;		On exit  : 300/300
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6573 ;;      Params:         0       0       0       0       0
  6574 ;;      Locals:         0       0       1       0       0
  6575 ;;      Temps:          0       0       0       0       0
  6576 ;;      Totals:         0       0       1       0       0
  6577 ;;Total ram usage:        1 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:   10
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		_HEATER_INIT
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           
  6588                           ;psect for function _HEATER_SET_STATE
  6589  17F6                     _HEATER_SET_STATE:	
  6590                           
  6591                           ;incstack = 0
  6592 ;; hardware stack exceeded
  6593                           ; Regs used in _HEATER_SET_STATE: [wreg]
  6594                           ;HEATER_SET_STATE@HEATER_STATE stored from wreg
  6595  17F6  1683               	bsf	3,5	;RP0=1, select bank1
  6596  17F7  00A0               	movwf	HEATER_SET_STATE@HEATER_STATE^(0+128)
  6597                           
  6598                           ;HEATER.c: 59: void HEATER_SET_STATE (tHEATER_STATE HEATER_STATE);HEATER.c: 60: {;HEATER
      +                          .c: 61:     DESIRED_HEAT = HEATER_STATE ;
  6599  17F8  1703               	bsf	3,6	;RP1=1, select bank3
  6600  17F9  00E6               	movwf	_DESIRED_HEAT^(0+384)
  6601  17FA  0008               	return
  6602  17FB                     __end_of_HEATER_SET_STATE:	
  6603  17FB                     __ptext7:	
  6604 ;; *************** function _MOTOR_SET_STATE *****************
  6605 ;; Defined at:
  6606 ;;		line 58 in file "MOTOR.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;  MOTOR_STATE     1    wreg     unsigned char 
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;  MOTOR_STATE     1    0[BANK1 ] unsigned char 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		wreg
  6615 ;; Tracked objects:
  6616 ;;		On entry : 300/0
  6617 ;;		On exit  : 300/300
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6620 ;;      Params:         0       0       0       0       0
  6621 ;;      Locals:         0       0       1       0       0
  6622 ;;      Temps:          0       0       0       0       0
  6623 ;;      Totals:         0       0       1       0       0
  6624 ;;Total ram usage:        1 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:   10
  6627 ;; This function calls:
  6628 ;;		Nothing
  6629 ;; This function is called by:
  6630 ;;		_MOTOR_INIT
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _MOTOR_SET_STATE
  6636  17FB                     _MOTOR_SET_STATE:	
  6637                           
  6638                           ;incstack = 0
  6639 ;; hardware stack exceeded
  6640                           ; Regs used in _MOTOR_SET_STATE: [wreg]
  6641                           ;MOTOR_SET_STATE@MOTOR_STATE stored from wreg
  6642  17FB  1683               	bsf	3,5	;RP0=1, select bank1
  6643  17FC  00A0               	movwf	MOTOR_SET_STATE@MOTOR_STATE^(0+128)
  6644                           
  6645                           ;MOTOR.c: 58: void MOTOR_SET_STATE (tMOTOR_STATE MOTOR_STATE);MOTOR.c: 59: {;MOTOR.c: 60
      +                          :     DESIRED_SPEED = MOTOR_STATE ;
  6646  17FD  1703               	bsf	3,6	;RP1=1, select bank3
  6647  17FE  00E7               	movwf	_DESIRED_SPEED^(0+384)
  6648  17FF  0008               	return
  6649  1800                     __end_of_MOTOR_SET_STATE:	
  6650                           
  6651                           	psect	text30
  6652  1E5C                     __ptext30:	
  6653 ;; *************** function _ENABLE_INTERUPT *****************
  6654 ;; Defined at:
  6655 ;;		line 21 in file "util.c"
  6656 ;; Parameters:    Size  Location     Type
  6657 ;;		None
  6658 ;; Auto vars:     Size  Location     Type
  6659 ;;		None
  6660 ;; Return value:  Size  Location     Type
  6661 ;;                  1    wreg      void 
  6662 ;; Registers used:
  6663 ;;		None
  6664 ;; Tracked objects:
  6665 ;;		On entry : B00/B00
  6666 ;;		On exit  : B00/B00
  6667 ;;		Unchanged: B00/0
  6668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6669 ;;      Params:         0       0       0       0       0
  6670 ;;      Locals:         0       0       0       0       0
  6671 ;;      Temps:          0       0       0       0       0
  6672 ;;      Totals:         0       0       0       0       0
  6673 ;;Total ram usage:        0 bytes
  6674 ;; Hardware stack levels used:    1
  6675 ;; Hardware stack levels required when called:   10
  6676 ;; This function calls:
  6677 ;;		Nothing
  6678 ;; This function is called by:
  6679 ;;		_main
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           
  6684                           ;psect for function _ENABLE_INTERUPT
  6685  1E5C                     _ENABLE_INTERUPT:	
  6686                           
  6687                           ;util.c: 23:     PEIE=1 ;
  6688                           
  6689                           ;incstack = 0
  6690 ;; hardware stack exceeded
  6691                           ; Regs used in _ENABLE_INTERUPT: []
  6692  1E5C  170B               	bsf	11,6	;volatile
  6693                           
  6694                           ;util.c: 24:     GIE=1;
  6695  1E5D  178B               	bsf	11,7	;volatile
  6696  1E5E  0008               	return
  6697  1E5F                     __end_of_ENABLE_INTERUPT:	
  6698                           
  6699                           	psect	text31
  6700  1EB2                     __ptext31:	
  6701 ;; *************** function _CONTROL_INIT *****************
  6702 ;; Defined at:
  6703 ;;		line 40 in file "CONTROL.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;		None
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;  count           1    0[BANK1 ] unsigned char 
  6708 ;; Return value:  Size  Location     Type
  6709 ;;                  1    wreg      void 
  6710 ;; Registers used:
  6711 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6712 ;; Tracked objects:
  6713 ;;		On entry : B00/B00
  6714 ;;		On exit  : B00/B00
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6717 ;;      Params:         0       0       0       0       0
  6718 ;;      Locals:         0       0       1       0       0
  6719 ;;      Temps:          0       0       0       0       0
  6720 ;;      Totals:         0       0       1       0       0
  6721 ;;Total ram usage:        1 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:   10
  6724 ;; This function calls:
  6725 ;;		Nothing
  6726 ;; This function is called by:
  6727 ;;		_main
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           
  6732                           ;psect for function _CONTROL_INIT
  6733  1EB2                     _CONTROL_INIT:	
  6734                           
  6735                           ;CONTROL.c: 42:     tbyte count = 0 ;
  6736                           
  6737                           ;incstack = 0
  6738 ;; hardware stack exceeded
  6739                           ; Regs used in _CONTROL_INIT: [wreg-fsr0h+status,2+status,0]
  6740  1EB2  1303               	bcf	3,6	;RP1=0, select bank1
  6741  1EB3  01A0               	clrf	CONTROL_INIT@count^(0+128)
  6742  1EB4                     l6416:	
  6743                           
  6744                           ;CONTROL.c: 44:     {;CONTROL.c: 45:         HANDLERS_STATES[count] = FIRST_TIME;
  6745  1EB4  0820               	movf	CONTROL_INIT@count^(0+128),w
  6746  1EB5  3EB0               	addlw	(low (_HANDLERS_STATES| (0+256)))& (0+255)
  6747  1EB6  0084               	movwf	4
  6748  1EB7  3005               	movlw	5
  6749  1EB8  0180               	clrf	0
  6750                           
  6751                           ;CONTROL.c: 46:     }
  6752  1EB9  0AA0               	incf	CONTROL_INIT@count^(0+128),f
  6753  1EBA  0220               	subwf	CONTROL_INIT@count^(0+128),w
  6754  1EBB  1C03               	skipc
  6755  1EBC  2EB4               	goto	l6416
  6756                           
  6757                           ;CONTROL.c: 47:     CONTROL_CURRENT_STATE = SET_TIME ;
  6758  1EBD  1703               	bsf	3,6	;RP1=1, select bank3
  6759  1EBE  01C8               	clrf	_CONTROL_CURRENT_STATE^(0+384)
  6760                           
  6761                           ;CONTROL.c: 48:     SETTED_TIME.HOURS = 0;
  6762  1EBF  1283               	bcf	3,5	;RP0=0, select bank0
  6763  1EC0  1303               	bcf	3,6	;RP1=0, select bank0
  6764  1EC1  302D               	movlw	45
  6765  1EC2  01ED               	clrf	_SETTED_TIME+2
  6766                           
  6767                           ;CONTROL.c: 49:     SETTED_TIME.MINUTES = 0;
  6768  1EC3  01EC               	clrf	_SETTED_TIME+1
  6769                           
  6770                           ;CONTROL.c: 50:     SETTED_TIME.SECONDS = 0;
  6771  1EC4  01EB               	clrf	_SETTED_TIME
  6772                           
  6773                           ;CONTROL.c: 51:     MOTOR_WORK_STATE = 45 ;
  6774  1EC5  1683               	bsf	3,5	;RP0=1, select bank3
  6775  1EC6  1703               	bsf	3,6	;RP1=1, select bank3
  6776  1EC7  00C7               	movwf	_MOTOR_WORK_STATE^(0+384)
  6777                           
  6778                           ;CONTROL.c: 52:     HEATER_WORK_STATE = 166 ;
  6779  1EC8  30A6               	movlw	166
  6780  1EC9  00C6               	movwf	_HEATER_WORK_STATE^(0+384)
  6781  1ECA  0008               	return
  6782  1ECB                     __end_of_CONTROL_INIT:	
  6783                           
  6784                           	psect	text32
  6785  0805                     __ptext32:	
  6786 ;; *************** function _SYS_UPDATE *****************
  6787 ;; Defined at:
  6788 ;;		line 33 in file "MICROWAVE.c"
  6789 ;; Parameters:    Size  Location     Type
  6790 ;;		None
  6791 ;; Auto vars:     Size  Location     Type
  6792 ;;		None
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  1    wreg      void 
  6795 ;; Registers used:
  6796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 300/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6802 ;;      Params:         0       0       0       0       0
  6803 ;;      Locals:         0       0       0       0       0
  6804 ;;      Temps:          0       4       0       0       0
  6805 ;;      Totals:         0       4       0       0       0
  6806 ;;Total ram usage:        4 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    9
  6809 ;; This function calls:
  6810 ;;		_CONTROL_UPDATE
  6811 ;;		_HEATER_UPDATE
  6812 ;;		_KEYPAD_UPDATE
  6813 ;;		_MOTOR_UPDATE
  6814 ;;		_SWs_UPDATE
  6815 ;;		_TIMER0_UPDATE
  6816 ;;		_TIME_UPDATE
  6817 ;; This function is called by:
  6818 ;;		Interrupt level 1
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           
  6823                           ;psect for function _SYS_UPDATE
  6824  0805                     _SYS_UPDATE:	
  6825                           
  6826                           ;MICROWAVE.c: 35:     if (( TMR0IF ))
  6827  0805  1D0B               	btfss	11,2	;volatile
  6828  0806  2820               	goto	i1l926
  6829                           
  6830                           ;MICROWAVE.c: 36:     {;MICROWAVE.c: 37:         TIME_UPDATE();
  6831  0807  160A  158A  2715  120A  158A  	fcall	_TIME_UPDATE
  6832                           
  6833                           ;MICROWAVE.c: 38:         HEATER_UPDATE();
  6834  080C  160A  158A  26CB  120A  158A  	fcall	_HEATER_UPDATE
  6835                           
  6836                           ;MICROWAVE.c: 39:         MOTOR_UPDATE();
  6837  0811  120A  118A  27E1  120A  158A  	fcall	_MOTOR_UPDATE
  6838                           
  6839                           ;MICROWAVE.c: 40:         SWs_UPDATE();
  6840  0816  2351  120A  158A   	fcall	_SWs_UPDATE
  6841                           
  6842                           ;MICROWAVE.c: 41:         KEYPAD_UPDATE();
  6843  0819  253D  120A  158A   	fcall	_KEYPAD_UPDATE
  6844                           
  6845                           ;MICROWAVE.c: 42:         CONTROL_UPDATE ();
  6846  081C  202B  120A  158A   	fcall	_CONTROL_UPDATE
  6847                           
  6848                           ;MICROWAVE.c: 43:         TIMER0_UPDATE();
  6849  081F  27F7               	fcall	_TIMER0_UPDATE
  6850  0820                     i1l926:	
  6851  0820  086A               	movf	??_SYS_UPDATE+3,w
  6852  0821  00FF               	movwf	127
  6853  0822  0869               	movf	??_SYS_UPDATE+2,w
  6854  0823  008A               	movwf	10
  6855  0824  0868               	movf	??_SYS_UPDATE+1,w
  6856  0825  0084               	movwf	4
  6857  0826  0E67               	swapf	??_SYS_UPDATE^0,w
  6858  0827  0083               	movwf	3
  6859  0828  0EFE               	swapf	126,f
  6860  0829  0E7E               	swapf	126,w
  6861  082A  0009               	retfie
  6862  082B                     __end_of_SYS_UPDATE:	
  6863  082B                     __ptext47:	
  6864 ;; *************** function _CONTROL_UPDATE *****************
  6865 ;; Defined at:
  6866 ;;		line 55 in file "CONTROL.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      void 
  6873 ;; Registers used:
  6874 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6880 ;;      Params:         0       0       0       0       0
  6881 ;;      Locals:         0       0       0       0       0
  6882 ;;      Temps:          0       2       0       0       0
  6883 ;;      Totals:         0       2       0       0       0
  6884 ;;Total ram usage:        2 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    8
  6887 ;; This function calls:
  6888 ;;		_DEFAULT_HANDLER
  6889 ;;		_FINISH_HANDLER
  6890 ;;		_HEATING_HANDLER
  6891 ;;		_KEYPAD_GET_PRESSED_KEY
  6892 ;;		_SET_HEATING_HANDLER
  6893 ;;		_SET_ROTOR_PWR_HANDLER
  6894 ;;		_SET_TIME_HANDLER
  6895 ;; This function is called by:
  6896 ;;		_SYS_UPDATE
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           
  6901                           ;psect for function _CONTROL_UPDATE
  6902  082B                     _CONTROL_UPDATE:	
  6903                           
  6904                           ;CONTROL.c: 57:     PRESSED_KEY = KEYPAD_GET_PRESSED_KEY() ;
  6905                           
  6906                           ;incstack = 0
  6907 ;; hardware stack exceeded
  6908                           ; Regs used in _CONTROL_UPDATE: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6909  082B  276D  120A  158A   	fcall	_KEYPAD_GET_PRESSED_KEY
  6910  082E  0871               	movf	?_KEYPAD_GET_PRESSED_KEY+1,w
  6911  082F  00BF               	movwf	(_PRESSED_KEY+1)^(0+384)
  6912  0830  0870               	movf	?_KEYPAD_GET_PRESSED_KEY,w
  6913  0831  00BE               	movwf	_PRESSED_KEY^(0+384)
  6914                           
  6915                           ;CONTROL.c: 58:     switch (CONTROL_CURRENT_STATE)
  6916  0832  2849               	goto	i1l6442
  6917  0833                     i1l6430:	
  6918                           
  6919                           ;CONTROL.c: 61:             SET_TIME_HANDLER();
  6920  0833  120A  118A  26E8  120A  158A  	fcall	_SET_TIME_HANDLER
  6921                           
  6922                           ;CONTROL.c: 62:         break;
  6923  0838  2860               	goto	i1l6444
  6924  0839                     i1l6432:	
  6925                           
  6926                           ;CONTROL.c: 64:             SET_HEATING_HANDLER();
  6927  0839  27B9  120A  158A   	fcall	_SET_HEATING_HANDLER
  6928                           
  6929                           ;CONTROL.c: 65:         break;
  6930  083C  2860               	goto	i1l6444
  6931  083D                     i1l6434:	
  6932                           
  6933                           ;CONTROL.c: 67:             SET_ROTOR_PWR_HANDLER();
  6934  083D  27D8  120A  158A   	fcall	_SET_ROTOR_PWR_HANDLER
  6935                           
  6936                           ;CONTROL.c: 68:         break;
  6937  0840  2860               	goto	i1l6444
  6938  0841                     i1l6436:	
  6939                           
  6940                           ;CONTROL.c: 70:             HEATING_HANDLER();
  6941  0841  21B5  120A  158A   	fcall	_HEATING_HANDLER
  6942                           
  6943                           ;CONTROL.c: 71:         break;
  6944  0844  2860               	goto	i1l6444
  6945  0845                     i1l6438:	
  6946                           
  6947                           ;CONTROL.c: 73:             FINISH_HANDLER();
  6948  0845  2778  120A  158A   	fcall	_FINISH_HANDLER
  6949                           
  6950                           ;CONTROL.c: 74:         break;
  6951  0848  2860               	goto	i1l6444
  6952  0849                     i1l6442:	
  6953  0849  0848               	movf	_CONTROL_CURRENT_STATE^(0+384),w
  6954  084A  1283               	bcf	3,5	;RP0=0, select bank0
  6955  084B  1303               	bcf	3,6	;RP1=0, select bank0
  6956  084C  00B7               	movwf	??_CONTROL_UPDATE
  6957  084D  01B8               	clrf	??_CONTROL_UPDATE+1
  6958                           
  6959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6960                           ; Switch size 1, requested type "speed"
  6961                           ; Number of cases is 1, Range of values is 0 to 0
  6962                           ; switch strategies available:
  6963                           ; Name         Instructions Cycles
  6964                           ; simple_byte            4     3 (average)
  6965                           ; direct_byte           11     8 (fixed)
  6966                           ; jumptable            260     6 (fixed)
  6967                           ;	Chosen strategy is simple_byte
  6968  084E  0838               	movf	??_CONTROL_UPDATE+1,w
  6969  084F  3A00               	xorlw	0	; case 0
  6970  0850  1903               	skipnz
  6971  0851  2853               	goto	i1l6776
  6972  0852  2860               	goto	i1l6444
  6973  0853                     i1l6776:	
  6974                           
  6975                           ; Switch size 1, requested type "speed"
  6976                           ; Number of cases is 5, Range of values is 0 to 4
  6977                           ; switch strategies available:
  6978                           ; Name         Instructions Cycles
  6979                           ; direct_byte           23     8 (fixed)
  6980                           ; simple_byte           16     9 (average)
  6981                           ; jumptable            260     6 (fixed)
  6982                           ;	Chosen strategy is direct_byte
  6983  0853  0837               	movf	??_CONTROL_UPDATE,w
  6984  0854  0084               	movwf	4
  6985  0855  3005               	movlw	5
  6986  0856  0204               	subwf	4,w
  6987  0857  1803               	skipnc
  6988  0858  2860               	goto	i1l6444
  6989  0859  3018               	movlw	high i1S6778
  6990  085A  008A               	movwf	10
  6991  085B  1003               	clrc
  6992  085C  0D04               	rlf	4,w
  6993  085D  0704               	addwf	4,w
  6994  085E  3EAB               	addlw	low i1S6778
  6995  085F  0082               	movwf	2
  6996  0860                     i1l6444:	
  6997                           
  6998                           ;CONTROL.c: 80:    DEFAULT_HANDLER();
  6999  0860  2965               	ljmp	i1l5994
  7000  0861                     __end_of_CONTROL_UPDATE:	
  7001  0861                     __ptext71:	
  7002 ;; *************** function _DISP_UPDATE_TIME *****************
  7003 ;; Defined at:
  7004 ;;		line 33 in file "Display.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;  time            3   15[BANK0 ] struct .
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;		None
  7009 ;; Return value:  Size  Location     Type
  7010 ;;                  1    wreg      void 
  7011 ;; Registers used:
  7012 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7013 ;; Tracked objects:
  7014 ;;		On entry : 300/0
  7015 ;;		On exit  : 300/300
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7018 ;;      Params:         0       3       0       0       0
  7019 ;;      Locals:         0       0       0       0       0
  7020 ;;      Temps:          0       0       0       0       0
  7021 ;;      Totals:         0       3       0       0       0
  7022 ;;Total ram usage:        3 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    5
  7025 ;; This function calls:
  7026 ;;		_UPDATE_LCD_HOURS
  7027 ;;		_UPDATE_LCD_MINUTES
  7028 ;;		_UPDATE_LCD_SECONDS
  7029 ;; This function is called by:
  7030 ;;		_HEATING_HANDLER
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           
  7035                           ;psect for function _DISP_UPDATE_TIME
  7036  0861                     _DISP_UPDATE_TIME:	
  7037                           
  7038                           ;Display.c: 33: void DISP_UPDATE_TIME (tTIME time);Display.c: 34: {;Display.c: 36:      
      +                          if ( time.SECONDS != last_time.SECONDS )
  7039                           
  7040                           ;incstack = 0
  7041 ;; hardware stack exceeded
  7042                           ; Regs used in _DISP_UPDATE_TIME: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7043  0861  082F               	movf	DISP_UPDATE_TIME@time,w
  7044  0862  1683               	bsf	3,5	;RP0=1, select bank3
  7045  0863  1703               	bsf	3,6	;RP1=1, select bank3
  7046  0864  0638               	xorwf	_last_time^(0+384),w
  7047  0865  1903               	skipnz
  7048  0866  2883               	goto	i1l4754
  7049                           
  7050                           ;Display.c: 37:  {;Display.c: 38:   UPDATE_LCD_SECONDS( time.SECONDS);
  7051  0867  1283               	bcf	3,5	;RP0=0, select bank0
  7052  0868  1303               	bcf	3,6	;RP1=0, select bank0
  7053  0869  082F               	movf	DISP_UPDATE_TIME@time,w
  7054  086A  24E6  120A  158A   	fcall	_UPDATE_LCD_SECONDS
  7055                           
  7056                           ;Display.c: 39:   if (time.MINUTES != last_time.MINUTES )
  7057  086D  0830               	movf	DISP_UPDATE_TIME@time+1,w
  7058  086E  1683               	bsf	3,5	;RP0=1, select bank3
  7059  086F  1703               	bsf	3,6	;RP1=1, select bank3
  7060  0870  0639               	xorwf	(_last_time^(0+384)+1),w
  7061  0871  1903               	skipnz
  7062  0872  2883               	goto	i1l4754
  7063                           
  7064                           ;Display.c: 40:   {;Display.c: 41:    UPDATE_LCD_MINUTES(time.MINUTES);
  7065  0873  1283               	bcf	3,5	;RP0=0, select bank0
  7066  0874  1303               	bcf	3,6	;RP1=0, select bank0
  7067  0875  0830               	movf	DISP_UPDATE_TIME@time+1,w
  7068  0876  249D  120A  158A   	fcall	_UPDATE_LCD_MINUTES
  7069                           
  7070                           ;Display.c: 42:    if (time.HOURS != last_time.HOURS )
  7071  0879  0831               	movf	DISP_UPDATE_TIME@time+2,w
  7072  087A  1683               	bsf	3,5	;RP0=1, select bank3
  7073  087B  1703               	bsf	3,6	;RP1=1, select bank3
  7074  087C  063A               	xorwf	(_last_time^(0+384)+2),w
  7075  087D  1903               	skipnz
  7076  087E  2883               	goto	i1l4754
  7077                           
  7078                           ;Display.c: 43:    {;Display.c: 44:     UPDATE_LCD_HOURS(time.HOURS);
  7079  087F  1283               	bcf	3,5	;RP0=0, select bank0
  7080  0880  1303               	bcf	3,6	;RP1=0, select bank0
  7081  0881  0831               	movf	DISP_UPDATE_TIME@time+2,w
  7082  0882  2146               	fcall	_UPDATE_LCD_HOURS
  7083  0883                     i1l4754:	
  7084                           
  7085                           ;Display.c: 48:  last_time = time ;
  7086  0883  1283               	bcf	3,5	;RP0=0, select bank0
  7087  0884  1303               	bcf	3,6	;RP1=0, select bank0
  7088  0885  082F               	movf	DISP_UPDATE_TIME@time,w
  7089  0886  1683               	bsf	3,5	;RP0=1, select bank3
  7090  0887  1703               	bsf	3,6	;RP1=1, select bank3
  7091  0888  00B8               	movwf	_last_time^(0+384)
  7092  0889  1283               	bcf	3,5	;RP0=0, select bank0
  7093  088A  1303               	bcf	3,6	;RP1=0, select bank0
  7094  088B  0830               	movf	DISP_UPDATE_TIME@time+1,w
  7095  088C  1683               	bsf	3,5	;RP0=1, select bank3
  7096  088D  1703               	bsf	3,6	;RP1=1, select bank3
  7097  088E  00B9               	movwf	(_last_time+1)^(0+384)
  7098  088F  1283               	bcf	3,5	;RP0=0, select bank0
  7099  0890  1303               	bcf	3,6	;RP1=0, select bank0
  7100  0891  0831               	movf	DISP_UPDATE_TIME@time+2,w
  7101  0892  1683               	bsf	3,5	;RP0=1, select bank3
  7102  0893  1703               	bsf	3,6	;RP1=1, select bank3
  7103  0894  00BA               	movwf	(_last_time+2)^(0+384)
  7104  0895  0008               	return
  7105  0896                     __end_of_DISP_UPDATE_TIME:	
  7106  0896                     __ptext59:	
  7107 ;; *************** function _SET_HEATING_HANDLER_ON_WORK *****************
  7108 ;; Defined at:
  7109 ;;		line 279 in file "CONTROL.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;		None
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;		None
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  1    wreg      void 
  7116 ;; Registers used:
  7117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7118 ;; Tracked objects:
  7119 ;;		On entry : 300/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7123 ;;      Params:         0       0       0       0       0
  7124 ;;      Locals:         0       0       0       0       0
  7125 ;;      Temps:          0       2       0       0       0
  7126 ;;      Totals:         0       2       0       0       0
  7127 ;;Total ram usage:        2 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    4
  7130 ;; This function calls:
  7131 ;;		_START_BLINKING_AT
  7132 ;;		_STOP_BLINKING
  7133 ;; This function is called by:
  7134 ;;		_SET_HEATING_HANDLER
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function _SET_HEATING_HANDLER_ON_WORK
  7140  0896                     _SET_HEATING_HANDLER_ON_WORK:	
  7141  0896                     i1l4832:	
  7142                           ;incstack = 0
  7143 ;; hardware stack exceeded
  7144                           ; Regs used in _SET_HEATING_HANDLER_ON_WORK: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
  7145                           
  7146                           
  7147                           ;CONTROL.c: 281:             switch (HEATER_WORK_STATE)
  7148  0896  28A6               	goto	i1l4842
  7149  0897                     i1l4834:	
  7150                           
  7151                           ;CONTROL.c: 284:                     START_BLINKING_AT((11));
  7152  0897  300B               	movlw	11
  7153  0898  213D  120A  158A   	fcall	_START_BLINKING_AT
  7154                           
  7155                           ;CONTROL.c: 285:                 break;
  7156  089B  28BD               	goto	i1l4844
  7157  089C                     i1l4836:	
  7158                           
  7159                           ;CONTROL.c: 287:                     START_BLINKING_AT((13));
  7160  089C  300D               	movlw	13
  7161  089D  213D  120A  158A   	fcall	_START_BLINKING_AT
  7162                           
  7163                           ;CONTROL.c: 288:                 break;
  7164  08A0  28BD               	goto	i1l4844
  7165  08A1                     i1l4838:	
  7166                           
  7167                           ;CONTROL.c: 290:                     START_BLINKING_AT((15));
  7168  08A1  300F               	movlw	15
  7169  08A2  213D  120A  158A   	fcall	_START_BLINKING_AT
  7170                           
  7171                           ;CONTROL.c: 291:                 break;
  7172  08A5  28BD               	goto	i1l4844
  7173  08A6                     i1l4842:	
  7174  08A6  1683               	bsf	3,5	;RP0=1, select bank3
  7175  08A7  1703               	bsf	3,6	;RP1=1, select bank3
  7176  08A8  0846               	movf	_HEATER_WORK_STATE^(0+384),w
  7177  08A9  1283               	bcf	3,5	;RP0=0, select bank0
  7178  08AA  1303               	bcf	3,6	;RP1=0, select bank0
  7179  08AB  00A6               	movwf	??_SET_HEATING_HANDLER_ON_WORK
  7180  08AC  01A7               	clrf	??_SET_HEATING_HANDLER_ON_WORK+1
  7181                           
  7182                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7183                           ; Switch size 1, requested type "speed"
  7184                           ; Number of cases is 1, Range of values is 0 to 0
  7185                           ; switch strategies available:
  7186                           ; Name         Instructions Cycles
  7187                           ; simple_byte            4     3 (average)
  7188                           ; direct_byte           11     8 (fixed)
  7189                           ; jumptable            260     6 (fixed)
  7190                           ;	Chosen strategy is simple_byte
  7191  08AD  0827               	movf	??_SET_HEATING_HANDLER_ON_WORK+1,w
  7192  08AE  3A00               	xorlw	0	; case 0
  7193  08AF  1903               	skipnz
  7194  08B0  28B2               	goto	i1l6792
  7195  08B1  28BD               	goto	i1l4844
  7196  08B2                     i1l6792:	
  7197                           
  7198                           ; Switch size 1, requested type "speed"
  7199                           ; Number of cases is 3, Range of values is 45 to 166
  7200                           ; switch strategies available:
  7201                           ; Name         Instructions Cycles
  7202                           ; simple_byte           10     6 (average)
  7203                           ; jumptable            263     9 (fixed)
  7204                           ;	Chosen strategy is simple_byte
  7205  08B2  0826               	movf	??_SET_HEATING_HANDLER_ON_WORK,w
  7206  08B3  3A2D               	xorlw	45	; case 45
  7207  08B4  1903               	skipnz
  7208  08B5  2897               	goto	i1l4834
  7209  08B6  3A77               	xorlw	119	; case 90
  7210  08B7  1903               	skipnz
  7211  08B8  289C               	goto	i1l4836
  7212  08B9  3AFC               	xorlw	252	; case 166
  7213  08BA  1903               	skipnz
  7214  08BB  28A1               	goto	i1l4838
  7215  08BC  28BD               	goto	i1l4844
  7216  08BD                     i1l4844:	
  7217                           
  7218                           ;CONTROL.c: 296:             if ( PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )
  7219  08BD  1683               	bsf	3,5	;RP0=1, select bank3
  7220  08BE  1703               	bsf	3,6	;RP1=1, select bank3
  7221  08BF  0B3F               	decfsz	(_PRESSED_KEY^(0+384)+1),w
  7222  08C0  0008               	return
  7223                           
  7224                           ;CONTROL.c: 297:             {;CONTROL.c: 298:                     if (PRESSED_KEY.KEYPA
      +                          D_NO == KEY_1)
  7225  08C1  083E               	movf	_PRESSED_KEY^(0+384),w
  7226  08C2  1D03               	btfss	3,2
  7227  08C3  28C7               	goto	i1l4850
  7228                           
  7229                           ;CONTROL.c: 299:                     {;CONTROL.c: 300:                       HEATER_WORK
      +                          _STATE = 45 ;
  7230  08C4  302D               	movlw	45
  7231  08C5  00C6               	movwf	_HEATER_WORK_STATE^(0+384)
  7232                           
  7233                           ;CONTROL.c: 301:                     }
  7234  08C6  0008               	return
  7235  08C7                     i1l4850:	
  7236  08C7  0B3E               	decfsz	_PRESSED_KEY^(0+384),w
  7237  08C8  28CC               	goto	i1l4854
  7238                           
  7239                           ;CONTROL.c: 303:                     {;CONTROL.c: 304:                       HEATER_WORK
      +                          _STATE = 90 ;
  7240  08C9  305A               	movlw	90
  7241  08CA  00C6               	movwf	_HEATER_WORK_STATE^(0+384)
  7242                           
  7243                           ;CONTROL.c: 305:                     }
  7244  08CB  0008               	return
  7245  08CC                     i1l4854:	
  7246  08CC  3002               	movlw	2
  7247  08CD  063E               	xorwf	_PRESSED_KEY^(0+384),w
  7248  08CE  1D03               	btfss	3,2
  7249  08CF  28D3               	goto	i1l4858
  7250                           
  7251                           ;CONTROL.c: 307:                     {;CONTROL.c: 308:                       HEATER_WORK
      +                          _STATE = 166 ;
  7252  08D0  30A6               	movlw	166
  7253  08D1  00C6               	movwf	_HEATER_WORK_STATE^(0+384)
  7254                           
  7255                           ;CONTROL.c: 309:                     }
  7256  08D2  0008               	return
  7257  08D3                     i1l4858:	
  7258  08D3  300B               	movlw	11
  7259  08D4  063E               	xorwf	_PRESSED_KEY^(0+384),w
  7260  08D5  1D03               	btfss	3,2
  7261  08D6  28DB               	goto	i1l4866
  7262                           
  7263                           ;CONTROL.c: 311:                     {;CONTROL.c: 312:                        CONTROL_CU
      +                          RRENT_STATE = SET_ROTOR_PWR;
  7264  08D7  3002               	movlw	2
  7265  08D8  00C8               	movwf	_CONTROL_CURRENT_STATE^(0+384)
  7266  08D9                     L21:	
  7267                           
  7268                           ;CONTROL.c: 313:                        HANDLERS_STATES[SET_HEATING] = FIRST_TIME ;
  7269  08D9  01B1               	clrf	(_HANDLERS_STATES^(0+384)+1)
  7270                           
  7271                           ;CONTROL.c: 314:                        STOP_BLINKING();
  7272  08DA  2C83               	ljmp	i1l4526
  7273  08DB                     i1l4866:	
  7274                           ;CONTROL.c: 315:                     }
  7275                           
  7276  08DB  3009               	movlw	9
  7277  08DC  063E               	xorwf	_PRESSED_KEY^(0+384),w
  7278  08DD  1D03               	btfss	3,2
  7279  08DE  0008               	return
  7280                           
  7281                           ;CONTROL.c: 317:                     {;CONTROL.c: 318:                        CONTROL_CU
      +                          RRENT_STATE = SET_TIME;
  7282  08DF  01C8               	clrf	_CONTROL_CURRENT_STATE^(0+384)
  7283  08E0  28D9               	goto	L21
  7284  08E1                     __end_of_SET_HEATING_HANDLER_ON_WORK:	
  7285                           ;CONTROL.c: 319:                         HANDLERS_STATES[SET_HEATING] = FIRST_TIME ;
  7286                           
  7287  08E1                     __ptext55:	
  7288 ;; *************** function _SET_ROTOR_PWR_HANDLER_ON_WORK *****************
  7289 ;; Defined at:
  7290 ;;		line 330 in file "CONTROL.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;		None
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;  PRESSED_KEY     2    8[BANK0 ] struct .
  7295 ;; Return value:  Size  Location     Type
  7296 ;;                  1    wreg      void 
  7297 ;; Registers used:
  7298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : 300/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7304 ;;      Params:         0       0       0       0       0
  7305 ;;      Locals:         0       2       0       0       0
  7306 ;;      Temps:          0       2       0       0       0
  7307 ;;      Totals:         0       4       0       0       0
  7308 ;;Total ram usage:        4 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    4
  7311 ;; This function calls:
  7312 ;;		_KEYPAD_GET_PRESSED_KEY
  7313 ;;		_START_BLINKING_AT
  7314 ;;		_STOP_BLINKING
  7315 ;; This function is called by:
  7316 ;;		_SET_ROTOR_PWR_HANDLER
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           
  7321                           ;psect for function _SET_ROTOR_PWR_HANDLER_ON_WORK
  7322  08E1                     _SET_ROTOR_PWR_HANDLER_ON_WORK:	
  7323  08E1                     i1l4876:	
  7324                           ;incstack = 0
  7325 ;; hardware stack exceeded
  7326                           ; Regs used in _SET_ROTOR_PWR_HANDLER_ON_WORK: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  7327                           
  7328                           
  7329                           ;CONTROL.c: 332:     switch (MOTOR_WORK_STATE)
  7330  08E1  28F1               	goto	i1l4886
  7331  08E2                     i1l4878:	
  7332                           
  7333                           ;CONTROL.c: 335:                     START_BLINKING_AT((11));
  7334  08E2  300B               	movlw	11
  7335  08E3  213D  120A  158A   	fcall	_START_BLINKING_AT
  7336                           
  7337                           ;CONTROL.c: 336:                 break;
  7338  08E6  2908               	goto	i1l4888
  7339  08E7                     i1l4880:	
  7340                           
  7341                           ;CONTROL.c: 338:                     START_BLINKING_AT((13));
  7342  08E7  300D               	movlw	13
  7343  08E8  213D  120A  158A   	fcall	_START_BLINKING_AT
  7344                           
  7345                           ;CONTROL.c: 339:                 break;
  7346  08EB  2908               	goto	i1l4888
  7347  08EC                     i1l4882:	
  7348                           
  7349                           ;CONTROL.c: 341:                     START_BLINKING_AT((15));
  7350  08EC  300F               	movlw	15
  7351  08ED  213D  120A  158A   	fcall	_START_BLINKING_AT
  7352                           
  7353                           ;CONTROL.c: 342:                 break;
  7354  08F0  2908               	goto	i1l4888
  7355  08F1                     i1l4886:	
  7356  08F1  1683               	bsf	3,5	;RP0=1, select bank3
  7357  08F2  1703               	bsf	3,6	;RP1=1, select bank3
  7358  08F3  0847               	movf	_MOTOR_WORK_STATE^(0+384),w
  7359  08F4  1283               	bcf	3,5	;RP0=0, select bank0
  7360  08F5  1303               	bcf	3,6	;RP1=0, select bank0
  7361  08F6  00A6               	movwf	??_SET_ROTOR_PWR_HANDLER_ON_WORK
  7362  08F7  01A7               	clrf	??_SET_ROTOR_PWR_HANDLER_ON_WORK+1
  7363                           
  7364                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7365                           ; Switch size 1, requested type "speed"
  7366                           ; Number of cases is 1, Range of values is 0 to 0
  7367                           ; switch strategies available:
  7368                           ; Name         Instructions Cycles
  7369                           ; simple_byte            4     3 (average)
  7370                           ; direct_byte           11     8 (fixed)
  7371                           ; jumptable            260     6 (fixed)
  7372                           ;	Chosen strategy is simple_byte
  7373  08F8  0827               	movf	??_SET_ROTOR_PWR_HANDLER_ON_WORK+1,w
  7374  08F9  3A00               	xorlw	0	; case 0
  7375  08FA  1903               	skipnz
  7376  08FB  28FD               	goto	i1l6788
  7377  08FC  2908               	goto	i1l4888
  7378  08FD                     i1l6788:	
  7379                           
  7380                           ; Switch size 1, requested type "speed"
  7381                           ; Number of cases is 3, Range of values is 45 to 150
  7382                           ; switch strategies available:
  7383                           ; Name         Instructions Cycles
  7384                           ; simple_byte           10     6 (average)
  7385                           ; jumptable            263     9 (fixed)
  7386                           ;	Chosen strategy is simple_byte
  7387  08FD  0826               	movf	??_SET_ROTOR_PWR_HANDLER_ON_WORK,w
  7388  08FE  3A2D               	xorlw	45	; case 45
  7389  08FF  1903               	skipnz
  7390  0900  28E2               	goto	i1l4878
  7391  0901  3A77               	xorlw	119	; case 90
  7392  0902  1903               	skipnz
  7393  0903  28E7               	goto	i1l4880
  7394  0904  3ACC               	xorlw	204	; case 150
  7395  0905  1903               	skipnz
  7396  0906  28EC               	goto	i1l4882
  7397  0907  2908               	goto	i1l4888
  7398  0908                     i1l4888:	
  7399                           
  7400                           ;CONTROL.c: 347:               tKEYPAD_PRESSED PRESSED_KEY = KEYPAD_GET_PRESSED_KEY();
  7401  0908  276D  120A  158A   	fcall	_KEYPAD_GET_PRESSED_KEY
  7402  090B  0871               	movf	?_KEYPAD_GET_PRESSED_KEY+1,w
  7403  090C  1283               	bcf	3,5	;RP0=0, select bank0
  7404  090D  1303               	bcf	3,6	;RP1=0, select bank0
  7405  090E  00A9               	movwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY+1
  7406  090F  0870               	movf	?_KEYPAD_GET_PRESSED_KEY,w
  7407  0910  00A8               	movwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY
  7408                           
  7409                           ;CONTROL.c: 348:             if ( PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )
  7410  0911  0B29               	decfsz	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY+1,w
  7411  0912  0008               	return
  7412                           
  7413                           ;CONTROL.c: 349:             {;CONTROL.c: 350:                     if (PRESSED_KEY.KEYPA
      +                          D_NO == KEY_1)
  7414  0913  0828               	movf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7415  0914  1D03               	btfss	3,2
  7416  0915  291B               	goto	i1l4896
  7417                           
  7418                           ;CONTROL.c: 351:                     {;CONTROL.c: 352:                       MOTOR_WORK_
      +                          STATE = 45 ;
  7419  0916  302D               	movlw	45
  7420  0917  1683               	bsf	3,5	;RP0=1, select bank3
  7421  0918  1703               	bsf	3,6	;RP1=1, select bank3
  7422  0919  00C7               	movwf	_MOTOR_WORK_STATE^(0+384)
  7423                           
  7424                           ;CONTROL.c: 353:                     }
  7425  091A  0008               	return
  7426  091B                     i1l4896:	
  7427  091B  0B28               	decfsz	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7428  091C  2922               	goto	i1l4900
  7429                           
  7430                           ;CONTROL.c: 355:                     {;CONTROL.c: 356:                       MOTOR_WORK_
      +                          STATE = 90 ;
  7431  091D  305A               	movlw	90
  7432  091E  1683               	bsf	3,5	;RP0=1, select bank3
  7433  091F  1703               	bsf	3,6	;RP1=1, select bank3
  7434  0920  00C7               	movwf	_MOTOR_WORK_STATE^(0+384)
  7435                           
  7436                           ;CONTROL.c: 357:                     }
  7437  0921  0008               	return
  7438  0922                     i1l4900:	
  7439  0922  3002               	movlw	2
  7440  0923  0628               	xorwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7441  0924  1D03               	btfss	3,2
  7442  0925  292B               	goto	i1l4904
  7443                           
  7444                           ;CONTROL.c: 359:                     {;CONTROL.c: 360:                       MOTOR_WORK_
      +                          STATE = 150 ;
  7445  0926  3096               	movlw	150
  7446  0927  1683               	bsf	3,5	;RP0=1, select bank3
  7447  0928  1703               	bsf	3,6	;RP1=1, select bank3
  7448  0929  00C7               	movwf	_MOTOR_WORK_STATE^(0+384)
  7449                           
  7450                           ;CONTROL.c: 361:                     }
  7451  092A  0008               	return
  7452  092B                     i1l4904:	
  7453  092B  300B               	movlw	11
  7454  092C  0628               	xorwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7455  092D  1D03               	btfss	3,2
  7456  092E  2934               	goto	i1l4910
  7457                           
  7458                           ;CONTROL.c: 363:                     {;CONTROL.c: 364:                        CONTROL_CU
      +                          RRENT_STATE =SET_TIME ;
  7459  092F  1683               	bsf	3,5	;RP0=1, select bank3
  7460  0930  1703               	bsf	3,6	;RP1=1, select bank3
  7461  0931  01C8               	clrf	_CONTROL_CURRENT_STATE^(0+384)
  7462  0932                     L20:	
  7463                           
  7464                           ;CONTROL.c: 365:                        HANDLERS_STATES[SET_ROTOR_PWR] = FIRST_TIME ;
  7465  0932  01B2               	clrf	(_HANDLERS_STATES^(0+384)+2)
  7466                           
  7467                           ;CONTROL.c: 366:                        STOP_BLINKING();
  7468  0933  2C83               	ljmp	i1l4526
  7469  0934                     i1l4910:	
  7470                           ;CONTROL.c: 367:                     }
  7471                           
  7472  0934  3009               	movlw	9
  7473  0935  0628               	xorwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7474  0936  1D03               	btfss	3,2
  7475  0937  0008               	return
  7476                           
  7477                           ;CONTROL.c: 369:                     {;CONTROL.c: 370:                        CONTROL_CU
      +                          RRENT_STATE = SET_HEATING;
  7478  0938  1683               	bsf	3,5	;RP0=1, select bank3
  7479  0939  1703               	bsf	3,6	;RP1=1, select bank3
  7480  093A  01C8               	clrf	_CONTROL_CURRENT_STATE^(0+384)
  7481  093B  0AC8               	incf	_CONTROL_CURRENT_STATE^(0+384),f
  7482  093C  2932               	goto	L20
  7483  093D                     __end_of_SET_ROTOR_PWR_HANDLER_ON_WORK:	
  7484                           ;CONTROL.c: 371:                        HANDLERS_STATES[SET_ROTOR_PWR] = FIRST_TIME ;
  7485                           
  7486  093D                     __ptext60:	
  7487 ;; *************** function _START_BLINKING_AT *****************
  7488 ;; Defined at:
  7489 ;;		line 101 in file "LCD.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;  BLINKED         1    wreg     unsigned char 
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;  BLINKED         1    5[BANK0 ] unsigned char 
  7494 ;; Return value:  Size  Location     Type
  7495 ;;                  1    wreg      void 
  7496 ;; Registers used:
  7497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7498 ;; Tracked objects:
  7499 ;;		On entry : 300/0
  7500 ;;		On exit  : 0/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7503 ;;      Params:         0       0       0       0       0
  7504 ;;      Locals:         0       1       0       0       0
  7505 ;;      Temps:          0       0       0       0       0
  7506 ;;      Totals:         0       1       0       0       0
  7507 ;;Total ram usage:        1 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; Hardware stack levels required when called:    3
  7510 ;; This function calls:
  7511 ;;		_LCD_SET_CURSOR
  7512 ;;		i1_LCD_SND_COMMAND
  7513 ;; This function is called by:
  7514 ;;		_SET_HEATING_HANDLER_ON_WORK
  7515 ;;		_SET_ROTOR_PWR_HANDLER_ON_WORK
  7516 ;;		_GOTO_NEXT_DIGIT
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           
  7521                           ;psect for function _START_BLINKING_AT
  7522  093D                     _START_BLINKING_AT:	
  7523                           
  7524                           ;incstack = 0
  7525 ;; hardware stack exceeded
  7526                           ; Regs used in _START_BLINKING_AT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7527                           ;START_BLINKING_AT@BLINKED stored from wreg
  7528  093D  00A5               	movwf	START_BLINKING_AT@BLINKED
  7529                           
  7530                           ;LCD.c: 101: void START_BLINKING_AT (tbyte BLINKED);LCD.c: 102: {;LCD.c: 103:     LCD_SE
      +                          T_CURSOR(0 , BLINKED );
  7531  093E  00A1               	movwf	LCD_SET_CURSOR@row
  7532  093F  3000               	movlw	0
  7533  0940  2666  120A  158A   	fcall	_LCD_SET_CURSOR
  7534                           
  7535                           ;LCD.c: 104:     LCD_SND_COMMAND(0x0F);
  7536  0943  300F               	movlw	15
  7537  0944  26C3               	fcall	i1_LCD_SND_COMMAND
  7538  0945  0008               	return
  7539  0946                     __end_of_START_BLINKING_AT:	
  7540  0946                     __ptext84:	
  7541 ;; *************** function _UPDATE_LCD_HOURS *****************
  7542 ;; Defined at:
  7543 ;;		line 154 in file "Display.c"
  7544 ;; Parameters:    Size  Location     Type
  7545 ;;  HOURS           1    wreg     unsigned char 
  7546 ;; Auto vars:     Size  Location     Type
  7547 ;;  HOURS           1   14[BANK0 ] unsigned char 
  7548 ;; Return value:  Size  Location     Type
  7549 ;;                  1    wreg      void 
  7550 ;; Registers used:
  7551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7552 ;; Tracked objects:
  7553 ;;		On entry : 300/0
  7554 ;;		On exit  : 300/0
  7555 ;;		Unchanged: 0/0
  7556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7557 ;;      Params:         0       0       0       0       0
  7558 ;;      Locals:         0       1       0       0       0
  7559 ;;      Temps:          0       0       0       0       0
  7560 ;;      Totals:         0       1       0       0       0
  7561 ;;Total ram usage:        1 bytes
  7562 ;; Hardware stack levels used:    1
  7563 ;; Hardware stack levels required when called:    4
  7564 ;; This function calls:
  7565 ;;		_LCD_SEND_A_NUMBER
  7566 ;;		_LCD_SET_CURSOR
  7567 ;;		___lbdiv
  7568 ;; This function is called by:
  7569 ;;		_DISP_UPDATE_TIME
  7570 ;;		_DISP_SHOW_TIME_AT
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           
  7575                           ;psect for function _UPDATE_LCD_HOURS
  7576  0946                     _UPDATE_LCD_HOURS:	
  7577                           
  7578                           ;incstack = 0
  7579 ;; hardware stack exceeded
  7580                           ; Regs used in _UPDATE_LCD_HOURS: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7581                           ;UPDATE_LCD_HOURS@HOURS stored from wreg
  7582  0946  00AE               	movwf	UPDATE_LCD_HOURS@HOURS
  7583                           
  7584                           ;Display.c: 154:  static void UPDATE_LCD_HOURS(tbyte HOURS);Display.c: 155:  {;Display.c
      +                          : 156:   LCD_SET_CURSOR(0,(6));
  7585  0947  3006               	movlw	6
  7586  0948  00A1               	movwf	LCD_SET_CURSOR@row
  7587  0949  3000               	movlw	0
  7588  094A  2666  120A  158A   	fcall	_LCD_SET_CURSOR
  7589                           
  7590                           ;Display.c: 157:   if (HOURS / 10 != 0)
  7591  094D  300A               	movlw	10
  7592  094E  00F0               	movwf	___lbdiv@divisor
  7593  094F  1283               	bcf	3,5	;RP0=0, select bank0
  7594  0950  1303               	bcf	3,6	;RP1=0, select bank0
  7595  0951  082E               	movf	UPDATE_LCD_HOURS@HOURS,w
  7596  0952  24CB  120A  158A   	fcall	___lbdiv
  7597  0955  3A00               	xorlw	0
  7598  0956  1903               	skipnz
  7599  0957  295C               	goto	i1l4554
  7600                           
  7601                           ;Display.c: 158:   {;Display.c: 159:    LCD_SEND_A_NUMBER(HOURS);
  7602  0958  082E               	movf	UPDATE_LCD_HOURS@HOURS,w
  7603  0959  00A8               	movwf	LCD_SEND_A_NUMBER@x
  7604  095A  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  7605  095B  2CBC               	ljmp	i1l4316
  7606  095C                     i1l4554:	
  7607                           ;Display.c: 160:   }
  7608                           
  7609                           
  7610                           ;Display.c: 162:   {;Display.c: 163:    LCD_SEND_A_NUMBER(0);
  7611  095C  01A8               	clrf	LCD_SEND_A_NUMBER@x
  7612  095D  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  7613  095E  24BC  120A  158A   	fcall	_LCD_SEND_A_NUMBER
  7614                           
  7615                           ;Display.c: 164:    LCD_SEND_A_NUMBER(HOURS);
  7616  0961  082E               	movf	UPDATE_LCD_HOURS@HOURS,w
  7617  0962  00A8               	movwf	LCD_SEND_A_NUMBER@x
  7618  0963  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  7619  0964  2CBC               	ljmp	i1l4316
  7620  0965                     __end_of_UPDATE_LCD_HOURS:	
  7621  0965                     __ptext76:	
  7622 ;; *************** function _DEFAULT_HANDLER *****************
  7623 ;; Defined at:
  7624 ;;		line 228 in file "CONTROL.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;		None
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;		None
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      void 
  7631 ;; Registers used:
  7632 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7638 ;;      Params:         0       0       0       0       0
  7639 ;;      Locals:         0       0       0       0       0
  7640 ;;      Temps:          0       0       0       0       0
  7641 ;;      Totals:         0       0       0       0       0
  7642 ;;Total ram usage:        0 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:    6
  7645 ;; This function calls:
  7646 ;;		_DISP_DOOR_ERR
  7647 ;;		_DISP_FOOD_ERR
  7648 ;;		_DISP_SHOW_TIME_AT
  7649 ;;		_DISP_TIME_ERR
  7650 ;;		_STOP_BLINKING
  7651 ;;		_SW_GET_STATE
  7652 ;; This function is called by:
  7653 ;;		_CONTROL_UPDATE
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           
  7658                           ;psect for function _DEFAULT_HANDLER
  7659  0965                     _DEFAULT_HANDLER:	
  7660  0965                     i1l5994:	
  7661                           ;incstack = 0
  7662 ;; hardware stack exceeded
  7663                           ; Regs used in _DEFAULT_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7664                           
  7665                           
  7666                           ;CONTROL.c: 230:  if(( CONTROL_CURRENT_STATE != HEATING )&( CONTROL_CURRENT_STATE != FIN
      +                          ISH ))
  7667  0965  3003               	movlw	3
  7668  0966  1683               	bsf	3,5	;RP0=1, select bank3
  7669  0967  1703               	bsf	3,6	;RP1=1, select bank3
  7670  0968  0648               	xorwf	_CONTROL_CURRENT_STATE^(0+384),w
  7671  0969  1903               	btfsc	3,2
  7672  096A  0008               	return
  7673  096B  3004               	movlw	4
  7674  096C  0648               	xorwf	_CONTROL_CURRENT_STATE^(0+384),w
  7675  096D  1903               	btfsc	3,2
  7676  096E  0008               	return
  7677                           
  7678                           ;CONTROL.c: 231:  {;CONTROL.c: 232:     if ( SW_GET_STATE(START) == SW_PRE_PRESSED )
  7679  096F  3000               	movlw	0
  7680  0970  2240  120A  158A   	fcall	_SW_GET_STATE
  7681  0973  3A01               	xorlw	1
  7682  0974  1D03               	skipz
  7683  0975  0008               	return
  7684                           
  7685                           ;CONTROL.c: 233:     {;CONTROL.c: 234:         if ((SETTED_TIME.HOURS == 0)&
  7686  0976  1283               	bcf	3,5	;RP0=0, select bank0
  7687  0977  1303               	bcf	3,6	;RP1=0, select bank0
  7688  0978  086D               	movf	_SETTED_TIME+2,w
  7689  0979  1D03               	btfss	3,2
  7690  097A  299C               	goto	i1l6018
  7691  097B  086C               	movf	_SETTED_TIME+1,w
  7692  097C  1D03               	btfss	3,2
  7693  097D  299C               	goto	i1l6018
  7694  097E  086B               	movf	_SETTED_TIME,w
  7695  097F  1D03               	btfss	3,2
  7696  0980  299C               	goto	i1l6018
  7697                           
  7698                           ;CONTROL.c: 237:             {;CONTROL.c: 238:                 if (CONTROL_CURRENT_STATE
      +                           != SET_TIME)
  7699  0981  1683               	bsf	3,5	;RP0=1, select bank3
  7700  0982  1703               	bsf	3,6	;RP1=1, select bank3
  7701  0983  0848               	movf	_CONTROL_CURRENT_STATE^(0+384),w
  7702  0984  1903               	btfsc	3,2
  7703  0985  2998               	goto	i1l6014
  7704                           
  7705                           ;CONTROL.c: 239:                {;CONTROL.c: 240:                     DISP_SHOW_TIME_AT(
      +                          SETTED_TIME);
  7706  0986  1283               	bcf	3,5	;RP0=0, select bank0
  7707  0987  1303               	bcf	3,6	;RP1=0, select bank0
  7708  0988  086B               	movf	_SETTED_TIME,w
  7709  0989  00AF               	movwf	DISP_SHOW_TIME_AT@START_TIME
  7710  098A  086C               	movf	_SETTED_TIME+1,w
  7711  098B  00B0               	movwf	DISP_SHOW_TIME_AT@START_TIME+1
  7712  098C  086D               	movf	_SETTED_TIME+2,w
  7713  098D  00B1               	movwf	DISP_SHOW_TIME_AT@START_TIME+2
  7714  098E  2476  120A  158A   	fcall	_DISP_SHOW_TIME_AT
  7715                           
  7716                           ;CONTROL.c: 241:                     DISP_TIME_ERR();
  7717  0991  2505               	fcall	_DISP_TIME_ERR
  7718                           
  7719                           ;CONTROL.c: 242:                     HANDLERS_STATES[SET_TIME] = ON_WORK;
  7720  0992  1683               	bsf	3,5	;RP0=1, select bank3
  7721  0993  1703               	bsf	3,6	;RP1=1, select bank3
  7722  0994  01B0               	clrf	_HANDLERS_STATES^(0+384)
  7723  0995  0AB0               	incf	_HANDLERS_STATES^(0+384),f
  7724                           
  7725                           ;CONTROL.c: 243:                     CONTROL_CURRENT_STATE = SET_TIME;
  7726  0996  01C8               	clrf	_CONTROL_CURRENT_STATE^(0+384)
  7727                           
  7728                           ;CONTROL.c: 244:                 }
  7729  0997  0008               	return
  7730  0998                     i1l6014:	
  7731                           
  7732                           ;CONTROL.c: 246:                 {;CONTROL.c: 247:                     DISP_TIME_ERR();
  7733  0998  2505               	fcall	_DISP_TIME_ERR
  7734                           
  7735                           ;CONTROL.c: 248:                     CURRENT_DIGIT = (6);
  7736  0999  3006               	movlw	6
  7737  099A  00EF               	movwf	_CURRENT_DIGIT
  7738  099B  0008               	return
  7739  099C                     i1l6018:	
  7740                           
  7741                           ;CONTROL.c: 252:         {;CONTROL.c: 253:             if (SW_GET_STATE(FOOD_SENSOR) != 
      +                          SW_RELEASED )
  7742  099C  3002               	movlw	2
  7743  099D  2240  120A  158A   	fcall	_SW_GET_STATE
  7744  09A0  3A02               	xorlw	2
  7745  09A1  1903               	skipnz
  7746  09A2  29A4               	goto	i1l6022
  7747                           
  7748                           ;CONTROL.c: 254:             {;CONTROL.c: 255:                 DISP_FOOD_ERR();
  7749  09A3  2D2F               	ljmp	i1l4786
  7750  09A4                     i1l6022:	
  7751                           ;CONTROL.c: 256:             }
  7752                           
  7753                           
  7754                           ;CONTROL.c: 258:             {;CONTROL.c: 259:                 if(SW_GET_STATE(DOOR_SENS
      +                          OR) != SW_RELEASED )
  7755  09A4  3003               	movlw	3
  7756  09A5  2240  120A  158A   	fcall	_SW_GET_STATE
  7757  09A8  3A02               	xorlw	2
  7758  09A9  1903               	skipnz
  7759  09AA  29AC               	goto	i1l6026
  7760                           
  7761                           ;CONTROL.c: 260:                 {;CONTROL.c: 261:                     DISP_DOOR_ERR();
  7762  09AB  2C8F               	ljmp	i1l4782
  7763  09AC                     i1l6026:	
  7764                           ;CONTROL.c: 262:                 }
  7765                           
  7766                           
  7767                           ;CONTROL.c: 264:                 {;CONTROL.c: 265:                     HANDLERS_STATES[C
      +                          ONTROL_CURRENT_STATE] = FIRST_TIME;
  7768  09AC  1683               	bsf	3,5	;RP0=1, select bank3
  7769  09AD  1703               	bsf	3,6	;RP1=1, select bank3
  7770  09AE  0848               	movf	_CONTROL_CURRENT_STATE^(0+384),w
  7771  09AF  3EB0               	addlw	(low (_HANDLERS_STATES| (0+256)))& (0+255)
  7772  09B0  0084               	movwf	4
  7773  09B1  3003               	movlw	3
  7774  09B2  0180               	clrf	0
  7775                           
  7776                           ;CONTROL.c: 266:                     CONTROL_CURRENT_STATE = HEATING;
  7777  09B3  00C8               	movwf	_CONTROL_CURRENT_STATE^(0+384)
  7778                           
  7779                           ;CONTROL.c: 267:                     STOP_BLINKING();
  7780  09B4  2C83               	ljmp	i1l4526
  7781  09B5                     __end_of_DEFAULT_HANDLER:	
  7782  09B5                     __ptext62:	
  7783 ;; *************** function _HEATING_HANDLER *****************
  7784 ;; Defined at:
  7785 ;;		line 137 in file "CONTROL.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  current_time    3   20[BANK0 ] struct .
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7799 ;;      Params:         0       0       0       0       0
  7800 ;;      Locals:         0       3       0       0       0
  7801 ;;      Temps:          0       2       0       0       0
  7802 ;;      Totals:         0       5       0       0       0
  7803 ;;Total ram usage:        5 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    6
  7806 ;; This function calls:
  7807 ;;		_DISP_CANCEL
  7808 ;;		_DISP_DOOR_ERR
  7809 ;;		_DISP_ON_WORKING_FOOD_ERR
  7810 ;;		_DISP_SHOW_TIME_AT
  7811 ;;		_DISP_UPDATE_TIME
  7812 ;;		_LED_SET_STATE
  7813 ;;		_STOP_BLINKING
  7814 ;;		_STOP_HEATING
  7815 ;;		_SW_GET_STATE
  7816 ;;		_TIME_GET
  7817 ;;		_TIME_START_AT
  7818 ;;		i1_HEATER_SET_STATE
  7819 ;;		i1_MOTOR_SET_STATE
  7820 ;; This function is called by:
  7821 ;;		_CONTROL_UPDATE
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           
  7826                           ;psect for function _HEATING_HANDLER
  7827  09B5                     _HEATING_HANDLER:	
  7828                           
  7829                           ;CONTROL.c: 139:     tTIME current_time = TIME_GET();
  7830                           
  7831                           ;incstack = 0
  7832 ;; hardware stack exceeded
  7833                           ; Regs used in _HEATING_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7834  09B5  2486  120A  158A   	fcall	_TIME_GET
  7835  09B8  0870               	movf	?_TIME_GET,w
  7836  09B9  1283               	bcf	3,5	;RP0=0, select bank0
  7837  09BA  1303               	bcf	3,6	;RP1=0, select bank0
  7838  09BB  00B4               	movwf	HEATING_HANDLER@current_time
  7839  09BC  0871               	movf	?_TIME_GET+1,w
  7840  09BD  00B5               	movwf	HEATING_HANDLER@current_time+1
  7841  09BE  0872               	movf	?_TIME_GET+2,w
  7842  09BF  00B6               	movwf	HEATING_HANDLER@current_time+2
  7843                           
  7844                           ;CONTROL.c: 189:                 }
  7845                           
  7846                           ;CONTROL.c: 183:                        }
  7847                           
  7848                           ;CONTROL.c: 140:     switch (HANDLERS_STATES[HEATING])
  7849  09C0  1683               	bsf	3,5	;RP0=1, select bank3
  7850  09C1  1703               	bsf	3,6	;RP1=1, select bank3
  7851  09C2  0833               	movf	(_HANDLERS_STATES^(0+384)+3),w
  7852  09C3  1283               	bcf	3,5	;RP0=0, select bank0
  7853  09C4  1303               	bcf	3,6	;RP1=0, select bank0
  7854  09C5  00B2               	movwf	??_HEATING_HANDLER
  7855  09C6  01B3               	clrf	??_HEATING_HANDLER+1
  7856                           
  7857                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7858                           ; Switch size 1, requested type "speed"
  7859                           ; Number of cases is 1, Range of values is 0 to 0
  7860                           ; switch strategies available:
  7861                           ; Name         Instructions Cycles
  7862                           ; simple_byte            4     3 (average)
  7863                           ; direct_byte           11     8 (fixed)
  7864                           ; jumptable            260     6 (fixed)
  7865                           ;	Chosen strategy is simple_byte
  7866  09C7  0833               	movf	??_HEATING_HANDLER+1,w
  7867  09C8  3A00               	xorlw	0	; case 0
  7868  09C9  1903               	skipnz
  7869  09CA  2A37               	goto	i1l6794
  7870  09CB  2A3F               	goto	i1l752
  7871  09CC                     i1l5918:	
  7872                           
  7873                           ;CONTROL.c: 143:             STOP_BLINKING();
  7874  09CC  2483  120A  158A   	fcall	_STOP_BLINKING
  7875                           
  7876                           ;CONTROL.c: 144:             MOTOR_SET_STATE(MOTOR_WORK_STATE );
  7877  09CF  1683               	bsf	3,5	;RP0=1, select bank3
  7878  09D0  1703               	bsf	3,6	;RP1=1, select bank3
  7879  09D1  0847               	movf	_MOTOR_WORK_STATE^(0+384),w
  7880  09D2  226D  120A  158A   	fcall	i1_MOTOR_SET_STATE
  7881                           
  7882                           ;CONTROL.c: 145:             HEATER_SET_STATE(HEATER_WORK_STATE);
  7883  09D5  0846               	movf	_HEATER_WORK_STATE^(0+384),w
  7884  09D6  2272  120A  158A   	fcall	i1_HEATER_SET_STATE
  7885                           
  7886                           ;CONTROL.c: 146:             LED_SET_STATE(LAMP , LED_ON);
  7887  09D9  1283               	bcf	3,5	;RP0=0, select bank0
  7888  09DA  1303               	bcf	3,6	;RP1=0, select bank0
  7889  09DB  3000               	movlw	0
  7890  09DC  01A0               	clrf	LED_SET_STATE@LED_STATE
  7891  09DD  0AA0               	incf	LED_SET_STATE@LED_STATE,f
  7892  09DE  2275  120A  158A   	fcall	_LED_SET_STATE
  7893                           
  7894                           ;CONTROL.c: 147:             TIME_START_AT (SETTED_TIME.SECONDS ,SETTED_TIME.MINUTES , S
      +                          ETTED_TIME.HOURS , DECREMENTAL_TO_O );
  7895  09E1  086C               	movf	_SETTED_TIME+1,w
  7896  09E2  00F0               	movwf	TIME_START_AT@START_MINUTES
  7897  09E3  086D               	movf	_SETTED_TIME+2,w
  7898  09E4  00F1               	movwf	TIME_START_AT@START_HOURS
  7899  09E5  01F2               	clrf	TIME_START_AT@COUNTING_TYPE
  7900  09E6  086B               	movf	_SETTED_TIME,w
  7901  09E7  2517  120A  158A   	fcall	_TIME_START_AT
  7902                           
  7903                           ;CONTROL.c: 148:             DISP_SHOW_TIME_AT( SETTED_TIME );
  7904  09EA  1283               	bcf	3,5	;RP0=0, select bank0
  7905  09EB  1303               	bcf	3,6	;RP1=0, select bank0
  7906  09EC  086B               	movf	_SETTED_TIME,w
  7907  09ED  00AF               	movwf	DISP_SHOW_TIME_AT@START_TIME
  7908  09EE  086C               	movf	_SETTED_TIME+1,w
  7909  09EF  00B0               	movwf	DISP_SHOW_TIME_AT@START_TIME+1
  7910  09F0  086D               	movf	_SETTED_TIME+2,w
  7911  09F1  00B1               	movwf	DISP_SHOW_TIME_AT@START_TIME+2
  7912  09F2  2476               	fcall	_DISP_SHOW_TIME_AT
  7913                           
  7914                           ;CONTROL.c: 149:             HANDLERS_STATES[HEATING] = ON_WORK ;
  7915  09F3  1683               	bsf	3,5	;RP0=1, select bank3
  7916  09F4  1703               	bsf	3,6	;RP1=1, select bank3
  7917  09F5  01B3               	clrf	(_HANDLERS_STATES^(0+384)+3)
  7918  09F6  0AB3               	incf	(_HANDLERS_STATES^(0+384)+3),f
  7919                           
  7920                           ;CONTROL.c: 150:         break;
  7921  09F7  0008               	return
  7922  09F8                     i1l5930:	
  7923                           
  7924                           ;CONTROL.c: 152:             DISP_UPDATE_TIME(current_time);
  7925  09F8  0834               	movf	HEATING_HANDLER@current_time,w
  7926  09F9  00AF               	movwf	DISP_UPDATE_TIME@time
  7927  09FA  0835               	movf	HEATING_HANDLER@current_time+1,w
  7928  09FB  00B0               	movwf	DISP_UPDATE_TIME@time+1
  7929  09FC  0836               	movf	HEATING_HANDLER@current_time+2,w
  7930  09FD  00B1               	movwf	DISP_UPDATE_TIME@time+2
  7931  09FE  2061  120A  158A   	fcall	_DISP_UPDATE_TIME
  7932                           
  7933                           ;CONTROL.c: 153:             if ((current_time.HOURS == 0)&
  7934  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  7935  0A02  1303               	bcf	3,6	;RP1=0, select bank0
  7936  0A03  0836               	movf	HEATING_HANDLER@current_time+2,w
  7937  0A04  1D03               	btfss	3,2
  7938  0A05  2A16               	goto	i1l5944
  7939  0A06  0835               	movf	HEATING_HANDLER@current_time+1,w
  7940  0A07  1D03               	btfss	3,2
  7941  0A08  2A16               	goto	i1l5944
  7942  0A09  0834               	movf	HEATING_HANDLER@current_time,w
  7943  0A0A  1D03               	btfss	3,2
  7944  0A0B  2A16               	goto	i1l5944
  7945                           
  7946                           ;CONTROL.c: 156:             {;CONTROL.c: 157:                 MOTOR_SET_STATE(0 );
  7947  0A0C  3000               	movlw	0
  7948  0A0D  226D  120A  158A   	fcall	i1_MOTOR_SET_STATE
  7949                           
  7950                           ;CONTROL.c: 158:                 HEATER_SET_STATE(0);
  7951  0A10  3000               	movlw	0
  7952  0A11  2272               	fcall	i1_HEATER_SET_STATE
  7953                           
  7954                           ;CONTROL.c: 159:                 CONTROL_CURRENT_STATE = FINISH;
  7955  0A12  3004               	movlw	4
  7956  0A13  00C8               	movwf	_CONTROL_CURRENT_STATE^(0+384)
  7957                           
  7958                           ;CONTROL.c: 160:                 HANDLERS_STATES[HEATING] = FIRST_TIME ;
  7959  0A14  01B3               	clrf	(_HANDLERS_STATES^(0+384)+3)
  7960                           
  7961                           ;CONTROL.c: 161:             }
  7962  0A15  0008               	return
  7963  0A16                     i1l5944:	
  7964                           
  7965                           ;CONTROL.c: 163:             {;CONTROL.c: 164:                 if (SW_GET_STATE(FOOD_SEN
      +                          SOR) != SW_RELEASED )
  7966  0A16  3002               	movlw	2
  7967  0A17  2240  120A  158A   	fcall	_SW_GET_STATE
  7968  0A1A  3A02               	xorlw	2
  7969  0A1B  1903               	skipnz
  7970  0A1C  2A21               	goto	i1l5950
  7971                           
  7972                           ;CONTROL.c: 165:                 {;CONTROL.c: 166:                     STOP_HEATING();
  7973  0A1D  224B               	fcall	_STOP_HEATING
  7974                           
  7975                           ;CONTROL.c: 167:                     DISP_ON_WORKING_FOOD_ERR();
  7976  0A1E  160A  158A  2E91   	ljmp	i1l4790
  7977  0A21                     i1l5950:	
  7978                           ;CONTROL.c: 168:                 }
  7979                           
  7980                           
  7981                           ;CONTROL.c: 170:                 {;CONTROL.c: 171:                     if(SW_GET_STATE(D
      +                          OOR_SENSOR) != SW_RELEASED )
  7982  0A21  3003               	movlw	3
  7983  0A22  2240  120A  158A   	fcall	_SW_GET_STATE
  7984  0A25  3A02               	xorlw	2
  7985  0A26  1903               	skipnz
  7986  0A27  2A2C               	goto	i1l5956
  7987                           
  7988                           ;CONTROL.c: 172:                     {;CONTROL.c: 173:                         STOP_HEAT
      +                          ING();
  7989  0A28  224B  120A  158A   	fcall	_STOP_HEATING
  7990                           
  7991                           ;CONTROL.c: 174:                         DISP_DOOR_ERR();
  7992  0A2B  2C8F               	ljmp	i1l4782
  7993  0A2C                     i1l5956:	
  7994                           ;CONTROL.c: 176:                     }
  7995                           
  7996                           
  7997                           ;CONTROL.c: 178:                     {;CONTROL.c: 179:                        if(SW_GET_
      +                          STATE(Cancel) == SW_PRE_PRESSED )
  7998  0A2C  3001               	movlw	1
  7999  0A2D  2240  120A  158A   	fcall	_SW_GET_STATE
  8000  0A30  3A01               	xorlw	1
  8001  0A31  1D03               	skipz
  8002  0A32  0008               	return
  8003                           
  8004                           ;CONTROL.c: 180:                        {;CONTROL.c: 181:                          STOP_
      +                          HEATING();
  8005  0A33  224B               	fcall	_STOP_HEATING
  8006                           
  8007                           ;CONTROL.c: 182:                          DISP_CANCEL();
  8008  0A34  160A  158A  2E81   	ljmp	i1l4794
  8009  0A37                     i1l6794:	
  8010                           
  8011                           ; Switch size 1, requested type "speed"
  8012                           ; Number of cases is 2, Range of values is 0 to 1
  8013                           ; switch strategies available:
  8014                           ; Name         Instructions Cycles
  8015                           ; simple_byte            7     4 (average)
  8016                           ; direct_byte           14     8 (fixed)
  8017                           ; jumptable            260     6 (fixed)
  8018                           ;	Chosen strategy is simple_byte
  8019  0A37  0832               	movf	??_HEATING_HANDLER,w
  8020  0A38  3A00               	xorlw	0	; case 0
  8021  0A39  1903               	skipnz
  8022  0A3A  29CC               	goto	i1l5918
  8023  0A3B  3A01               	xorlw	1	; case 1
  8024  0A3C  1903               	skipnz
  8025  0A3D  29F8               	goto	i1l5930
  8026  0A3E  2A3F               	goto	i1l752
  8027  0A3F                     i1l752:	
  8028  0A3F  0008               	return
  8029  0A40                     __end_of_HEATING_HANDLER:	
  8030  0A40                     __ptext77:	
  8031 ;; *************** function _SW_GET_STATE *****************
  8032 ;; Defined at:
  8033 ;;		line 121 in file "SW.c"
  8034 ;; Parameters:    Size  Location     Type
  8035 ;;  SW_NO           1    wreg     enum E5
  8036 ;; Auto vars:     Size  Location     Type
  8037 ;;  SW_NO           1    3[COMMON] enum E5
  8038 ;;  ret             1    4[COMMON] enum E908
  8039 ;; Return value:  Size  Location     Type
  8040 ;;                  1    wreg      enum E908
  8041 ;; Registers used:
  8042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8043 ;; Tracked objects:
  8044 ;;		On entry : 0/300
  8045 ;;		On exit  : 800/800
  8046 ;;		Unchanged: 0/0
  8047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8048 ;;      Params:         0       0       0       0       0
  8049 ;;      Locals:         2       0       0       0       0
  8050 ;;      Temps:          0       0       0       0       0
  8051 ;;      Totals:         2       0       0       0       0
  8052 ;;Total ram usage:        2 bytes
  8053 ;; Hardware stack levels used:    1
  8054 ;; Hardware stack levels required when called:    1
  8055 ;; This function calls:
  8056 ;;		i1___bmul
  8057 ;; This function is called by:
  8058 ;;		_HEATING_HANDLER
  8059 ;;		_FINISH_HANDLER
  8060 ;;		_DEFAULT_HANDLER
  8061 ;;		_SET_TIME_HANDLER_ON_WORK
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           
  8066                           ;psect for function _SW_GET_STATE
  8067  0A40                     _SW_GET_STATE:	
  8068                           
  8069                           ;incstack = 0
  8070 ;; hardware stack exceeded
  8071                           ; Regs used in _SW_GET_STATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8072                           ;SW_GET_STATE@SW_NO stored from wreg
  8073  0A40  00F3               	movwf	SW_GET_STATE@SW_NO
  8074                           
  8075                           ;SW.c: 121: tSW_STATE SW_GET_STATE (tSW SW_NO);SW.c: 122: {;SW.c: 123:  tSW_STATE ret ;;
      +                          SW.c: 124:  ret = SWs[SW_NO].SW_STATE ;
  8076  0A41  3005               	movlw	5
  8077  0A42  00F0               	movwf	i1___bmul@multiplicand
  8078  0A43  0873               	movf	SW_GET_STATE@SW_NO,w
  8079  0A44  244C               	fcall	i1___bmul
  8080  0A45  3E94               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  8081  0A46  0084               	movwf	4
  8082  0A47  1783               	bsf	3,7	;select IRP bank3
  8083  0A48  0800               	movf	0,w
  8084  0A49  00F4               	movwf	SW_GET_STATE@ret
  8085                           
  8086                           ;SW.c: 125:  return ret ;
  8087  0A4A  0008               	return
  8088  0A4B                     __end_of_SW_GET_STATE:	
  8089  0A4B                     __ptext65:	
  8090 ;; *************** function _STOP_HEATING *****************
  8091 ;; Defined at:
  8092 ;;		line 568 in file "CONTROL.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      void 
  8099 ;; Registers used:
  8100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 800/800
  8103 ;;		On exit  : 300/300
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8106 ;;      Params:         0       0       0       0       0
  8107 ;;      Locals:         0       0       0       0       0
  8108 ;;      Temps:          0       0       0       0       0
  8109 ;;      Totals:         0       0       0       0       0
  8110 ;;Total ram usage:        0 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    2
  8113 ;; This function calls:
  8114 ;;		_LED_SET_STATE
  8115 ;;		_TIME_GET
  8116 ;;		_TIME_STOP
  8117 ;;		i1_HEATER_SET_STATE
  8118 ;;		i1_MOTOR_SET_STATE
  8119 ;; This function is called by:
  8120 ;;		_HEATING_HANDLER
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           
  8125                           ;psect for function _STOP_HEATING
  8126  0A4B                     _STOP_HEATING:	
  8127                           
  8128                           ;CONTROL.c: 570:     MOTOR_SET_STATE( 0 );
  8129                           
  8130                           ;incstack = 0
  8131 ;; hardware stack exceeded
  8132                           ; Regs used in _STOP_HEATING: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8133  0A4B  3000               	movlw	0
  8134  0A4C  226D  120A  158A   	fcall	i1_MOTOR_SET_STATE
  8135                           
  8136                           ;CONTROL.c: 571:     HEATER_SET_STATE(0);
  8137  0A4F  3000               	movlw	0
  8138  0A50  2272  120A  158A   	fcall	i1_HEATER_SET_STATE
  8139                           
  8140                           ;CONTROL.c: 572:     LED_SET_STATE(LAMP , LED_OFF);
  8141  0A53  1283               	bcf	3,5	;RP0=0, select bank0
  8142  0A54  1303               	bcf	3,6	;RP1=0, select bank0
  8143  0A55  3000               	movlw	0
  8144  0A56  01A0               	clrf	LED_SET_STATE@LED_STATE
  8145  0A57  2275  120A  158A   	fcall	_LED_SET_STATE
  8146                           
  8147                           ;CONTROL.c: 573:     TIME_STOP();
  8148  0A5A  2513  120A  158A   	fcall	_TIME_STOP
  8149                           
  8150                           ;CONTROL.c: 574:     SETTED_TIME = TIME_GET();
  8151  0A5D  2486               	fcall	_TIME_GET
  8152  0A5E  0870               	movf	?_TIME_GET,w
  8153  0A5F  1283               	bcf	3,5	;RP0=0, select bank0
  8154  0A60  1303               	bcf	3,6	;RP1=0, select bank0
  8155  0A61  00EB               	movwf	_SETTED_TIME
  8156  0A62  0871               	movf	?_TIME_GET+1,w
  8157  0A63  00EC               	movwf	_SETTED_TIME+1
  8158  0A64  0872               	movf	?_TIME_GET+2,w
  8159  0A65  00ED               	movwf	_SETTED_TIME+2
  8160                           
  8161                           ;CONTROL.c: 575:     CONTROL_CURRENT_STATE = SET_TIME;
  8162  0A66  1683               	bsf	3,5	;RP0=1, select bank3
  8163  0A67  1703               	bsf	3,6	;RP1=1, select bank3
  8164  0A68  01C8               	clrf	_CONTROL_CURRENT_STATE^(0+384)
  8165                           
  8166                           ;CONTROL.c: 576:     HANDLERS_STATES[SET_TIME] = ON_WORK;
  8167  0A69  01B0               	clrf	_HANDLERS_STATES^(0+384)
  8168  0A6A  0AB0               	incf	_HANDLERS_STATES^(0+384),f
  8169                           
  8170                           ;CONTROL.c: 577:     HANDLERS_STATES[HEATING] = FIRST_TIME ;
  8171  0A6B  01B3               	clrf	(_HANDLERS_STATES^(0+384)+3)
  8172  0A6C  0008               	return
  8173  0A6D                     __end_of_STOP_HEATING:	
  8174  0A6D                     __ptext66:	
  8175 ;; *************** function i1_MOTOR_SET_STATE *****************
  8176 ;; Defined at:
  8177 ;;		line 58 in file "MOTOR.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;  MOTOR_STATE     1    wreg     unsigned char 
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;  MOTOR_STATE     1    0[COMMON] unsigned char 
  8182 ;; Return value:  Size  Location     Type
  8183 ;;                  1    wreg      void 
  8184 ;; Registers used:
  8185 ;;		wreg
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/300
  8188 ;;		On exit  : 300/300
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8191 ;;      Params:         0       0       0       0       0
  8192 ;;      Locals:         1       0       0       0       0
  8193 ;;      Temps:          0       0       0       0       0
  8194 ;;      Totals:         1       0       0       0       0
  8195 ;;Total ram usage:        1 bytes
  8196 ;; Hardware stack levels used:    1
  8197 ;; This function calls:
  8198 ;;		Nothing
  8199 ;; This function is called by:
  8200 ;;		_HEATING_HANDLER
  8201 ;;		_STOP_HEATING
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           
  8206                           ;psect for function i1_MOTOR_SET_STATE
  8207  0A6D                     i1_MOTOR_SET_STATE:	
  8208                           
  8209                           ;incstack = 0
  8210                           ; Regs used in i1_MOTOR_SET_STATE: [wreg]
  8211                           ;i1MOTOR_SET_STATE@MOTOR_STATE stored from wreg
  8212  0A6D  00F0               	movwf	i1MOTOR_SET_STATE@MOTOR_STATE
  8213                           
  8214                           ;MOTOR.c: 58: void MOTOR_SET_STATE (tMOTOR_STATE MOTOR_STATE);MOTOR.c: 59: {;MOTOR.c: 60
      +                          :     DESIRED_SPEED = MOTOR_STATE ;
  8215  0A6E  1683               	bsf	3,5	;RP0=1, select bank3
  8216  0A6F  1703               	bsf	3,6	;RP1=1, select bank3
  8217  0A70  00E7               	movwf	_DESIRED_SPEED^(0+384)
  8218  0A71  0008               	return
  8219  0A72                     __end_ofi1_MOTOR_SET_STATE:	
  8220  0A72                     __ptext67:	
  8221 ;; *************** function i1_HEATER_SET_STATE *****************
  8222 ;; Defined at:
  8223 ;;		line 59 in file "HEATER.c"
  8224 ;; Parameters:    Size  Location     Type
  8225 ;;  HEATER_STATE    1    wreg     unsigned char 
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;  HEATER_STATE    1    0[COMMON] unsigned char 
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  1    wreg      void 
  8230 ;; Registers used:
  8231 ;;		wreg
  8232 ;; Tracked objects:
  8233 ;;		On entry : 300/300
  8234 ;;		On exit  : 300/300
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8237 ;;      Params:         0       0       0       0       0
  8238 ;;      Locals:         1       0       0       0       0
  8239 ;;      Temps:          0       0       0       0       0
  8240 ;;      Totals:         1       0       0       0       0
  8241 ;;Total ram usage:        1 bytes
  8242 ;; Hardware stack levels used:    1
  8243 ;; This function calls:
  8244 ;;		Nothing
  8245 ;; This function is called by:
  8246 ;;		_HEATING_HANDLER
  8247 ;;		_STOP_HEATING
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           
  8252                           ;psect for function i1_HEATER_SET_STATE
  8253  0A72                     i1_HEATER_SET_STATE:	
  8254                           
  8255                           ;incstack = 0
  8256                           ; Regs used in i1_HEATER_SET_STATE: [wreg]
  8257                           ;i1HEATER_SET_STATE@HEATER_STATE stored from wreg
  8258  0A72  00F0               	movwf	i1HEATER_SET_STATE@HEATER_STATE
  8259                           
  8260                           ;HEATER.c: 59: void HEATER_SET_STATE (tHEATER_STATE HEATER_STATE);HEATER.c: 60: {;HEATER
      +                          .c: 61:     DESIRED_HEAT = HEATER_STATE ;
  8261  0A73  00E6               	movwf	_DESIRED_HEAT^(0+384)
  8262  0A74  0008               	return
  8263  0A75                     __end_ofi1_HEATER_SET_STATE:	
  8264  0A75                     __ptext70:	
  8265 ;; *************** function _LED_SET_STATE *****************
  8266 ;; Defined at:
  8267 ;;		line 49 in file "LED.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  LED_NO          1    wreg     enum E2
  8270 ;;  LED_STATE       1    0[BANK0 ] enum E908
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;  LED_NO          1    2[BANK0 ] enum E2
  8273 ;;  ret             1    0        enum E861
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  1    wreg      enum E861
  8276 ;; Registers used:
  8277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8278 ;; Tracked objects:
  8279 ;;		On entry : 300/0
  8280 ;;		On exit  : B00/800
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8283 ;;      Params:         0       1       0       0       0
  8284 ;;      Locals:         0       2       0       0       0
  8285 ;;      Temps:          0       0       0       0       0
  8286 ;;      Totals:         0       3       0       0       0
  8287 ;;Total ram usage:        3 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:    1
  8290 ;; This function calls:
  8291 ;;		i1_GPIO_PIN_SET_STATE
  8292 ;;		i1___bmul
  8293 ;; This function is called by:
  8294 ;;		_HEATING_HANDLER
  8295 ;;		_STOP_HEATING
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           
  8300                           ;psect for function _LED_SET_STATE
  8301  0A75                     _LED_SET_STATE:	
  8302                           
  8303                           ;incstack = 0
  8304 ;; hardware stack exceeded
  8305                           ; Regs used in _LED_SET_STATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8306                           ;LED_SET_STATE@LED_NO stored from wreg
  8307  0A75  00A2               	movwf	LED_SET_STATE@LED_NO
  8308                           
  8309                           ;LED.c: 52:  GPIO_PIN_SET_STATE(LEDs[LED_NO].LED_PORT, LEDs[LED_NO].LED_PIN , LED_STATE)
      +                          ;
  8310  0A76  3003               	movlw	3
  8311  0A77  00F0               	movwf	i1___bmul@multiplicand
  8312  0A78  0822               	movf	LED_SET_STATE@LED_NO,w
  8313  0A79  244C  120A  158A   	fcall	i1___bmul
  8314  0A7C  3EAE               	addlw	(low ((_LEDs| (0+256)+1)))& (0+255)
  8315  0A7D  0084               	movwf	4
  8316  0A7E  1783               	bsf	3,7	;select IRP bank3
  8317  0A7F  0800               	movf	0,w
  8318  0A80  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
  8319  0A81  1283               	bcf	3,5	;RP0=0, select bank0
  8320  0A82  1303               	bcf	3,6	;RP1=0, select bank0
  8321  0A83  0820               	movf	LED_SET_STATE@LED_STATE,w
  8322  0A84  00F4               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
  8323  0A85  3003               	movlw	3
  8324  0A86  00F0               	movwf	i1___bmul@multiplicand
  8325  0A87  0822               	movf	LED_SET_STATE@LED_NO,w
  8326  0A88  244C  120A  158A   	fcall	i1___bmul
  8327  0A8B  3EAD               	addlw	(low (_LEDs| (0+256)))& (0+255)
  8328  0A8C  0084               	movwf	4
  8329  0A8D  1783               	bsf	3,7	;select IRP bank3
  8330  0A8E  0800               	movf	0,w
  8331  0A8F  26F8  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
  8332                           
  8333                           ;LED.c: 53:  LEDs[LED_NO].LED_STATE = LED_STATE ;
  8334  0A92  3003               	movlw	3
  8335  0A93  00F0               	movwf	i1___bmul@multiplicand
  8336  0A94  1283               	bcf	3,5	;RP0=0, select bank0
  8337  0A95  1303               	bcf	3,6	;RP1=0, select bank0
  8338  0A96  0822               	movf	LED_SET_STATE@LED_NO,w
  8339  0A97  244C               	fcall	i1___bmul
  8340  0A98  3EAF               	addlw	(low ((_LEDs| (0+256)+2)))& (0+255)
  8341  0A99  0084               	movwf	4
  8342  0A9A  1283               	bcf	3,5	;RP0=0, select bank0
  8343  0A9B  1303               	bcf	3,6	;RP1=0, select bank0
  8344  0A9C  0820               	movf	LED_SET_STATE@LED_STATE,w
  8345  0A9D  1783               	bsf	3,7	;select IRP bank3
  8346  0A9E  0080               	movwf	0
  8347  0A9F  0008               	return
  8348  0AA0                     __end_of_LED_SET_STATE:	
  8349  0AA0                     __ptext50:	
  8350 ;; *************** function _INCREMENT_THIS *****************
  8351 ;; Defined at:
  8352 ;;		line 526 in file "CONTROL.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;  KEY             1    wreg     unsigned char 
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;  KEY             1   18[BANK0 ] unsigned char 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  1    wreg      void 
  8359 ;; Registers used:
  8360 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8361 ;; Tracked objects:
  8362 ;;		On entry : 300/300
  8363 ;;		On exit  : 0/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8366 ;;      Params:         0       0       0       0       0
  8367 ;;      Locals:         0       1       0       0       0
  8368 ;;      Temps:          0       2       0       0       0
  8369 ;;      Totals:         0       3       0       0       0
  8370 ;;Total ram usage:        3 bytes
  8371 ;; Hardware stack levels used:    1
  8372 ;; Hardware stack levels required when called:    5
  8373 ;; This function calls:
  8374 ;;		_DISP_UPDATE_TIME_UNIT_AT
  8375 ;;		_GOTO_NEXT_DIGIT
  8376 ;;		_LCD_SET_CURSOR
  8377 ;;		___lbmod
  8378 ;;		i1___bmul
  8379 ;; This function is called by:
  8380 ;;		_SET_TIME_HANDLER_ON_WORK
  8381 ;; This function uses a non-reentrant model
  8382 ;;
  8383                           
  8384                           
  8385                           ;psect for function _INCREMENT_THIS
  8386  0AA0                     _INCREMENT_THIS:	
  8387                           
  8388                           ;incstack = 0
  8389 ;; hardware stack exceeded
  8390                           ; Regs used in _INCREMENT_THIS: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8391                           ;INCREMENT_THIS@KEY stored from wreg
  8392  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  8393  0AA1  1303               	bcf	3,6	;RP1=0, select bank0
  8394  0AA2  00B2               	movwf	INCREMENT_THIS@KEY
  8395                           
  8396                           ;CONTROL.c: 526: static void INCREMENT_THIS (tbyte KEY);CONTROL.c: 527: {;CONTROL.c: 528
      +                          :     if (KEY == KEY_0 )
  8397  0AA3  3A0A               	xorlw	10
  8398  0AA4  1D03               	btfss	3,2
  8399  0AA5  2B06               	goto	i1l4592
  8400                           
  8401                           ;CONTROL.c: 529:     {;CONTROL.c: 530:         KEY = -1;
  8402  0AA6  30FF               	movlw	255
  8403  0AA7  00B2               	movwf	INCREMENT_THIS@KEY
  8404  0AA8  2B06               	goto	i1l4592
  8405  0AA9                     i1l4578:	
  8406                           
  8407                           ;CONTROL.c: 535:            SETTED_TIME.HOURS = ((SETTED_TIME.HOURS % 10 ) + ((KEY +1 )*
      +                          10)) ;
  8408  0AA9  300A               	movlw	10
  8409  0AAA  00F0               	movwf	___lbmod@divisor
  8410  0AAB  086D               	movf	_SETTED_TIME+2,w
  8411  0AAC  2335  120A  158A   	fcall	___lbmod
  8412  0AAF  00B0               	movwf	??_INCREMENT_THIS
  8413  0AB0  300A               	movlw	10
  8414  0AB1  00F0               	movwf	i1___bmul@multiplicand
  8415  0AB2  0832               	movf	INCREMENT_THIS@KEY,w
  8416  0AB3  244C  120A  158A   	fcall	i1___bmul
  8417  0AB6  1283               	bcf	3,5	;RP0=0, select bank0
  8418  0AB7  1303               	bcf	3,6	;RP1=0, select bank0
  8419  0AB8  0730               	addwf	??_INCREMENT_THIS,w
  8420  0AB9  3E0A               	addlw	10
  8421  0ABA  2AC6               	goto	L11
  8422  0ABB                     i1l4580:	
  8423                           ;CONTROL.c: 536:         break;
  8424                           
  8425                           
  8426                           ;CONTROL.c: 538:            SETTED_TIME.HOURS = ((SETTED_TIME.HOURS - (SETTED_TIME.HOURS
      +                           % 10 )) + (KEY +1 )) ;
  8427  0ABB  300A               	movlw	10
  8428  0ABC  00F0               	movwf	___lbmod@divisor
  8429  0ABD  086D               	movf	_SETTED_TIME+2,w
  8430  0ABE  2335  120A  158A   	fcall	___lbmod
  8431  0AC1  026D               	subwf	_SETTED_TIME+2,w
  8432  0AC2  00B0               	movwf	??_INCREMENT_THIS
  8433  0AC3  0832               	movf	INCREMENT_THIS@KEY,w
  8434  0AC4  0730               	addwf	??_INCREMENT_THIS,w
  8435  0AC5  3E01               	addlw	1
  8436  0AC6                     L11:	
  8437  0AC6  00ED               	movwf	_SETTED_TIME+2
  8438                           
  8439                           ;CONTROL.c: 539:         break;
  8440  0AC7  2B22               	goto	i1l4594
  8441  0AC8                     i1l4582:	
  8442                           
  8443                           ;CONTROL.c: 541:            SETTED_TIME.MINUTES = ((SETTED_TIME.MINUTES % 10) + ((KEY +1
      +                           )*10)) ;
  8444  0AC8  300A               	movlw	10
  8445  0AC9  00F0               	movwf	___lbmod@divisor
  8446  0ACA  086C               	movf	_SETTED_TIME+1,w
  8447  0ACB  2335  120A  158A   	fcall	___lbmod
  8448  0ACE  00B0               	movwf	??_INCREMENT_THIS
  8449  0ACF  300A               	movlw	10
  8450  0AD0  00F0               	movwf	i1___bmul@multiplicand
  8451  0AD1  0832               	movf	INCREMENT_THIS@KEY,w
  8452  0AD2  244C  120A  158A   	fcall	i1___bmul
  8453  0AD5  1283               	bcf	3,5	;RP0=0, select bank0
  8454  0AD6  1303               	bcf	3,6	;RP1=0, select bank0
  8455  0AD7  0730               	addwf	??_INCREMENT_THIS,w
  8456  0AD8  3E0A               	addlw	10
  8457  0AD9  2AE5               	goto	L12
  8458  0ADA                     i1l4584:	
  8459                           ;CONTROL.c: 542:         break;
  8460                           
  8461                           
  8462                           ;CONTROL.c: 544:            SETTED_TIME.MINUTES = ((SETTED_TIME.MINUTES - (SETTED_TIME.M
      +                          INUTES % 10 )) + (KEY +1 )) ;
  8463  0ADA  300A               	movlw	10
  8464  0ADB  00F0               	movwf	___lbmod@divisor
  8465  0ADC  086C               	movf	_SETTED_TIME+1,w
  8466  0ADD  2335  120A  158A   	fcall	___lbmod
  8467  0AE0  026C               	subwf	_SETTED_TIME+1,w
  8468  0AE1  00B0               	movwf	??_INCREMENT_THIS
  8469  0AE2  0832               	movf	INCREMENT_THIS@KEY,w
  8470  0AE3  0730               	addwf	??_INCREMENT_THIS,w
  8471  0AE4  3E01               	addlw	1
  8472  0AE5                     L12:	
  8473  0AE5  00EC               	movwf	_SETTED_TIME+1
  8474                           
  8475                           ;CONTROL.c: 545:         break;
  8476  0AE6  2B22               	goto	i1l4594
  8477  0AE7                     i1l4586:	
  8478                           
  8479                           ;CONTROL.c: 547:            SETTED_TIME.SECONDS = ((SETTED_TIME.SECONDS % 10 ) + ((KEY +
      +                          1 )*10)) ;
  8480  0AE7  300A               	movlw	10
  8481  0AE8  00F0               	movwf	___lbmod@divisor
  8482  0AE9  086B               	movf	_SETTED_TIME,w
  8483  0AEA  2335  120A  158A   	fcall	___lbmod
  8484  0AED  00B0               	movwf	??_INCREMENT_THIS
  8485  0AEE  300A               	movlw	10
  8486  0AEF  00F0               	movwf	i1___bmul@multiplicand
  8487  0AF0  0832               	movf	INCREMENT_THIS@KEY,w
  8488  0AF1  244C  120A  158A   	fcall	i1___bmul
  8489  0AF4  1283               	bcf	3,5	;RP0=0, select bank0
  8490  0AF5  1303               	bcf	3,6	;RP1=0, select bank0
  8491  0AF6  0730               	addwf	??_INCREMENT_THIS,w
  8492  0AF7  3E0A               	addlw	10
  8493  0AF8  2B04               	goto	L13
  8494  0AF9                     i1l4588:	
  8495                           ;CONTROL.c: 548:         break;
  8496                           
  8497                           
  8498                           ;CONTROL.c: 550:            SETTED_TIME.SECONDS = ((SETTED_TIME.SECONDS - (SETTED_TIME.S
      +                          ECONDS % 10 )) + (KEY +1 )) ;
  8499  0AF9  300A               	movlw	10
  8500  0AFA  00F0               	movwf	___lbmod@divisor
  8501  0AFB  086B               	movf	_SETTED_TIME,w
  8502  0AFC  2335  120A  158A   	fcall	___lbmod
  8503  0AFF  026B               	subwf	_SETTED_TIME,w
  8504  0B00  00B0               	movwf	??_INCREMENT_THIS
  8505  0B01  0832               	movf	INCREMENT_THIS@KEY,w
  8506  0B02  0730               	addwf	??_INCREMENT_THIS,w
  8507  0B03  3E01               	addlw	1
  8508  0B04                     L13:	
  8509  0B04  00EB               	movwf	_SETTED_TIME
  8510                           
  8511                           ;CONTROL.c: 551:         break;
  8512  0B05  2B22               	goto	i1l4594
  8513  0B06                     i1l4592:	
  8514  0B06  086F               	movf	_CURRENT_DIGIT,w
  8515  0B07  00B0               	movwf	??_INCREMENT_THIS
  8516  0B08  01B1               	clrf	??_INCREMENT_THIS+1
  8517                           
  8518                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8519                           ; Switch size 1, requested type "speed"
  8520                           ; Number of cases is 1, Range of values is 0 to 0
  8521                           ; switch strategies available:
  8522                           ; Name         Instructions Cycles
  8523                           ; simple_byte            4     3 (average)
  8524                           ; direct_byte           11     8 (fixed)
  8525                           ; jumptable            260     6 (fixed)
  8526                           ;	Chosen strategy is simple_byte
  8527  0B09  0831               	movf	??_INCREMENT_THIS+1,w
  8528  0B0A  3A00               	xorlw	0	; case 0
  8529  0B0B  1903               	skipnz
  8530  0B0C  2B0E               	goto	i1l6782
  8531  0B0D  2B22               	goto	i1l4594
  8532  0B0E                     i1l6782:	
  8533                           
  8534                           ; Switch size 1, requested type "speed"
  8535                           ; Number of cases is 6, Range of values is 6 to 13
  8536                           ; switch strategies available:
  8537                           ; Name         Instructions Cycles
  8538                           ; simple_byte           19    10 (average)
  8539                           ; direct_byte           35    11 (fixed)
  8540                           ; jumptable            263     9 (fixed)
  8541                           ;	Chosen strategy is simple_byte
  8542  0B0E  0830               	movf	??_INCREMENT_THIS,w
  8543  0B0F  3A06               	xorlw	6	; case 6
  8544  0B10  1903               	skipnz
  8545  0B11  2AA9               	goto	i1l4578
  8546  0B12  3A01               	xorlw	1	; case 7
  8547  0B13  1903               	skipnz
  8548  0B14  2ABB               	goto	i1l4580
  8549  0B15  3A0E               	xorlw	14	; case 9
  8550  0B16  1903               	skipnz
  8551  0B17  2AC8               	goto	i1l4582
  8552  0B18  3A03               	xorlw	3	; case 10
  8553  0B19  1903               	skipnz
  8554  0B1A  2ADA               	goto	i1l4584
  8555  0B1B  3A06               	xorlw	6	; case 12
  8556  0B1C  1903               	skipnz
  8557  0B1D  2AE7               	goto	i1l4586
  8558  0B1E  3A01               	xorlw	1	; case 13
  8559  0B1F  1903               	skipnz
  8560  0B20  2AF9               	goto	i1l4588
  8561  0B21  2B22               	goto	i1l4594
  8562  0B22                     i1l4594:	
  8563                           
  8564                           ;CONTROL.c: 556:    DISP_UPDATE_TIME_UNIT_AT (CURRENT_DIGIT ,(KEY +1 ));
  8565  0B22  0832               	movf	INCREMENT_THIS@KEY,w
  8566  0B23  3E01               	addlw	1
  8567  0B24  00AE               	movwf	DISP_UPDATE_TIME_UNIT_AT@NUMBER
  8568  0B25  086F               	movf	_CURRENT_DIGIT,w
  8569  0B26  2523  120A  158A   	fcall	_DISP_UPDATE_TIME_UNIT_AT
  8570                           
  8571                           ;CONTROL.c: 557:    if (CURRENT_DIGIT == (13))
  8572  0B29  300D               	movlw	13
  8573  0B2A  066F               	xorwf	_CURRENT_DIGIT,w
  8574  0B2B  1D03               	btfss	3,2
  8575  0B2C  2B31               	goto	i1l4600
  8576                           
  8577                           ;CONTROL.c: 558:    {;CONTROL.c: 559:         LCD_SET_CURSOR(0 , (13));
  8578  0B2D  300D               	movlw	13
  8579  0B2E  00A1               	movwf	LCD_SET_CURSOR@row
  8580  0B2F  3000               	movlw	0
  8581  0B30  2E66               	ljmp	_LCD_SET_CURSOR
  8582  0B31                     i1l4600:	
  8583                           ;CONTROL.c: 560:    }
  8584                           
  8585                           
  8586                           ;CONTROL.c: 562:    {;CONTROL.c: 563:         GOTO_NEXT_DIGIT(KEY_RIGHRT);
  8587  0B31  300B               	movlw	11
  8588  0B32  120A  118A  2F48   	ljmp	_GOTO_NEXT_DIGIT
  8589  0B35                     __end_of_INCREMENT_THIS:	
  8590  0B35                     __ptext51:	
  8591 ;; *************** function ___lbmod *****************
  8592 ;; Defined at:
  8593 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  dividend        1    wreg     unsigned char 
  8596 ;;  divisor         1    0[COMMON] unsigned char 
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;  dividend        1    2[COMMON] unsigned char 
  8599 ;;  rem             1    4[COMMON] unsigned char 
  8600 ;;  counter         1    3[COMMON] unsigned char 
  8601 ;; Return value:  Size  Location     Type
  8602 ;;                  1    wreg      unsigned char 
  8603 ;; Registers used:
  8604 ;;		wreg, status,2, status,0
  8605 ;; Tracked objects:
  8606 ;;		On entry : 300/0
  8607 ;;		On exit  : 300/0
  8608 ;;		Unchanged: 300/0
  8609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8610 ;;      Params:         1       0       0       0       0
  8611 ;;      Locals:         3       0       0       0       0
  8612 ;;      Temps:          1       0       0       0       0
  8613 ;;      Totals:         5       0       0       0       0
  8614 ;;Total ram usage:        5 bytes
  8615 ;; Hardware stack levels used:    1
  8616 ;; This function calls:
  8617 ;;		Nothing
  8618 ;; This function is called by:
  8619 ;;		_INCREMENT_THIS
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           
  8624                           ;psect for function ___lbmod
  8625  0B35                     ___lbmod:	
  8626                           
  8627                           ;incstack = 0
  8628 ;; hardware stack exceeded
  8629                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  8630                           ;___lbmod@dividend stored from wreg
  8631  0B35  00F2               	movwf	___lbmod@dividend
  8632  0B36  3008               	movlw	8
  8633  0B37  00F3               	movwf	___lbmod@counter
  8634  0B38  01F4               	clrf	___lbmod@rem
  8635  0B39                     i1l4444:	
  8636  0B39  0872               	movf	___lbmod@dividend,w
  8637  0B3A  00F1               	movwf	??___lbmod
  8638  0B3B  3007               	movlw	7
  8639  0B3C  1003               	clrc
  8640  0B3D                     L14:	
  8641  0B3D  0CF1               	rrf	??___lbmod,f
  8642  0B3E  3EFF               	addlw	-1
  8643  0B3F  1003               	clrc
  8644  0B40  1D03               	skipz
  8645  0B41  2B3D               	goto	L14
  8646  0B42  0D74               	rlf	___lbmod@rem,w
  8647  0B43  0471               	iorwf	??___lbmod,w
  8648  0B44  00F4               	movwf	___lbmod@rem
  8649  0B45  1003               	clrc
  8650  0B46  0DF2               	rlf	___lbmod@dividend,f
  8651  0B47  0870               	movf	___lbmod@divisor,w
  8652  0B48  0274               	subwf	___lbmod@rem,w
  8653  0B49  1C03               	skipc
  8654  0B4A  2B4D               	goto	i1l4452
  8655  0B4B  0870               	movf	___lbmod@divisor,w
  8656  0B4C  02F4               	subwf	___lbmod@rem,f
  8657  0B4D                     i1l4452:	
  8658  0B4D  0BF3               	decfsz	___lbmod@counter,f
  8659  0B4E  2B39               	goto	i1l4444
  8660  0B4F  0874               	movf	___lbmod@rem,w
  8661  0B50  0008               	return
  8662  0B51                     __end_of___lbmod:	
  8663  0B51                     __ptext35:	
  8664 ;; *************** function _SWs_UPDATE *****************
  8665 ;; Defined at:
  8666 ;;		line 30 in file "SW.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;		None
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;  sw_counter      1    2[BANK0 ] unsigned char 
  8671 ;;  samples_coun    1    1[BANK0 ] unsigned char 
  8672 ;;  ret             1    0        enum E861
  8673 ;; Return value:  Size  Location     Type
  8674 ;;                  1    wreg      enum E861
  8675 ;; Registers used:
  8676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8677 ;; Tracked objects:
  8678 ;;		On entry : 300/0
  8679 ;;		On exit  : B00/800
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8682 ;;      Params:         0       0       0       0       0
  8683 ;;      Locals:         0       3       0       0       0
  8684 ;;      Temps:          3       0       0       0       0
  8685 ;;      Totals:         3       3       0       0       0
  8686 ;;Total ram usage:        6 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; Hardware stack levels required when called:    1
  8689 ;; This function calls:
  8690 ;;		_GPIO_PIN_GET_STATE
  8691 ;;		i1___bmul
  8692 ;; This function is called by:
  8693 ;;		_SYS_UPDATE
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           
  8698                           ;psect for function _SWs_UPDATE
  8699  0B51                     _SWs_UPDATE:	
  8700                           
  8701                           ;SW.c: 42:   for (sw_counter = 0 ; sw_counter < 4 ; sw_counter++)
  8702                           
  8703                           ;incstack = 0
  8704                           ; Regs used in _SWs_UPDATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8705  0B51  01A2               	clrf	SWs_UPDATE@sw_counter
  8706  0B52                     i1l284:	
  8707                           
  8708                           ;SW.c: 43:   {;SW.c: 44:    for (samples_counter = 2 -1 ; samples_counter > 0 ; samples_
      +                          counter--)
  8709  0B52  01A1               	clrf	SWs_UPDATE@samples_counter
  8710  0B53  0AA1               	incf	SWs_UPDATE@samples_counter,f
  8711  0B54                     i1l6130:	
  8712                           
  8713                           ;SW.c: 45:    {;SW.c: 46:     SWs[sw_counter].SW_SAMPLES[samples_counter] = SWs[sw_count
      +                          er].SW_SAMPLES[samples_counter -1 ] ;
  8714  0B54  3005               	movlw	5
  8715  0B55  00F0               	movwf	i1___bmul@multiplicand
  8716  0B56  0822               	movf	SWs_UPDATE@sw_counter,w
  8717  0B57  244C  120A  158A   	fcall	i1___bmul
  8718  0B5A  3E91               	addlw	(low ((_SWs| (0+256)+1)))& (0+255)
  8719  0B5B  1283               	bcf	3,5	;RP0=0, select bank0
  8720  0B5C  1303               	bcf	3,6	;RP1=0, select bank0
  8721  0B5D  0721               	addwf	SWs_UPDATE@samples_counter,w
  8722  0B5E  00FA               	movwf	??_SWs_UPDATE
  8723  0B5F  0084               	movwf	4
  8724  0B60  1783               	bsf	3,7	;select IRP bank3
  8725  0B61  0800               	movf	0,w
  8726  0B62  00FB               	movwf	??_SWs_UPDATE+1
  8727  0B63  3005               	movlw	5
  8728  0B64  00F0               	movwf	i1___bmul@multiplicand
  8729  0B65  0822               	movf	SWs_UPDATE@sw_counter,w
  8730  0B66  244C  120A  158A   	fcall	i1___bmul
  8731  0B69  3E92               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  8732  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  8733  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
  8734  0B6C  0721               	addwf	SWs_UPDATE@samples_counter,w
  8735  0B6D  00FC               	movwf	??_SWs_UPDATE+2
  8736  0B6E  0084               	movwf	4
  8737  0B6F  087B               	movf	??_SWs_UPDATE+1,w
  8738  0B70  1783               	bsf	3,7	;select IRP bank3
  8739  0B71  0080               	movwf	0
  8740                           
  8741                           ;SW.c: 47:    }
  8742  0B72  0BA1               	decfsz	SWs_UPDATE@samples_counter,f
  8743  0B73  2B54               	goto	i1l6130
  8744                           
  8745                           ;SW.c: 48:    SWs[sw_counter].SW_SAMPLES[0] = GPIO_PIN_GET_STATE( SWs[sw_counter].SW_POR
      +                          T ,SWs[sw_counter].SW_PIN );
  8746  0B74  3005               	movlw	5
  8747  0B75  00F0               	movwf	i1___bmul@multiplicand
  8748  0B76  0822               	movf	SWs_UPDATE@sw_counter,w
  8749  0B77  244C  120A  158A   	fcall	i1___bmul
  8750  0B7A  3E91               	addlw	(low ((_SWs| (0+256)+1)))& (0+255)
  8751  0B7B  0084               	movwf	4
  8752  0B7C  1783               	bsf	3,7	;select IRP bank3
  8753  0B7D  0800               	movf	0,w
  8754  0B7E  00F3               	movwf	GPIO_PIN_GET_STATE@GPIO_PIN_NO
  8755  0B7F  3005               	movlw	5
  8756  0B80  00F0               	movwf	i1___bmul@multiplicand
  8757  0B81  1283               	bcf	3,5	;RP0=0, select bank0
  8758  0B82  1303               	bcf	3,6	;RP1=0, select bank0
  8759  0B83  0822               	movf	SWs_UPDATE@sw_counter,w
  8760  0B84  244C  120A  158A   	fcall	i1___bmul
  8761  0B87  3E90               	addlw	(low (_SWs| (0+256)))& (0+255)
  8762  0B88  0084               	movwf	4
  8763  0B89  1783               	bsf	3,7	;select IRP bank3
  8764  0B8A  0800               	movf	0,w
  8765  0B8B  2736  120A  158A   	fcall	_GPIO_PIN_GET_STATE
  8766  0B8E  00FA               	movwf	??_SWs_UPDATE
  8767  0B8F  3005               	movlw	5
  8768  0B90  00F0               	movwf	i1___bmul@multiplicand
  8769  0B91  1283               	bcf	3,5	;RP0=0, select bank0
  8770  0B92  1303               	bcf	3,6	;RP1=0, select bank0
  8771  0B93  0822               	movf	SWs_UPDATE@sw_counter,w
  8772  0B94  244C  120A  158A   	fcall	i1___bmul
  8773  0B97  3E92               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  8774  0B98  0084               	movwf	4
  8775  0B99  087A               	movf	??_SWs_UPDATE,w
  8776  0B9A  1783               	bsf	3,7	;select IRP bank3
  8777  0B9B  0080               	movwf	0
  8778                           
  8779                           ;SW.c: 51:    switch(SWs[sw_counter].SW_STATE)
  8780  0B9C  2C23               	goto	i1l6160
  8781  0B9D                     i1l6138:	
  8782                           
  8783                           ;SW.c: 54:      if ((SWs[sw_counter].SW_SAMPLES[0] == (0)) &&
  8784  0B9D  3005               	movlw	5
  8785  0B9E  00F0               	movwf	i1___bmul@multiplicand
  8786  0B9F  1283               	bcf	3,5	;RP0=0, select bank0
  8787  0BA0  1303               	bcf	3,6	;RP1=0, select bank0
  8788  0BA1  0822               	movf	SWs_UPDATE@sw_counter,w
  8789  0BA2  244C  120A  158A   	fcall	i1___bmul
  8790  0BA5  3E92               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  8791  0BA6  0084               	movwf	4
  8792  0BA7  1783               	bsf	3,7	;select IRP bank3
  8793  0BA8  0800               	movf	0,w
  8794  0BA9  1D03               	btfss	3,2
  8795  0BAA  2C44               	goto	i1l6162
  8796  0BAB  3005               	movlw	5
  8797  0BAC  00F0               	movwf	i1___bmul@multiplicand
  8798  0BAD  1283               	bcf	3,5	;RP0=0, select bank0
  8799  0BAE  1303               	bcf	3,6	;RP1=0, select bank0
  8800  0BAF  0822               	movf	SWs_UPDATE@sw_counter,w
  8801  0BB0  244C  120A  158A   	fcall	i1___bmul
  8802  0BB3  3E93               	addlw	(low ((_SWs| (0+256)+3)))& (0+255)
  8803  0BB4  0084               	movwf	4
  8804  0BB5  1783               	bsf	3,7	;select IRP bank3
  8805  0BB6  0800               	movf	0,w
  8806  0BB7  1D03               	btfss	3,2
  8807  0BB8  2C44               	goto	i1l6162
  8808                           
  8809                           ;SW.c: 56:      {;SW.c: 57:       SWs[sw_counter].SW_STATE = SW_PRE_PRESSED;
  8810  0BB9  3005               	movlw	5
  8811  0BBA  00F0               	movwf	i1___bmul@multiplicand
  8812  0BBB  1283               	bcf	3,5	;RP0=0, select bank0
  8813  0BBC  1303               	bcf	3,6	;RP1=0, select bank0
  8814  0BBD  0822               	movf	SWs_UPDATE@sw_counter,w
  8815  0BBE  244C  120A  158A   	fcall	i1___bmul
  8816  0BC1  3E94               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  8817  0BC2  0084               	movwf	4
  8818  0BC3  1783               	bsf	3,7	;select IRP bank3
  8819  0BC4  0180               	clrf	0
  8820  0BC5  0A80               	incf	0,f
  8821                           
  8822                           ;SW.c: 58:      }
  8823  0BC6  2C44               	goto	i1l6162
  8824  0BC7                     i1l6144:	
  8825                           
  8826                           ;SW.c: 66:      if (SWs[sw_counter].SW_SAMPLES[0] == (0))
  8827  0BC7  3005               	movlw	5
  8828  0BC8  00F0               	movwf	i1___bmul@multiplicand
  8829  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  8830  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  8831  0BCB  0822               	movf	SWs_UPDATE@sw_counter,w
  8832  0BCC  244C  120A  158A   	fcall	i1___bmul
  8833  0BCF  3E92               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  8834  0BD0  0084               	movwf	4
  8835  0BD1  1783               	bsf	3,7	;select IRP bank3
  8836  0BD2  0800               	movf	0,w
  8837  0BD3  1D03               	btfss	3,2
  8838  0BD4  2C44               	goto	i1l6162
  8839                           
  8840                           ;SW.c: 67:      {;SW.c: 68:       SWs[sw_counter].SW_STATE = SW_PRESSED;
  8841  0BD5  3005               	movlw	5
  8842  0BD6  00F0               	movwf	i1___bmul@multiplicand
  8843  0BD7  1283               	bcf	3,5	;RP0=0, select bank0
  8844  0BD8  1303               	bcf	3,6	;RP1=0, select bank0
  8845  0BD9  0822               	movf	SWs_UPDATE@sw_counter,w
  8846  0BDA  244C  120A  158A   	fcall	i1___bmul
  8847  0BDD  3E94               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  8848  0BDE  0084               	movwf	4
  8849  0BDF  1783               	bsf	3,7	;select IRP bank3
  8850  0BE0  0180               	clrf	0
  8851                           
  8852                           ;SW.c: 69:      }
  8853  0BE1  2C44               	goto	i1l6162
  8854  0BE2                     i1l6148:	
  8855                           
  8856                           ;SW.c: 77:      if ((SWs[sw_counter].SW_SAMPLES[0] == (1)) &&
  8857  0BE2  3005               	movlw	5
  8858  0BE3  00F0               	movwf	i1___bmul@multiplicand
  8859  0BE4  1283               	bcf	3,5	;RP0=0, select bank0
  8860  0BE5  1303               	bcf	3,6	;RP1=0, select bank0
  8861  0BE6  0822               	movf	SWs_UPDATE@sw_counter,w
  8862  0BE7  244C  120A  158A   	fcall	i1___bmul
  8863  0BEA  3E92               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  8864  0BEB  0084               	movwf	4
  8865  0BEC  1783               	bsf	3,7	;select IRP bank3
  8866  0BED  0B00               	decfsz	0,w
  8867  0BEE  2C44               	goto	i1l6162
  8868  0BEF  3005               	movlw	5
  8869  0BF0  00F0               	movwf	i1___bmul@multiplicand
  8870  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  8871  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  8872  0BF3  0822               	movf	SWs_UPDATE@sw_counter,w
  8873  0BF4  244C  120A  158A   	fcall	i1___bmul
  8874  0BF7  3E93               	addlw	(low ((_SWs| (0+256)+3)))& (0+255)
  8875  0BF8  0084               	movwf	4
  8876  0BF9  1783               	bsf	3,7	;select IRP bank3
  8877  0BFA  0B00               	decfsz	0,w
  8878  0BFB  2C44               	goto	i1l6162
  8879                           
  8880                           ;SW.c: 79:      {;SW.c: 80:       SWs[sw_counter].SW_STATE = SW_PRE_RELEASED;
  8881  0BFC  3005               	movlw	5
  8882  0BFD  00F0               	movwf	i1___bmul@multiplicand
  8883  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  8884  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  8885  0C00  0822               	movf	SWs_UPDATE@sw_counter,w
  8886  0C01  244C  120A  158A   	fcall	i1___bmul
  8887  0C04  3E94               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  8888  0C05  0084               	movwf	4
  8889  0C06  3003               	movlw	3
  8890  0C07  2C20               	goto	L4
  8891  0C08                     i1l6154:	
  8892                           ;SW.c: 81:      }
  8893                           
  8894                           
  8895                           ;SW.c: 89:      if (SWs[sw_counter].SW_SAMPLES[0] == (1))
  8896  0C08  3005               	movlw	5
  8897  0C09  00F0               	movwf	i1___bmul@multiplicand
  8898  0C0A  1283               	bcf	3,5	;RP0=0, select bank0
  8899  0C0B  1303               	bcf	3,6	;RP1=0, select bank0
  8900  0C0C  0822               	movf	SWs_UPDATE@sw_counter,w
  8901  0C0D  244C  120A  158A   	fcall	i1___bmul
  8902  0C10  3E92               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  8903  0C11  0084               	movwf	4
  8904  0C12  1783               	bsf	3,7	;select IRP bank3
  8905  0C13  0B00               	decfsz	0,w
  8906  0C14  2C44               	goto	i1l6162
  8907                           
  8908                           ;SW.c: 90:      {;SW.c: 91:       SWs[sw_counter].SW_STATE = SW_RELEASED;
  8909  0C15  3005               	movlw	5
  8910  0C16  00F0               	movwf	i1___bmul@multiplicand
  8911  0C17  1283               	bcf	3,5	;RP0=0, select bank0
  8912  0C18  1303               	bcf	3,6	;RP1=0, select bank0
  8913  0C19  0822               	movf	SWs_UPDATE@sw_counter,w
  8914  0C1A  244C  120A  158A   	fcall	i1___bmul
  8915  0C1D  3E94               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  8916  0C1E  0084               	movwf	4
  8917  0C1F  3002               	movlw	2
  8918  0C20                     L4:	
  8919  0C20  1783               	bsf	3,7	;select IRP bank3
  8920  0C21  0080               	movwf	0
  8921                           
  8922                           ;SW.c: 92:      }
  8923  0C22  2C44               	goto	i1l6162
  8924  0C23                     i1l6160:	
  8925  0C23  3005               	movlw	5
  8926  0C24  00F0               	movwf	i1___bmul@multiplicand
  8927  0C25  1283               	bcf	3,5	;RP0=0, select bank0
  8928  0C26  1303               	bcf	3,6	;RP1=0, select bank0
  8929  0C27  0822               	movf	SWs_UPDATE@sw_counter,w
  8930  0C28  244C  120A  158A   	fcall	i1___bmul
  8931  0C2B  3E94               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  8932  0C2C  0084               	movwf	4
  8933  0C2D  1783               	bsf	3,7	;select IRP bank3
  8934  0C2E  0800               	movf	0,w
  8935  0C2F  00FA               	movwf	??_SWs_UPDATE
  8936  0C30  01FB               	clrf	??_SWs_UPDATE+1
  8937                           
  8938                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8939                           ; Switch size 1, requested type "speed"
  8940                           ; Number of cases is 1, Range of values is 0 to 0
  8941                           ; switch strategies available:
  8942                           ; Name         Instructions Cycles
  8943                           ; simple_byte            4     3 (average)
  8944                           ; direct_byte           11     8 (fixed)
  8945                           ; jumptable            260     6 (fixed)
  8946                           ;	Chosen strategy is simple_byte
  8947  0C31  087B               	movf	??_SWs_UPDATE+1,w
  8948  0C32  3A00               	xorlw	0	; case 0
  8949  0C33  1903               	skipnz
  8950  0C34  2C36               	goto	i1l6774
  8951  0C35  2C44               	goto	i1l6162
  8952  0C36                     i1l6774:	
  8953                           
  8954                           ; Switch size 1, requested type "speed"
  8955                           ; Number of cases is 4, Range of values is 0 to 3
  8956                           ; switch strategies available:
  8957                           ; Name         Instructions Cycles
  8958                           ; simple_byte           13     7 (average)
  8959                           ; direct_byte           20     8 (fixed)
  8960                           ; jumptable            260     6 (fixed)
  8961                           ;	Chosen strategy is simple_byte
  8962  0C36  087A               	movf	??_SWs_UPDATE,w
  8963  0C37  3A00               	xorlw	0	; case 0
  8964  0C38  1903               	skipnz
  8965  0C39  2BE2               	goto	i1l6148
  8966  0C3A  3A01               	xorlw	1	; case 1
  8967  0C3B  1903               	skipnz
  8968  0C3C  2BC7               	goto	i1l6144
  8969  0C3D  3A03               	xorlw	3	; case 2
  8970  0C3E  1903               	skipnz
  8971  0C3F  2B9D               	goto	i1l6138
  8972  0C40  3A01               	xorlw	1	; case 3
  8973  0C41  1903               	skipnz
  8974  0C42  2C08               	goto	i1l6154
  8975  0C43  2C44               	goto	i1l6162
  8976  0C44                     i1l6162:	
  8977                           
  8978                           ;SW.c: 103:   }
  8979  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  8980  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  8981  0C46  3004               	movlw	4
  8982  0C47  0AA2               	incf	SWs_UPDATE@sw_counter,f
  8983  0C48  0222               	subwf	SWs_UPDATE@sw_counter,w
  8984  0C49  1803               	btfsc	3,0
  8985  0C4A  0008               	return
  8986  0C4B  2B52               	goto	i1l284
  8987  0C4C                     __end_of_SWs_UPDATE:	
  8988  0C4C                     __ptext78:	
  8989 ;; *************** function i1___bmul *****************
  8990 ;; Defined at:
  8991 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  8992 ;; Parameters:    Size  Location     Type
  8993 ;;  multiplier      1    wreg     unsigned char 
  8994 ;;  multiplicand    1    0[COMMON] unsigned char 
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;  multiplier      1    1[COMMON] unsigned char 
  8997 ;;  __bmul          1    2[COMMON] unsigned char 
  8998 ;; Return value:  Size  Location     Type
  8999 ;;                  1    wreg      unsigned char 
  9000 ;; Registers used:
  9001 ;;		wreg, status,2, status,0
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9007 ;;      Params:         1       0       0       0       0
  9008 ;;      Locals:         2       0       0       0       0
  9009 ;;      Temps:          0       0       0       0       0
  9010 ;;      Totals:         3       0       0       0       0
  9011 ;;Total ram usage:        3 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; This function calls:
  9014 ;;		Nothing
  9015 ;; This function is called by:
  9016 ;;		_SWs_UPDATE
  9017 ;;		_SW_GET_STATE
  9018 ;;		_LED_SET_STATE
  9019 ;;		_INCREMENT_THIS
  9020 ;; This function uses a non-reentrant model
  9021 ;;
  9022                           
  9023                           
  9024                           ;psect for function i1___bmul
  9025  0C4C                     i1___bmul:	
  9026                           
  9027                           ;incstack = 0
  9028                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  9029                           ;i1___bmul@multiplier stored from wreg
  9030  0C4C  00F1               	movwf	i1___bmul@multiplier
  9031  0C4D  01F2               	clrf	i1___bmul@product
  9032  0C4E  0870               	movf	i1___bmul@multiplicand,w
  9033  0C4F  1871               	btfsc	i1___bmul@multiplier,0
  9034  0C50  07F2               	addwf	i1___bmul@product,f
  9035  0C51  1003               	clrc
  9036  0C52  0DF0               	rlf	i1___bmul@multiplicand,f
  9037  0C53  0870               	movf	i1___bmul@multiplicand,w
  9038  0C54  18F1               	btfsc	i1___bmul@multiplier,1
  9039  0C55  07F2               	addwf	i1___bmul@product,f
  9040  0C56  1003               	clrc
  9041  0C57  0DF0               	rlf	i1___bmul@multiplicand,f
  9042  0C58  0870               	movf	i1___bmul@multiplicand,w
  9043  0C59  1971               	btfsc	i1___bmul@multiplier,2
  9044  0C5A  07F2               	addwf	i1___bmul@product,f
  9045  0C5B  1003               	clrc
  9046  0C5C  0DF0               	rlf	i1___bmul@multiplicand,f
  9047  0C5D  0870               	movf	i1___bmul@multiplicand,w
  9048  0C5E  19F1               	btfsc	i1___bmul@multiplier,3
  9049  0C5F  07F2               	addwf	i1___bmul@product,f
  9050  0C60  1003               	clrc
  9051  0C61  0DF0               	rlf	i1___bmul@multiplicand,f
  9052  0C62  0870               	movf	i1___bmul@multiplicand,w
  9053  0C63  1A71               	btfsc	i1___bmul@multiplier,4
  9054  0C64  07F2               	addwf	i1___bmul@product,f
  9055  0C65  1003               	clrc
  9056  0C66  0DF0               	rlf	i1___bmul@multiplicand,f
  9057  0C67  0870               	movf	i1___bmul@multiplicand,w
  9058  0C68  1AF1               	btfsc	i1___bmul@multiplier,5
  9059  0C69  07F2               	addwf	i1___bmul@product,f
  9060  0C6A  1003               	clrc
  9061  0C6B  0DF0               	rlf	i1___bmul@multiplicand,f
  9062  0C6C  0870               	movf	i1___bmul@multiplicand,w
  9063  0C6D  1B71               	btfsc	i1___bmul@multiplier,6
  9064  0C6E  07F2               	addwf	i1___bmul@product,f
  9065  0C6F  1003               	clrc
  9066  0C70  0DF0               	rlf	i1___bmul@multiplicand,f
  9067  0C71  0870               	movf	i1___bmul@multiplicand,w
  9068  0C72  1BF1               	btfsc	i1___bmul@multiplier,7
  9069  0C73  07F2               	addwf	i1___bmul@product,f
  9070  0C74  0872               	movf	i1___bmul@product,w
  9071  0C75  0008               	return
  9072  0C76                     __end_ofi1___bmul:	
  9073  0C76                     __ptext81:	
  9074 ;; *************** function _DISP_SHOW_TIME_AT *****************
  9075 ;; Defined at:
  9076 ;;		line 56 in file "Display.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;  START_TIME      3   15[BANK0 ] struct .
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;		None
  9081 ;; Return value:  Size  Location     Type
  9082 ;;                  1    wreg      void 
  9083 ;; Registers used:
  9084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9085 ;; Tracked objects:
  9086 ;;		On entry : 300/0
  9087 ;;		On exit  : 300/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9090 ;;      Params:         0       3       0       0       0
  9091 ;;      Locals:         0       0       0       0       0
  9092 ;;      Temps:          0       0       0       0       0
  9093 ;;      Totals:         0       3       0       0       0
  9094 ;;Total ram usage:        3 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; Hardware stack levels required when called:    5
  9097 ;; This function calls:
  9098 ;;		_DISP_SHOW_TIME
  9099 ;;		_UPDATE_LCD_HOURS
  9100 ;;		_UPDATE_LCD_MINUTES
  9101 ;;		_UPDATE_LCD_SECONDS
  9102 ;; This function is called by:
  9103 ;;		_SET_TIME_HANDLER
  9104 ;;		_HEATING_HANDLER
  9105 ;;		_DEFAULT_HANDLER
  9106 ;; This function uses a non-reentrant model
  9107 ;;
  9108                           
  9109                           
  9110                           ;psect for function _DISP_SHOW_TIME_AT
  9111  0C76                     _DISP_SHOW_TIME_AT:	
  9112                           
  9113                           ;Display.c: 56:  void DISP_SHOW_TIME_AT( tTIME START_TIME);Display.c: 57:  {;Display.c: 
      +                          58:      DISP_SHOW_TIME();
  9114                           
  9115                           ;incstack = 0
  9116 ;; hardware stack exceeded
  9117                           ; Regs used in _DISP_SHOW_TIME_AT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9118  0C76  261A  120A  158A   	fcall	_DISP_SHOW_TIME
  9119                           
  9120                           ;Display.c: 59:       UPDATE_LCD_SECONDS(START_TIME.SECONDS);
  9121  0C79  082F               	movf	DISP_SHOW_TIME_AT@START_TIME,w
  9122  0C7A  24E6  120A  158A   	fcall	_UPDATE_LCD_SECONDS
  9123                           
  9124                           ;Display.c: 60:       UPDATE_LCD_MINUTES(START_TIME.MINUTES);
  9125  0C7D  0830               	movf	DISP_SHOW_TIME_AT@START_TIME+1,w
  9126  0C7E  249D  120A  158A   	fcall	_UPDATE_LCD_MINUTES
  9127                           
  9128                           ;Display.c: 61:       UPDATE_LCD_HOURS(START_TIME.HOURS);
  9129  0C81  0831               	movf	DISP_SHOW_TIME_AT@START_TIME+2,w
  9130  0C82  2946               	ljmp	_UPDATE_LCD_HOURS
  9131  0C83                     __end_of_DISP_SHOW_TIME_AT:	
  9132  0C83                     __ptext79:	
  9133 ;; *************** function _STOP_BLINKING *****************
  9134 ;; Defined at:
  9135 ;;		line 108 in file "LCD.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;		None
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;		None
  9140 ;; Return value:  Size  Location     Type
  9141 ;;                  1    wreg      void 
  9142 ;; Registers used:
  9143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9149 ;;      Params:         0       0       0       0       0
  9150 ;;      Locals:         0       0       0       0       0
  9151 ;;      Temps:          0       0       0       0       0
  9152 ;;      Totals:         0       0       0       0       0
  9153 ;;Total ram usage:        0 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:    2
  9156 ;; This function calls:
  9157 ;;		i1_LCD_SND_COMMAND
  9158 ;; This function is called by:
  9159 ;;		_SET_TIME_HANDLER
  9160 ;;		_SET_HEATING_HANDLER
  9161 ;;		_SET_ROTOR_PWR_HANDLER
  9162 ;;		_HEATING_HANDLER
  9163 ;;		_DEFAULT_HANDLER
  9164 ;;		_SET_HEATING_HANDLER_ON_WORK
  9165 ;;		_SET_ROTOR_PWR_HANDLER_ON_WORK
  9166 ;; This function uses a non-reentrant model
  9167 ;;
  9168                           
  9169                           
  9170                           ;psect for function _STOP_BLINKING
  9171  0C83                     _STOP_BLINKING:	
  9172  0C83                     i1l4526:	
  9173                           ;incstack = 0
  9174 ;; hardware stack exceeded
  9175                           ; Regs used in _STOP_BLINKING: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9176                           
  9177                           
  9178                           ;LCD.c: 110:  LCD_SND_COMMAND(0x0C);
  9179  0C83  300C               	movlw	12
  9180  0C84  26C3               	fcall	i1_LCD_SND_COMMAND
  9181  0C85  0008               	return
  9182  0C86                     __end_of_STOP_BLINKING:	
  9183  0C86                     __ptext69:	
  9184 ;; *************** function _TIME_GET *****************
  9185 ;; Defined at:
  9186 ;;		line 120 in file "TIME.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;		None
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;		None
  9191 ;; Return value:  Size  Location     Type
  9192 ;;                  3    0[COMMON] struct .
  9193 ;; Registers used:
  9194 ;;		wreg
  9195 ;; Tracked objects:
  9196 ;;		On entry : 0/0
  9197 ;;		On exit  : 300/300
  9198 ;;		Unchanged: 0/0
  9199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9200 ;;      Params:         3       0       0       0       0
  9201 ;;      Locals:         0       0       0       0       0
  9202 ;;      Temps:          0       0       0       0       0
  9203 ;;      Totals:         3       0       0       0       0
  9204 ;;Total ram usage:        3 bytes
  9205 ;; Hardware stack levels used:    1
  9206 ;; This function calls:
  9207 ;;		Nothing
  9208 ;; This function is called by:
  9209 ;;		_HEATING_HANDLER
  9210 ;;		_STOP_HEATING
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           
  9215                           ;psect for function _TIME_GET
  9216  0C86                     _TIME_GET:	
  9217                           
  9218                           ;TIME.c: 122:     return CURRENT_TIME;
  9219                           
  9220                           ;incstack = 0
  9221                           ; Regs used in _TIME_GET: [wreg]
  9222  0C86  1683               	bsf	3,5	;RP0=1, select bank3
  9223  0C87  1703               	bsf	3,6	;RP1=1, select bank3
  9224  0C88  0835               	movf	_CURRENT_TIME^(0+384),w
  9225  0C89  00F0               	movwf	?_TIME_GET
  9226  0C8A  0836               	movf	(_CURRENT_TIME+1)^(0+384),w
  9227  0C8B  00F1               	movwf	?_TIME_GET+1
  9228  0C8C  0837               	movf	(_CURRENT_TIME+2)^(0+384),w
  9229  0C8D  00F2               	movwf	?_TIME_GET+2
  9230  0C8E  0008               	return
  9231  0C8F                     __end_of_TIME_GET:	
  9232  0C8F                     __ptext94:	
  9233 ;; *************** function _DISP_DOOR_ERR *****************
  9234 ;; Defined at:
  9235 ;;		line 91 in file "Display.c"
  9236 ;; Parameters:    Size  Location     Type
  9237 ;;		None
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;		None
  9240 ;; Return value:  Size  Location     Type
  9241 ;;                  1    wreg      void 
  9242 ;; Registers used:
  9243 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9244 ;; Tracked objects:
  9245 ;;		On entry : 0/B00
  9246 ;;		On exit  : 300/0
  9247 ;;		Unchanged: 0/0
  9248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9249 ;;      Params:         0       0       0       0       0
  9250 ;;      Locals:         0       0       0       0       0
  9251 ;;      Temps:          0       0       0       0       0
  9252 ;;      Totals:         0       0       0       0       0
  9253 ;;Total ram usage:        0 bytes
  9254 ;; Hardware stack levels used:    1
  9255 ;; Hardware stack levels required when called:    3
  9256 ;; This function calls:
  9257 ;;		_LCD_SEND_A_STRING
  9258 ;;		_LCD_SET_CURSOR
  9259 ;; This function is called by:
  9260 ;;		_HEATING_HANDLER
  9261 ;;		_DEFAULT_HANDLER
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           
  9266                           ;psect for function _DISP_DOOR_ERR
  9267  0C8F                     _DISP_DOOR_ERR:	
  9268  0C8F                     i1l4782:	
  9269                           ;incstack = 0
  9270 ;; hardware stack exceeded
  9271                           ; Regs used in _DISP_DOOR_ERR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9272                           
  9273                           
  9274                           ;Display.c: 93:      LCD_SET_CURSOR(1,0);
  9275  0C8F  1283               	bcf	3,5	;RP0=0, select bank0
  9276  0C90  1303               	bcf	3,6	;RP1=0, select bank0
  9277  0C91  3001               	movlw	1
  9278  0C92  01A1               	clrf	LCD_SET_CURSOR@row
  9279  0C93  2666  120A  158A   	fcall	_LCD_SET_CURSOR
  9280                           
  9281                           ;Display.c: 94:  LCD_SEND_A_STRING("< CLOSE DOOR !!>");
  9282  0C96  3089               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  9283  0C97  1283               	bcf	3,5	;RP0=0, select bank0
  9284  0C98  1303               	bcf	3,6	;RP1=0, select bank0
  9285  0C99  00A1               	movwf	LCD_SEND_A_STRING@string
  9286  0C9A  3080               	movlw	128
  9287  0C9B  00A2               	movwf	LCD_SEND_A_STRING@string+1
  9288  0C9C  2E48               	ljmp	i1l4274
  9289  0C9D                     __end_of_DISP_DOOR_ERR:	
  9290  0C9D                     __ptext83:	
  9291 ;; *************** function _UPDATE_LCD_MINUTES *****************
  9292 ;; Defined at:
  9293 ;;		line 141 in file "Display.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;  MINUTES         1    wreg     unsigned char 
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;  MINUTES         1   14[BANK0 ] unsigned char 
  9298 ;; Return value:  Size  Location     Type
  9299 ;;                  1    wreg      void 
  9300 ;; Registers used:
  9301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9302 ;; Tracked objects:
  9303 ;;		On entry : 300/0
  9304 ;;		On exit  : 300/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9307 ;;      Params:         0       0       0       0       0
  9308 ;;      Locals:         0       1       0       0       0
  9309 ;;      Temps:          0       0       0       0       0
  9310 ;;      Totals:         0       1       0       0       0
  9311 ;;Total ram usage:        1 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; Hardware stack levels required when called:    4
  9314 ;; This function calls:
  9315 ;;		_LCD_SEND_A_NUMBER
  9316 ;;		_LCD_SET_CURSOR
  9317 ;;		___lbdiv
  9318 ;; This function is called by:
  9319 ;;		_DISP_UPDATE_TIME
  9320 ;;		_DISP_SHOW_TIME_AT
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           
  9325                           ;psect for function _UPDATE_LCD_MINUTES
  9326  0C9D                     _UPDATE_LCD_MINUTES:	
  9327                           
  9328                           ;incstack = 0
  9329 ;; hardware stack exceeded
  9330                           ; Regs used in _UPDATE_LCD_MINUTES: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9331                           ;UPDATE_LCD_MINUTES@MINUTES stored from wreg
  9332  0C9D  00AE               	movwf	UPDATE_LCD_MINUTES@MINUTES
  9333                           
  9334                           ;Display.c: 141:  static void UPDATE_LCD_MINUTES(tbyte MINUTES);Display.c: 142:  {;Displ
      +                          ay.c: 143:   LCD_SET_CURSOR(0,(9));
  9335  0C9E  3009               	movlw	9
  9336  0C9F  00A1               	movwf	LCD_SET_CURSOR@row
  9337  0CA0  3000               	movlw	0
  9338  0CA1  2666  120A  158A   	fcall	_LCD_SET_CURSOR
  9339                           
  9340                           ;Display.c: 144:   if (MINUTES / 10 != 0)
  9341  0CA4  300A               	movlw	10
  9342  0CA5  00F0               	movwf	___lbdiv@divisor
  9343  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  9344  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  9345  0CA8  082E               	movf	UPDATE_LCD_MINUTES@MINUTES,w
  9346  0CA9  24CB  120A  158A   	fcall	___lbdiv
  9347  0CAC  3A00               	xorlw	0
  9348  0CAD  1903               	skipnz
  9349  0CAE  2CB3               	goto	i1l4546
  9350                           
  9351                           ;Display.c: 145:   {;Display.c: 146:    LCD_SEND_A_NUMBER(MINUTES);
  9352  0CAF  082E               	movf	UPDATE_LCD_MINUTES@MINUTES,w
  9353  0CB0  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9354  0CB1  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9355  0CB2  2CBC               	ljmp	i1l4316
  9356  0CB3                     i1l4546:	
  9357                           ;Display.c: 147:   }
  9358                           
  9359                           
  9360                           ;Display.c: 149:   {;Display.c: 150:    LCD_SEND_A_NUMBER(0);
  9361  0CB3  01A8               	clrf	LCD_SEND_A_NUMBER@x
  9362  0CB4  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9363  0CB5  24BC  120A  158A   	fcall	_LCD_SEND_A_NUMBER
  9364                           
  9365                           ;Display.c: 151:    LCD_SEND_A_NUMBER(MINUTES);
  9366  0CB8  082E               	movf	UPDATE_LCD_MINUTES@MINUTES,w
  9367  0CB9  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9368  0CBA  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9369  0CBB  2CBC               	ljmp	i1l4316
  9370  0CBC                     __end_of_UPDATE_LCD_MINUTES:	
  9371  0CBC                     __ptext86:	
  9372 ;; *************** function _LCD_SEND_A_NUMBER *****************
  9373 ;; Defined at:
  9374 ;;		line 64 in file "LCD.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;  x               2    8[BANK0 ] unsigned int 
  9377 ;; Auto vars:     Size  Location     Type
  9378 ;;  string          4   10[BANK0 ] unsigned char [4]
  9379 ;; Return value:  Size  Location     Type
  9380 ;;                  1    wreg      void 
  9381 ;; Registers used:
  9382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9383 ;; Tracked objects:
  9384 ;;		On entry : 300/0
  9385 ;;		On exit  : 300/0
  9386 ;;		Unchanged: 0/0
  9387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9388 ;;      Params:         0       2       0       0       0
  9389 ;;      Locals:         0       4       0       0       0
  9390 ;;      Temps:          0       0       0       0       0
  9391 ;;      Totals:         0       6       0       0       0
  9392 ;;Total ram usage:        6 bytes
  9393 ;; Hardware stack levels used:    1
  9394 ;; Hardware stack levels required when called:    3
  9395 ;; This function calls:
  9396 ;;		_LCD_SEND_A_STRING
  9397 ;;		_itoa
  9398 ;; This function is called by:
  9399 ;;		_DISP_UPDATE_TIME_UNIT_AT
  9400 ;;		_UPDATE_LCD_SECONDS
  9401 ;;		_UPDATE_LCD_MINUTES
  9402 ;;		_UPDATE_LCD_HOURS
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           
  9407                           ;psect for function _LCD_SEND_A_NUMBER
  9408  0CBC                     _LCD_SEND_A_NUMBER:	
  9409  0CBC                     i1l4316:	
  9410                           ;incstack = 0
  9411 ;; hardware stack exceeded
  9412                           ; Regs used in _LCD_SEND_A_NUMBER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9413                           
  9414                           
  9415                           ;LCD.c: 64: void LCD_SEND_A_NUMBER (tWORD x);LCD.c: 65: {;LCD.c: 66:  char string[4];;LC
      +                          D.c: 67:  itoa (string , x ,10);
  9416  0CBC  0829               	movf	LCD_SEND_A_NUMBER@x+1,w
  9417  0CBD  00A5               	movwf	itoa@val+1
  9418  0CBE  0828               	movf	LCD_SEND_A_NUMBER@x,w
  9419  0CBF  00A4               	movwf	itoa@val
  9420  0CC0  300A               	movlw	10
  9421  0CC1  00A6               	movwf	itoa@base
  9422  0CC2  302A               	movlw	(low (LCD_SEND_A_NUMBER@string| 0))& (0+255)
  9423  0CC3  01A7               	clrf	itoa@base+1
  9424  0CC4  2753  120A  158A   	fcall	_itoa
  9425                           
  9426                           ;LCD.c: 68:  LCD_SEND_A_STRING(string);
  9427  0CC7  302A               	movlw	(low (LCD_SEND_A_NUMBER@string| 0))& (0+255)
  9428  0CC8  00A1               	movwf	LCD_SEND_A_STRING@string
  9429  0CC9  01A2               	clrf	LCD_SEND_A_STRING@string+1
  9430  0CCA  2E48               	ljmp	i1l4274
  9431  0CCB                     __end_of_LCD_SEND_A_NUMBER:	
  9432  0CCB                     __ptext85:	
  9433 ;; *************** function ___lbdiv *****************
  9434 ;; Defined at:
  9435 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;  dividend        1    wreg     unsigned char 
  9438 ;;  divisor         1    0[COMMON] unsigned char 
  9439 ;; Auto vars:     Size  Location     Type
  9440 ;;  dividend        1    1[COMMON] unsigned char 
  9441 ;;  quotient        1    3[COMMON] unsigned char 
  9442 ;;  counter         1    2[COMMON] unsigned char 
  9443 ;; Return value:  Size  Location     Type
  9444 ;;                  1    wreg      unsigned char 
  9445 ;; Registers used:
  9446 ;;		wreg, status,2, status,0
  9447 ;; Tracked objects:
  9448 ;;		On entry : 300/0
  9449 ;;		On exit  : 300/0
  9450 ;;		Unchanged: 300/0
  9451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9452 ;;      Params:         1       0       0       0       0
  9453 ;;      Locals:         3       0       0       0       0
  9454 ;;      Temps:          0       0       0       0       0
  9455 ;;      Totals:         4       0       0       0       0
  9456 ;;Total ram usage:        4 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; This function calls:
  9459 ;;		Nothing
  9460 ;; This function is called by:
  9461 ;;		_UPDATE_LCD_SECONDS
  9462 ;;		_UPDATE_LCD_MINUTES
  9463 ;;		_UPDATE_LCD_HOURS
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           
  9468                           ;psect for function ___lbdiv
  9469  0CCB                     ___lbdiv:	
  9470                           
  9471                           ;incstack = 0
  9472 ;; hardware stack exceeded
  9473                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  9474                           ;___lbdiv@dividend stored from wreg
  9475  0CCB  00F1               	movwf	___lbdiv@dividend
  9476  0CCC  01F3               	clrf	___lbdiv@quotient
  9477  0CCD  0870               	movf	___lbdiv@divisor,w
  9478  0CCE  1903               	btfsc	3,2
  9479  0CCF  2CE4               	goto	i1l4436
  9480  0CD0  01F2               	clrf	___lbdiv@counter
  9481  0CD1                     i1l4422:	
  9482  0CD1  0AF2               	incf	___lbdiv@counter,f
  9483  0CD2  1BF0               	btfsc	___lbdiv@divisor,7
  9484  0CD3  2CD7               	goto	i1l1228
  9485  0CD4  1003               	clrc
  9486  0CD5  0DF0               	rlf	___lbdiv@divisor,f
  9487  0CD6  2CD1               	goto	i1l4422
  9488  0CD7                     i1l1228:	
  9489  0CD7  1003               	clrc
  9490  0CD8  0DF3               	rlf	___lbdiv@quotient,f
  9491  0CD9  0870               	movf	___lbdiv@divisor,w
  9492  0CDA  0271               	subwf	___lbdiv@dividend,w
  9493  0CDB  1C03               	skipc
  9494  0CDC  2CE1               	goto	L22
  9495  0CDD  0870               	movf	___lbdiv@divisor,w
  9496  0CDE  02F1               	subwf	___lbdiv@dividend,f
  9497  0CDF  1473               	bsf	___lbdiv@quotient,0
  9498  0CE0  1003               	clrc
  9499  0CE1                     L22:	
  9500  0CE1  0CF0               	rrf	___lbdiv@divisor,f
  9501  0CE2  0BF2               	decfsz	___lbdiv@counter,f
  9502  0CE3  2CD7               	goto	i1l1228
  9503  0CE4                     i1l4436:	
  9504  0CE4  0873               	movf	___lbdiv@quotient,w
  9505  0CE5  0008               	return
  9506  0CE6                     __end_of___lbdiv:	
  9507  0CE6                     __ptext82:	
  9508 ;; *************** function _UPDATE_LCD_SECONDS *****************
  9509 ;; Defined at:
  9510 ;;		line 128 in file "Display.c"
  9511 ;; Parameters:    Size  Location     Type
  9512 ;;  SECONDS         1    wreg     unsigned char 
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;  SECONDS         1   14[BANK0 ] unsigned char 
  9515 ;; Return value:  Size  Location     Type
  9516 ;;                  1    wreg      void 
  9517 ;; Registers used:
  9518 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9519 ;; Tracked objects:
  9520 ;;		On entry : 300/0
  9521 ;;		On exit  : 300/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9524 ;;      Params:         0       0       0       0       0
  9525 ;;      Locals:         0       1       0       0       0
  9526 ;;      Temps:          0       0       0       0       0
  9527 ;;      Totals:         0       1       0       0       0
  9528 ;;Total ram usage:        1 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; Hardware stack levels required when called:    4
  9531 ;; This function calls:
  9532 ;;		_LCD_SEND_A_NUMBER
  9533 ;;		_LCD_SET_CURSOR
  9534 ;;		___lbdiv
  9535 ;; This function is called by:
  9536 ;;		_DISP_UPDATE_TIME
  9537 ;;		_DISP_SHOW_TIME_AT
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           
  9542                           ;psect for function _UPDATE_LCD_SECONDS
  9543  0CE6                     _UPDATE_LCD_SECONDS:	
  9544                           
  9545                           ;incstack = 0
  9546 ;; hardware stack exceeded
  9547                           ; Regs used in _UPDATE_LCD_SECONDS: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9548                           ;UPDATE_LCD_SECONDS@SECONDS stored from wreg
  9549  0CE6  00AE               	movwf	UPDATE_LCD_SECONDS@SECONDS
  9550                           
  9551                           ;Display.c: 128: static void UPDATE_LCD_SECONDS(tbyte SECONDS);Display.c: 129:  {;Displa
      +                          y.c: 130:   LCD_SET_CURSOR(0,(12));
  9552  0CE7  300C               	movlw	12
  9553  0CE8  00A1               	movwf	LCD_SET_CURSOR@row
  9554  0CE9  3000               	movlw	0
  9555  0CEA  2666  120A  158A   	fcall	_LCD_SET_CURSOR
  9556                           
  9557                           ;Display.c: 131:   if (SECONDS / 10 != 0)
  9558  0CED  300A               	movlw	10
  9559  0CEE  00F0               	movwf	___lbdiv@divisor
  9560  0CEF  1283               	bcf	3,5	;RP0=0, select bank0
  9561  0CF0  1303               	bcf	3,6	;RP1=0, select bank0
  9562  0CF1  082E               	movf	UPDATE_LCD_SECONDS@SECONDS,w
  9563  0CF2  24CB  120A  158A   	fcall	___lbdiv
  9564  0CF5  3A00               	xorlw	0
  9565  0CF6  1903               	skipnz
  9566  0CF7  2CFC               	goto	i1l4538
  9567                           
  9568                           ;Display.c: 132:   {;Display.c: 133:             LCD_SEND_A_NUMBER(SECONDS);
  9569  0CF8  082E               	movf	UPDATE_LCD_SECONDS@SECONDS,w
  9570  0CF9  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9571  0CFA  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9572  0CFB  2CBC               	ljmp	i1l4316
  9573  0CFC                     i1l4538:	
  9574                           ;Display.c: 134:   }
  9575                           
  9576                           
  9577                           ;Display.c: 136:   {;Display.c: 137:             LCD_SEND_A_NUMBER(0);
  9578  0CFC  01A8               	clrf	LCD_SEND_A_NUMBER@x
  9579  0CFD  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9580  0CFE  24BC  120A  158A   	fcall	_LCD_SEND_A_NUMBER
  9581                           
  9582                           ;Display.c: 138:             LCD_SEND_A_NUMBER(SECONDS);
  9583  0D01  082E               	movf	UPDATE_LCD_SECONDS@SECONDS,w
  9584  0D02  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9585  0D03  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9586  0D04  2CBC               	ljmp	i1l4316
  9587  0D05                     __end_of_UPDATE_LCD_SECONDS:	
  9588  0D05                     __ptext80:	
  9589 ;; *************** function _DISP_TIME_ERR *****************
  9590 ;; Defined at:
  9591 ;;		line 86 in file "Display.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;		None
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;		None
  9596 ;; Return value:  Size  Location     Type
  9597 ;;                  1    wreg      void 
  9598 ;; Registers used:
  9599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/800
  9602 ;;		On exit  : 300/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9605 ;;      Params:         0       0       0       0       0
  9606 ;;      Locals:         0       0       0       0       0
  9607 ;;      Temps:          0       0       0       0       0
  9608 ;;      Totals:         0       0       0       0       0
  9609 ;;Total ram usage:        0 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:    3
  9612 ;; This function calls:
  9613 ;;		_LCD_SEND_A_STRING
  9614 ;;		_LCD_SET_CURSOR
  9615 ;; This function is called by:
  9616 ;;		_DEFAULT_HANDLER
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           
  9621                           ;psect for function _DISP_TIME_ERR
  9622  0D05                     _DISP_TIME_ERR:	
  9623                           
  9624                           ;Display.c: 88:  LCD_SET_CURSOR(1,0);
  9625                           
  9626                           ;incstack = 0
  9627 ;; hardware stack exceeded
  9628                           ; Regs used in _DISP_TIME_ERR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9629  0D05  1283               	bcf	3,5	;RP0=0, select bank0
  9630  0D06  1303               	bcf	3,6	;RP1=0, select bank0
  9631  0D07  3001               	movlw	1
  9632  0D08  01A1               	clrf	LCD_SET_CURSOR@row
  9633  0D09  2666  120A  158A   	fcall	_LCD_SET_CURSOR
  9634                           
  9635                           ;Display.c: 89:  LCD_SEND_A_STRING("< SET TIME !!! >");
  9636  0D0C  3056               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9637  0D0D  1283               	bcf	3,5	;RP0=0, select bank0
  9638  0D0E  1303               	bcf	3,6	;RP1=0, select bank0
  9639  0D0F  00A1               	movwf	LCD_SEND_A_STRING@string
  9640  0D10  3080               	movlw	128
  9641  0D11  00A2               	movwf	LCD_SEND_A_STRING@string+1
  9642  0D12  2E48               	ljmp	i1l4274
  9643  0D13                     __end_of_DISP_TIME_ERR:	
  9644  0D13                     __ptext68:	
  9645 ;; *************** function _TIME_STOP *****************
  9646 ;; Defined at:
  9647 ;;		line 37 in file "TIME.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;		None
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;		None
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      void 
  9654 ;; Registers used:
  9655 ;;		status,2
  9656 ;; Tracked objects:
  9657 ;;		On entry : B00/800
  9658 ;;		On exit  : B00/B00
  9659 ;;		Unchanged: 800/0
  9660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9661 ;;      Params:         0       0       0       0       0
  9662 ;;      Locals:         0       0       0       0       0
  9663 ;;      Temps:          0       0       0       0       0
  9664 ;;      Totals:         0       0       0       0       0
  9665 ;;Total ram usage:        0 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; This function calls:
  9668 ;;		Nothing
  9669 ;; This function is called by:
  9670 ;;		_STOP_HEATING
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           
  9675                           ;psect for function _TIME_STOP
  9676  0D13                     _TIME_STOP:	
  9677                           
  9678                           ;TIME.c: 39:     COUNT_DECISION = NO;
  9679                           
  9680                           ;incstack = 0
  9681 ;; hardware stack exceeded
  9682                           ; Regs used in _TIME_STOP: [status,2]
  9683  0D13  1683               	bsf	3,5	;RP0=1, select bank3
  9684  0D14  1703               	bsf	3,6	;RP1=1, select bank3
  9685  0D15  01CA               	clrf	_COUNT_DECISION^(0+384)
  9686  0D16  0008               	return
  9687  0D17                     __end_of_TIME_STOP:	
  9688  0D17                     __ptext63:	
  9689 ;; *************** function _TIME_START_AT *****************
  9690 ;; Defined at:
  9691 ;;		line 125 in file "TIME.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;  START_SECOND    1    wreg     unsigned char 
  9694 ;;  START_MINUTE    1    0[COMMON] unsigned char 
  9695 ;;  START_HOURS     1    1[COMMON] unsigned char 
  9696 ;;  COUNTING_TYP    1    2[COMMON] enum E861
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;  START_SECOND    1    3[COMMON] unsigned char 
  9699 ;; Return value:  Size  Location     Type
  9700 ;;                  1    wreg      void 
  9701 ;; Registers used:
  9702 ;;		wreg, status,2, status,0, pclath, cstack
  9703 ;; Tracked objects:
  9704 ;;		On entry : B00/800
  9705 ;;		On exit  : B00/B00
  9706 ;;		Unchanged: 800/0
  9707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9708 ;;      Params:         3       0       0       0       0
  9709 ;;      Locals:         1       0       0       0       0
  9710 ;;      Temps:          0       0       0       0       0
  9711 ;;      Totals:         4       0       0       0       0
  9712 ;;Total ram usage:        4 bytes
  9713 ;; Hardware stack levels used:    1
  9714 ;; Hardware stack levels required when called:    1
  9715 ;; This function calls:
  9716 ;;		_TIME_CONTINUE
  9717 ;; This function is called by:
  9718 ;;		_HEATING_HANDLER
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           
  9723                           ;psect for function _TIME_START_AT
  9724  0D17                     _TIME_START_AT:	
  9725                           
  9726                           ;incstack = 0
  9727 ;; hardware stack exceeded
  9728                           ; Regs used in _TIME_START_AT: [wreg+status,2+status,0+pclath+cstack]
  9729                           ;TIME_START_AT@START_SECONDS stored from wreg
  9730  0D17  00F3               	movwf	TIME_START_AT@START_SECONDS
  9731                           
  9732                           ;TIME.c: 125: void TIME_START_AT (tbyte START_SECONDS , tbyte START_MINUTES , tbyte STAR
      +                          T_HOURS ,tTIME_type COUNTING_TYPE );TIME.c: 126: {;TIME.c: 127:     TICK_COUNTER = 0;
  9733  0D18  1683               	bsf	3,5	;RP0=1, select bank3
  9734  0D19  1703               	bsf	3,6	;RP1=1, select bank3
  9735  0D1A  01C0               	clrf	_TICK_COUNTER^(0+384)
  9736  0D1B  01C1               	clrf	(_TICK_COUNTER+1)^(0+384)
  9737                           
  9738                           ;TIME.c: 128:     CURRENT_TIME.SECONDS = START_SECONDS;
  9739  0D1C  0873               	movf	TIME_START_AT@START_SECONDS,w
  9740  0D1D  00B5               	movwf	_CURRENT_TIME^(0+384)
  9741                           
  9742                           ;TIME.c: 129:     CURRENT_TIME.MINUTES = START_MINUTES;
  9743  0D1E  0870               	movf	TIME_START_AT@START_MINUTES,w
  9744  0D1F  00B6               	movwf	(_CURRENT_TIME^(0+384)+1)
  9745                           
  9746                           ;TIME.c: 130:     CURRENT_TIME.HOURS = START_HOURS;
  9747  0D20  0871               	movf	TIME_START_AT@START_HOURS,w
  9748  0D21  00B7               	movwf	(_CURRENT_TIME^(0+384)+2)
  9749                           
  9750                           ;TIME.c: 132:     TIME_CONTINUE();
  9751  0D22  2FFD               	ljmp	i1l4566
  9752  0D23                     __end_of_TIME_START_AT:	
  9753  0D23                     __ptext53:	
  9754 ;; *************** function _DISP_UPDATE_TIME_UNIT_AT *****************
  9755 ;; Defined at:
  9756 ;;		line 50 in file "Display.c"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;  UNIT            1    wreg     unsigned char 
  9759 ;;  NUMBER          1   14[BANK0 ] unsigned char 
  9760 ;; Auto vars:     Size  Location     Type
  9761 ;;  UNIT            1   15[BANK0 ] unsigned char 
  9762 ;; Return value:  Size  Location     Type
  9763 ;;                  1    wreg      void 
  9764 ;; Registers used:
  9765 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9766 ;; Tracked objects:
  9767 ;;		On entry : 300/0
  9768 ;;		On exit  : 300/0
  9769 ;;		Unchanged: 0/0
  9770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9771 ;;      Params:         0       1       0       0       0
  9772 ;;      Locals:         0       1       0       0       0
  9773 ;;      Temps:          0       0       0       0       0
  9774 ;;      Totals:         0       2       0       0       0
  9775 ;;Total ram usage:        2 bytes
  9776 ;; Hardware stack levels used:    1
  9777 ;; Hardware stack levels required when called:    4
  9778 ;; This function calls:
  9779 ;;		_LCD_SEND_A_NUMBER
  9780 ;;		_LCD_SET_CURSOR
  9781 ;; This function is called by:
  9782 ;;		_INCREMENT_THIS
  9783 ;; This function uses a non-reentrant model
  9784 ;;
  9785                           
  9786                           
  9787                           ;psect for function _DISP_UPDATE_TIME_UNIT_AT
  9788  0D23                     _DISP_UPDATE_TIME_UNIT_AT:	
  9789                           
  9790                           ;incstack = 0
  9791 ;; hardware stack exceeded
  9792                           ; Regs used in _DISP_UPDATE_TIME_UNIT_AT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
  9793                           ;DISP_UPDATE_TIME_UNIT_AT@UNIT stored from wreg
  9794  0D23  00AF               	movwf	DISP_UPDATE_TIME_UNIT_AT@UNIT
  9795                           
  9796                           ;Display.c: 50: void DISP_UPDATE_TIME_UNIT_AT(tbyte UNIT , tbyte NUMBER );Display.c: 51:
      +                               {;Display.c: 52:   LCD_SET_CURSOR(0,UNIT);
  9797  0D24  00A1               	movwf	LCD_SET_CURSOR@row
  9798  0D25  3000               	movlw	0
  9799  0D26  2666  120A  158A   	fcall	_LCD_SET_CURSOR
  9800                           
  9801                           ;Display.c: 53:         LCD_SEND_A_NUMBER(NUMBER);
  9802  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  9803  0D2A  1303               	bcf	3,6	;RP1=0, select bank0
  9804  0D2B  082E               	movf	DISP_UPDATE_TIME_UNIT_AT@NUMBER,w
  9805  0D2C  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9806  0D2D  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9807  0D2E  2CBC               	ljmp	i1l4316
  9808  0D2F                     __end_of_DISP_UPDATE_TIME_UNIT_AT:	
  9809  0D2F                     __ptext93:	
  9810 ;; *************** function _DISP_FOOD_ERR *****************
  9811 ;; Defined at:
  9812 ;;		line 97 in file "Display.c"
  9813 ;; Parameters:    Size  Location     Type
  9814 ;;		None
  9815 ;; Auto vars:     Size  Location     Type
  9816 ;;		None
  9817 ;; Return value:  Size  Location     Type
  9818 ;;                  1    wreg      void 
  9819 ;; Registers used:
  9820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9821 ;; Tracked objects:
  9822 ;;		On entry : 800/800
  9823 ;;		On exit  : 300/0
  9824 ;;		Unchanged: 0/0
  9825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9826 ;;      Params:         0       0       0       0       0
  9827 ;;      Locals:         0       0       0       0       0
  9828 ;;      Temps:          0       0       0       0       0
  9829 ;;      Totals:         0       0       0       0       0
  9830 ;;Total ram usage:        0 bytes
  9831 ;; Hardware stack levels used:    1
  9832 ;; Hardware stack levels required when called:    3
  9833 ;; This function calls:
  9834 ;;		_LCD_SEND_A_STRING
  9835 ;;		_LCD_SET_CURSOR
  9836 ;; This function is called by:
  9837 ;;		_DEFAULT_HANDLER
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           
  9842                           ;psect for function _DISP_FOOD_ERR
  9843  0D2F                     _DISP_FOOD_ERR:	
  9844  0D2F                     i1l4786:	
  9845                           ;incstack = 0
  9846 ;; hardware stack exceeded
  9847                           ; Regs used in _DISP_FOOD_ERR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9848                           
  9849                           
  9850                           ;Display.c: 99:     LCD_SET_CURSOR(1,0);
  9851  0D2F  1283               	bcf	3,5	;RP0=0, select bank0
  9852  0D30  1303               	bcf	3,6	;RP1=0, select bank0
  9853  0D31  3001               	movlw	1
  9854  0D32  01A1               	clrf	LCD_SET_CURSOR@row
  9855  0D33  2666  120A  158A   	fcall	_LCD_SET_CURSOR
  9856                           
  9857                           ;Display.c: 100:  LCD_SEND_A_STRING("< PUT FOOD IN !>");
  9858  0D36  3067               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  9859  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  9860  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  9861  0D39  00A1               	movwf	LCD_SEND_A_STRING@string
  9862  0D3A  3080               	movlw	128
  9863  0D3B  00A2               	movwf	LCD_SEND_A_STRING@string+1
  9864  0D3C  2E48               	ljmp	i1l4274
  9865  0D3D                     __end_of_DISP_FOOD_ERR:	
  9866  0D3D                     __ptext38:	
  9867 ;; *************** function _KEYPAD_UPDATE *****************
  9868 ;; Defined at:
  9869 ;;		line 45 in file "Keypad.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;		None
  9872 ;; Auto vars:     Size  Location     Type
  9873 ;;  ROW_counter     1    3[BANK0 ] unsigned char 
  9874 ;;  COL_counter     1    2[BANK0 ] unsigned char 
  9875 ;;  KEY_STATE       1    1[BANK0 ] enum E874
  9876 ;; Return value:  Size  Location     Type
  9877 ;;                  1    wreg      void 
  9878 ;; Registers used:
  9879 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9880 ;; Tracked objects:
  9881 ;;		On entry : B00/800
  9882 ;;		On exit  : 0/0
  9883 ;;		Unchanged: 0/0
  9884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9885 ;;      Params:         0       0       0       0       0
  9886 ;;      Locals:         0       3       0       0       0
  9887 ;;      Temps:          0       1       0       0       0
  9888 ;;      Totals:         0       4       0       0       0
  9889 ;;Total ram usage:        4 bytes
  9890 ;; Hardware stack levels used:    1
  9891 ;; Hardware stack levels required when called:    1
  9892 ;; This function calls:
  9893 ;;		_GPIO_PIN_GET_STATE
  9894 ;;		i1_GPIO_PIN_SET_STATE
  9895 ;; This function is called by:
  9896 ;;		_SYS_UPDATE
  9897 ;; This function uses a non-reentrant model
  9898 ;;
  9899                           
  9900                           
  9901                           ;psect for function _KEYPAD_UPDATE
  9902  0D3D                     _KEYPAD_UPDATE:	
  9903                           
  9904                           ;Keypad.c: 47:  static tbyte KEYPAD_counter = 0;;Keypad.c: 48:  KEYPAD_counter += (5);
  9905                           
  9906                           ;incstack = 0
  9907                           ; Regs used in _KEYPAD_UPDATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9908  0D3D  3005               	movlw	5
  9909  0D3E  07EE               	addwf	KEYPAD_UPDATE@KEYPAD_counter,f
  9910                           
  9911                           ;Keypad.c: 50:  if (KEYPAD_counter > (0))
  9912  0D3F  086E               	movf	KEYPAD_UPDATE@KEYPAD_counter,w
  9913  0D40  1903               	btfsc	3,2
  9914  0D41  0008               	return
  9915  0D42  3002               	movlw	2
  9916                           
  9917                           ;Keypad.c: 51:  {;Keypad.c: 52:   tbyte ROW_counter;;Keypad.c: 53:   tbyte COL_counter;;
      +                          Keypad.c: 54:   tGPIO_STATE KEY_STATE;;Keypad.c: 55:   KEYPAD_counter = 0;
  9918  0D43  01EE               	clrf	KEYPAD_UPDATE@KEYPAD_counter
  9919                           
  9920                           ;Keypad.c: 57:         for (KEYPAD_counter = 3 -1 ; KEYPAD_counter > 0 ; KEYPAD_counter-
      +                          - )
  9921  0D44  00EE               	movwf	KEYPAD_UPDATE@KEYPAD_counter
  9922  0D45                     i1l6244:	
  9923  0D45  086E               	movf	KEYPAD_UPDATE@KEYPAD_counter,w
  9924  0D46  1903               	btfsc	3,2
  9925  0D47  2D54               	goto	i1l6254
  9926                           
  9927                           ;Keypad.c: 58:             {;Keypad.c: 59:                 keypad_sapmles[KEYPAD_counter
      +                          ]=keypad_sapmles[KEYPAD_counter-1];
  9928  0D48  086E               	movf	KEYPAD_UPDATE@KEYPAD_counter,w
  9929  0D49  3EBA               	addlw	(low ((_keypad_sapmles| (0+256)+255)))& (0+255)
  9930  0D4A  0084               	movwf	4
  9931  0D4B  0800               	movf	0,w
  9932  0D4C  00A0               	movwf	??_KEYPAD_UPDATE
  9933  0D4D  086E               	movf	KEYPAD_UPDATE@KEYPAD_counter,w
  9934  0D4E  3EBB               	addlw	(low (_keypad_sapmles| (0+256)))& (0+255)
  9935  0D4F  0084               	movwf	4
  9936  0D50  0820               	movf	??_KEYPAD_UPDATE,w
  9937  0D51  0080               	movwf	0
  9938                           
  9939                           ;Keypad.c: 60:             }
  9940  0D52  03EE               	decf	KEYPAD_UPDATE@KEYPAD_counter,f
  9941  0D53  2D45               	goto	i1l6244
  9942  0D54                     i1l6254:	
  9943                           
  9944                           ;Keypad.c: 61:    keypad_sapmles[0] = NO_KEY;
  9945  0D54  300C               	movlw	12
  9946  0D55  1683               	bsf	3,5	;RP0=1, select bank3
  9947  0D56  1703               	bsf	3,6	;RP1=1, select bank3
  9948  0D57  00BB               	movwf	_keypad_sapmles^(0+384)
  9949                           
  9950                           ;Keypad.c: 62:   for (ROW_counter = 0 ; ROW_counter <4 ; ROW_counter++ )
  9951  0D58  1283               	bcf	3,5	;RP0=0, select bank0
  9952  0D59  1303               	bcf	3,6	;RP1=0, select bank0
  9953  0D5A  01A3               	clrf	KEYPAD_UPDATE@ROW_counter
  9954  0D5B                     i1l6262:	
  9955                           
  9956                           ;Keypad.c: 63:         {;Keypad.c: 64:             GPIO_PIN_SET_STATE(KEYPAD_info.KEYPAD
      +                          _ROW_RORT , KEYPAD_info.KEYPAD_ROW_PIN[ROW_counter] , (0));
  9957  0D5B  0823               	movf	KEYPAD_UPDATE@ROW_counter,w
  9958  0D5C  3EA6               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
  9959  0D5D  0084               	movwf	4
  9960  0D5E  1783               	bsf	3,7	;select IRP bank3
  9961  0D5F  0800               	movf	0,w
  9962  0D60  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
  9963  0D61  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
  9964  0D62  1683               	bsf	3,5	;RP0=1, select bank3
  9965  0D63  1703               	bsf	3,6	;RP1=1, select bank3
  9966  0D64  0824               	movf	_KEYPAD_info^(0+384),w
  9967  0D65  26F8  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
  9968                           
  9969                           ;Keypad.c: 65:    for (COL_counter = 0 ; COL_counter <3 ; COL_counter++)
  9970  0D68  1283               	bcf	3,5	;RP0=0, select bank0
  9971  0D69  1303               	bcf	3,6	;RP1=0, select bank0
  9972  0D6A  01A2               	clrf	KEYPAD_UPDATE@COL_counter
  9973  0D6B                     i1l6270:	
  9974                           
  9975                           ;Keypad.c: 66:             {;Keypad.c: 67:                 KEY_STATE = GPIO_PIN_GET_STAT
      +                          E(KEYPAD_info.KEYPAD_COL_PORT , KEYPAD_info.KEYPAD_COL_PIN[COL_counter]);
  9976  0D6B  0822               	movf	KEYPAD_UPDATE@COL_counter,w
  9977  0D6C  3EAA               	addlw	(low ((_KEYPAD_info| (0+256)+6)))& (0+255)
  9978  0D6D  0084               	movwf	4
  9979  0D6E  1783               	bsf	3,7	;select IRP bank3
  9980  0D6F  0800               	movf	0,w
  9981  0D70  00F3               	movwf	GPIO_PIN_GET_STATE@GPIO_PIN_NO
  9982  0D71  1683               	bsf	3,5	;RP0=1, select bank3
  9983  0D72  1703               	bsf	3,6	;RP1=1, select bank3
  9984  0D73  0825               	movf	(_KEYPAD_info^(0+384)+1),w
  9985  0D74  2736  120A  158A   	fcall	_GPIO_PIN_GET_STATE
  9986  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  9987  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  9988  0D79  00A1               	movwf	KEYPAD_UPDATE@KEY_STATE
  9989                           
  9990                           ;Keypad.c: 68:                 if ( KEY_STATE == (0) )
  9991  0D7A  0821               	movf	KEYPAD_UPDATE@KEY_STATE,w
  9992  0D7B  1D03               	btfss	3,2
  9993  0D7C  2D84               	goto	i1l6276
  9994                           
  9995                           ;Keypad.c: 69:                 {;Keypad.c: 70:                    keypad_sapmles[0]=( RO
      +                          W_counter * 3 + COL_counter );
  9996  0D7D  0823               	movf	KEYPAD_UPDATE@ROW_counter,w
  9997  0D7E  0723               	addwf	KEYPAD_UPDATE@ROW_counter,w
  9998  0D7F  0723               	addwf	KEYPAD_UPDATE@ROW_counter,w
  9999  0D80  0722               	addwf	KEYPAD_UPDATE@COL_counter,w
 10000  0D81  1683               	bsf	3,5	;RP0=1, select bank3
 10001  0D82  1703               	bsf	3,6	;RP1=1, select bank3
 10002  0D83  00BB               	movwf	_keypad_sapmles^(0+384)
 10003  0D84                     i1l6276:	
 10004                           
 10005                           ;Keypad.c: 72:             }
 10006  0D84  1283               	bcf	3,5	;RP0=0, select bank0
 10007  0D85  1303               	bcf	3,6	;RP1=0, select bank0
 10008  0D86  3003               	movlw	3
 10009  0D87  0AA2               	incf	KEYPAD_UPDATE@COL_counter,f
 10010  0D88  0222               	subwf	KEYPAD_UPDATE@COL_counter,w
 10011  0D89  1C03               	skipc
 10012  0D8A  2D6B               	goto	i1l6270
 10013                           
 10014                           ;Keypad.c: 73:             GPIO_PIN_SET_STATE(KEYPAD_info.KEYPAD_ROW_RORT , KEYPAD_info.
      +                          KEYPAD_ROW_PIN[ROW_counter] , (1));
 10015  0D8B  0823               	movf	KEYPAD_UPDATE@ROW_counter,w
 10016  0D8C  3EA6               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
 10017  0D8D  0084               	movwf	4
 10018  0D8E  1783               	bsf	3,7	;select IRP bank3
 10019  0D8F  0800               	movf	0,w
 10020  0D90  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10021  0D91  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10022  0D92  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 10023  0D93  1683               	bsf	3,5	;RP0=1, select bank3
 10024  0D94  1703               	bsf	3,6	;RP1=1, select bank3
 10025  0D95  0824               	movf	_KEYPAD_info^(0+384),w
 10026  0D96  26F8  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10027                           
 10028                           ;Keypad.c: 74:         }
 10029  0D99  1283               	bcf	3,5	;RP0=0, select bank0
 10030  0D9A  1303               	bcf	3,6	;RP1=0, select bank0
 10031  0D9B  3004               	movlw	4
 10032  0D9C  0AA3               	incf	KEYPAD_UPDATE@ROW_counter,f
 10033  0D9D  0223               	subwf	KEYPAD_UPDATE@ROW_counter,w
 10034  0D9E  1C03               	skipc
 10035  0D9F  2D5B               	goto	i1l6262
 10036                           
 10037                           ;Keypad.c: 75:   if ((keypad_sapmles[0] == keypad_sapmles[1])&(keypad_sapmles[0] != keyp
      +                          ad_sapmles[2]) )
 10038  0DA0  1683               	bsf	3,5	;RP0=1, select bank3
 10039  0DA1  1703               	bsf	3,6	;RP1=1, select bank3
 10040  0DA2  083C               	movf	(_keypad_sapmles^(0+384)+1),w
 10041  0DA3  063B               	xorwf	_keypad_sapmles^(0+384),w
 10042  0DA4  1D03               	skipz
 10043  0DA5  2DAF               	goto	i1l6292
 10044  0DA6  083D               	movf	(_keypad_sapmles^(0+384)+2),w
 10045  0DA7  063B               	xorwf	_keypad_sapmles^(0+384),w
 10046  0DA8  1903               	skipnz
 10047  0DA9  2DAF               	goto	i1l6292
 10048                           
 10049                           ;Keypad.c: 76:   {;Keypad.c: 77:    LAST_PRESSED_KEY.KEYPAD_NO = keypad_sapmles[0];
 10050  0DAA  083B               	movf	_keypad_sapmles^(0+384),w
 10051  0DAB  00C2               	movwf	_LAST_PRESSED_KEY^(0+384)
 10052                           
 10053                           ;Keypad.c: 78:    LAST_PRESSED_KEY.KEYPAD_STATUS = KEY_PRE_PRESSED;
 10054  0DAC  01C3               	clrf	(_LAST_PRESSED_KEY^(0+384)+1)
 10055  0DAD  0AC3               	incf	(_LAST_PRESSED_KEY^(0+384)+1),f
 10056                           
 10057                           ;Keypad.c: 79:   }
 10058  0DAE  0008               	return
 10059  0DAF                     i1l6292:	
 10060  0DAF  083C               	movf	(_keypad_sapmles^(0+384)+1),w
 10061  0DB0  063B               	xorwf	_keypad_sapmles^(0+384),w
 10062  0DB1  1D03               	skipz
 10063  0DB2  2DBB               	goto	i1l6300
 10064  0DB3  083D               	movf	(_keypad_sapmles^(0+384)+2),w
 10065  0DB4  063B               	xorwf	_keypad_sapmles^(0+384),w
 10066  0DB5  1D03               	skipz
 10067  0DB6  2DBB               	goto	i1l6300
 10068                           
 10069                           ;Keypad.c: 81:   {;Keypad.c: 82:    LAST_PRESSED_KEY.KEYPAD_NO = keypad_sapmles[0];
 10070  0DB7  083B               	movf	_keypad_sapmles^(0+384),w
 10071  0DB8  00C2               	movwf	_LAST_PRESSED_KEY^(0+384)
 10072                           
 10073                           ;Keypad.c: 83:    LAST_PRESSED_KEY.KEYPAD_STATUS = KEY_PRESSED;
 10074  0DB9  01C3               	clrf	(_LAST_PRESSED_KEY^(0+384)+1)
 10075                           
 10076                           ;Keypad.c: 84:   }
 10077  0DBA  0008               	return
 10078  0DBB                     i1l6300:	
 10079                           
 10080                           ;Keypad.c: 86:   {;Keypad.c: 87:    LAST_PRESSED_KEY.KEYPAD_NO = NO_KEY;
 10081  0DBB  300C               	movlw	12
 10082  0DBC  00C2               	movwf	_LAST_PRESSED_KEY^(0+384)
 10083  0DBD  0008               	return
 10084  0DBE                     __end_of_KEYPAD_UPDATE:	
 10085  0DBE                     __ptext57:	
 10086 ;; *************** function _DISP_MOTOR_DATA *****************
 10087 ;; Defined at:
 10088 ;;		line 75 in file "Display.c"
 10089 ;; Parameters:    Size  Location     Type
 10090 ;;		None
 10091 ;; Auto vars:     Size  Location     Type
 10092 ;;		None
 10093 ;; Return value:  Size  Location     Type
 10094 ;;                  1    wreg      void 
 10095 ;; Registers used:
 10096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 300/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10102 ;;      Params:         0       0       0       0       0
 10103 ;;      Locals:         0       0       0       0       0
 10104 ;;      Temps:          0       0       0       0       0
 10105 ;;      Totals:         0       0       0       0       0
 10106 ;;Total ram usage:        0 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    3
 10109 ;; This function calls:
 10110 ;;		_LCD_CLEAR
 10111 ;;		_LCD_SEND_A_STRING
 10112 ;;		_LCD_SET_CURSOR
 10113 ;; This function is called by:
 10114 ;;		_SET_ROTOR_PWR_HANDLER
 10115 ;; This function uses a non-reentrant model
 10116 ;;
 10117                           
 10118                           
 10119                           ;psect for function _DISP_MOTOR_DATA
 10120  0DBE                     _DISP_MOTOR_DATA:	
 10121                           
 10122                           ;Display.c: 77:  LCD_CLEAR();
 10123                           
 10124                           ;incstack = 0
 10125 ;; hardware stack exceeded
 10126                           ; Regs used in _DISP_MOTOR_DATA: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10127  0DBE  272B  120A  158A   	fcall	_LCD_CLEAR
 10128                           
 10129                           ;Display.c: 78:  LCD_SET_CURSOR(0,0);
 10130  0DC1  1283               	bcf	3,5	;RP0=0, select bank0
 10131  0DC2  1303               	bcf	3,6	;RP1=0, select bank0
 10132  0DC3  3000               	movlw	0
 10133  0DC4  01A1               	clrf	LCD_SET_CURSOR@row
 10134  0DC5  2666  120A  158A   	fcall	_LCD_SET_CURSOR
 10135                           
 10136                           ;Display.c: 79:  LCD_SEND_A_STRING("MOTOR PWR: 1 2 3");
 10137  0DC8  3023               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
 10138  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
 10139  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
 10140  0DCB  00A1               	movwf	LCD_SEND_A_STRING@string
 10141  0DCC  3080               	movlw	128
 10142  0DCD  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10143  0DCE  2648  120A  158A   	fcall	_LCD_SEND_A_STRING
 10144  0DD1  3001               	movlw	1
 10145                           
 10146                           ;Display.c: 80:  LCD_SET_CURSOR(1,0);
 10147  0DD2  01A1               	clrf	LCD_SET_CURSOR@row
 10148  0DD3  2666  120A  158A   	fcall	_LCD_SET_CURSOR
 10149                           
 10150                           ;Display.c: 81:  LCD_SEND_A_STRING("<");
 10151  0DD6  309A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
 10152  0DD7  1283               	bcf	3,5	;RP0=0, select bank0
 10153  0DD8  1303               	bcf	3,6	;RP1=0, select bank0
 10154  0DD9  00A1               	movwf	LCD_SEND_A_STRING@string
 10155  0DDA  3080               	movlw	128
 10156  0DDB  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10157  0DDC  2648  120A  158A   	fcall	_LCD_SEND_A_STRING
 10158                           
 10159                           ;Display.c: 82:  LCD_SET_CURSOR(1,15);
 10160  0DDF  300F               	movlw	15
 10161  0DE0  00A1               	movwf	LCD_SET_CURSOR@row
 10162  0DE1  3001               	movlw	1
 10163  0DE2  2666  120A  158A   	fcall	_LCD_SET_CURSOR
 10164                           
 10165                           ;Display.c: 83:  LCD_SEND_A_STRING(">");
 10166  0DE5  3043               	movlw	(low (((STR_11+15)-__stringbase)| (0+32768)))& (0+255)
 10167  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
 10168  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
 10169  0DE8  00A1               	movwf	LCD_SEND_A_STRING@string
 10170  0DE9  3080               	movlw	128
 10171  0DEA  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10172  0DEB  2E48               	ljmp	i1l4274
 10173  0DEC                     __end_of_DISP_MOTOR_DATA:	
 10174  0DEC                     __ptext61:	
 10175 ;; *************** function _DISP_HEATER_DATA *****************
 10176 ;; Defined at:
 10177 ;;		line 64 in file "Display.c"
 10178 ;; Parameters:    Size  Location     Type
 10179 ;;		None
 10180 ;; Auto vars:     Size  Location     Type
 10181 ;;		None
 10182 ;; Return value:  Size  Location     Type
 10183 ;;                  1    wreg      void 
 10184 ;; Registers used:
 10185 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10186 ;; Tracked objects:
 10187 ;;		On entry : 0/0
 10188 ;;		On exit  : 300/0
 10189 ;;		Unchanged: 0/0
 10190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10191 ;;      Params:         0       0       0       0       0
 10192 ;;      Locals:         0       0       0       0       0
 10193 ;;      Temps:          0       0       0       0       0
 10194 ;;      Totals:         0       0       0       0       0
 10195 ;;Total ram usage:        0 bytes
 10196 ;; Hardware stack levels used:    1
 10197 ;; Hardware stack levels required when called:    3
 10198 ;; This function calls:
 10199 ;;		_LCD_CLEAR
 10200 ;;		_LCD_SEND_A_STRING
 10201 ;;		_LCD_SET_CURSOR
 10202 ;; This function is called by:
 10203 ;;		_SET_HEATING_HANDLER
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           
 10208                           ;psect for function _DISP_HEATER_DATA
 10209  0DEC                     _DISP_HEATER_DATA:	
 10210                           
 10211                           ;Display.c: 66:  LCD_CLEAR();
 10212                           
 10213                           ;incstack = 0
 10214 ;; hardware stack exceeded
 10215                           ; Regs used in _DISP_HEATER_DATA: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10216  0DEC  272B  120A  158A   	fcall	_LCD_CLEAR
 10217                           
 10218                           ;Display.c: 67:  LCD_SET_CURSOR(0,0);
 10219  0DEF  1283               	bcf	3,5	;RP0=0, select bank0
 10220  0DF0  1303               	bcf	3,6	;RP1=0, select bank0
 10221  0DF1  3000               	movlw	0
 10222  0DF2  01A1               	clrf	LCD_SET_CURSOR@row
 10223  0DF3  2666  120A  158A   	fcall	_LCD_SET_CURSOR
 10224                           
 10225                           ;Display.c: 68:  LCD_SEND_A_STRING(" HEAT LVL: 1 2 3");
 10226  0DF6  3012               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
 10227  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
 10228  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
 10229  0DF9  00A1               	movwf	LCD_SEND_A_STRING@string
 10230  0DFA  3080               	movlw	128
 10231  0DFB  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10232  0DFC  2648  120A  158A   	fcall	_LCD_SEND_A_STRING
 10233  0DFF  3001               	movlw	1
 10234                           
 10235                           ;Display.c: 69:  LCD_SET_CURSOR(1,0);
 10236  0E00  01A1               	clrf	LCD_SET_CURSOR@row
 10237  0E01  2666  120A  158A   	fcall	_LCD_SET_CURSOR
 10238                           
 10239                           ;Display.c: 70:  LCD_SEND_A_STRING("<");
 10240  0E04  309A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
 10241  0E05  1283               	bcf	3,5	;RP0=0, select bank0
 10242  0E06  1303               	bcf	3,6	;RP1=0, select bank0
 10243  0E07  00A1               	movwf	LCD_SEND_A_STRING@string
 10244  0E08  3080               	movlw	128
 10245  0E09  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10246  0E0A  2648  120A  158A   	fcall	_LCD_SEND_A_STRING
 10247                           
 10248                           ;Display.c: 71:  LCD_SET_CURSOR(1,15);
 10249  0E0D  300F               	movlw	15
 10250  0E0E  00A1               	movwf	LCD_SET_CURSOR@row
 10251  0E0F  3001               	movlw	1
 10252  0E10  2666  120A  158A   	fcall	_LCD_SET_CURSOR
 10253                           
 10254                           ;Display.c: 72:  LCD_SEND_A_STRING(">");
 10255  0E13  3043               	movlw	(low (((STR_11+15)-__stringbase)| (0+32768)))& (0+255)
 10256  0E14  1283               	bcf	3,5	;RP0=0, select bank0
 10257  0E15  1303               	bcf	3,6	;RP1=0, select bank0
 10258  0E16  00A1               	movwf	LCD_SEND_A_STRING@string
 10259  0E17  3080               	movlw	128
 10260  0E18  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10261  0E19  2E48               	ljmp	i1l4274
 10262  0E1A                     __end_of_DISP_HEATER_DATA:	
 10263  0E1A                     __ptext91:	
 10264 ;; *************** function _DISP_SHOW_TIME *****************
 10265 ;; Defined at:
 10266 ;;		line 169 in file "Display.c"
 10267 ;; Parameters:    Size  Location     Type
 10268 ;;		None
 10269 ;; Auto vars:     Size  Location     Type
 10270 ;;		None
 10271 ;; Return value:  Size  Location     Type
 10272 ;;                  1    wreg      void 
 10273 ;; Registers used:
 10274 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10275 ;; Tracked objects:
 10276 ;;		On entry : 300/0
 10277 ;;		On exit  : 300/0
 10278 ;;		Unchanged: 0/0
 10279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10280 ;;      Params:         0       0       0       0       0
 10281 ;;      Locals:         0       0       0       0       0
 10282 ;;      Temps:          0       0       0       0       0
 10283 ;;      Totals:         0       0       0       0       0
 10284 ;;Total ram usage:        0 bytes
 10285 ;; Hardware stack levels used:    1
 10286 ;; Hardware stack levels required when called:    3
 10287 ;; This function calls:
 10288 ;;		_LCD_CLEAR
 10289 ;;		_LCD_SEND_A_STRING
 10290 ;;		_LCD_SET_CURSOR
 10291 ;; This function is called by:
 10292 ;;		_DISP_SHOW_TIME_AT
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           
 10297                           ;psect for function _DISP_SHOW_TIME
 10298  0E1A                     _DISP_SHOW_TIME:	
 10299                           
 10300                           ;Display.c: 171:  LCD_CLEAR();
 10301                           
 10302                           ;incstack = 0
 10303 ;; hardware stack exceeded
 10304                           ; Regs used in _DISP_SHOW_TIME: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10305  0E1A  272B  120A  158A   	fcall	_LCD_CLEAR
 10306                           
 10307                           ;Display.c: 172:  LCD_SET_CURSOR(0,0);
 10308  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
 10309  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
 10310  0E1F  3000               	movlw	0
 10311  0E20  01A1               	clrf	LCD_SET_CURSOR@row
 10312  0E21  2666  120A  158A   	fcall	_LCD_SET_CURSOR
 10313                           
 10314                           ;Display.c: 173:  LCD_SEND_A_STRING(" TIME:00:00:00  ");
 10315  0E24  3001               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
 10316  0E25  1283               	bcf	3,5	;RP0=0, select bank0
 10317  0E26  1303               	bcf	3,6	;RP1=0, select bank0
 10318  0E27  00A1               	movwf	LCD_SEND_A_STRING@string
 10319  0E28  3080               	movlw	128
 10320  0E29  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10321  0E2A  2648  120A  158A   	fcall	_LCD_SEND_A_STRING
 10322  0E2D  3001               	movlw	1
 10323                           
 10324                           ;Display.c: 174:  LCD_SET_CURSOR(1,0);
 10325  0E2E  01A1               	clrf	LCD_SET_CURSOR@row
 10326  0E2F  2666  120A  158A   	fcall	_LCD_SET_CURSOR
 10327                           
 10328                           ;Display.c: 175:  LCD_SEND_A_STRING("<");
 10329  0E32  309A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
 10330  0E33  1283               	bcf	3,5	;RP0=0, select bank0
 10331  0E34  1303               	bcf	3,6	;RP1=0, select bank0
 10332  0E35  00A1               	movwf	LCD_SEND_A_STRING@string
 10333  0E36  3080               	movlw	128
 10334  0E37  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10335  0E38  2648  120A  158A   	fcall	_LCD_SEND_A_STRING
 10336                           
 10337                           ;Display.c: 176:  LCD_SET_CURSOR(1,15);
 10338  0E3B  300F               	movlw	15
 10339  0E3C  00A1               	movwf	LCD_SET_CURSOR@row
 10340  0E3D  3001               	movlw	1
 10341  0E3E  2666  120A  158A   	fcall	_LCD_SET_CURSOR
 10342                           
 10343                           ;Display.c: 177:  LCD_SEND_A_STRING(">");
 10344  0E41  3043               	movlw	(low (((STR_11+15)-__stringbase)| (0+32768)))& (0+255)
 10345  0E42  1283               	bcf	3,5	;RP0=0, select bank0
 10346  0E43  1303               	bcf	3,6	;RP1=0, select bank0
 10347  0E44  00A1               	movwf	LCD_SEND_A_STRING@string
 10348  0E45  3080               	movlw	128
 10349  0E46  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10350  0E47  2E48               	ljmp	i1l4274
 10351  0E48                     __end_of_DISP_SHOW_TIME:	
 10352  0E48                     __ptext97:	
 10353 ;; *************** function _LCD_SEND_A_STRING *****************
 10354 ;; Defined at:
 10355 ;;		line 56 in file "LCD.c"
 10356 ;; Parameters:    Size  Location     Type
 10357 ;;  string          2    1[BANK0 ] PTR unsigned char 
 10358 ;;		 -> STR_15(2), STR_14(2), STR_13(17), STR_12(17), 
 10359 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
 10360 ;;		 -> STR_7(17), STR_6(2), STR_5(2), STR_4(17), 
 10361 ;;		 -> STR_3(2), STR_2(2), STR_1(17), LCD_SEND_A_NUMBER@string(4), 
 10362 ;; Auto vars:     Size  Location     Type
 10363 ;;		None
 10364 ;; Return value:  Size  Location     Type
 10365 ;;                  1    wreg      void 
 10366 ;; Registers used:
 10367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10368 ;; Tracked objects:
 10369 ;;		On entry : 300/0
 10370 ;;		On exit  : 300/0
 10371 ;;		Unchanged: 0/0
 10372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10373 ;;      Params:         0       2       0       0       0
 10374 ;;      Locals:         0       0       0       0       0
 10375 ;;      Temps:          0       0       0       0       0
 10376 ;;      Totals:         0       2       0       0       0
 10377 ;;Total ram usage:        2 bytes
 10378 ;; Hardware stack levels used:    1
 10379 ;; Hardware stack levels required when called:    2
 10380 ;; This function calls:
 10381 ;;		_LCD_SEND_CHARACTER
 10382 ;; This function is called by:
 10383 ;;		_LCD_SEND_A_NUMBER
 10384 ;;		_DISP_HEATER_DATA
 10385 ;;		_DISP_MOTOR_DATA
 10386 ;;		_DISP_TIME_ERR
 10387 ;;		_DISP_DOOR_ERR
 10388 ;;		_DISP_FOOD_ERR
 10389 ;;		_DISP_ON_WORKING_FOOD_ERR
 10390 ;;		_DISP_CANCEL
 10391 ;;		_DISP_FINISH
 10392 ;;		_DISP_SHOW_TIME
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           
 10397                           ;psect for function _LCD_SEND_A_STRING
 10398  0E48                     _LCD_SEND_A_STRING:	
 10399  0E48                     i1l4274:	
 10400                           ;incstack = 0
 10401 ;; hardware stack exceeded
 10402                           ; Regs used in _LCD_SEND_A_STRING: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10403                           
 10404  0E48                     i1l4280:	
 10405                           ;LCD.c: 56: void LCD_SEND_A_STRING ( tbyte *string);LCD.c: 57: {;LCD.c: 58:  while (*str
      +                          ing != 0){
 10406                           
 10407                           
 10408                           ;LCD.c: 58:  while (*string != 0){
 10409  0E48  0822               	movf	LCD_SEND_A_STRING@string+1,w
 10410  0E49  00FF               	movwf	127
 10411  0E4A  0821               	movf	LCD_SEND_A_STRING@string,w
 10412  0E4B  0084               	movwf	4
 10413  0E4C  160A  158A  2000  120A  158A  	fcall	stringtab
 10414  0E51  3A00               	xorlw	0
 10415  0E52  1903               	btfsc	3,2
 10416  0E53  0008               	return
 10417                           
 10418                           ;LCD.c: 59:   LCD_SEND_CHARACTER(*string++);
 10419  0E54  0822               	movf	LCD_SEND_A_STRING@string+1,w
 10420  0E55  00FF               	movwf	127
 10421  0E56  0821               	movf	LCD_SEND_A_STRING@string,w
 10422  0E57  0084               	movwf	4
 10423  0E58  160A  158A  2000  120A  158A  	fcall	stringtab
 10424  0E5D  268F  120A  158A   	fcall	_LCD_SEND_CHARACTER
 10425  0E60  1283               	bcf	3,5	;RP0=0, select bank0
 10426  0E61  1303               	bcf	3,6	;RP1=0, select bank0
 10427  0E62  0AA1               	incf	LCD_SEND_A_STRING@string,f
 10428  0E63  1903               	skipnz
 10429  0E64  0AA2               	incf	LCD_SEND_A_STRING@string+1,f
 10430  0E65  2E48               	goto	i1l4280
 10431  0E66                     __end_of_LCD_SEND_A_STRING:	
 10432  0E66                     __ptext95:	
 10433 ;; *************** function _LCD_SET_CURSOR *****************
 10434 ;; Defined at:
 10435 ;;		line 72 in file "LCD.c"
 10436 ;; Parameters:    Size  Location     Type
 10437 ;;  coloum          1    wreg     unsigned char 
 10438 ;;  row             1    1[BANK0 ] unsigned char 
 10439 ;; Auto vars:     Size  Location     Type
 10440 ;;  coloum          1    4[BANK0 ] unsigned char 
 10441 ;; Return value:  Size  Location     Type
 10442 ;;                  1    wreg      void 
 10443 ;; Registers used:
 10444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10445 ;; Tracked objects:
 10446 ;;		On entry : 300/0
 10447 ;;		On exit  : 0/0
 10448 ;;		Unchanged: 0/0
 10449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10450 ;;      Params:         0       1       0       0       0
 10451 ;;      Locals:         0       1       0       0       0
 10452 ;;      Temps:          0       2       0       0       0
 10453 ;;      Totals:         0       4       0       0       0
 10454 ;;Total ram usage:        4 bytes
 10455 ;; Hardware stack levels used:    1
 10456 ;; Hardware stack levels required when called:    2
 10457 ;; This function calls:
 10458 ;;		i1_LCD_SND_COMMAND
 10459 ;; This function is called by:
 10460 ;;		_START_BLINKING_AT
 10461 ;;		_DISP_UPDATE_TIME_UNIT_AT
 10462 ;;		_DISP_HEATER_DATA
 10463 ;;		_DISP_MOTOR_DATA
 10464 ;;		_DISP_TIME_ERR
 10465 ;;		_DISP_DOOR_ERR
 10466 ;;		_DISP_FOOD_ERR
 10467 ;;		_DISP_ON_WORKING_FOOD_ERR
 10468 ;;		_DISP_CANCEL
 10469 ;;		_DISP_FINISH
 10470 ;;		_UPDATE_LCD_SECONDS
 10471 ;;		_UPDATE_LCD_MINUTES
 10472 ;;		_UPDATE_LCD_HOURS
 10473 ;;		_DISP_SHOW_TIME
 10474 ;;		_INCREMENT_THIS
 10475 ;; This function uses a non-reentrant model
 10476 ;;
 10477                           
 10478                           
 10479                           ;psect for function _LCD_SET_CURSOR
 10480  0E66                     _LCD_SET_CURSOR:	
 10481                           
 10482                           ;incstack = 0
 10483 ;; hardware stack exceeded
 10484                           ; Regs used in _LCD_SET_CURSOR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10485                           ;LCD_SET_CURSOR@coloum stored from wreg
 10486  0E66  00A4               	movwf	LCD_SET_CURSOR@coloum
 10487                           
 10488                           ;LCD.c: 72: void LCD_SET_CURSOR (tbyte coloum , tbyte row);LCD.c: 73: {;LCD.c: 74:  swit
      +                          ch (coloum)
 10489  0E67  2E78               	goto	i1l4308
 10490  0E68                     i1l4298:	
 10491                           
 10492                           ;LCD.c: 77:   LCD_SND_COMMAND((0x80+row));
 10493  0E68  0821               	movf	LCD_SET_CURSOR@row,w
 10494  0E69  3E80               	addlw	128
 10495  0E6A  26C3               	fcall	i1_LCD_SND_COMMAND
 10496                           
 10497                           ;LCD.c: 78:   break;
 10498  0E6B  0008               	return
 10499  0E6C                     i1l4300:	
 10500                           
 10501                           ;LCD.c: 81:   LCD_SND_COMMAND((0xC0+row));
 10502  0E6C  0821               	movf	LCD_SET_CURSOR@row,w
 10503  0E6D  3EC0               	addlw	192
 10504  0E6E  26C3               	fcall	i1_LCD_SND_COMMAND
 10505                           
 10506                           ;LCD.c: 82:   break;
 10507  0E6F  0008               	return
 10508  0E70                     i1l4302:	
 10509                           
 10510                           ;LCD.c: 84:   LCD_SND_COMMAND((0x94+row));
 10511  0E70  0821               	movf	LCD_SET_CURSOR@row,w
 10512  0E71  3E94               	addlw	148
 10513  0E72  26C3               	fcall	i1_LCD_SND_COMMAND
 10514                           
 10515                           ;LCD.c: 85:   break;
 10516  0E73  0008               	return
 10517  0E74                     i1l4304:	
 10518                           
 10519                           ;LCD.c: 87:   LCD_SND_COMMAND((0xD4+row));
 10520  0E74  0821               	movf	LCD_SET_CURSOR@row,w
 10521  0E75  3ED4               	addlw	212
 10522  0E76  26C3               	fcall	i1_LCD_SND_COMMAND
 10523                           
 10524                           ;LCD.c: 88:   break;
 10525  0E77  0008               	return
 10526  0E78                     i1l4308:	
 10527  0E78  0824               	movf	LCD_SET_CURSOR@coloum,w
 10528  0E79  00A2               	movwf	??_LCD_SET_CURSOR
 10529  0E7A  01A3               	clrf	??_LCD_SET_CURSOR+1
 10530                           
 10531                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10532                           ; Switch size 1, requested type "speed"
 10533                           ; Number of cases is 1, Range of values is 0 to 0
 10534                           ; switch strategies available:
 10535                           ; Name         Instructions Cycles
 10536                           ; simple_byte            4     3 (average)
 10537                           ; direct_byte           11     8 (fixed)
 10538                           ; jumptable            260     6 (fixed)
 10539                           ;	Chosen strategy is simple_byte
 10540  0E7B  0823               	movf	??_LCD_SET_CURSOR+1,w
 10541  0E7C  3A00               	xorlw	0	; case 0
 10542  0E7D  1903               	skipnz
 10543  0E7E  2E80               	goto	i1l6798
 10544  0E7F  2E8E               	goto	i1l375
 10545  0E80                     i1l6798:	
 10546                           
 10547                           ; Switch size 1, requested type "speed"
 10548                           ; Number of cases is 4, Range of values is 0 to 3
 10549                           ; switch strategies available:
 10550                           ; Name         Instructions Cycles
 10551                           ; simple_byte           13     7 (average)
 10552                           ; direct_byte           20     8 (fixed)
 10553                           ; jumptable            260     6 (fixed)
 10554                           ;	Chosen strategy is simple_byte
 10555  0E80  0822               	movf	??_LCD_SET_CURSOR,w
 10556  0E81  3A00               	xorlw	0	; case 0
 10557  0E82  1903               	skipnz
 10558  0E83  2E68               	goto	i1l4298
 10559  0E84  3A01               	xorlw	1	; case 1
 10560  0E85  1903               	skipnz
 10561  0E86  2E6C               	goto	i1l4300
 10562  0E87  3A03               	xorlw	3	; case 2
 10563  0E88  1903               	skipnz
 10564  0E89  2E70               	goto	i1l4302
 10565  0E8A  3A01               	xorlw	1	; case 3
 10566  0E8B  1903               	skipnz
 10567  0E8C  2E74               	goto	i1l4304
 10568  0E8D  2E8E               	goto	i1l375
 10569  0E8E                     i1l375:	
 10570  0E8E  0008               	return
 10571  0E8F                     __end_of_LCD_SET_CURSOR:	
 10572  0E8F                     __ptext98:	
 10573 ;; *************** function _LCD_SEND_CHARACTER *****************
 10574 ;; Defined at:
 10575 ;;		line 138 in file "LCD.c"
 10576 ;; Parameters:    Size  Location     Type
 10577 ;;  character       1    wreg     unsigned char 
 10578 ;; Auto vars:     Size  Location     Type
 10579 ;;  character       1    0[BANK0 ] unsigned char 
 10580 ;; Return value:  Size  Location     Type
 10581 ;;                  1    wreg      void 
 10582 ;; Registers used:
 10583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10584 ;; Tracked objects:
 10585 ;;		On entry : 300/0
 10586 ;;		On exit  : 0/0
 10587 ;;		Unchanged: 0/0
 10588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10589 ;;      Params:         0       0       0       0       0
 10590 ;;      Locals:         0       1       0       0       0
 10591 ;;      Temps:          0       0       0       0       0
 10592 ;;      Totals:         0       1       0       0       0
 10593 ;;Total ram usage:        1 bytes
 10594 ;; Hardware stack levels used:    1
 10595 ;; Hardware stack levels required when called:    1
 10596 ;; This function calls:
 10597 ;;		i1_GPIO_PIN_SET_STATE
 10598 ;;		i1_GPIO_PORT_SET_STATE
 10599 ;; This function is called by:
 10600 ;;		_LCD_SEND_A_STRING
 10601 ;; This function uses a non-reentrant model
 10602 ;;
 10603                           
 10604                           
 10605                           ;psect for function _LCD_SEND_CHARACTER
 10606  0E8F                     _LCD_SEND_CHARACTER:	
 10607                           
 10608                           ;incstack = 0
 10609 ;; hardware stack exceeded
 10610                           ; Regs used in _LCD_SEND_CHARACTER: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10611                           ;LCD_SEND_CHARACTER@character stored from wreg
 10612  0E8F  00A0               	movwf	LCD_SEND_CHARACTER@character
 10613                           
 10614                           ;LCD.c: 138: static void LCD_SEND_CHARACTER ( tbyte character);LCD.c: 139: {;LCD.c: 141:
      +                            GPIO_PORT_SET_STATE((0x0008) , (character &0xff) );
 10615  0E90  00F0               	movwf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE
 10616  0E91  3008               	movlw	8
 10617  0E92  2721  120A  158A   	fcall	i1_GPIO_PORT_SET_STATE
 10618                           
 10619                           ;LCD.c: 142:  GPIO_PIN_SET_STATE((0x0009) , 2 , GPIO_PIN_ON);
 10620  0E95  3002               	movlw	2
 10621  0E96  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10622  0E97  3009               	movlw	9
 10623  0E98  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10624  0E99  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 10625  0E9A  26F8  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10626  0E9D  3009               	movlw	9
 10627                           
 10628                           ;LCD.c: 143:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
 10629  0E9E  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10630  0E9F  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 10631  0EA0  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10632  0EA1  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 10633  0EA2  26F8  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10634  0EA5  3009               	movlw	9
 10635                           
 10636                           ;LCD.c: 144:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
 10637                           ;LCD.c: 145:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
 10638  0EA6  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10639  0EA7  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 10640  0EA8  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10641  0EA9  26F8  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10642                           
 10643                           ;LCD.c: 146:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
 10644                           ;LCD.c: 147:  GPIO_PORT_SET_STATE((0x0008) , (character <<4) );
 10645  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
 10646  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
 10647  0EAE  0E20               	swapf	LCD_SEND_CHARACTER@character,w
 10648  0EAF  39F0               	andlw	240
 10649  0EB0  00F0               	movwf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE
 10650  0EB1  3008               	movlw	8
 10651  0EB2  2721  120A  158A   	fcall	i1_GPIO_PORT_SET_STATE
 10652  0EB5  3009               	movlw	9
 10653                           
 10654                           ;LCD.c: 148:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
 10655  0EB6  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10656  0EB7  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 10657  0EB8  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10658  0EB9  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 10659  0EBA  26F8  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10660  0EBD  3009               	movlw	9
 10661                           
 10662                           ;LCD.c: 149:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
 10663                           ;LCD.c: 150:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
 10664  0EBE  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10665  0EBF  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 10666  0EC0  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10667  0EC1  26F8               	fcall	i1_GPIO_PIN_SET_STATE
 10668                           
 10669                           ;LCD.c: 151:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
 10670  0EC2  0008               	return
 10671  0EC3                     __end_of_LCD_SEND_CHARACTER:	
 10672  0EC3                     __ptext96:	
 10673 ;; *************** function i1_LCD_SND_COMMAND *****************
 10674 ;; Defined at:
 10675 ;;		line 154 in file "LCD.c"
 10676 ;; Parameters:    Size  Location     Type
 10677 ;;  command         1    wreg     unsigned char 
 10678 ;; Auto vars:     Size  Location     Type
 10679 ;;  command         1    0[BANK0 ] unsigned char 
 10680 ;; Return value:  Size  Location     Type
 10681 ;;                  1    wreg      void 
 10682 ;; Registers used:
 10683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10684 ;; Tracked objects:
 10685 ;;		On entry : 0/0
 10686 ;;		On exit  : 0/0
 10687 ;;		Unchanged: 0/0
 10688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10689 ;;      Params:         0       0       0       0       0
 10690 ;;      Locals:         0       1       0       0       0
 10691 ;;      Temps:          0       0       0       0       0
 10692 ;;      Totals:         0       1       0       0       0
 10693 ;;Total ram usage:        1 bytes
 10694 ;; Hardware stack levels used:    1
 10695 ;; Hardware stack levels required when called:    1
 10696 ;; This function calls:
 10697 ;;		i1_GPIO_PIN_SET_STATE
 10698 ;;		i1_GPIO_PORT_SET_STATE
 10699 ;; This function is called by:
 10700 ;;		_LCD_SET_CURSOR
 10701 ;;		_LCD_CLEAR
 10702 ;;		_START_BLINKING_AT
 10703 ;;		_STOP_BLINKING
 10704 ;; This function uses a non-reentrant model
 10705 ;;
 10706                           
 10707                           
 10708                           ;psect for function i1_LCD_SND_COMMAND
 10709  0EC3                     i1_LCD_SND_COMMAND:	
 10710                           
 10711                           ;incstack = 0
 10712 ;; hardware stack exceeded
 10713                           ; Regs used in i1_LCD_SND_COMMAND: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10714                           ;i1LCD_SND_COMMAND@command stored from wreg
 10715  0EC3  1283               	bcf	3,5	;RP0=0, select bank0
 10716  0EC4  1303               	bcf	3,6	;RP1=0, select bank0
 10717  0EC5  00A0               	movwf	i1LCD_SND_COMMAND@command
 10718                           
 10719                           ;LCD.c: 154: static void LCD_SND_COMMAND ( tbyte command);LCD.c: 155: {;LCD.c: 156:  GPI
      +                          O_PORT_SET_STATE((0x0008) , (command &0xff) );
 10720  0EC6  00F0               	movwf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE
 10721  0EC7  3008               	movlw	8
 10722  0EC8  2721  120A  158A   	fcall	i1_GPIO_PORT_SET_STATE
 10723                           
 10724                           ;LCD.c: 157:  GPIO_PIN_SET_STATE((0x0009) , 2 , GPIO_PIN_OFF);
 10725  0ECB  3002               	movlw	2
 10726  0ECC  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10727  0ECD  3009               	movlw	9
 10728  0ECE  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10729  0ECF  26F8  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10730  0ED2  3009               	movlw	9
 10731                           
 10732                           ;LCD.c: 158:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
 10733  0ED3  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10734  0ED4  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 10735  0ED5  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10736  0ED6  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 10737  0ED7  26F8  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10738  0EDA  3009               	movlw	9
 10739                           
 10740                           ;LCD.c: 159:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
 10741                           ;LCD.c: 160:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
 10742  0EDB  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10743  0EDC  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 10744  0EDD  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10745  0EDE  26F8  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10746                           
 10747                           ;LCD.c: 161:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
 10748                           ;LCD.c: 162:  GPIO_PORT_SET_STATE((0x0008) , (command <<4) );
 10749  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
 10750  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
 10751  0EE3  0E20               	swapf	i1LCD_SND_COMMAND@command,w
 10752  0EE4  39F0               	andlw	240
 10753  0EE5  00F0               	movwf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE
 10754  0EE6  3008               	movlw	8
 10755  0EE7  2721  120A  158A   	fcall	i1_GPIO_PORT_SET_STATE
 10756  0EEA  3009               	movlw	9
 10757                           
 10758                           ;LCD.c: 163:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
 10759  0EEB  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10760  0EEC  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 10761  0EED  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10762  0EEE  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 10763  0EEF  26F8  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10764  0EF2  3009               	movlw	9
 10765                           
 10766                           ;LCD.c: 164:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
 10767                           ;LCD.c: 165:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
 10768  0EF3  01F3               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10769  0EF4  0AF3               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,f
 10770  0EF5  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10771  0EF6  26F8               	fcall	i1_GPIO_PIN_SET_STATE
 10772                           
 10773                           ;LCD.c: 166:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
 10774  0EF7  0008               	return
 10775  0EF8                     __end_ofi1_LCD_SND_COMMAND:	
 10776  0EF8                     __ptext100:	
 10777 ;; *************** function i1_GPIO_PIN_SET_STATE *****************
 10778 ;; Defined at:
 10779 ;;		line 23 in file "GPIO.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;  GPIO_PORTx      1    wreg     unsigned char 
 10782 ;;  GPIO_PIN_NO     1    3[COMMON] enum E858
 10783 ;;  GPIO_PIN_STA    1    4[COMMON] enum E874
 10784 ;; Auto vars:     Size  Location     Type
 10785 ;;  GPIO_PORTx      1   13[COMMON] unsigned char 
 10786 ;;  GPIO_PIN_SET    1    0        enum E852
 10787 ;; Return value:  Size  Location     Type
 10788 ;;                  1    wreg      enum E852
 10789 ;; Registers used:
 10790 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10791 ;; Tracked objects:
 10792 ;;		On entry : 0/B00
 10793 ;;		On exit  : 0/0
 10794 ;;		Unchanged: 0/0
 10795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10796 ;;      Params:         2       0       0       0       0
 10797 ;;      Locals:         2       0       0       0       0
 10798 ;;      Temps:          7       0       0       0       0
 10799 ;;      Totals:        11       0       0       0       0
 10800 ;;Total ram usage:       11 bytes
 10801 ;; Hardware stack levels used:    1
 10802 ;; This function calls:
 10803 ;;		Nothing
 10804 ;; This function is called by:
 10805 ;;		_LED_SET_STATE
 10806 ;;		_LCD_SEND_CHARACTER
 10807 ;;		_KEYPAD_UPDATE
 10808 ;;		i1_LCD_SND_COMMAND
 10809 ;; This function uses a non-reentrant model
 10810 ;;
 10811                           
 10812                           
 10813                           ;psect for function i1_GPIO_PIN_SET_STATE
 10814  0EF8                     i1_GPIO_PIN_SET_STATE:	
 10815                           
 10816                           ;incstack = 0
 10817                           ; Regs used in i1_GPIO_PIN_SET_STATE: [wreg-fsr0h+status,2+status,0]
 10818                           ;i1GPIO_PIN_SET_STATE@GPIO_PORTx stored from wreg
 10819  0EF8  00FD               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PORTx
 10820                           
 10821                           ;GPIO.c: 26:   ( (*((volatile unsigned char* )( GPIO_PORTx + (0x00) ))) = (((*((volatile
      +                           unsigned char* )( GPIO_PORTx + (0x00) ))) & (~(1<< GPIO_PIN_NO)) ) | (GPIO_PIN_STATE <<
      +                           GPIO_PIN_NO)) );
 10822  0EF9  0874               	movf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,w
 10823  0EFA  00F5               	movwf	??i1_GPIO_PIN_SET_STATE
 10824  0EFB  0A73               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,w
 10825  0EFC  2EFF               	goto	u344_24
 10826  0EFD                     u344_25:	
 10827  0EFD  1003               	clrc
 10828  0EFE  0DF5               	rlf	??i1_GPIO_PIN_SET_STATE,f
 10829  0EFF                     u344_24:	
 10830  0EFF  3EFF               	addlw	-1
 10831  0F00  1D03               	skipz
 10832  0F01  2EFD               	goto	u344_25
 10833  0F02  087D               	movf	i1GPIO_PIN_SET_STATE@GPIO_PORTx,w
 10834  0F03  00F6               	movwf	??i1_GPIO_PIN_SET_STATE+1
 10835  0F04  01F7               	clrf	??i1_GPIO_PIN_SET_STATE+2
 10836  0F05  0084               	movwf	4
 10837  0F06  1783               	bsf	3,7
 10838  0F07  1C77               	btfss	??i1_GPIO_PIN_SET_STATE+2,0
 10839  0F08  1383               	bcf	3,7
 10840  0F09  3001               	movlw	1
 10841  0F0A  00F8               	movwf	??i1_GPIO_PIN_SET_STATE+3
 10842  0F0B  0A73               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO,w
 10843  0F0C  2F0F               	goto	u345_24
 10844  0F0D                     u345_25:	
 10845  0F0D  1003               	clrc
 10846  0F0E  0DF8               	rlf	??i1_GPIO_PIN_SET_STATE+3,f
 10847  0F0F                     u345_24:	
 10848  0F0F  3EFF               	addlw	-1
 10849  0F10  1D03               	skipz
 10850  0F11  2F0D               	goto	u345_25
 10851  0F12  0878               	movf	??i1_GPIO_PIN_SET_STATE+3,w
 10852  0F13  3AFF               	xorlw	255
 10853  0F14  0500               	andwf	0,w
 10854  0F15  0475               	iorwf	??i1_GPIO_PIN_SET_STATE,w
 10855  0F16  00F9               	movwf	??i1_GPIO_PIN_SET_STATE+4
 10856  0F17  087D               	movf	i1GPIO_PIN_SET_STATE@GPIO_PORTx,w
 10857  0F18  00FA               	movwf	??i1_GPIO_PIN_SET_STATE+5
 10858  0F19  01FB               	clrf	??i1_GPIO_PIN_SET_STATE+6
 10859  0F1A  0084               	movwf	4
 10860  0F1B  1783               	bsf	3,7
 10861  0F1C  1C7B               	btfss	??i1_GPIO_PIN_SET_STATE+6,0
 10862  0F1D  1383               	bcf	3,7
 10863  0F1E  0879               	movf	??i1_GPIO_PIN_SET_STATE+4,w
 10864  0F1F  0080               	movwf	0
 10865  0F20  0008               	return
 10866  0F21                     __end_ofi1_GPIO_PIN_SET_STATE:	
 10867  007E                     btemp	set	126	;btemp
 10868  007E                     wtemp0	set	126
 10869  0F21                     __ptext99:	
 10870 ;; *************** function i1_GPIO_PORT_SET_STATE *****************
 10871 ;; Defined at:
 10872 ;;		line 30 in file "GPIO.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;  GPIO_PORTx      1    wreg     unsigned char 
 10875 ;;  GPIO_PORT_ST    1    0[COMMON] enum E874
 10876 ;; Auto vars:     Size  Location     Type
 10877 ;;  GPIO_PORTx      1    4[COMMON] unsigned char 
 10878 ;;  GPIO_PORT_SE    1    0        enum E852
 10879 ;; Return value:  Size  Location     Type
 10880 ;;                  1    wreg      enum E852
 10881 ;; Registers used:
 10882 ;;		wreg, fsr0l, fsr0h, status,2
 10883 ;; Tracked objects:
 10884 ;;		On entry : 300/0
 10885 ;;		On exit  : 300/0
 10886 ;;		Unchanged: 300/0
 10887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10888 ;;      Params:         1       0       0       0       0
 10889 ;;      Locals:         2       0       0       0       0
 10890 ;;      Temps:          2       0       0       0       0
 10891 ;;      Totals:         5       0       0       0       0
 10892 ;;Total ram usage:        5 bytes
 10893 ;; Hardware stack levels used:    1
 10894 ;; This function calls:
 10895 ;;		Nothing
 10896 ;; This function is called by:
 10897 ;;		_LCD_SEND_CHARACTER
 10898 ;;		i1_LCD_SND_COMMAND
 10899 ;; This function uses a non-reentrant model
 10900 ;;
 10901                           
 10902                           
 10903                           ;psect for function i1_GPIO_PORT_SET_STATE
 10904  0F21                     i1_GPIO_PORT_SET_STATE:	
 10905                           
 10906                           ;incstack = 0
 10907 ;; hardware stack exceeded
 10908                           ; Regs used in i1_GPIO_PORT_SET_STATE: [wreg-fsr0h+status,2]
 10909                           ;i1GPIO_PORT_SET_STATE@GPIO_PORTx stored from wreg
 10910  0F21  00F4               	movwf	i1GPIO_PORT_SET_STATE@GPIO_PORTx
 10911                           
 10912                           ;GPIO.c: 33:   (*((volatile unsigned char* )( GPIO_PORTx + (0x00) ))) = GPIO_PORT_STATE 
      +                          ;
 10913  0F22  00F1               	movwf	??i1_GPIO_PORT_SET_STATE
 10914  0F23  01F2               	clrf	??i1_GPIO_PORT_SET_STATE+1
 10915  0F24  0084               	movwf	4
 10916  0F25  1783               	bsf	3,7
 10917  0F26  1C72               	btfss	??i1_GPIO_PORT_SET_STATE+1,0
 10918  0F27  1383               	bcf	3,7
 10919  0F28  0870               	movf	i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE,w
 10920  0F29  0080               	movwf	0
 10921  0F2A  0008               	return
 10922  0F2B                     __end_ofi1_GPIO_PORT_SET_STATE:	
 10923  0F2B                     __ptext92:	
 10924 ;; *************** function _LCD_CLEAR *****************
 10925 ;; Defined at:
 10926 ;;		line 93 in file "LCD.c"
 10927 ;; Parameters:    Size  Location     Type
 10928 ;;		None
 10929 ;; Auto vars:     Size  Location     Type
 10930 ;;		None
 10931 ;; Return value:  Size  Location     Type
 10932 ;;                  1    wreg      void 
 10933 ;; Registers used:
 10934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10935 ;; Tracked objects:
 10936 ;;		On entry : 0/0
 10937 ;;		On exit  : 0/0
 10938 ;;		Unchanged: 0/0
 10939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10940 ;;      Params:         0       0       0       0       0
 10941 ;;      Locals:         0       0       0       0       0
 10942 ;;      Temps:          0       0       0       0       0
 10943 ;;      Totals:         0       0       0       0       0
 10944 ;;Total ram usage:        0 bytes
 10945 ;; Hardware stack levels used:    1
 10946 ;; Hardware stack levels required when called:    2
 10947 ;; This function calls:
 10948 ;;		i1_LCD_SND_COMMAND
 10949 ;; This function is called by:
 10950 ;;		_DISP_HEATER_DATA
 10951 ;;		_DISP_MOTOR_DATA
 10952 ;;		_DISP_SHOW_TIME
 10953 ;; This function uses a non-reentrant model
 10954 ;;
 10955                           
 10956                           
 10957                           ;psect for function _LCD_CLEAR
 10958  0F2B                     _LCD_CLEAR:	
 10959                           
 10960                           ;LCD.c: 94:  LCD_SND_COMMAND(0x01);
 10961                           
 10962                           ;incstack = 0
 10963 ;; hardware stack exceeded
 10964                           ; Regs used in _LCD_CLEAR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10965  0F2B  3001               	movlw	1
 10966  0F2C  26C3  120A  158A   	fcall	i1_LCD_SND_COMMAND
 10967                           
 10968                           ;LCD.c: 95:  LCD_SND_COMMAND(0x02);
 10969  0F2F  3002               	movlw	2
 10970  0F30  26C3  120A  158A   	fcall	i1_LCD_SND_COMMAND
 10971                           
 10972                           ;LCD.c: 96:  LCD_SND_COMMAND(0x0C);
 10973  0F33  300C               	movlw	12
 10974  0F34  26C3               	fcall	i1_LCD_SND_COMMAND
 10975  0F35  0008               	return
 10976  0F36                     __end_of_LCD_CLEAR:	
 10977  0F36                     __ptext39:	
 10978 ;; *************** function _GPIO_PIN_GET_STATE *****************
 10979 ;; Defined at:
 10980 ;;		line 37 in file "GPIO.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;  GPIO_PORTx      1    wreg     unsigned char 
 10983 ;;  GPIO_PIN_NO     1    3[COMMON] enum E858
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;  GPIO_PORTx      1    8[COMMON] unsigned char 
 10986 ;;  ret             1    9[COMMON] enum E874
 10987 ;; Return value:  Size  Location     Type
 10988 ;;                  1    wreg      enum E874
 10989 ;; Registers used:
 10990 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10991 ;; Tracked objects:
 10992 ;;		On entry : 800/800
 10993 ;;		On exit  : 0/0
 10994 ;;		Unchanged: 0/0
 10995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10996 ;;      Params:         1       0       0       0       0
 10997 ;;      Locals:         2       0       0       0       0
 10998 ;;      Temps:          4       0       0       0       0
 10999 ;;      Totals:         7       0       0       0       0
 11000 ;;Total ram usage:        7 bytes
 11001 ;; Hardware stack levels used:    1
 11002 ;; This function calls:
 11003 ;;		Nothing
 11004 ;; This function is called by:
 11005 ;;		_SWs_UPDATE
 11006 ;;		_KEYPAD_UPDATE
 11007 ;; This function uses a non-reentrant model
 11008 ;;
 11009                           
 11010                           
 11011                           ;psect for function _GPIO_PIN_GET_STATE
 11012  0F36                     _GPIO_PIN_GET_STATE:	
 11013                           
 11014                           ;incstack = 0
 11015                           ; Regs used in _GPIO_PIN_GET_STATE: [wreg-fsr0h+status,2+status,0]
 11016                           ;GPIO_PIN_GET_STATE@GPIO_PORTx stored from wreg
 11017  0F36  00F8               	movwf	GPIO_PIN_GET_STATE@GPIO_PORTx
 11018                           
 11019                           ;GPIO.c: 37:  tGPIO_STATE GPIO_PIN_GET_STATE ( tGPIO_PORT_NO GPIO_PORTx , tGPIO_PIN_NO G
      +                          PIO_PIN_NO );GPIO.c: 38:  {;GPIO.c: 39:   tGPIO_STATE ret = (((*((volatile unsigned char
      +                          * )( GPIO_PORTx + (0x00) ))) & (1 << GPIO_PIN_NO)) >> GPIO_PIN_NO );
 11020  0F37  00F4               	movwf	??_GPIO_PIN_GET_STATE
 11021  0F38  01F5               	clrf	??_GPIO_PIN_GET_STATE+1
 11022  0F39  0084               	movwf	4
 11023  0F3A  1783               	bsf	3,7
 11024  0F3B  1C75               	btfss	??_GPIO_PIN_GET_STATE+1,0
 11025  0F3C  1383               	bcf	3,7
 11026  0F3D  3001               	movlw	1
 11027  0F3E  00F6               	movwf	??_GPIO_PIN_GET_STATE+2
 11028  0F3F  0A73               	incf	GPIO_PIN_GET_STATE@GPIO_PIN_NO,w
 11029  0F40  2F43               	goto	u603_24
 11030  0F41                     u603_25:	
 11031  0F41  1003               	clrc
 11032  0F42  0DF6               	rlf	??_GPIO_PIN_GET_STATE+2,f
 11033  0F43                     u603_24:	
 11034  0F43  3EFF               	addlw	-1
 11035  0F44  1D03               	skipz
 11036  0F45  2F41               	goto	u603_25
 11037  0F46  0876               	movf	??_GPIO_PIN_GET_STATE+2,w
 11038  0F47  0500               	andwf	0,w
 11039  0F48  00F7               	movwf	??_GPIO_PIN_GET_STATE+3
 11040  0F49  0A73               	incf	GPIO_PIN_GET_STATE@GPIO_PIN_NO,w
 11041  0F4A  2F4D               	goto	u604_24
 11042  0F4B                     u604_25:	
 11043  0F4B  1003               	clrc
 11044  0F4C  0CF7               	rrf	??_GPIO_PIN_GET_STATE+3,f
 11045  0F4D                     u604_24:	
 11046  0F4D  3EFF               	addlw	-1
 11047  0F4E  1D03               	skipz
 11048  0F4F  2F4B               	goto	u604_25
 11049  0F50  0877               	movf	??_GPIO_PIN_GET_STATE+3,w
 11050  0F51  00F9               	movwf	GPIO_PIN_GET_STATE@ret
 11051                           
 11052                           ;GPIO.c: 40:   return ret ;
 11053  0F52  0008               	return
 11054  0F53                     __end_of_GPIO_PIN_GET_STATE:	
 11055  0F53                     __ptext87:	
 11056 ;; *************** function _itoa *****************
 11057 ;; Defined at:
 11058 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c"
 11059 ;; Parameters:    Size  Location     Type
 11060 ;;  buf             1    wreg     PTR unsigned char 
 11061 ;;		 -> LCD_SEND_A_NUMBER@string(4), 
 11062 ;;  val             2    4[BANK0 ] int 
 11063 ;;  base            2    6[BANK0 ] int 
 11064 ;; Auto vars:     Size  Location     Type
 11065 ;;  buf             1   12[COMMON] PTR unsigned char 
 11066 ;;		 -> LCD_SEND_A_NUMBER@string(4), 
 11067 ;;  cp              1    0        PTR unsigned char 
 11068 ;;		 -> LCD_SEND_A_NUMBER@string(4), 
 11069 ;; Return value:  Size  Location     Type
 11070 ;;                  1    wreg      PTR unsigned char 
 11071 ;; Registers used:
 11072 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11073 ;; Tracked objects:
 11074 ;;		On entry : 300/0
 11075 ;;		On exit  : B00/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11078 ;;      Params:         0       4       0       0       0
 11079 ;;      Locals:         2       0       0       0       0
 11080 ;;      Temps:          0       0       0       0       0
 11081 ;;      Totals:         2       4       0       0       0
 11082 ;;Total ram usage:        6 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; Hardware stack levels required when called:    2
 11085 ;; This function calls:
 11086 ;;		_utoa
 11087 ;; This function is called by:
 11088 ;;		_LCD_SEND_A_NUMBER
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           
 11093                           ;psect for function _itoa
 11094  0F53                     _itoa:	
 11095                           
 11096                           ;incstack = 0
 11097 ;; hardware stack exceeded
 11098                           ; Regs used in _itoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11099                           ;itoa@buf stored from wreg
 11100  0F53  00FC               	movwf	itoa@buf
 11101  0F54  1FA5               	btfss	itoa@val+1,7
 11102  0F55  2F61               	goto	i1l4292
 11103  0F56  087C               	movf	itoa@buf,w
 11104  0F57  0084               	movwf	4
 11105  0F58  302D               	movlw	45
 11106  0F59  1383               	bcf	3,7	;select IRP bank0
 11107  0F5A  0080               	movwf	0
 11108  0F5B  0AFC               	incf	itoa@buf,f
 11109  0F5C  09A4               	comf	itoa@val,f
 11110  0F5D  09A5               	comf	itoa@val+1,f
 11111  0F5E  0AA4               	incf	itoa@val,f
 11112  0F5F  1903               	skipnz
 11113  0F60  0AA5               	incf	itoa@val+1,f
 11114  0F61                     i1l4292:	
 11115  0F61  0825               	movf	itoa@val+1,w
 11116  0F62  00F8               	movwf	utoa@val+1
 11117  0F63  0824               	movf	itoa@val,w
 11118  0F64  00F7               	movwf	utoa@val
 11119  0F65  0827               	movf	itoa@base+1,w
 11120  0F66  00FA               	movwf	utoa@base+1
 11121  0F67  0826               	movf	itoa@base,w
 11122  0F68  00F9               	movwf	utoa@base
 11123  0F69  087C               	movf	itoa@buf,w
 11124  0F6A  160A  158A  2F65   	ljmp	_utoa
 11125  0F6D                     __end_of_itoa:	
 11126  0F6D                     __ptext56:	
 11127 ;; *************** function _KEYPAD_GET_PRESSED_KEY *****************
 11128 ;; Defined at:
 11129 ;;		line 96 in file "Keypad.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;		None
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;  ret             2    2[COMMON] struct .
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  2    0[COMMON] struct .
 11136 ;; Registers used:
 11137 ;;		wreg
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 300/300
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11143 ;;      Params:         2       0       0       0       0
 11144 ;;      Locals:         2       0       0       0       0
 11145 ;;      Temps:          0       0       0       0       0
 11146 ;;      Totals:         4       0       0       0       0
 11147 ;;Total ram usage:        4 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; This function calls:
 11150 ;;		Nothing
 11151 ;; This function is called by:
 11152 ;;		_CONTROL_UPDATE
 11153 ;;		_SET_ROTOR_PWR_HANDLER_ON_WORK
 11154 ;; This function uses a non-reentrant model
 11155 ;;
 11156                           
 11157                           
 11158                           ;psect for function _KEYPAD_GET_PRESSED_KEY
 11159  0F6D                     _KEYPAD_GET_PRESSED_KEY:	
 11160                           
 11161                           ;Keypad.c: 98:     tKEYPAD_PRESSED ret;;Keypad.c: 99:     ret = LAST_PRESSED_KEY;
 11162                           
 11163                           ;incstack = 0
 11164 ;; hardware stack exceeded
 11165                           ; Regs used in _KEYPAD_GET_PRESSED_KEY: [wreg]
 11166  0F6D  1683               	bsf	3,5	;RP0=1, select bank3
 11167  0F6E  1703               	bsf	3,6	;RP1=1, select bank3
 11168  0F6F  0843               	movf	(_LAST_PRESSED_KEY+1)^(0+384),w
 11169  0F70  00F3               	movwf	KEYPAD_GET_PRESSED_KEY@ret+1
 11170  0F71  0842               	movf	_LAST_PRESSED_KEY^(0+384),w
 11171  0F72  00F2               	movwf	KEYPAD_GET_PRESSED_KEY@ret
 11172                           
 11173                           ;Keypad.c: 100:     return ret;
 11174  0F73  0873               	movf	KEYPAD_GET_PRESSED_KEY@ret+1,w
 11175  0F74  00F1               	movwf	?_KEYPAD_GET_PRESSED_KEY+1
 11176  0F75  0872               	movf	KEYPAD_GET_PRESSED_KEY@ret,w
 11177  0F76  00F0               	movwf	?_KEYPAD_GET_PRESSED_KEY
 11178  0F77  0008               	return
 11179  0F78                     __end_of_KEYPAD_GET_PRESSED_KEY:	
 11180  0F78                     __ptext74:	
 11181 ;; *************** function _FINISH_HANDLER *****************
 11182 ;; Defined at:
 11183 ;;		line 197 in file "CONTROL.c"
 11184 ;; Parameters:    Size  Location     Type
 11185 ;;		None
 11186 ;; Auto vars:     Size  Location     Type
 11187 ;;		None
 11188 ;; Return value:  Size  Location     Type
 11189 ;;                  1    wreg      void 
 11190 ;; Registers used:
 11191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11192 ;; Tracked objects:
 11193 ;;		On entry : 0/0
 11194 ;;		On exit  : 0/0
 11195 ;;		Unchanged: 0/0
 11196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11197 ;;      Params:         0       0       0       0       0
 11198 ;;      Locals:         0       0       0       0       0
 11199 ;;      Temps:          0       2       0       0       0
 11200 ;;      Totals:         0       2       0       0       0
 11201 ;;Total ram usage:        2 bytes
 11202 ;; Hardware stack levels used:    1
 11203 ;; Hardware stack levels required when called:    4
 11204 ;; This function calls:
 11205 ;;		_DISP_FINISH
 11206 ;;		_SW_GET_STATE
 11207 ;; This function is called by:
 11208 ;;		_CONTROL_UPDATE
 11209 ;; This function uses a non-reentrant model
 11210 ;;
 11211                           
 11212                           
 11213                           ;psect for function _FINISH_HANDLER
 11214  0F78                     _FINISH_HANDLER:	
 11215                           
 11216                           ;CONTROL.c: 199:    switch (HANDLERS_STATES[FINISH])
 11217                           
 11218                           ;incstack = 0
 11219 ;; hardware stack exceeded
 11220                           ; Regs used in _FINISH_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11221  0F78  2FA4               	goto	i1l5988
 11222  0F79                     i1l5972:	
 11223                           
 11224                           ;CONTROL.c: 202:             DISP_FINISH();
 11225  0F79  160A  158A  2673   	fcall	_DISP_FINISH
 11226                           
 11227                           ;CONTROL.c: 203:             HANDLERS_STATES[FINISH] = ON_WORK ;
 11228  0F7C  1683               	bsf	3,5	;RP0=1, select bank3
 11229  0F7D  1703               	bsf	3,6	;RP1=1, select bank3
 11230  0F7E  01B4               	clrf	(_HANDLERS_STATES^(0+384)+4)
 11231  0F7F  0AB4               	incf	(_HANDLERS_STATES^(0+384)+4),f
 11232                           
 11233                           ;CONTROL.c: 204:             SETTED_TIME.HOURS = 0;
 11234  0F80  1283               	bcf	3,5	;RP0=0, select bank0
 11235  0F81  1303               	bcf	3,6	;RP1=0, select bank0
 11236  0F82  01ED               	clrf	_SETTED_TIME+2
 11237                           
 11238                           ;CONTROL.c: 205:             SETTED_TIME.MINUTES = 0;
 11239  0F83  01EC               	clrf	_SETTED_TIME+1
 11240                           
 11241                           ;CONTROL.c: 206:             SETTED_TIME.SECONDS = 0;
 11242  0F84  01EB               	clrf	_SETTED_TIME
 11243                           
 11244                           ;CONTROL.c: 208:         break;
 11245  0F85  0008               	return
 11246  0F86                     i1l5982:	
 11247                           
 11248                           ;CONTROL.c: 210:             if ((PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )|
 11249  0F86  3000               	movlw	0
 11250  0F87  2240  120A  158A   	fcall	_SW_GET_STATE
 11251  0F8A  3A01               	xorlw	1
 11252  0F8B  1D03               	btfss	3,2
 11253  0F8C  2F8F               	goto	u611_20
 11254  0F8D  3001               	movlw	1
 11255  0F8E  2F90               	goto	u611_22
 11256  0F8F                     u611_20:	
 11257  0F8F  3000               	movlw	0
 11258  0F90                     u611_22:	
 11259  0F90  1283               	bcf	3,5	;RP0=0, select bank0
 11260  0F91  1303               	bcf	3,6	;RP1=0, select bank0
 11261  0F92  00A5               	movwf	??_FINISH_HANDLER
 11262  0F93  1683               	bsf	3,5	;RP0=1, select bank3
 11263  0F94  1703               	bsf	3,6	;RP1=1, select bank3
 11264  0F95  0B3F               	decfsz	(_PRESSED_KEY^(0+384)+1),w
 11265  0F96  2F99               	goto	u612_20
 11266  0F97  3001               	movlw	1
 11267  0F98  2F9A               	goto	u612_22
 11268  0F99                     u612_20:	
 11269  0F99  3000               	movlw	0
 11270  0F9A                     u612_22:	
 11271  0F9A  1283               	bcf	3,5	;RP0=0, select bank0
 11272  0F9B  1303               	bcf	3,6	;RP1=0, select bank0
 11273  0F9C  0425               	iorwf	??_FINISH_HANDLER,w
 11274  0F9D  1903               	skipnz
 11275  0F9E  0008               	return
 11276                           
 11277                           ;CONTROL.c: 213:             {;CONTROL.c: 214:               CONTROL_CURRENT_STATE = SET
      +                          _TIME;
 11278  0F9F  1683               	bsf	3,5	;RP0=1, select bank3
 11279  0FA0  1703               	bsf	3,6	;RP1=1, select bank3
 11280  0FA1  01C8               	clrf	_CONTROL_CURRENT_STATE^(0+384)
 11281                           
 11282                           ;CONTROL.c: 215:               HANDLERS_STATES[FINISH] = FIRST_TIME ;
 11283  0FA2  01B4               	clrf	(_HANDLERS_STATES^(0+384)+4)
 11284                           
 11285                           ;CONTROL.c: 216:             }
 11286  0FA3  0008               	return
 11287  0FA4                     i1l5988:	
 11288  0FA4  1683               	bsf	3,5	;RP0=1, select bank3
 11289  0FA5  1703               	bsf	3,6	;RP1=1, select bank3
 11290  0FA6  0834               	movf	(_HANDLERS_STATES^(0+384)+4),w
 11291  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
 11292  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
 11293  0FA9  00A5               	movwf	??_FINISH_HANDLER
 11294  0FAA  01A6               	clrf	??_FINISH_HANDLER+1
 11295                           
 11296                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11297                           ; Switch size 1, requested type "speed"
 11298                           ; Number of cases is 1, Range of values is 0 to 0
 11299                           ; switch strategies available:
 11300                           ; Name         Instructions Cycles
 11301                           ; simple_byte            4     3 (average)
 11302                           ; direct_byte           11     8 (fixed)
 11303                           ; jumptable            260     6 (fixed)
 11304                           ;	Chosen strategy is simple_byte
 11305  0FAB  0826               	movf	??_FINISH_HANDLER+1,w
 11306  0FAC  3A00               	xorlw	0	; case 0
 11307  0FAD  1903               	skipnz
 11308  0FAE  2FB0               	goto	i1l6796
 11309  0FAF  2FB8               	goto	i1l762
 11310  0FB0                     i1l6796:	
 11311                           
 11312                           ; Switch size 1, requested type "speed"
 11313                           ; Number of cases is 2, Range of values is 0 to 1
 11314                           ; switch strategies available:
 11315                           ; Name         Instructions Cycles
 11316                           ; simple_byte            7     4 (average)
 11317                           ; direct_byte           14     8 (fixed)
 11318                           ; jumptable            260     6 (fixed)
 11319                           ;	Chosen strategy is simple_byte
 11320  0FB0  0825               	movf	??_FINISH_HANDLER,w
 11321  0FB1  3A00               	xorlw	0	; case 0
 11322  0FB2  1903               	skipnz
 11323  0FB3  2F79               	goto	i1l5972
 11324  0FB4  3A01               	xorlw	1	; case 1
 11325  0FB5  1903               	skipnz
 11326  0FB6  2F86               	goto	i1l5982
 11327  0FB7  2FB8               	goto	i1l762
 11328  0FB8                     i1l762:	
 11329  0FB8  0008               	return
 11330  0FB9                     __end_of_FINISH_HANDLER:	
 11331  0FB9                     __ptext58:	
 11332 ;; *************** function _SET_HEATING_HANDLER *****************
 11333 ;; Defined at:
 11334 ;;		line 102 in file "CONTROL.c"
 11335 ;; Parameters:    Size  Location     Type
 11336 ;;		None
 11337 ;; Auto vars:     Size  Location     Type
 11338 ;;		None
 11339 ;; Return value:  Size  Location     Type
 11340 ;;                  1    wreg      void 
 11341 ;; Registers used:
 11342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11343 ;; Tracked objects:
 11344 ;;		On entry : 0/0
 11345 ;;		On exit  : 0/0
 11346 ;;		Unchanged: 0/0
 11347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11348 ;;      Params:         0       0       0       0       0
 11349 ;;      Locals:         0       0       0       0       0
 11350 ;;      Temps:          0       2       0       0       0
 11351 ;;      Totals:         0       2       0       0       0
 11352 ;;Total ram usage:        2 bytes
 11353 ;; Hardware stack levels used:    1
 11354 ;; Hardware stack levels required when called:    5
 11355 ;; This function calls:
 11356 ;;		_DISP_HEATER_DATA
 11357 ;;		_SET_HEATING_HANDLER_ON_WORK
 11358 ;;		_STOP_BLINKING
 11359 ;; This function is called by:
 11360 ;;		_CONTROL_UPDATE
 11361 ;; This function uses a non-reentrant model
 11362 ;;
 11363                           
 11364                           
 11365                           ;psect for function _SET_HEATING_HANDLER
 11366  0FB9                     _SET_HEATING_HANDLER:	
 11367                           
 11368                           ;CONTROL.c: 114:         break;
 11369                           
 11370                           ;CONTROL.c: 104:     switch (HANDLERS_STATES[SET_HEATING])
 11371                           
 11372                           ;incstack = 0
 11373 ;; hardware stack exceeded
 11374                           ; Regs used in _SET_HEATING_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
 11375  0FB9  1683               	bsf	3,5	;RP0=1, select bank3
 11376  0FBA  1703               	bsf	3,6	;RP1=1, select bank3
 11377  0FBB  0831               	movf	(_HANDLERS_STATES^(0+384)+1),w
 11378  0FBC  1283               	bcf	3,5	;RP0=0, select bank0
 11379  0FBD  1303               	bcf	3,6	;RP1=0, select bank0
 11380  0FBE  00A8               	movwf	??_SET_HEATING_HANDLER
 11381  0FBF  01A9               	clrf	??_SET_HEATING_HANDLER+1
 11382                           
 11383                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11384                           ; Switch size 1, requested type "speed"
 11385                           ; Number of cases is 1, Range of values is 0 to 0
 11386                           ; switch strategies available:
 11387                           ; Name         Instructions Cycles
 11388                           ; simple_byte            4     3 (average)
 11389                           ; direct_byte           11     8 (fixed)
 11390                           ; jumptable            260     6 (fixed)
 11391                           ;	Chosen strategy is simple_byte
 11392  0FC0  0829               	movf	??_SET_HEATING_HANDLER+1,w
 11393  0FC1  3A00               	xorlw	0	; case 0
 11394  0FC2  1903               	skipnz
 11395  0FC3  2FCF               	goto	i1l6790
 11396  0FC4  2FD7               	goto	i1l728
 11397  0FC5                     i1l5882:	
 11398                           
 11399                           ;CONTROL.c: 107:             STOP_BLINKING();
 11400  0FC5  2483  120A  158A   	fcall	_STOP_BLINKING
 11401                           
 11402                           ;CONTROL.c: 108:             DISP_HEATER_DATA();
 11403  0FC8  25EC               	fcall	_DISP_HEATER_DATA
 11404                           
 11405                           ;CONTROL.c: 110:             HANDLERS_STATES[SET_HEATING] = ON_WORK ;
 11406  0FC9  1683               	bsf	3,5	;RP0=1, select bank3
 11407  0FCA  1703               	bsf	3,6	;RP1=1, select bank3
 11408  0FCB  01B1               	clrf	(_HANDLERS_STATES^(0+384)+1)
 11409  0FCC  0AB1               	incf	(_HANDLERS_STATES^(0+384)+1),f
 11410                           
 11411                           ;CONTROL.c: 111:         break;
 11412  0FCD  0008               	return
 11413  0FCE                     i1l5888:	
 11414                           
 11415                           ;CONTROL.c: 113:             SET_HEATING_HANDLER_ON_WORK();
 11416  0FCE  2896               	ljmp	i1l4832
 11417  0FCF                     i1l6790:	
 11418                           
 11419                           ; Switch size 1, requested type "speed"
 11420                           ; Number of cases is 2, Range of values is 0 to 1
 11421                           ; switch strategies available:
 11422                           ; Name         Instructions Cycles
 11423                           ; simple_byte            7     4 (average)
 11424                           ; direct_byte           14     8 (fixed)
 11425                           ; jumptable            260     6 (fixed)
 11426                           ;	Chosen strategy is simple_byte
 11427  0FCF  0828               	movf	??_SET_HEATING_HANDLER,w
 11428  0FD0  3A00               	xorlw	0	; case 0
 11429  0FD1  1903               	skipnz
 11430  0FD2  2FC5               	goto	i1l5882
 11431  0FD3  3A01               	xorlw	1	; case 1
 11432  0FD4  1903               	skipnz
 11433  0FD5  2FCE               	goto	i1l5888
 11434  0FD6  2FD7               	goto	i1l728
 11435  0FD7                     i1l728:	
 11436  0FD7  0008               	return
 11437  0FD8                     __end_of_SET_HEATING_HANDLER:	
 11438  0FD8                     __ptext54:	
 11439 ;; *************** function _SET_ROTOR_PWR_HANDLER *****************
 11440 ;; Defined at:
 11441 ;;		line 120 in file "CONTROL.c"
 11442 ;; Parameters:    Size  Location     Type
 11443 ;;		None
 11444 ;; Auto vars:     Size  Location     Type
 11445 ;;		None
 11446 ;; Return value:  Size  Location     Type
 11447 ;;                  1    wreg      void 
 11448 ;; Registers used:
 11449 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11450 ;; Tracked objects:
 11451 ;;		On entry : 0/0
 11452 ;;		On exit  : 0/0
 11453 ;;		Unchanged: 0/0
 11454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11455 ;;      Params:         0       0       0       0       0
 11456 ;;      Locals:         0       0       0       0       0
 11457 ;;      Temps:          0       2       0       0       0
 11458 ;;      Totals:         0       2       0       0       0
 11459 ;;Total ram usage:        2 bytes
 11460 ;; Hardware stack levels used:    1
 11461 ;; Hardware stack levels required when called:    5
 11462 ;; This function calls:
 11463 ;;		_DISP_MOTOR_DATA
 11464 ;;		_SET_ROTOR_PWR_HANDLER_ON_WORK
 11465 ;;		_STOP_BLINKING
 11466 ;; This function is called by:
 11467 ;;		_CONTROL_UPDATE
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           
 11472                           ;psect for function _SET_ROTOR_PWR_HANDLER
 11473  0FD8                     _SET_ROTOR_PWR_HANDLER:	
 11474                           
 11475                           ;CONTROL.c: 131:         break;
 11476                           
 11477                           ;CONTROL.c: 122:     switch (HANDLERS_STATES[SET_ROTOR_PWR])
 11478                           
 11479                           ;incstack = 0
 11480 ;; hardware stack exceeded
 11481                           ; Regs used in _SET_ROTOR_PWR_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
 11482  0FD8  1683               	bsf	3,5	;RP0=1, select bank3
 11483  0FD9  1703               	bsf	3,6	;RP1=1, select bank3
 11484  0FDA  0832               	movf	(_HANDLERS_STATES^(0+384)+2),w
 11485  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
 11486  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
 11487  0FDD  00AA               	movwf	??_SET_ROTOR_PWR_HANDLER
 11488  0FDE  01AB               	clrf	??_SET_ROTOR_PWR_HANDLER+1
 11489                           
 11490                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11491                           ; Switch size 1, requested type "speed"
 11492                           ; Number of cases is 1, Range of values is 0 to 0
 11493                           ; switch strategies available:
 11494                           ; Name         Instructions Cycles
 11495                           ; simple_byte            4     3 (average)
 11496                           ; direct_byte           11     8 (fixed)
 11497                           ; jumptable            260     6 (fixed)
 11498                           ;	Chosen strategy is simple_byte
 11499  0FDF  082B               	movf	??_SET_ROTOR_PWR_HANDLER+1,w
 11500  0FE0  3A00               	xorlw	0	; case 0
 11501  0FE1  1903               	skipnz
 11502  0FE2  2FEE               	goto	i1l6786
 11503  0FE3  2FF6               	goto	i1l736
 11504  0FE4                     i1l5900:	
 11505                           
 11506                           ;CONTROL.c: 125:            STOP_BLINKING();
 11507  0FE4  2483  120A  158A   	fcall	_STOP_BLINKING
 11508                           
 11509                           ;CONTROL.c: 126:            DISP_MOTOR_DATA();
 11510  0FE7  25BE               	fcall	_DISP_MOTOR_DATA
 11511                           
 11512                           ;CONTROL.c: 127:            HANDLERS_STATES[SET_ROTOR_PWR] = ON_WORK ;
 11513  0FE8  1683               	bsf	3,5	;RP0=1, select bank3
 11514  0FE9  1703               	bsf	3,6	;RP1=1, select bank3
 11515  0FEA  01B2               	clrf	(_HANDLERS_STATES^(0+384)+2)
 11516  0FEB  0AB2               	incf	(_HANDLERS_STATES^(0+384)+2),f
 11517                           
 11518                           ;CONTROL.c: 128:         break;
 11519  0FEC  0008               	return
 11520  0FED                     i1l5906:	
 11521                           
 11522                           ;CONTROL.c: 130:             SET_ROTOR_PWR_HANDLER_ON_WORK ( );
 11523  0FED  28E1               	ljmp	i1l4876
 11524  0FEE                     i1l6786:	
 11525                           
 11526                           ; Switch size 1, requested type "speed"
 11527                           ; Number of cases is 2, Range of values is 0 to 1
 11528                           ; switch strategies available:
 11529                           ; Name         Instructions Cycles
 11530                           ; simple_byte            7     4 (average)
 11531                           ; direct_byte           14     8 (fixed)
 11532                           ; jumptable            260     6 (fixed)
 11533                           ;	Chosen strategy is simple_byte
 11534  0FEE  082A               	movf	??_SET_ROTOR_PWR_HANDLER,w
 11535  0FEF  3A00               	xorlw	0	; case 0
 11536  0FF0  1903               	skipnz
 11537  0FF1  2FE4               	goto	i1l5900
 11538  0FF2  3A01               	xorlw	1	; case 1
 11539  0FF3  1903               	skipnz
 11540  0FF4  2FED               	goto	i1l5906
 11541  0FF5  2FF6               	goto	i1l736
 11542  0FF6                     i1l736:	
 11543  0FF6  0008               	return
 11544  0FF7                     __end_of_SET_ROTOR_PWR_HANDLER:	
 11545  0FF7                     __ptext34:	
 11546 ;; *************** function _TIMER0_UPDATE *****************
 11547 ;; Defined at:
 11548 ;;		line 37 in file "TIMR0.c"
 11549 ;; Parameters:    Size  Location     Type
 11550 ;;		None
 11551 ;; Auto vars:     Size  Location     Type
 11552 ;;		None
 11553 ;; Return value:  Size  Location     Type
 11554 ;;                  1    wreg      void 
 11555 ;; Registers used:
 11556 ;;		wreg
 11557 ;; Tracked objects:
 11558 ;;		On entry : 0/0
 11559 ;;		On exit  : 300/0
 11560 ;;		Unchanged: 0/0
 11561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11562 ;;      Params:         0       0       0       0       0
 11563 ;;      Locals:         0       0       0       0       0
 11564 ;;      Temps:          0       0       0       0       0
 11565 ;;      Totals:         0       0       0       0       0
 11566 ;;Total ram usage:        0 bytes
 11567 ;; Hardware stack levels used:    1
 11568 ;; This function calls:
 11569 ;;		Nothing
 11570 ;; This function is called by:
 11571 ;;		_SYS_UPDATE
 11572 ;; This function uses a non-reentrant model
 11573 ;;
 11574                           
 11575                           
 11576                           ;psect for function _TIMER0_UPDATE
 11577  0FF7                     _TIMER0_UPDATE:	
 11578                           
 11579                           ;TIMR0.c: 39:     (TMR0 = ((256) - ( (5)* ((double) (8 * 1000) / ( 4 * 256 ) ) )) );
 11580                           
 11581                           ;incstack = 0
 11582                           ; Regs used in _TIMER0_UPDATE: [wreg]
 11583  0FF7  30D8               	movlw	216
 11584  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
 11585  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
 11586  0FFA  0081               	movwf	1	;volatile
 11587                           
 11588                           ;TIMR0.c: 40:     ( TMR0IF = GPIO_PIN_OFF );
 11589  0FFB  110B               	bcf	11,2	;volatile
 11590  0FFC  0008               	return
 11591  0FFD                     __end_of_TIMER0_UPDATE:	
 11592  0FFD                     __ptext64:	
 11593 ;; *************** function _TIME_CONTINUE *****************
 11594 ;; Defined at:
 11595 ;;		line 31 in file "TIME.c"
 11596 ;; Parameters:    Size  Location     Type
 11597 ;;		None
 11598 ;; Auto vars:     Size  Location     Type
 11599 ;;		None
 11600 ;; Return value:  Size  Location     Type
 11601 ;;                  1    wreg      void 
 11602 ;; Registers used:
 11603 ;;		None
 11604 ;; Tracked objects:
 11605 ;;		On entry : B00/B00
 11606 ;;		On exit  : B00/B00
 11607 ;;		Unchanged: 800/0
 11608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11609 ;;      Params:         0       0       0       0       0
 11610 ;;      Locals:         0       0       0       0       0
 11611 ;;      Temps:          0       0       0       0       0
 11612 ;;      Totals:         0       0       0       0       0
 11613 ;;Total ram usage:        0 bytes
 11614 ;; Hardware stack levels used:    1
 11615 ;; This function calls:
 11616 ;;		Nothing
 11617 ;; This function is called by:
 11618 ;;		_TIME_START_AT
 11619 ;; This function uses a non-reentrant model
 11620 ;;
 11621                           
 11622                           
 11623                           ;psect for function _TIME_CONTINUE
 11624  0FFD                     _TIME_CONTINUE:	
 11625  0FFD                     i1l4566:	
 11626                           ;incstack = 0
 11627 ;; hardware stack exceeded
 11628                           ; Regs used in _TIME_CONTINUE: []
 11629                           
 11630                           
 11631                           ;TIME.c: 33:     COUNT_DECISION = YES;
 11632  0FFD  01CA               	clrf	_COUNT_DECISION^(0+384)
 11633  0FFE  0ACA               	incf	_COUNT_DECISION^(0+384),f
 11634  0FFF  0008               	return
 11635  1000                     __end_of_TIME_CONTINUE:	
 11636                           
 11637                           	psect	intentry
 11638  0004                     __pintentry:	
 11639                           ;incstack = 0
 11640 ;; hardware stack exceeded
 11641                           ; Regs used in _SYS_UPDATE: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11642                           
 11643  0004                     interrupt_function:	
 11644  007E                     saved_w	set	btemp
 11645  0004  00FE               	movwf	btemp
 11646  0005  0E03               	swapf	3,w
 11647  0006  1283               	bcf	3,5	;RP0=0, select bank0
 11648  0007  1303               	bcf	3,6	;RP1=0, select bank0
 11649  0008  00E7               	movwf	??_SYS_UPDATE
 11650  0009  0804               	movf	4,w
 11651  000A  00E8               	movwf	??_SYS_UPDATE+1
 11652  000B  080A               	movf	10,w
 11653  000C  00E9               	movwf	??_SYS_UPDATE+2
 11654  000D  087F               	movf	btemp+1,w
 11655  000E  00EA               	movwf	??_SYS_UPDATE+3
 11656  000F  120A  158A  2805   	ljmp	_SYS_UPDATE
 11657                           
 11658                           	psect	text33
 11659  1F15                     __ptext33:	
 11660 ;; *************** function _TIME_UPDATE *****************
 11661 ;; Defined at:
 11662 ;;		line 43 in file "TIME.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;		None
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;		None
 11667 ;; Return value:  Size  Location     Type
 11668 ;;                  1    wreg      void 
 11669 ;; Registers used:
 11670 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 300/300
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11676 ;;      Params:         0       0       0       0       0
 11677 ;;      Locals:         0       0       0       0       0
 11678 ;;      Temps:          2       0       0       0       0
 11679 ;;      Totals:         2       0       0       0       0
 11680 ;;Total ram usage:        2 bytes
 11681 ;; Hardware stack levels used:    1
 11682 ;; This function calls:
 11683 ;;		Nothing
 11684 ;; This function is called by:
 11685 ;;		_SYS_UPDATE
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           
 11690                           ;psect for function _TIME_UPDATE
 11691  1F15                     _TIME_UPDATE:	
 11692                           
 11693                           ;TIME.c: 45:  if (COUNT_DECISION == YES )
 11694                           
 11695                           ;incstack = 0
 11696                           ; Regs used in _TIME_UPDATE: [wreg-fsr0h+status,2+status,0]
 11697  1F15  1683               	bsf	3,5	;RP0=1, select bank3
 11698  1F16  1703               	bsf	3,6	;RP1=1, select bank3
 11699  1F17  0B4A               	decfsz	_COUNT_DECISION^(0+384),w
 11700  1F18  0008               	return
 11701                           
 11702                           ;TIME.c: 46:  {;TIME.c: 47:   if (TICK_COUNTER >= (1000 / (5)) )
 11703  1F19  3000               	movlw	0
 11704  1F1A  0241               	subwf	(_TICK_COUNTER+1)^(0+384),w
 11705  1F1B  30C8               	movlw	200
 11706  1F1C  1903               	skipnz
 11707  1F1D  0240               	subwf	_TICK_COUNTER^(0+384),w
 11708  1F1E  1C03               	skipc
 11709  1F1F  2F60               	goto	i1l6404
 11710                           
 11711                           ;TIME.c: 48:   {;TIME.c: 49:    TICK_COUNTER = 0;
 11712  1F20  01C0               	clrf	_TICK_COUNTER^(0+384)
 11713  1F21  01C1               	clrf	(_TICK_COUNTER+1)^(0+384)
 11714                           
 11715                           ;TIME.c: 50:    switch (TIME_TICKING_TYPE)
 11716  1F22  2F50               	goto	i1l6402
 11717  1F23                     i1l6362:	
 11718                           
 11719                           ;TIME.c: 53:      if (CURRENT_TIME.SECONDS != 0 )
 11720  1F23  0835               	movf	_CURRENT_TIME^(0+384),w
 11721  1F24  1903               	btfsc	3,2
 11722  1F25  2F28               	goto	i1l6366
 11723                           
 11724                           ;TIME.c: 54:      {;TIME.c: 55:       CURRENT_TIME.SECONDS--;
 11725  1F26  03B5               	decf	_CURRENT_TIME^(0+384),f
 11726                           
 11727                           ;TIME.c: 56:      }
 11728  1F27  0008               	return
 11729  1F28                     i1l6366:	
 11730                           
 11731                           ;TIME.c: 58:      {;TIME.c: 59:       CURRENT_TIME.SECONDS =59;
 11732  1F28  303B               	movlw	59
 11733  1F29  00B5               	movwf	_CURRENT_TIME^(0+384)
 11734                           
 11735                           ;TIME.c: 60:       if (CURRENT_TIME.MINUTES != 0 )
 11736  1F2A  0836               	movf	(_CURRENT_TIME^(0+384)+1),w
 11737  1F2B  1903               	btfsc	3,2
 11738  1F2C  2F2F               	goto	i1l6372
 11739                           
 11740                           ;TIME.c: 61:       {;TIME.c: 62:        CURRENT_TIME.MINUTES --;
 11741  1F2D  03B6               	decf	(_CURRENT_TIME^(0+384)+1),f
 11742                           
 11743                           ;TIME.c: 63:       }
 11744  1F2E  0008               	return
 11745  1F2F                     i1l6372:	
 11746                           
 11747                           ;TIME.c: 65:       {;TIME.c: 66:        CURRENT_TIME.MINUTES=59;
 11748  1F2F  303B               	movlw	59
 11749  1F30  00B6               	movwf	(_CURRENT_TIME^(0+384)+1)
 11750                           
 11751                           ;TIME.c: 67:        if (CURRENT_TIME.HOURS != 0)
 11752  1F31  0837               	movf	(_CURRENT_TIME^(0+384)+2),w
 11753  1F32  1903               	btfsc	3,2
 11754  1F33  2F36               	goto	i1l6378
 11755                           
 11756                           ;TIME.c: 68:        {;TIME.c: 69:         CURRENT_TIME.HOURS--;
 11757  1F34  03B7               	decf	(_CURRENT_TIME^(0+384)+2),f
 11758                           
 11759                           ;TIME.c: 70:        }
 11760  1F35  0008               	return
 11761  1F36                     i1l6378:	
 11762                           
 11763                           ;TIME.c: 72:        {;TIME.c: 73:         COUNT_DECISION = NO;
 11764  1F36  01CA               	clrf	_COUNT_DECISION^(0+384)
 11765  1F37  0008               	return
 11766  1F38                     i1l6380:	
 11767                           
 11768                           ;TIME.c: 79:     if (CURRENT_TIME.SECONDS != 59 )
 11769  1F38  303B               	movlw	59
 11770  1F39  0635               	xorwf	_CURRENT_TIME^(0+384),w
 11771  1F3A  1903               	btfsc	3,2
 11772  1F3B  2F3E               	goto	i1l6384
 11773                           
 11774                           ;TIME.c: 80:     {;TIME.c: 81:      CURRENT_TIME.SECONDS++;
 11775  1F3C  0AB5               	incf	_CURRENT_TIME^(0+384),f
 11776                           
 11777                           ;TIME.c: 82:     }
 11778  1F3D  0008               	return
 11779  1F3E                     i1l6384:	
 11780                           
 11781                           ;TIME.c: 84:     {;TIME.c: 85:      if (CURRENT_TIME.MINUTES != 59 )
 11782  1F3E  303B               	movlw	59
 11783  1F3F  0636               	xorwf	(_CURRENT_TIME^(0+384)+1),w
 11784  1F40  1903               	btfsc	3,2
 11785  1F41  2F48               	goto	i1l6390
 11786                           
 11787                           ;TIME.c: 86:      {;TIME.c: 87:       CURRENT_TIME.MINUTES ++;
 11788  1F42  0AB6               	incf	(_CURRENT_TIME^(0+384)+1),f
 11789  1F43  2F46               	goto	i1l6388
 11790  1F44                     i1l6392:	
 11791                           
 11792                           ;TIME.c: 93:       {;TIME.c: 94:        CURRENT_TIME.HOURS++;
 11793  1F44  0AB7               	incf	(_CURRENT_TIME^(0+384)+2),f
 11794                           
 11795                           ;TIME.c: 95:        CURRENT_TIME.MINUTES=0;
 11796  1F45  01B6               	clrf	(_CURRENT_TIME^(0+384)+1)
 11797  1F46                     i1l6388:	
 11798                           
 11799                           ;TIME.c: 88:       CURRENT_TIME.SECONDS =0;
 11800  1F46  01B5               	clrf	_CURRENT_TIME^(0+384)
 11801                           
 11802                           ;TIME.c: 89:      }
 11803  1F47  0008               	return
 11804  1F48                     i1l6390:	
 11805                           
 11806                           ;TIME.c: 91:      {;TIME.c: 92:       if (CURRENT_TIME.HOURS != 23)
 11807  1F48  3017               	movlw	23
 11808  1F49  0637               	xorwf	(_CURRENT_TIME^(0+384)+2),w
 11809  1F4A  1D03               	btfss	3,2
 11810  1F4B  2F44               	goto	i1l6392
 11811                           
 11812                           ;TIME.c: 99:       {;TIME.c: 100:        CURRENT_TIME.HOURS=0;
 11813  1F4C  01B7               	clrf	(_CURRENT_TIME^(0+384)+2)
 11814                           
 11815                           ;TIME.c: 101:        CURRENT_TIME.MINUTES=0;
 11816  1F4D  01B6               	clrf	(_CURRENT_TIME^(0+384)+1)
 11817                           
 11818                           ;TIME.c: 102:        CURRENT_TIME.SECONDS=0;
 11819  1F4E  01B5               	clrf	_CURRENT_TIME^(0+384)
 11820  1F4F  0008               	return
 11821  1F50                     i1l6402:	
 11822  1F50  0849               	movf	_TIME_TICKING_TYPE^(0+384),w
 11823  1F51  00F0               	movwf	??_TIME_UPDATE
 11824  1F52  01F1               	clrf	??_TIME_UPDATE+1
 11825                           
 11826                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11827                           ; Switch size 1, requested type "speed"
 11828                           ; Number of cases is 1, Range of values is 0 to 0
 11829                           ; switch strategies available:
 11830                           ; Name         Instructions Cycles
 11831                           ; simple_byte            4     3 (average)
 11832                           ; direct_byte           11     8 (fixed)
 11833                           ; jumptable            260     6 (fixed)
 11834                           ;	Chosen strategy is simple_byte
 11835  1F53  0871               	movf	??_TIME_UPDATE+1,w
 11836  1F54  3A00               	xorlw	0	; case 0
 11837  1F55  1903               	skipnz
 11838  1F56  2F58               	goto	i1l6772
 11839  1F57  2F64               	goto	i1l607
 11840  1F58                     i1l6772:	
 11841                           
 11842                           ; Switch size 1, requested type "speed"
 11843                           ; Number of cases is 2, Range of values is 0 to 1
 11844                           ; switch strategies available:
 11845                           ; Name         Instructions Cycles
 11846                           ; simple_byte            7     4 (average)
 11847                           ; direct_byte           14     8 (fixed)
 11848                           ; jumptable            260     6 (fixed)
 11849                           ;	Chosen strategy is simple_byte
 11850  1F58  0870               	movf	??_TIME_UPDATE,w
 11851  1F59  3A00               	xorlw	0	; case 0
 11852  1F5A  1903               	skipnz
 11853  1F5B  2F23               	goto	i1l6362
 11854  1F5C  3A01               	xorlw	1	; case 1
 11855  1F5D  1903               	skipnz
 11856  1F5E  2F38               	goto	i1l6380
 11857  1F5F  2F64               	goto	i1l607
 11858  1F60                     i1l6404:	
 11859                           
 11860                           ;TIME.c: 113:   {;TIME.c: 114:    TICK_COUNTER++ ;
 11861  1F60  0AC0               	incf	_TICK_COUNTER^(0+384),f
 11862  1F61  1903               	skipnz
 11863  1F62  0AC1               	incf	(_TICK_COUNTER+1)^(0+384),f
 11864  1F63  0008               	return
 11865  1F64                     i1l607:	
 11866                           ;TIME.c: 115:   }
 11867                           
 11868  1F64  0008               	return
 11869  1F65                     __end_of_TIME_UPDATE:	
 11870                           
 11871                           	psect	text36
 11872  07E1                     __ptext36:	
 11873 ;; *************** function _MOTOR_UPDATE *****************
 11874 ;; Defined at:
 11875 ;;		line 35 in file "MOTOR.c"
 11876 ;; Parameters:    Size  Location     Type
 11877 ;;		None
 11878 ;; Auto vars:     Size  Location     Type
 11879 ;;		None
 11880 ;; Return value:  Size  Location     Type
 11881 ;;                  1    wreg      void 
 11882 ;; Registers used:
 11883 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 11884 ;; Tracked objects:
 11885 ;;		On entry : 300/0
 11886 ;;		On exit  : 300/0
 11887 ;;		Unchanged: 0/0
 11888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11889 ;;      Params:         0       0       0       0       0
 11890 ;;      Locals:         0       0       0       0       0
 11891 ;;      Temps:          0       0       0       0       0
 11892 ;;      Totals:         0       0       0       0       0
 11893 ;;Total ram usage:        0 bytes
 11894 ;; Hardware stack levels used:    1
 11895 ;; Hardware stack levels required when called:    3
 11896 ;; This function calls:
 11897 ;;		i1_CCP1_PWM_DUTY_CYCLE_LOAD
 11898 ;; This function is called by:
 11899 ;;		_SYS_UPDATE
 11900 ;; This function uses a non-reentrant model
 11901 ;;
 11902                           
 11903                           
 11904                           ;psect for function _MOTOR_UPDATE
 11905  07E1                     _MOTOR_UPDATE:	
 11906                           
 11907                           ;MOTOR.c: 37:     if ((current_angle > DESIRED_SPEED ) & ( DESIRED_SPEED != 0 ))
 11908                           
 11909                           ;incstack = 0
 11910 ;; hardware stack exceeded
 11911                           ; Regs used in _MOTOR_UPDATE: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 11912  07E1  1683               	bsf	3,5	;RP0=1, select bank3
 11913  07E2  1703               	bsf	3,6	;RP1=1, select bank3
 11914  07E3  084C               	movf	_current_angle^(0+384),w
 11915  07E4  0267               	subwf	_DESIRED_SPEED^(0+384),w
 11916  07E5  0867               	movf	_DESIRED_SPEED^(0+384),w
 11917  07E6  1803               	skipnc
 11918  07E7  2FED               	goto	L5
 11919  07E8  1903               	btfsc	3,2
 11920  07E9  2FEC               	goto	i1l6318
 11921                           
 11922                           ;MOTOR.c: 38:     {;MOTOR.c: 39:         current_angle-- ;
 11923  07EA  03CC               	decf	_current_angle^(0+384),f
 11924                           
 11925                           ;MOTOR.c: 40:     }
 11926  07EB  2FF6               	goto	i1l6326
 11927  07EC                     i1l6318:	
 11928  07EC  0867               	movf	_DESIRED_SPEED^(0+384),w
 11929  07ED                     L5:	
 11930  07ED  024C               	subwf	_current_angle^(0+384),w
 11931  07EE  1803               	skipnc
 11932  07EF  2FF2               	goto	i1l6322
 11933                           
 11934                           ;MOTOR.c: 42:     {;MOTOR.c: 43:         current_angle++ ;
 11935  07F0  0ACC               	incf	_current_angle^(0+384),f
 11936                           
 11937                           ;MOTOR.c: 44:     }
 11938  07F1  2FF6               	goto	i1l6326
 11939  07F2                     i1l6322:	
 11940  07F2  0867               	movf	_DESIRED_SPEED^(0+384),w
 11941  07F3  1D03               	btfss	3,2
 11942  07F4  2FF6               	goto	i1l6326
 11943                           
 11944                           ;MOTOR.c: 46:     {;MOTOR.c: 47:         current_angle = 0 ;
 11945  07F5  01CC               	clrf	_current_angle^(0+384)
 11946  07F6                     i1l6326:	
 11947                           ;MOTOR.c: 48:     }
 11948                           
 11949                           
 11950                           ;MOTOR.c: 53:     CCP1_PWM_DUTY_CYCLE_LOAD(current_angle);
 11951  07F6  084C               	movf	_current_angle^(0+384),w
 11952  07F7  1283               	bcf	3,5	;RP0=0, select bank0
 11953  07F8  1303               	bcf	3,6	;RP1=0, select bank0
 11954  07F9  00DC               	movwf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE
 11955  07FA  01DD               	clrf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1
 11956  07FB  120A  118A  2033   	fcall	i1_CCP1_PWM_DUTY_CYCLE_LOAD
 11957  07FE  0008               	return
 11958  07FF                     __end_of_MOTOR_UPDATE:	
 11959                           
 11960                           	psect	text37
 11961  0033                     __ptext37:	
 11962 ;; *************** function i1_CCP1_PWM_DUTY_CYCLE_LOAD *****************
 11963 ;; Defined at:
 11964 ;;		line 186 in file "CCP.c"
 11965 ;; Parameters:    Size  Location     Type
 11966 ;;  DUTY_CYCLE      2   60[BANK0 ] unsigned int 
 11967 ;; Auto vars:     Size  Location     Type
 11968 ;;  CCP1_PWM_DUT    2   69[BANK0 ] unsigned int 
 11969 ;;  CCP1_PWM_DUT    1    0        enum E852
 11970 ;; Return value:  Size  Location     Type
 11971 ;;                  1    wreg      enum E852
 11972 ;; Registers used:
 11973 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 11974 ;; Tracked objects:
 11975 ;;		On entry : 300/0
 11976 ;;		On exit  : 300/0
 11977 ;;		Unchanged: 0/0
 11978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11979 ;;      Params:         0       2       0       0       0
 11980 ;;      Locals:         0       7       0       0       0
 11981 ;;      Temps:          0       2       0       0       0
 11982 ;;      Totals:         0      11       0       0       0
 11983 ;;Total ram usage:       11 bytes
 11984 ;; Hardware stack levels used:    1
 11985 ;; Hardware stack levels required when called:    2
 11986 ;; This function calls:
 11987 ;;		i1___fldiv
 11988 ;;		i1___flmul
 11989 ;;		i1___fltol
 11990 ;;		i1___xxtofl
 11991 ;; This function is called by:
 11992 ;;		_MOTOR_UPDATE
 11993 ;; This function uses a non-reentrant model
 11994 ;;
 11995                           
 11996                           
 11997                           ;psect for function i1_CCP1_PWM_DUTY_CYCLE_LOAD
 11998  0033                     i1_CCP1_PWM_DUTY_CYCLE_LOAD:	
 11999                           
 12000                           ;CCP.c: 189:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 190:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 20 * ((double) (8 * 1000) / 256 ) ));
 12001                           
 12002                           ;incstack = 0
 12003 ;; hardware stack exceeded
 12004                           ; Regs used in i1_CCP1_PWM_DUTY_CYCLE_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
 12005  0033  085C               	movf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE,w
 12006  0034  00F0               	movwf	i1___xxtofl@val
 12007  0035  085D               	movf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1,w
 12008  0036  00F1               	movwf	i1___xxtofl@val+1
 12009  0037  3000               	movlw	0
 12010  0038  01F2               	clrf	i1___xxtofl@val+2
 12011  0039  01F3               	clrf	i1___xxtofl@val+3
 12012  003A  2363               	fcall	i1___xxtofl
 12013  003B  0873               	movf	?i1___xxtofl+3,w
 12014  003C  00A7               	movwf	i1___fldiv@b+3
 12015  003D  0872               	movf	?i1___xxtofl+2,w
 12016  003E  00A6               	movwf	i1___fldiv@b+2
 12017  003F  0871               	movf	?i1___xxtofl+1,w
 12018  0040  00A5               	movwf	i1___fldiv@b+1
 12019  0041  0870               	movf	?i1___xxtofl,w
 12020  0042  00A4               	movwf	i1___fldiv@b
 12021  0043  3043               	movlw	67
 12022  0044  00A3               	movwf	i1___fldiv@a+3
 12023  0045  3034               	movlw	52
 12024  0046  00A2               	movwf	i1___fldiv@a+2
 12025  0047  01A1               	clrf	i1___fldiv@a+1
 12026  0048  01A0               	clrf	i1___fldiv@a
 12027  0049  120A  118A  25CA  120A  118A  	fcall	i1___fldiv
 12028  004E  0823               	movf	?i1___fldiv+3,w
 12029  004F  00C0               	movwf	i1___flmul@a+3
 12030  0050  0822               	movf	?i1___fldiv+2,w
 12031  0051  00BF               	movwf	i1___flmul@a+2
 12032  0052  0821               	movf	?i1___fldiv+1,w
 12033  0053  00BE               	movwf	i1___flmul@a+1
 12034  0054  0820               	movf	?i1___fldiv,w
 12035  0055  00BD               	movwf	i1___flmul@a
 12036  0056  3041               	movlw	65
 12037  0057  00BC               	movwf	i1___flmul@b+3
 12038  0058  30A0               	movlw	160
 12039  0059  00BB               	movwf	i1___flmul@b+2
 12040  005A  01BA               	clrf	i1___flmul@b+1
 12041  005B  01B9               	clrf	i1___flmul@b
 12042  005C  2105  120A  118A   	fcall	i1___flmul
 12043  005F  083C               	movf	?i1___flmul+3,w
 12044  0060  00E4               	movwf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2075+3
 12045  0061  083B               	movf	?i1___flmul+2,w
 12046  0062  00E3               	movwf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2075+2
 12047  0063  083A               	movf	?i1___flmul+1,w
 12048  0064  00E2               	movwf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2075+1
 12049  0065  0839               	movf	?i1___flmul,w
 12050  0066  00E1               	movwf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2075
 12051                           
 12052                           ;CCP.c: 189:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 190:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 20 * ((double) (8 * 1000) / 256 ) ));
 12053  0067  0864               	movf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2075+3,w
 12054  0068  00C0               	movwf	i1___flmul@a+3
 12055  0069  0863               	movf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2075+2,w
 12056  006A  00BF               	movwf	i1___flmul@a+2
 12057  006B  0862               	movf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2075+1,w
 12058  006C  00BE               	movwf	i1___flmul@a+1
 12059  006D  0861               	movf	i1_CCP1_PWM_DUTY_CYCLE_LOAD$2075,w
 12060  006E  00BD               	movwf	i1___flmul@a
 12061  006F  3041               	movlw	65
 12062  0070  00BC               	movwf	i1___flmul@b+3
 12063  0071  30FA               	movlw	250
 12064  0072  00BB               	movwf	i1___flmul@b+2
 12065  0073  01BA               	clrf	i1___flmul@b+1
 12066  0074  01B9               	clrf	i1___flmul@b
 12067  0075  2105  120A  118A   	fcall	i1___flmul
 12068  0078  083C               	movf	?i1___flmul+3,w
 12069  0079  00D5               	movwf	i1___fltol@f1+3
 12070  007A  083B               	movf	?i1___flmul+2,w
 12071  007B  00D4               	movwf	i1___fltol@f1+2
 12072  007C  083A               	movf	?i1___flmul+1,w
 12073  007D  00D3               	movwf	i1___fltol@f1+1
 12074  007E  0839               	movf	?i1___flmul,w
 12075  007F  00D2               	movwf	i1___fltol@f1
 12076  0080  23D5               	fcall	i1___fltol
 12077  0081  0853               	movf	?i1___fltol+1,w
 12078  0082  00E6               	movwf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1
 12079  0083  0852               	movf	?i1___fltol,w
 12080  0084  00E5               	movwf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE
 12081                           
 12082                           ;CCP.c: 191:  (CCPR1L =((tbyte)(DUTY_VALUE >>2))); ( CCP1CON =((CCP1CON & 0b11001111)| (
      +                          (DUTY_VALUE&0x0003)<<4)));
 12083  0085  0866               	movf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1,w
 12084  0086  00DF               	movwf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD+1
 12085  0087  0865               	movf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE,w
 12086  0088  00DE               	movwf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12087  0089  1003               	clrc
 12088  008A  0CDF               	rrf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD+1,f
 12089  008B  0CDE               	rrf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD,f
 12090  008C  1003               	clrc
 12091  008D  0CDF               	rrf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD+1,f
 12092  008E  0CDE               	rrf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD,f
 12093  008F  085E               	movf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD,w
 12094  0090  0095               	movwf	21	;volatile
 12095  0091  0865               	movf	i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE,w
 12096  0092  3903               	andlw	3
 12097  0093  00DE               	movwf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12098  0094  0E5E               	swapf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD,w
 12099  0095  39F0               	andlw	240
 12100  0096  00DE               	movwf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12101  0097  0817               	movf	23,w	;volatile
 12102  0098  39CF               	andlw	207
 12103  0099  045E               	iorwf	??i1_CCP1_PWM_DUTY_CYCLE_LOAD,w
 12104  009A  0097               	movwf	23	;volatile
 12105  009B  0008               	return
 12106  009C                     __end_ofi1_CCP1_PWM_DUTY_CYCLE_LOAD:	
 12107  009C                     __ptext41:	
 12108 ;; *************** function i1_CCP2_PWM_DUTY_CYCLE_LOAD *****************
 12109 ;; Defined at:
 12110 ;;		line 195 in file "CCP.c"
 12111 ;; Parameters:    Size  Location     Type
 12112 ;;  DUTY_CYCLE      2   60[BANK0 ] unsigned int 
 12113 ;; Auto vars:     Size  Location     Type
 12114 ;;  CCP2_PWM_DUT    2   69[BANK0 ] unsigned int 
 12115 ;;  CCP2_PWM_DUT    1    0        enum E852
 12116 ;; Return value:  Size  Location     Type
 12117 ;;                  1    wreg      enum E852
 12118 ;; Registers used:
 12119 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 12120 ;; Tracked objects:
 12121 ;;		On entry : 300/0
 12122 ;;		On exit  : 300/0
 12123 ;;		Unchanged: 0/0
 12124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12125 ;;      Params:         0       2       0       0       0
 12126 ;;      Locals:         0       7       0       0       0
 12127 ;;      Temps:          0       2       0       0       0
 12128 ;;      Totals:         0      11       0       0       0
 12129 ;;Total ram usage:       11 bytes
 12130 ;; Hardware stack levels used:    1
 12131 ;; Hardware stack levels required when called:    2
 12132 ;; This function calls:
 12133 ;;		i1___fldiv
 12134 ;;		i1___flmul
 12135 ;;		i1___fltol
 12136 ;;		i1___xxtofl
 12137 ;; This function is called by:
 12138 ;;		_HEATER_UPDATE
 12139 ;; This function uses a non-reentrant model
 12140 ;;
 12141                           
 12142                           
 12143                           ;psect for function i1_CCP2_PWM_DUTY_CYCLE_LOAD
 12144  009C                     i1_CCP2_PWM_DUTY_CYCLE_LOAD:	
 12145                           
 12146                           ;CCP.c: 198:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 199:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 20 * ((double) (8 * 1000) / 256 ) ));
 12147                           
 12148                           ;incstack = 0
 12149 ;; hardware stack exceeded
 12150                           ; Regs used in i1_CCP2_PWM_DUTY_CYCLE_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
 12151  009C  085C               	movf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE,w
 12152  009D  00F0               	movwf	i1___xxtofl@val
 12153  009E  085D               	movf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1,w
 12154  009F  00F1               	movwf	i1___xxtofl@val+1
 12155  00A0  3000               	movlw	0
 12156  00A1  01F2               	clrf	i1___xxtofl@val+2
 12157  00A2  01F3               	clrf	i1___xxtofl@val+3
 12158  00A3  2363               	fcall	i1___xxtofl
 12159  00A4  0873               	movf	?i1___xxtofl+3,w
 12160  00A5  00A7               	movwf	i1___fldiv@b+3
 12161  00A6  0872               	movf	?i1___xxtofl+2,w
 12162  00A7  00A6               	movwf	i1___fldiv@b+2
 12163  00A8  0871               	movf	?i1___xxtofl+1,w
 12164  00A9  00A5               	movwf	i1___fldiv@b+1
 12165  00AA  0870               	movf	?i1___xxtofl,w
 12166  00AB  00A4               	movwf	i1___fldiv@b
 12167  00AC  3043               	movlw	67
 12168  00AD  00A3               	movwf	i1___fldiv@a+3
 12169  00AE  3034               	movlw	52
 12170  00AF  00A2               	movwf	i1___fldiv@a+2
 12171  00B0  01A1               	clrf	i1___fldiv@a+1
 12172  00B1  01A0               	clrf	i1___fldiv@a
 12173  00B2  120A  118A  25CA  120A  118A  	fcall	i1___fldiv
 12174  00B7  0823               	movf	?i1___fldiv+3,w
 12175  00B8  00C0               	movwf	i1___flmul@a+3
 12176  00B9  0822               	movf	?i1___fldiv+2,w
 12177  00BA  00BF               	movwf	i1___flmul@a+2
 12178  00BB  0821               	movf	?i1___fldiv+1,w
 12179  00BC  00BE               	movwf	i1___flmul@a+1
 12180  00BD  0820               	movf	?i1___fldiv,w
 12181  00BE  00BD               	movwf	i1___flmul@a
 12182  00BF  3041               	movlw	65
 12183  00C0  00BC               	movwf	i1___flmul@b+3
 12184  00C1  30A0               	movlw	160
 12185  00C2  00BB               	movwf	i1___flmul@b+2
 12186  00C3  01BA               	clrf	i1___flmul@b+1
 12187  00C4  01B9               	clrf	i1___flmul@b
 12188  00C5  2105  120A  118A   	fcall	i1___flmul
 12189  00C8  083C               	movf	?i1___flmul+3,w
 12190  00C9  00E4               	movwf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2076+3
 12191  00CA  083B               	movf	?i1___flmul+2,w
 12192  00CB  00E3               	movwf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2076+2
 12193  00CC  083A               	movf	?i1___flmul+1,w
 12194  00CD  00E2               	movwf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2076+1
 12195  00CE  0839               	movf	?i1___flmul,w
 12196  00CF  00E1               	movwf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2076
 12197                           
 12198                           ;CCP.c: 198:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 199:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 20 * ((double) (8 * 1000) / 256 ) ));
 12199  00D0  0864               	movf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2076+3,w
 12200  00D1  00C0               	movwf	i1___flmul@a+3
 12201  00D2  0863               	movf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2076+2,w
 12202  00D3  00BF               	movwf	i1___flmul@a+2
 12203  00D4  0862               	movf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2076+1,w
 12204  00D5  00BE               	movwf	i1___flmul@a+1
 12205  00D6  0861               	movf	i1_CCP2_PWM_DUTY_CYCLE_LOAD$2076,w
 12206  00D7  00BD               	movwf	i1___flmul@a
 12207  00D8  3041               	movlw	65
 12208  00D9  00BC               	movwf	i1___flmul@b+3
 12209  00DA  30FA               	movlw	250
 12210  00DB  00BB               	movwf	i1___flmul@b+2
 12211  00DC  01BA               	clrf	i1___flmul@b+1
 12212  00DD  01B9               	clrf	i1___flmul@b
 12213  00DE  2105  120A  118A   	fcall	i1___flmul
 12214  00E1  083C               	movf	?i1___flmul+3,w
 12215  00E2  00D5               	movwf	i1___fltol@f1+3
 12216  00E3  083B               	movf	?i1___flmul+2,w
 12217  00E4  00D4               	movwf	i1___fltol@f1+2
 12218  00E5  083A               	movf	?i1___flmul+1,w
 12219  00E6  00D3               	movwf	i1___fltol@f1+1
 12220  00E7  0839               	movf	?i1___flmul,w
 12221  00E8  00D2               	movwf	i1___fltol@f1
 12222  00E9  23D5               	fcall	i1___fltol
 12223  00EA  0853               	movf	?i1___fltol+1,w
 12224  00EB  00E6               	movwf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1
 12225  00EC  0852               	movf	?i1___fltol,w
 12226  00ED  00E5               	movwf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE
 12227                           
 12228                           ;CCP.c: 200:  (CCPR2L =((tbyte)(DUTY_VALUE >>2))); ( CCP2CON =((CCP2CON & 0b11001111)| (
      +                          (DUTY_VALUE&0x0003)<<4)));
 12229  00EE  0866               	movf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1,w
 12230  00EF  00DF               	movwf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD+1
 12231  00F0  0865               	movf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE,w
 12232  00F1  00DE               	movwf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD
 12233  00F2  1003               	clrc
 12234  00F3  0CDF               	rrf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD+1,f
 12235  00F4  0CDE               	rrf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD,f
 12236  00F5  1003               	clrc
 12237  00F6  0CDF               	rrf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD+1,f
 12238  00F7  0CDE               	rrf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD,f
 12239  00F8  085E               	movf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD,w
 12240  00F9  009B               	movwf	27	;volatile
 12241  00FA  0865               	movf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE,w
 12242  00FB  3903               	andlw	3
 12243  00FC  00DE               	movwf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD
 12244  00FD  0E5E               	swapf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD,w
 12245  00FE  39F0               	andlw	240
 12246  00FF  00DE               	movwf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD
 12247  0100  081D               	movf	29,w	;volatile
 12248  0101  39CF               	andlw	207
 12249  0102  045E               	iorwf	??i1_CCP2_PWM_DUTY_CYCLE_LOAD,w
 12250  0103  009D               	movwf	29	;volatile
 12251  0104  0008               	return
 12252  0105                     __end_ofi1_CCP2_PWM_DUTY_CYCLE_LOAD:	
 12253  0105                     __ptext44:	
 12254 ;; *************** function i1___flmul *****************
 12255 ;; Defined at:
 12256 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c"
 12257 ;; Parameters:    Size  Location     Type
 12258 ;;  b               4   25[BANK0 ] long 
 12259 ;;  a               4   29[BANK0 ] long 
 12260 ;; Auto vars:     Size  Location     Type
 12261 ;;  __flmul         4   44[BANK0 ] struct .
 12262 ;;  __flmul         4   39[BANK0 ] unsigned long 
 12263 ;;  __flmul         2   48[BANK0 ] struct .
 12264 ;;  __flmul         1   43[BANK0 ] unsigned char 
 12265 ;;  __flmul         1   38[BANK0 ] unsigned char 
 12266 ;;  __flmul         1   37[BANK0 ] unsigned char 
 12267 ;; Return value:  Size  Location     Type
 12268 ;;                  4   25[BANK0 ] unsigned char 
 12269 ;; Registers used:
 12270 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 12271 ;; Tracked objects:
 12272 ;;		On entry : 300/0
 12273 ;;		On exit  : 300/0
 12274 ;;		Unchanged: 0/0
 12275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12276 ;;      Params:         0       8       0       0       0
 12277 ;;      Locals:         0      13       0       0       0
 12278 ;;      Temps:          0       4       0       0       0
 12279 ;;      Totals:         0      25       0       0       0
 12280 ;;Total ram usage:       25 bytes
 12281 ;; Hardware stack levels used:    1
 12282 ;; Hardware stack levels required when called:    1
 12283 ;; This function calls:
 12284 ;;		i1__Umul8_16
 12285 ;; This function is called by:
 12286 ;;		i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12287 ;;		i1_CCP2_PWM_DUTY_CYCLE_LOAD
 12288 ;; This function uses a non-reentrant model
 12289 ;;
 12290                           
 12291                           
 12292                           ;psect for function i1___flmul
 12293  0105                     i1___flmul:	
 12294                           
 12295                           ;incstack = 0
 12296 ;; hardware stack exceeded
 12297                           ; Regs used in i1___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 12298  0105  083C               	movf	i1___flmul@b+3,w
 12299  0106  00C5               	movwf	i1___flmul@sign
 12300  0107  3080               	movlw	128
 12301  0108  05C5               	andwf	i1___flmul@sign,f
 12302  0109  1003               	clrc
 12303  010A  0D3C               	rlf	i1___flmul@b+3,w
 12304  010B  00CB               	movwf	i1___flmul@bexp
 12305  010C  1BBB               	btfsc	i1___flmul@b+2,7
 12306  010D  144B               	bsf	i1___flmul@bexp,0
 12307  010E  084B               	movf	i1___flmul@bexp,w
 12308  010F  1903               	btfsc	3,2
 12309  0110  2919               	goto	i1l1404
 12310  0111  0F4B               	incfsz	i1___flmul@bexp,w
 12311  0112  2917               	goto	i1l1405
 12312  0113  01B9               	clrf	i1___flmul@b
 12313  0114  01BA               	clrf	i1___flmul@b+1
 12314  0115  01BB               	clrf	i1___flmul@b+2
 12315  0116  01BC               	clrf	i1___flmul@b+3
 12316  0117                     i1l1405:	
 12317  0117  17BB               	bsf	i1___flmul@b+2,7
 12318  0118  291D               	goto	i1l5644
 12319  0119                     i1l1404:	
 12320  0119  01B9               	clrf	i1___flmul@b
 12321  011A  01BA               	clrf	i1___flmul@b+1
 12322  011B  01BB               	clrf	i1___flmul@b+2
 12323  011C  01BC               	clrf	i1___flmul@b+3
 12324  011D                     i1l5644:	
 12325  011D  0840               	movf	i1___flmul@a+3,w
 12326  011E  3980               	andlw	128
 12327  011F  06C5               	xorwf	i1___flmul@sign,f
 12328  0120  1003               	clrc
 12329  0121  0D40               	rlf	i1___flmul@a+3,w
 12330  0122  00C6               	movwf	i1___flmul@aexp
 12331  0123  1BBF               	btfsc	i1___flmul@a+2,7
 12332  0124  1446               	bsf	i1___flmul@aexp,0
 12333  0125  0846               	movf	i1___flmul@aexp,w
 12334  0126  1903               	btfsc	3,2
 12335  0127  2930               	goto	i1l1408
 12336  0128  0F46               	incfsz	i1___flmul@aexp,w
 12337  0129  292E               	goto	i1l1409
 12338  012A  01BD               	clrf	i1___flmul@a
 12339  012B  01BE               	clrf	i1___flmul@a+1
 12340  012C  01BF               	clrf	i1___flmul@a+2
 12341  012D  01C0               	clrf	i1___flmul@a+3
 12342  012E                     i1l1409:	
 12343  012E  17BF               	bsf	i1___flmul@a+2,7
 12344  012F  2934               	goto	i1l5656
 12345  0130                     i1l1408:	
 12346  0130  01BD               	clrf	i1___flmul@a
 12347  0131  01BE               	clrf	i1___flmul@a+1
 12348  0132  01BF               	clrf	i1___flmul@a+2
 12349  0133  01C0               	clrf	i1___flmul@a+3
 12350  0134                     i1l5656:	
 12351  0134  0846               	movf	i1___flmul@aexp,w
 12352  0135  1D03               	btfss	3,2
 12353  0136  084B               	movf	i1___flmul@bexp,w
 12354  0137  1D03               	btfss	3,2
 12355  0138  293E               	goto	i1l5660
 12356  0139  01B9               	clrf	?i1___flmul
 12357  013A  01BA               	clrf	?i1___flmul+1
 12358  013B  01BB               	clrf	?i1___flmul+2
 12359  013C  01BC               	clrf	?i1___flmul+3
 12360  013D  0008               	return
 12361  013E                     i1l5660:	
 12362  013E  0839               	movf	i1___flmul@b,w
 12363  013F  00F0               	movwf	i1__Umul8_16@multiplicand
 12364  0140  083F               	movf	i1___flmul@a+2,w
 12365  0141  2303  120A  118A   	fcall	i1__Umul8_16
 12366  0144  0871               	movf	?i1__Umul8_16+1,w
 12367  0145  00D1               	movwf	i1___flmul@temp+1
 12368  0146  0870               	movf	?i1__Umul8_16,w
 12369  0147  00D0               	movwf	i1___flmul@temp
 12370  0148  00C7               	movwf	i1___flmul@grs
 12371  0149  01C8               	clrf	i1___flmul@grs+1
 12372  014A  01C9               	clrf	i1___flmul@grs+2
 12373  014B  01CA               	clrf	i1___flmul@grs+3
 12374  014C  0851               	movf	i1___flmul@temp+1,w
 12375  014D  00CC               	movwf	i1___flmul@prod
 12376  014E  01CD               	clrf	i1___flmul@prod+1
 12377  014F  01CE               	clrf	i1___flmul@prod+2
 12378  0150  01CF               	clrf	i1___flmul@prod+3
 12379  0151  083A               	movf	i1___flmul@b+1,w
 12380  0152  00F0               	movwf	i1__Umul8_16@multiplicand
 12381  0153  083E               	movf	i1___flmul@a+1,w
 12382  0154  2303  120A  118A   	fcall	i1__Umul8_16
 12383  0157  0871               	movf	?i1__Umul8_16+1,w
 12384  0158  00D1               	movwf	i1___flmul@temp+1
 12385  0159  0870               	movf	?i1__Umul8_16,w
 12386  015A  00D0               	movwf	i1___flmul@temp
 12387  015B  07C7               	addwf	i1___flmul@grs,f
 12388  015C  3001               	movlw	1
 12389  015D  1803               	skipnc
 12390  015E  07C8               	addwf	i1___flmul@grs+1,f
 12391  015F  1803               	skipnc
 12392  0160  07C9               	addwf	i1___flmul@grs+2,f
 12393  0161  1803               	skipnc
 12394  0162  07CA               	addwf	i1___flmul@grs+3,f
 12395  0163  0851               	movf	i1___flmul@temp+1,w
 12396  0164  07CC               	addwf	i1___flmul@prod,f
 12397  0165  3001               	movlw	1
 12398  0166  1803               	skipnc
 12399  0167  07CD               	addwf	i1___flmul@prod+1,f
 12400  0168  1803               	skipnc
 12401  0169  07CE               	addwf	i1___flmul@prod+2,f
 12402  016A  1803               	skipnc
 12403  016B  07CF               	addwf	i1___flmul@prod+3,f
 12404  016C  083B               	movf	i1___flmul@b+2,w
 12405  016D  00F0               	movwf	i1__Umul8_16@multiplicand
 12406  016E  083D               	movf	i1___flmul@a,w
 12407  016F  2303  120A  118A   	fcall	i1__Umul8_16
 12408  0172  0871               	movf	?i1__Umul8_16+1,w
 12409  0173  00D1               	movwf	i1___flmul@temp+1
 12410  0174  0870               	movf	?i1__Umul8_16,w
 12411  0175  00D0               	movwf	i1___flmul@temp
 12412  0176  07C7               	addwf	i1___flmul@grs,f
 12413  0177  3001               	movlw	1
 12414  0178  1803               	skipnc
 12415  0179  07C8               	addwf	i1___flmul@grs+1,f
 12416  017A  1803               	skipnc
 12417  017B  07C9               	addwf	i1___flmul@grs+2,f
 12418  017C  1803               	skipnc
 12419  017D  07CA               	addwf	i1___flmul@grs+3,f
 12420  017E  0851               	movf	i1___flmul@temp+1,w
 12421  017F  07CC               	addwf	i1___flmul@prod,f
 12422  0180  3001               	movlw	1
 12423  0181  1803               	skipnc
 12424  0182  07CD               	addwf	i1___flmul@prod+1,f
 12425  0183  1803               	skipnc
 12426  0184  07CE               	addwf	i1___flmul@prod+2,f
 12427  0185  1803               	skipnc
 12428  0186  07CF               	addwf	i1___flmul@prod+3,f
 12429  0187  0849               	movf	i1___flmul@grs+2,w
 12430  0188  00CA               	movwf	i1___flmul@grs+3
 12431  0189  0848               	movf	i1___flmul@grs+1,w
 12432  018A  00C9               	movwf	i1___flmul@grs+2
 12433  018B  0847               	movf	i1___flmul@grs,w
 12434  018C  00C8               	movwf	i1___flmul@grs+1
 12435  018D  01C7               	clrf	i1___flmul@grs
 12436  018E  083A               	movf	i1___flmul@b+1,w
 12437  018F  00F0               	movwf	i1__Umul8_16@multiplicand
 12438  0190  083D               	movf	i1___flmul@a,w
 12439  0191  2303  120A  118A   	fcall	i1__Umul8_16
 12440  0194  0871               	movf	?i1__Umul8_16+1,w
 12441  0195  00D1               	movwf	i1___flmul@temp+1
 12442  0196  0870               	movf	?i1__Umul8_16,w
 12443  0197  00D0               	movwf	i1___flmul@temp
 12444  0198  00C1               	movwf	??i1___flmul
 12445  0199  0851               	movf	i1___flmul@temp+1,w
 12446  019A  00C2               	movwf	??i1___flmul+1
 12447  019B  01C3               	clrf	??i1___flmul+2
 12448  019C  01C4               	clrf	??i1___flmul+3
 12449  019D  0841               	movf	??i1___flmul,w
 12450  019E  07C7               	addwf	i1___flmul@grs,f
 12451  019F  0842               	movf	??i1___flmul+1,w
 12452  01A0  1103               	clrz
 12453  01A1  1803               	skipnc
 12454  01A2  3E01               	addlw	1
 12455  01A3  1D03               	btfss	3,2
 12456  01A4  07C8               	addwf	i1___flmul@grs+1,f
 12457  01A5  0843               	movf	??i1___flmul+2,w
 12458  01A6  1103               	clrz
 12459  01A7  1803               	skipnc
 12460  01A8  3E01               	addlw	1
 12461  01A9  1D03               	btfss	3,2
 12462  01AA  07C9               	addwf	i1___flmul@grs+2,f
 12463  01AB  0844               	movf	??i1___flmul+3,w
 12464  01AC  1103               	clrz
 12465  01AD  1803               	skipnc
 12466  01AE  3E01               	addlw	1
 12467  01AF  1D03               	btfss	3,2
 12468  01B0  07CA               	addwf	i1___flmul@grs+3,f
 12469  01B1  0839               	movf	i1___flmul@b,w
 12470  01B2  00F0               	movwf	i1__Umul8_16@multiplicand
 12471  01B3  083E               	movf	i1___flmul@a+1,w
 12472  01B4  2303  120A  118A   	fcall	i1__Umul8_16
 12473  01B7  0871               	movf	?i1__Umul8_16+1,w
 12474  01B8  00D1               	movwf	i1___flmul@temp+1
 12475  01B9  0870               	movf	?i1__Umul8_16,w
 12476  01BA  00D0               	movwf	i1___flmul@temp
 12477  01BB  00C1               	movwf	??i1___flmul
 12478  01BC  0851               	movf	i1___flmul@temp+1,w
 12479  01BD  00C2               	movwf	??i1___flmul+1
 12480  01BE  01C3               	clrf	??i1___flmul+2
 12481  01BF  01C4               	clrf	??i1___flmul+3
 12482  01C0  0841               	movf	??i1___flmul,w
 12483  01C1  07C7               	addwf	i1___flmul@grs,f
 12484  01C2  0842               	movf	??i1___flmul+1,w
 12485  01C3  1103               	clrz
 12486  01C4  1803               	skipnc
 12487  01C5  3E01               	addlw	1
 12488  01C6  1D03               	btfss	3,2
 12489  01C7  07C8               	addwf	i1___flmul@grs+1,f
 12490  01C8  0843               	movf	??i1___flmul+2,w
 12491  01C9  1103               	clrz
 12492  01CA  1803               	skipnc
 12493  01CB  3E01               	addlw	1
 12494  01CC  1D03               	btfss	3,2
 12495  01CD  07C9               	addwf	i1___flmul@grs+2,f
 12496  01CE  0844               	movf	??i1___flmul+3,w
 12497  01CF  1103               	clrz
 12498  01D0  1803               	skipnc
 12499  01D1  3E01               	addlw	1
 12500  01D2  1D03               	btfss	3,2
 12501  01D3  07CA               	addwf	i1___flmul@grs+3,f
 12502  01D4  0849               	movf	i1___flmul@grs+2,w
 12503  01D5  00CA               	movwf	i1___flmul@grs+3
 12504  01D6  0848               	movf	i1___flmul@grs+1,w
 12505  01D7  00C9               	movwf	i1___flmul@grs+2
 12506  01D8  0847               	movf	i1___flmul@grs,w
 12507  01D9  00C8               	movwf	i1___flmul@grs+1
 12508  01DA  01C7               	clrf	i1___flmul@grs
 12509  01DB  0839               	movf	i1___flmul@b,w
 12510  01DC  00F0               	movwf	i1__Umul8_16@multiplicand
 12511  01DD  083D               	movf	i1___flmul@a,w
 12512  01DE  2303  120A  118A   	fcall	i1__Umul8_16
 12513  01E1  0871               	movf	?i1__Umul8_16+1,w
 12514  01E2  00D1               	movwf	i1___flmul@temp+1
 12515  01E3  0870               	movf	?i1__Umul8_16,w
 12516  01E4  00D0               	movwf	i1___flmul@temp
 12517  01E5  00C1               	movwf	??i1___flmul
 12518  01E6  0851               	movf	i1___flmul@temp+1,w
 12519  01E7  00C2               	movwf	??i1___flmul+1
 12520  01E8  01C3               	clrf	??i1___flmul+2
 12521  01E9  01C4               	clrf	??i1___flmul+3
 12522  01EA  0841               	movf	??i1___flmul,w
 12523  01EB  07C7               	addwf	i1___flmul@grs,f
 12524  01EC  0842               	movf	??i1___flmul+1,w
 12525  01ED  1103               	clrz
 12526  01EE  1803               	skipnc
 12527  01EF  3E01               	addlw	1
 12528  01F0  1D03               	btfss	3,2
 12529  01F1  07C8               	addwf	i1___flmul@grs+1,f
 12530  01F2  0843               	movf	??i1___flmul+2,w
 12531  01F3  1103               	clrz
 12532  01F4  1803               	skipnc
 12533  01F5  3E01               	addlw	1
 12534  01F6  1D03               	btfss	3,2
 12535  01F7  07C9               	addwf	i1___flmul@grs+2,f
 12536  01F8  0844               	movf	??i1___flmul+3,w
 12537  01F9  1103               	clrz
 12538  01FA  1803               	skipnc
 12539  01FB  3E01               	addlw	1
 12540  01FC  1D03               	btfss	3,2
 12541  01FD  07CA               	addwf	i1___flmul@grs+3,f
 12542  01FE  083A               	movf	i1___flmul@b+1,w
 12543  01FF  00F0               	movwf	i1__Umul8_16@multiplicand
 12544  0200  083F               	movf	i1___flmul@a+2,w
 12545  0201  2303  120A  118A   	fcall	i1__Umul8_16
 12546  0204  0871               	movf	?i1__Umul8_16+1,w
 12547  0205  00D1               	movwf	i1___flmul@temp+1
 12548  0206  0870               	movf	?i1__Umul8_16,w
 12549  0207  00D0               	movwf	i1___flmul@temp
 12550  0208  00C1               	movwf	??i1___flmul
 12551  0209  0851               	movf	i1___flmul@temp+1,w
 12552  020A  00C2               	movwf	??i1___flmul+1
 12553  020B  01C3               	clrf	??i1___flmul+2
 12554  020C  01C4               	clrf	??i1___flmul+3
 12555  020D  0841               	movf	??i1___flmul,w
 12556  020E  07CC               	addwf	i1___flmul@prod,f
 12557  020F  0842               	movf	??i1___flmul+1,w
 12558  0210  1103               	clrz
 12559  0211  1803               	skipnc
 12560  0212  3E01               	addlw	1
 12561  0213  1D03               	btfss	3,2
 12562  0214  07CD               	addwf	i1___flmul@prod+1,f
 12563  0215  0843               	movf	??i1___flmul+2,w
 12564  0216  1103               	clrz
 12565  0217  1803               	skipnc
 12566  0218  3E01               	addlw	1
 12567  0219  1D03               	btfss	3,2
 12568  021A  07CE               	addwf	i1___flmul@prod+2,f
 12569  021B  0844               	movf	??i1___flmul+3,w
 12570  021C  1103               	clrz
 12571  021D  1803               	skipnc
 12572  021E  3E01               	addlw	1
 12573  021F  1D03               	btfss	3,2
 12574  0220  07CF               	addwf	i1___flmul@prod+3,f
 12575  0221  083B               	movf	i1___flmul@b+2,w
 12576  0222  00F0               	movwf	i1__Umul8_16@multiplicand
 12577  0223  083E               	movf	i1___flmul@a+1,w
 12578  0224  2303  120A  118A   	fcall	i1__Umul8_16
 12579  0227  0871               	movf	?i1__Umul8_16+1,w
 12580  0228  00D1               	movwf	i1___flmul@temp+1
 12581  0229  0870               	movf	?i1__Umul8_16,w
 12582  022A  00D0               	movwf	i1___flmul@temp
 12583  022B  00C1               	movwf	??i1___flmul
 12584  022C  0851               	movf	i1___flmul@temp+1,w
 12585  022D  00C2               	movwf	??i1___flmul+1
 12586  022E  01C3               	clrf	??i1___flmul+2
 12587  022F  01C4               	clrf	??i1___flmul+3
 12588  0230  0841               	movf	??i1___flmul,w
 12589  0231  07CC               	addwf	i1___flmul@prod,f
 12590  0232  0842               	movf	??i1___flmul+1,w
 12591  0233  1103               	clrz
 12592  0234  1803               	skipnc
 12593  0235  3E01               	addlw	1
 12594  0236  1D03               	btfss	3,2
 12595  0237  07CD               	addwf	i1___flmul@prod+1,f
 12596  0238  0843               	movf	??i1___flmul+2,w
 12597  0239  1103               	clrz
 12598  023A  1803               	skipnc
 12599  023B  3E01               	addlw	1
 12600  023C  1D03               	btfss	3,2
 12601  023D  07CE               	addwf	i1___flmul@prod+2,f
 12602  023E  0844               	movf	??i1___flmul+3,w
 12603  023F  1103               	clrz
 12604  0240  1803               	skipnc
 12605  0241  3E01               	addlw	1
 12606  0242  1D03               	btfss	3,2
 12607  0243  07CF               	addwf	i1___flmul@prod+3,f
 12608  0244  083B               	movf	i1___flmul@b+2,w
 12609  0245  00F0               	movwf	i1__Umul8_16@multiplicand
 12610  0246  083F               	movf	i1___flmul@a+2,w
 12611  0247  2303  120A  118A   	fcall	i1__Umul8_16
 12612  024A  0871               	movf	?i1__Umul8_16+1,w
 12613  024B  00D1               	movwf	i1___flmul@temp+1
 12614  024C  0870               	movf	?i1__Umul8_16,w
 12615  024D  00D0               	movwf	i1___flmul@temp
 12616  024E  00C1               	movwf	??i1___flmul
 12617  024F  0851               	movf	i1___flmul@temp+1,w
 12618  0250  00C2               	movwf	??i1___flmul+1
 12619  0251  01C3               	clrf	??i1___flmul+2
 12620  0252  01C4               	clrf	??i1___flmul+3
 12621  0253  0843               	movf	??i1___flmul+2,w
 12622  0254  00C4               	movwf	??i1___flmul+3
 12623  0255  0842               	movf	??i1___flmul+1,w
 12624  0256  00C3               	movwf	??i1___flmul+2
 12625  0257  0841               	movf	??i1___flmul,w
 12626  0258  00C2               	movwf	??i1___flmul+1
 12627  0259  01C1               	clrf	??i1___flmul
 12628  025A  0841               	movf	??i1___flmul,w
 12629  025B  07CC               	addwf	i1___flmul@prod,f
 12630  025C  0842               	movf	??i1___flmul+1,w
 12631  025D  1103               	clrz
 12632  025E  1803               	skipnc
 12633  025F  3E01               	addlw	1
 12634  0260  1D03               	btfss	3,2
 12635  0261  07CD               	addwf	i1___flmul@prod+1,f
 12636  0262  0843               	movf	??i1___flmul+2,w
 12637  0263  1103               	clrz
 12638  0264  1803               	skipnc
 12639  0265  3E01               	addlw	1
 12640  0266  1D03               	btfss	3,2
 12641  0267  07CE               	addwf	i1___flmul@prod+2,f
 12642  0268  0844               	movf	??i1___flmul+3,w
 12643  0269  1103               	clrz
 12644  026A  1803               	skipnc
 12645  026B  3E01               	addlw	1
 12646  026C  1D03               	btfss	3,2
 12647  026D  07CF               	addwf	i1___flmul@prod+3,f
 12648  026E  084A               	movf	i1___flmul@grs+3,w
 12649  026F  07CC               	addwf	i1___flmul@prod,f
 12650  0270  3001               	movlw	1
 12651  0271  1803               	skipnc
 12652  0272  07CD               	addwf	i1___flmul@prod+1,f
 12653  0273  1803               	skipnc
 12654  0274  07CE               	addwf	i1___flmul@prod+2,f
 12655  0275  1803               	skipnc
 12656  0276  07CF               	addwf	i1___flmul@prod+3,f
 12657  0277  0849               	movf	i1___flmul@grs+2,w
 12658  0278  00CA               	movwf	i1___flmul@grs+3
 12659  0279  0848               	movf	i1___flmul@grs+1,w
 12660  027A  00C9               	movwf	i1___flmul@grs+2
 12661  027B  0847               	movf	i1___flmul@grs,w
 12662  027C  00C8               	movwf	i1___flmul@grs+1
 12663  027D  01C7               	clrf	i1___flmul@grs
 12664  027E  084B               	movf	i1___flmul@bexp,w
 12665  027F  00D0               	movwf	i1___flmul@temp
 12666  0280  01D1               	clrf	i1___flmul@temp+1
 12667  0281  0846               	movf	i1___flmul@aexp,w
 12668  0282  07D0               	addwf	i1___flmul@temp,f
 12669  0283  1803               	skipnc
 12670  0284  0AD1               	incf	i1___flmul@temp+1,f
 12671  0285  3082               	movlw	-126
 12672  0286                     L7:	
 12673  0286  07D0               	addwf	i1___flmul@temp,f
 12674  0287  1C03               	skipc
 12675  0288  03D1               	decf	i1___flmul@temp+1,f
 12676  0289  1BCE               	btfsc	i1___flmul@prod+2,7
 12677  028A  2A99               	goto	i1l5708
 12678  028B  1003               	clrc
 12679  028C  0DCC               	rlf	i1___flmul@prod,f
 12680  028D  0DCD               	rlf	i1___flmul@prod+1,f
 12681  028E  0DCE               	rlf	i1___flmul@prod+2,f
 12682  028F  0DCF               	rlf	i1___flmul@prod+3,f
 12683  0290  1BCA               	btfsc	i1___flmul@grs+3,7
 12684  0291  144C               	bsf	i1___flmul@prod,0
 12685  0292  30FF               	movlw	-1
 12686  0293  1003               	clrc
 12687  0294  0DC7               	rlf	i1___flmul@grs,f
 12688  0295  0DC8               	rlf	i1___flmul@grs+1,f
 12689  0296  0DC9               	rlf	i1___flmul@grs+2,f
 12690  0297  0DCA               	rlf	i1___flmul@grs+3,f
 12691  0298  2A86               	goto	L7
 12692  0299                     i1l5708:	
 12693  0299  01C6               	clrf	i1___flmul@aexp
 12694  029A  1FCA               	btfss	i1___flmul@grs+3,7
 12695  029B  2AAE               	goto	i1l5718
 12696  029C  0847               	movf	i1___flmul@grs,w
 12697  029D  00C1               	movwf	??i1___flmul
 12698  029E  0848               	movf	i1___flmul@grs+1,w
 12699  029F  00C2               	movwf	??i1___flmul+1
 12700  02A0  0849               	movf	i1___flmul@grs+2,w
 12701  02A1  00C3               	movwf	??i1___flmul+2
 12702  02A2  307F               	movlw	127
 12703  02A3  054A               	andwf	i1___flmul@grs+3,w
 12704  02A4  00C4               	movwf	??i1___flmul+3
 12705  02A5  0443               	iorwf	??i1___flmul+2,w
 12706  02A6  0442               	iorwf	??i1___flmul+1,w
 12707  02A7  0441               	iorwf	??i1___flmul,w
 12708  02A8  1903               	skipnz
 12709  02A9  184C               	btfsc	i1___flmul@prod,0
 12710  02AA  2AAC               	goto	i1l5714
 12711  02AB  2AAE               	goto	i1l5718
 12712  02AC                     i1l5714:	
 12713  02AC  01C6               	clrf	i1___flmul@aexp
 12714  02AD  0AC6               	incf	i1___flmul@aexp,f
 12715  02AE                     i1l5718:	
 12716  02AE  0846               	movf	i1___flmul@aexp,w
 12717  02AF  1903               	btfsc	3,2
 12718  02B0  2AC2               	goto	i1l5728
 12719  02B1  0ACC               	incf	i1___flmul@prod,f
 12720  02B2  1903               	skipnz
 12721  02B3  0ACD               	incf	i1___flmul@prod+1,f
 12722  02B4  1903               	skipnz
 12723  02B5  0ACE               	incf	i1___flmul@prod+2,f
 12724  02B6  1903               	skipnz
 12725  02B7  0ACF               	incf	i1___flmul@prod+3,f
 12726  02B8  1C4F               	btfss	i1___flmul@prod+3,0
 12727  02B9  2AC2               	goto	i1l5728
 12728  02BA  0D4F               	rlf	i1___flmul@prod+3,w
 12729  02BB  0CCF               	rrf	i1___flmul@prod+3,f
 12730  02BC  0CCE               	rrf	i1___flmul@prod+2,f
 12731  02BD  0CCD               	rrf	i1___flmul@prod+1,f
 12732  02BE  0CCC               	rrf	i1___flmul@prod,f
 12733  02BF  0AD0               	incf	i1___flmul@temp,f
 12734  02C0  1903               	skipnz
 12735  02C1  0AD1               	incf	i1___flmul@temp+1,f
 12736  02C2                     i1l5728:	
 12737  02C2  0851               	movf	i1___flmul@temp+1,w
 12738  02C3  3A80               	xorlw	128
 12739  02C4  00FF               	movwf	127
 12740  02C5  3080               	movlw	128
 12741  02C6  027F               	subwf	127,w
 12742  02C7  1D03               	skipz
 12743  02C8  2ACB               	goto	u590_25
 12744  02C9  30FF               	movlw	255
 12745  02CA  0250               	subwf	i1___flmul@temp,w
 12746  02CB                     u590_25:	
 12747  02CB  1C03               	skipc
 12748  02CC  2AD6               	goto	i1l5732
 12749  02CD  307F               	movlw	127
 12750  02CE  1283               	bcf	3,5	;RP0=0, select bank0
 12751  02CF  1303               	bcf	3,6	;RP1=0, select bank0
 12752  02D0  00CF               	movwf	i1___flmul@prod+3
 12753  02D1  3080               	movlw	128
 12754  02D2  00CE               	movwf	i1___flmul@prod+2
 12755  02D3  01CD               	clrf	i1___flmul@prod+1
 12756  02D4  01CC               	clrf	i1___flmul@prod
 12757  02D5  2AF8               	goto	i1l1426
 12758  02D6                     i1l5732:	
 12759  02D6  1283               	bcf	3,5	;RP0=0, select bank0
 12760  02D7  1303               	bcf	3,6	;RP1=0, select bank0
 12761  02D8  0851               	movf	i1___flmul@temp+1,w
 12762  02D9  3A80               	xorlw	128
 12763  02DA  00FF               	movwf	127
 12764  02DB  3080               	movlw	128
 12765  02DC  027F               	subwf	127,w
 12766  02DD  1D03               	skipz
 12767  02DE  2AE1               	goto	u591_25
 12768  02DF  3001               	movlw	1
 12769  02E0  0250               	subwf	i1___flmul@temp,w
 12770  02E1                     u591_25:	
 12771  02E1  1803               	skipnc
 12772  02E2  2AEB               	goto	i1l5738
 12773  02E3  1283               	bcf	3,5	;RP0=0, select bank0
 12774  02E4  1303               	bcf	3,6	;RP1=0, select bank0
 12775  02E5  01CC               	clrf	i1___flmul@prod
 12776  02E6  01CD               	clrf	i1___flmul@prod+1
 12777  02E7  01CE               	clrf	i1___flmul@prod+2
 12778  02E8  01CF               	clrf	i1___flmul@prod+3
 12779  02E9  01C5               	clrf	i1___flmul@sign
 12780  02EA  2AF8               	goto	i1l1426
 12781  02EB                     i1l5738:	
 12782  02EB  1283               	bcf	3,5	;RP0=0, select bank0
 12783  02EC  1303               	bcf	3,6	;RP1=0, select bank0
 12784  02ED  0850               	movf	i1___flmul@temp,w
 12785  02EE  00CB               	movwf	i1___flmul@bexp
 12786  02EF  307F               	movlw	127
 12787  02F0  05CE               	andwf	i1___flmul@prod+2,f
 12788  02F1  3000               	movlw	0
 12789  02F2  01CF               	clrf	i1___flmul@prod+3
 12790  02F3  184B               	btfsc	i1___flmul@bexp,0
 12791  02F4  17CE               	bsf	i1___flmul@prod+2,7
 12792  02F5  1003               	clrc
 12793  02F6  0C4B               	rrf	i1___flmul@bexp,w
 12794  02F7  00CF               	movwf	i1___flmul@prod+3
 12795  02F8                     i1l1426:	
 12796  02F8  0845               	movf	i1___flmul@sign,w
 12797  02F9  04CF               	iorwf	i1___flmul@prod+3,f
 12798  02FA  084F               	movf	i1___flmul@prod+3,w
 12799  02FB  00BC               	movwf	?i1___flmul+3
 12800  02FC  084E               	movf	i1___flmul@prod+2,w
 12801  02FD  00BB               	movwf	?i1___flmul+2
 12802  02FE  084D               	movf	i1___flmul@prod+1,w
 12803  02FF  00BA               	movwf	?i1___flmul+1
 12804  0300  084C               	movf	i1___flmul@prod,w
 12805  0301  00B9               	movwf	?i1___flmul
 12806  0302  0008               	return
 12807  0303                     __end_ofi1___flmul:	
 12808  0303                     __ptext45:	
 12809 ;; *************** function i1__Umul8_16 *****************
 12810 ;; Defined at:
 12811 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c"
 12812 ;; Parameters:    Size  Location     Type
 12813 ;;  multiplier      1    wreg     unsigned char 
 12814 ;;  multiplicand    1    0[COMMON] unsigned char 
 12815 ;; Auto vars:     Size  Location     Type
 12816 ;;  multiplier      1    5[COMMON] unsigned char 
 12817 ;;  _Umul8_16       2    6[COMMON] unsigned int 
 12818 ;;  _Umul8_16       2    3[COMMON] unsigned int 
 12819 ;; Return value:  Size  Location     Type
 12820 ;;                  2    0[COMMON] unsigned int 
 12821 ;; Registers used:
 12822 ;;		wreg, status,2, status,0
 12823 ;; Tracked objects:
 12824 ;;		On entry : 300/0
 12825 ;;		On exit  : 300/0
 12826 ;;		Unchanged: 300/0
 12827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12828 ;;      Params:         3       0       0       0       0
 12829 ;;      Locals:         5       0       0       0       0
 12830 ;;      Temps:          0       0       0       0       0
 12831 ;;      Totals:         8       0       0       0       0
 12832 ;;Total ram usage:        8 bytes
 12833 ;; Hardware stack levels used:    1
 12834 ;; This function calls:
 12835 ;;		Nothing
 12836 ;; This function is called by:
 12837 ;;		i1___flmul
 12838 ;; This function uses a non-reentrant model
 12839 ;;
 12840                           
 12841                           
 12842                           ;psect for function i1__Umul8_16
 12843  0303                     i1__Umul8_16:	
 12844                           
 12845                           ;incstack = 0
 12846 ;; hardware stack exceeded
 12847                           ; Regs used in i1__Umul8_16: [wreg+status,2+status,0]
 12848                           ;i1__Umul8_16@multiplier stored from wreg
 12849  0303  00F5               	movwf	i1__Umul8_16@multiplier
 12850  0304  01F3               	clrf	i1__Umul8_16@product
 12851  0305  01F4               	clrf	i1__Umul8_16@product+1
 12852  0306  0870               	movf	i1__Umul8_16@multiplicand,w
 12853  0307  00F6               	movwf	i1__Umul8_16@word_mpld
 12854  0308  01F7               	clrf	i1__Umul8_16@word_mpld+1
 12855  0309  1C75               	btfss	i1__Umul8_16@multiplier,0
 12856  030A  2B11               	goto	i1l4670
 12857  030B  0876               	movf	i1__Umul8_16@word_mpld,w
 12858  030C  07F3               	addwf	i1__Umul8_16@product,f
 12859  030D  1803               	skipnc
 12860  030E  0AF4               	incf	i1__Umul8_16@product+1,f
 12861  030F  0877               	movf	i1__Umul8_16@word_mpld+1,w
 12862  0310  07F4               	addwf	i1__Umul8_16@product+1,f
 12863  0311                     i1l4670:	
 12864  0311  1003               	clrc
 12865  0312  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 12866  0313  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 12867  0314  1CF5               	btfss	i1__Umul8_16@multiplier,1
 12868  0315  2B1C               	goto	i1l4676
 12869  0316  0876               	movf	i1__Umul8_16@word_mpld,w
 12870  0317  07F3               	addwf	i1__Umul8_16@product,f
 12871  0318  1803               	skipnc
 12872  0319  0AF4               	incf	i1__Umul8_16@product+1,f
 12873  031A  0877               	movf	i1__Umul8_16@word_mpld+1,w
 12874  031B  07F4               	addwf	i1__Umul8_16@product+1,f
 12875  031C                     i1l4676:	
 12876  031C  1003               	clrc
 12877  031D  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 12878  031E  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 12879  031F  1D75               	btfss	i1__Umul8_16@multiplier,2
 12880  0320  2B27               	goto	i1l4682
 12881  0321  0876               	movf	i1__Umul8_16@word_mpld,w
 12882  0322  07F3               	addwf	i1__Umul8_16@product,f
 12883  0323  1803               	skipnc
 12884  0324  0AF4               	incf	i1__Umul8_16@product+1,f
 12885  0325  0877               	movf	i1__Umul8_16@word_mpld+1,w
 12886  0326  07F4               	addwf	i1__Umul8_16@product+1,f
 12887  0327                     i1l4682:	
 12888  0327  1003               	clrc
 12889  0328  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 12890  0329  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 12891  032A  1DF5               	btfss	i1__Umul8_16@multiplier,3
 12892  032B  2B32               	goto	i1l4688
 12893  032C  0876               	movf	i1__Umul8_16@word_mpld,w
 12894  032D  07F3               	addwf	i1__Umul8_16@product,f
 12895  032E  1803               	skipnc
 12896  032F  0AF4               	incf	i1__Umul8_16@product+1,f
 12897  0330  0877               	movf	i1__Umul8_16@word_mpld+1,w
 12898  0331  07F4               	addwf	i1__Umul8_16@product+1,f
 12899  0332                     i1l4688:	
 12900  0332  1003               	clrc
 12901  0333  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 12902  0334  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 12903  0335  1E75               	btfss	i1__Umul8_16@multiplier,4
 12904  0336  2B3D               	goto	i1l4694
 12905  0337  0876               	movf	i1__Umul8_16@word_mpld,w
 12906  0338  07F3               	addwf	i1__Umul8_16@product,f
 12907  0339  1803               	skipnc
 12908  033A  0AF4               	incf	i1__Umul8_16@product+1,f
 12909  033B  0877               	movf	i1__Umul8_16@word_mpld+1,w
 12910  033C  07F4               	addwf	i1__Umul8_16@product+1,f
 12911  033D                     i1l4694:	
 12912  033D  1003               	clrc
 12913  033E  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 12914  033F  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 12915  0340  1EF5               	btfss	i1__Umul8_16@multiplier,5
 12916  0341  2B48               	goto	i1l4700
 12917  0342  0876               	movf	i1__Umul8_16@word_mpld,w
 12918  0343  07F3               	addwf	i1__Umul8_16@product,f
 12919  0344  1803               	skipnc
 12920  0345  0AF4               	incf	i1__Umul8_16@product+1,f
 12921  0346  0877               	movf	i1__Umul8_16@word_mpld+1,w
 12922  0347  07F4               	addwf	i1__Umul8_16@product+1,f
 12923  0348                     i1l4700:	
 12924  0348  1003               	clrc
 12925  0349  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 12926  034A  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 12927  034B  1F75               	btfss	i1__Umul8_16@multiplier,6
 12928  034C  2B53               	goto	i1l4706
 12929  034D  0876               	movf	i1__Umul8_16@word_mpld,w
 12930  034E  07F3               	addwf	i1__Umul8_16@product,f
 12931  034F  1803               	skipnc
 12932  0350  0AF4               	incf	i1__Umul8_16@product+1,f
 12933  0351  0877               	movf	i1__Umul8_16@word_mpld+1,w
 12934  0352  07F4               	addwf	i1__Umul8_16@product+1,f
 12935  0353                     i1l4706:	
 12936  0353  1003               	clrc
 12937  0354  0DF6               	rlf	i1__Umul8_16@word_mpld,f
 12938  0355  0DF7               	rlf	i1__Umul8_16@word_mpld+1,f
 12939  0356  1FF5               	btfss	i1__Umul8_16@multiplier,7
 12940  0357  2B5E               	goto	i1l1491
 12941  0358  0876               	movf	i1__Umul8_16@word_mpld,w
 12942  0359  07F3               	addwf	i1__Umul8_16@product,f
 12943  035A  1803               	skipnc
 12944  035B  0AF4               	incf	i1__Umul8_16@product+1,f
 12945  035C  0877               	movf	i1__Umul8_16@word_mpld+1,w
 12946  035D  07F4               	addwf	i1__Umul8_16@product+1,f
 12947  035E                     i1l1491:	
 12948  035E  0874               	movf	i1__Umul8_16@product+1,w
 12949  035F  00F1               	movwf	?i1__Umul8_16+1
 12950  0360  0873               	movf	i1__Umul8_16@product,w
 12951  0361  00F0               	movwf	?i1__Umul8_16
 12952  0362  0008               	return
 12953  0363                     __end_ofi1__Umul8_16:	
 12954  0363                     __ptext42:	
 12955 ;; *************** function i1___xxtofl *****************
 12956 ;; Defined at:
 12957 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c"
 12958 ;; Parameters:    Size  Location     Type
 12959 ;;  sign            1    wreg     unsigned char 
 12960 ;;  val             4    0[COMMON] long 
 12961 ;; Auto vars:     Size  Location     Type
 12962 ;;  sign            1    8[COMMON] unsigned char 
 12963 ;;  __xxtofl        4   10[COMMON] unsigned long 
 12964 ;;  __xxtofl        1    9[COMMON] unsigned char 
 12965 ;; Return value:  Size  Location     Type
 12966 ;;                  4    0[COMMON] unsigned char 
 12967 ;; Registers used:
 12968 ;;		wreg, status,2, status,0
 12969 ;; Tracked objects:
 12970 ;;		On entry : 300/0
 12971 ;;		On exit  : 300/0
 12972 ;;		Unchanged: 300/0
 12973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12974 ;;      Params:         4       0       0       0       0
 12975 ;;      Locals:         6       0       0       0       0
 12976 ;;      Temps:          4       0       0       0       0
 12977 ;;      Totals:        14       0       0       0       0
 12978 ;;Total ram usage:       14 bytes
 12979 ;; Hardware stack levels used:    1
 12980 ;; This function calls:
 12981 ;;		Nothing
 12982 ;; This function is called by:
 12983 ;;		i1_CCP1_PWM_DUTY_CYCLE_LOAD
 12984 ;;		i1_CCP2_PWM_DUTY_CYCLE_LOAD
 12985 ;; This function uses a non-reentrant model
 12986 ;;
 12987                           
 12988                           
 12989                           ;psect for function i1___xxtofl
 12990  0363                     i1___xxtofl:	
 12991                           
 12992                           ;incstack = 0
 12993                           ; Regs used in i1___xxtofl: [wreg+status,2+status,0]
 12994                           ;i1___xxtofl@sign stored from wreg
 12995  0363  00F8               	movwf	i1___xxtofl@sign
 12996  0364  0878               	movf	i1___xxtofl@sign,w
 12997  0365  1D03               	btfss	3,2
 12998  0366  1FF3               	btfss	i1___xxtofl@val+3,7
 12999  0367  2B78               	goto	i1l5756
 13000  0368  0970               	comf	i1___xxtofl@val,w
 13001  0369  00FA               	movwf	i1___xxtofl@arg
 13002  036A  0971               	comf	i1___xxtofl@val+1,w
 13003  036B  00FB               	movwf	i1___xxtofl@arg+1
 13004  036C  0972               	comf	i1___xxtofl@val+2,w
 13005  036D  00FC               	movwf	i1___xxtofl@arg+2
 13006  036E  0973               	comf	i1___xxtofl@val+3,w
 13007  036F  00FD               	movwf	i1___xxtofl@arg+3
 13008  0370  0AFA               	incf	i1___xxtofl@arg,f
 13009  0371  1903               	skipnz
 13010  0372  0AFB               	incf	i1___xxtofl@arg+1,f
 13011  0373  1903               	skipnz
 13012  0374  0AFC               	incf	i1___xxtofl@arg+2,f
 13013  0375  1903               	skipnz
 13014  0376  0AFD               	incf	i1___xxtofl@arg+3,f
 13015  0377  2B80               	goto	i1l1452
 13016  0378                     i1l5756:	
 13017  0378  0873               	movf	i1___xxtofl@val+3,w
 13018  0379  00FD               	movwf	i1___xxtofl@arg+3
 13019  037A  0872               	movf	i1___xxtofl@val+2,w
 13020  037B  00FC               	movwf	i1___xxtofl@arg+2
 13021  037C  0871               	movf	i1___xxtofl@val+1,w
 13022  037D  00FB               	movwf	i1___xxtofl@arg+1
 13023  037E  0870               	movf	i1___xxtofl@val,w
 13024  037F  00FA               	movwf	i1___xxtofl@arg
 13025  0380                     i1l1452:	
 13026  0380  0873               	movf	i1___xxtofl@val+3,w
 13027  0381  0472               	iorwf	i1___xxtofl@val+2,w
 13028  0382  0471               	iorwf	i1___xxtofl@val+1,w
 13029  0383  0470               	iorwf	i1___xxtofl@val,w
 13030  0384  1D03               	skipz
 13031  0385  2B8B               	goto	i1l5760
 13032  0386  01F0               	clrf	?i1___xxtofl
 13033  0387  01F1               	clrf	?i1___xxtofl+1
 13034  0388  01F2               	clrf	?i1___xxtofl+2
 13035  0389  01F3               	clrf	?i1___xxtofl+3
 13036  038A  0008               	return
 13037  038B                     i1l5760:	
 13038  038B  3096               	movlw	150
 13039  038C  00F9               	movwf	i1___xxtofl@exp
 13040  038D                     i1l5764:	
 13041  038D  30FE               	movlw	254
 13042  038E  057D               	andwf	i1___xxtofl@arg+3,w
 13043  038F  1903               	btfsc	3,2
 13044  0390  2BA5               	goto	i1l5768
 13045  0391  0AF9               	incf	i1___xxtofl@exp,f
 13046  0392  1003               	clrc
 13047  0393  0CFD               	rrf	i1___xxtofl@arg+3,f
 13048  0394  0CFC               	rrf	i1___xxtofl@arg+2,f
 13049  0395  0CFB               	rrf	i1___xxtofl@arg+1,f
 13050  0396  0CFA               	rrf	i1___xxtofl@arg,f
 13051  0397  2B8D               	goto	i1l5764
 13052  0398                     i1l5766:	
 13053  0398  0AF9               	incf	i1___xxtofl@exp,f
 13054  0399  0AFA               	incf	i1___xxtofl@arg,f
 13055  039A  1903               	skipnz
 13056  039B  0AFB               	incf	i1___xxtofl@arg+1,f
 13057  039C  1903               	skipnz
 13058  039D  0AFC               	incf	i1___xxtofl@arg+2,f
 13059  039E  1903               	skipnz
 13060  039F  0AFD               	incf	i1___xxtofl@arg+3,f
 13061  03A0  1003               	clrc
 13062  03A1  0CFD               	rrf	i1___xxtofl@arg+3,f
 13063  03A2  0CFC               	rrf	i1___xxtofl@arg+2,f
 13064  03A3  0CFB               	rrf	i1___xxtofl@arg+1,f
 13065  03A4  0CFA               	rrf	i1___xxtofl@arg,f
 13066  03A5                     i1l5768:	
 13067  03A5  30FF               	movlw	255
 13068  03A6  057D               	andwf	i1___xxtofl@arg+3,w
 13069  03A7  1903               	btfsc	3,2
 13070  03A8  2BB4               	goto	i1l5772
 13071  03A9  2B98               	goto	i1l5766
 13072  03AA                     i1l5774:	
 13073  03AA  3002               	movlw	2
 13074  03AB  0279               	subwf	i1___xxtofl@exp,w
 13075  03AC  1C03               	btfss	3,0
 13076  03AD  2BB6               	goto	i1l1465
 13077  03AE  03F9               	decf	i1___xxtofl@exp,f
 13078  03AF  1003               	clrc
 13079  03B0  0DFA               	rlf	i1___xxtofl@arg,f
 13080  03B1  0DFB               	rlf	i1___xxtofl@arg+1,f
 13081  03B2  0DFC               	rlf	i1___xxtofl@arg+2,f
 13082  03B3  0DFD               	rlf	i1___xxtofl@arg+3,f
 13083  03B4                     i1l5772:	
 13084  03B4  1FFC               	btfss	i1___xxtofl@arg+2,7
 13085  03B5  2BAA               	goto	i1l5774
 13086  03B6                     i1l1465:	
 13087  03B6  1C79               	btfss	i1___xxtofl@exp,0
 13088  03B7  13FC               	bcf	i1___xxtofl@arg+2,7
 13089  03B8  1003               	clrc
 13090  03B9  0CF9               	rrf	i1___xxtofl@exp,f
 13091  03BA  0879               	movf	i1___xxtofl@exp,w
 13092  03BB  00F7               	movwf	??i1___xxtofl+3
 13093  03BC  01F6               	clrf	??i1___xxtofl+2
 13094  03BD  01F5               	clrf	??i1___xxtofl+1
 13095  03BE  01F4               	clrf	??i1___xxtofl
 13096  03BF  0874               	movf	??i1___xxtofl,w
 13097  03C0  04FA               	iorwf	i1___xxtofl@arg,f
 13098  03C1  0875               	movf	??i1___xxtofl+1,w
 13099  03C2  04FB               	iorwf	i1___xxtofl@arg+1,f
 13100  03C3  0876               	movf	??i1___xxtofl+2,w
 13101  03C4  04FC               	iorwf	i1___xxtofl@arg+2,f
 13102  03C5  0877               	movf	??i1___xxtofl+3,w
 13103  03C6  04FD               	iorwf	i1___xxtofl@arg+3,f
 13104  03C7  0878               	movf	i1___xxtofl@sign,w
 13105  03C8  1D03               	btfss	3,2
 13106  03C9  1FF3               	btfss	i1___xxtofl@val+3,7
 13107  03CA  2BCC               	goto	i1l5786
 13108  03CB  17FD               	bsf	i1___xxtofl@arg+3,7
 13109  03CC                     i1l5786:	
 13110  03CC  087D               	movf	i1___xxtofl@arg+3,w
 13111  03CD  00F3               	movwf	?i1___xxtofl+3
 13112  03CE  087C               	movf	i1___xxtofl@arg+2,w
 13113  03CF  00F2               	movwf	?i1___xxtofl+2
 13114  03D0  087B               	movf	i1___xxtofl@arg+1,w
 13115  03D1  00F1               	movwf	?i1___xxtofl+1
 13116  03D2  087A               	movf	i1___xxtofl@arg,w
 13117  03D3  00F0               	movwf	?i1___xxtofl
 13118  03D4  0008               	return
 13119  03D5                     __end_ofi1___xxtofl:	
 13120  03D5                     __ptext43:	
 13121 ;; *************** function i1___fltol *****************
 13122 ;; Defined at:
 13123 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c"
 13124 ;; Parameters:    Size  Location     Type
 13125 ;;  f1              4   50[BANK0 ] unsigned char 
 13126 ;; Auto vars:     Size  Location     Type
 13127 ;;  __fltol         1   59[BANK0 ] unsigned char 
 13128 ;;  __fltol         1   58[BANK0 ] unsigned char 
 13129 ;; Return value:  Size  Location     Type
 13130 ;;                  4   50[BANK0 ] long 
 13131 ;; Registers used:
 13132 ;;		wreg, status,2, status,0
 13133 ;; Tracked objects:
 13134 ;;		On entry : 300/0
 13135 ;;		On exit  : 300/0
 13136 ;;		Unchanged: 0/0
 13137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13138 ;;      Params:         0       4       0       0       0
 13139 ;;      Locals:         0       2       0       0       0
 13140 ;;      Temps:          0       4       0       0       0
 13141 ;;      Totals:         0      10       0       0       0
 13142 ;;Total ram usage:       10 bytes
 13143 ;; Hardware stack levels used:    1
 13144 ;; This function calls:
 13145 ;;		Nothing
 13146 ;; This function is called by:
 13147 ;;		i1_CCP1_PWM_DUTY_CYCLE_LOAD
 13148 ;;		i1_CCP2_PWM_DUTY_CYCLE_LOAD
 13149 ;; This function uses a non-reentrant model
 13150 ;;
 13151                           
 13152                           
 13153                           ;psect for function i1___fltol
 13154  03D5                     i1___fltol:	
 13155                           
 13156                           ;incstack = 0
 13157                           ; Regs used in i1___fltol: [wreg+status,2+status,0]
 13158  03D5  1003               	clrc
 13159  03D6  0D54               	rlf	i1___fltol@f1+2,w
 13160  03D7  0D55               	rlf	i1___fltol@f1+3,w
 13161  03D8  00DB               	movwf	i1___fltol@exp1
 13162  03D9  085B               	movf	i1___fltol@exp1,w
 13163  03DA  1D03               	btfss	3,2
 13164  03DB  2BE1               	goto	i1l5458
 13165  03DC                     i1l5456:	
 13166  03DC  01D2               	clrf	?i1___fltol
 13167  03DD  01D3               	clrf	?i1___fltol+1
 13168  03DE  01D4               	clrf	?i1___fltol+2
 13169  03DF  01D5               	clrf	?i1___fltol+3
 13170  03E0  0008               	return
 13171  03E1                     i1l5458:	
 13172  03E1  0852               	movf	i1___fltol@f1,w
 13173  03E2  00D6               	movwf	??i1___fltol
 13174  03E3  0853               	movf	i1___fltol@f1+1,w
 13175  03E4  00D7               	movwf	??i1___fltol+1
 13176  03E5  0854               	movf	i1___fltol@f1+2,w
 13177  03E6  00D8               	movwf	??i1___fltol+2
 13178  03E7  0855               	movf	i1___fltol@f1+3,w
 13179  03E8  00D9               	movwf	??i1___fltol+3
 13180  03E9  301F               	movlw	31
 13181  03EA                     u539_25:	
 13182  03EA  1003               	clrc
 13183  03EB  0CD9               	rrf	??i1___fltol+3,f
 13184  03EC  0CD8               	rrf	??i1___fltol+2,f
 13185  03ED  0CD7               	rrf	??i1___fltol+1,f
 13186  03EE  0CD6               	rrf	??i1___fltol,f
 13187  03EF  3EFF               	addlw	-1
 13188  03F0  1D03               	skipz
 13189  03F1  2BEA               	goto	u539_25
 13190  03F2  0856               	movf	??i1___fltol,w
 13191  03F3  00DA               	movwf	i1___fltol@sign1
 13192  03F4  3096               	movlw	150
 13193  03F5  17D4               	bsf	i1___fltol@f1+2,7
 13194  03F6  01D5               	clrf	i1___fltol@f1+3
 13195  03F7  02DB               	subwf	i1___fltol@exp1,f
 13196  03F8  1FDB               	btfss	i1___fltol@exp1,7
 13197  03F9  2C07               	goto	i1l5476
 13198  03FA  085B               	movf	i1___fltol@exp1,w
 13199  03FB  3A80               	xorlw	128
 13200  03FC  3E97               	addlw	151
 13201  03FD  1C03               	btfss	3,0
 13202  03FE  2BDC               	goto	i1l5456
 13203  03FF                     i1l5472:	
 13204  03FF  1003               	clrc
 13205  0400  0CD5               	rrf	i1___fltol@f1+3,f
 13206  0401  0CD4               	rrf	i1___fltol@f1+2,f
 13207  0402  0CD3               	rrf	i1___fltol@f1+1,f
 13208  0403  0CD2               	rrf	i1___fltol@f1,f
 13209  0404  0FDB               	incfsz	i1___fltol@exp1,f
 13210  0405  2BFF               	goto	i1l5472
 13211  0406  2C15               	goto	i1l5484
 13212  0407                     i1l5476:	
 13213  0407  3020               	movlw	32
 13214  0408  025B               	subwf	i1___fltol@exp1,w
 13215  0409  1803               	btfsc	3,0
 13216  040A  2BDC               	goto	i1l5456
 13217  040B                     i1l5482:	
 13218  040B  085B               	movf	i1___fltol@exp1,w
 13219  040C  1903               	btfsc	3,2
 13220  040D  2C15               	goto	i1l5484
 13221  040E  1003               	clrc
 13222  040F  0DD2               	rlf	i1___fltol@f1,f
 13223  0410  0DD3               	rlf	i1___fltol@f1+1,f
 13224  0411  0DD4               	rlf	i1___fltol@f1+2,f
 13225  0412  0DD5               	rlf	i1___fltol@f1+3,f
 13226  0413  03DB               	decf	i1___fltol@exp1,f
 13227  0414  2C0B               	goto	i1l5482
 13228  0415                     i1l5484:	
 13229  0415  085A               	movf	i1___fltol@sign1,w
 13230  0416  1903               	btfsc	3,2
 13231  0417  0008               	return
 13232  0418  09D2               	comf	i1___fltol@f1,f
 13233  0419  09D3               	comf	i1___fltol@f1+1,f
 13234  041A  09D4               	comf	i1___fltol@f1+2,f
 13235  041B  09D5               	comf	i1___fltol@f1+3,f
 13236  041C  0AD2               	incf	i1___fltol@f1,f
 13237  041D  1903               	skipnz
 13238  041E  0AD3               	incf	i1___fltol@f1+1,f
 13239  041F  1903               	skipnz
 13240  0420  0AD4               	incf	i1___fltol@f1+2,f
 13241  0421  1903               	skipnz
 13242  0422  0AD5               	incf	i1___fltol@f1+3,f
 13243  0423  0008               	return
 13244  0424                     __end_ofi1___fltol:	
 13245                           
 13246                           	psect	text40
 13247  1ECB                     __ptext40:	
 13248 ;; *************** function _HEATER_UPDATE *****************
 13249 ;; Defined at:
 13250 ;;		line 35 in file "HEATER.c"
 13251 ;; Parameters:    Size  Location     Type
 13252 ;;		None
 13253 ;; Auto vars:     Size  Location     Type
 13254 ;;		None
 13255 ;; Return value:  Size  Location     Type
 13256 ;;                  1    wreg      void 
 13257 ;; Registers used:
 13258 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 13259 ;; Tracked objects:
 13260 ;;		On entry : 300/300
 13261 ;;		On exit  : 300/0
 13262 ;;		Unchanged: 0/0
 13263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13264 ;;      Params:         0       0       0       0       0
 13265 ;;      Locals:         0       0       0       0       0
 13266 ;;      Temps:          0       0       0       0       0
 13267 ;;      Totals:         0       0       0       0       0
 13268 ;;Total ram usage:        0 bytes
 13269 ;; Hardware stack levels used:    1
 13270 ;; Hardware stack levels required when called:    3
 13271 ;; This function calls:
 13272 ;;		i1_CCP2_PWM_DUTY_CYCLE_LOAD
 13273 ;; This function is called by:
 13274 ;;		_SYS_UPDATE
 13275 ;; This function uses a non-reentrant model
 13276 ;;
 13277                           
 13278                           
 13279                           ;psect for function _HEATER_UPDATE
 13280  1ECB                     _HEATER_UPDATE:	
 13281                           
 13282                           ;HEATER.c: 37:     if ((current_angle > DESIRED_HEAT ) & ( DESIRED_HEAT != 0 ))
 13283                           
 13284                           ;incstack = 0
 13285 ;; hardware stack exceeded
 13286                           ; Regs used in _HEATER_UPDATE: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 13287  1ECB  084B               	movf	HEATER@current_angle^(0+384),w
 13288  1ECC  0266               	subwf	_DESIRED_HEAT^(0+384),w
 13289  1ECD  0866               	movf	_DESIRED_HEAT^(0+384),w
 13290  1ECE  1803               	skipnc
 13291  1ECF  2ED5               	goto	L6
 13292  1ED0  1903               	btfsc	3,2
 13293  1ED1  2ED4               	goto	i1l6344
 13294                           
 13295                           ;HEATER.c: 38:     {;HEATER.c: 39:         current_angle-- ;
 13296  1ED2  03CB               	decf	HEATER@current_angle^(0+384),f
 13297                           
 13298                           ;HEATER.c: 40:     }
 13299  1ED3  2EDE               	goto	i1l6352
 13300  1ED4                     i1l6344:	
 13301  1ED4  0866               	movf	_DESIRED_HEAT^(0+384),w
 13302  1ED5                     L6:	
 13303  1ED5  024B               	subwf	HEATER@current_angle^(0+384),w
 13304  1ED6  1803               	skipnc
 13305  1ED7  2EDA               	goto	i1l6348
 13306                           
 13307                           ;HEATER.c: 42:     {;HEATER.c: 43:         current_angle++ ;
 13308  1ED8  0ACB               	incf	HEATER@current_angle^(0+384),f
 13309                           
 13310                           ;HEATER.c: 44:     }
 13311  1ED9  2EDE               	goto	i1l6352
 13312  1EDA                     i1l6348:	
 13313  1EDA  0866               	movf	_DESIRED_HEAT^(0+384),w
 13314  1EDB  1D03               	btfss	3,2
 13315  1EDC  2EDE               	goto	i1l6352
 13316                           
 13317                           ;HEATER.c: 46:     {;HEATER.c: 47:         current_angle = 0 ;
 13318  1EDD  01CB               	clrf	HEATER@current_angle^(0+384)
 13319  1EDE                     i1l6352:	
 13320                           ;HEATER.c: 48:     }
 13321                           
 13322                           
 13323                           ;HEATER.c: 53:     CCP2_PWM_DUTY_CYCLE_LOAD(current_angle);
 13324  1EDE  084B               	movf	HEATER@current_angle^(0+384),w
 13325  1EDF  1283               	bcf	3,5	;RP0=0, select bank0
 13326  1EE0  1303               	bcf	3,6	;RP1=0, select bank0
 13327  1EE1  00DC               	movwf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE
 13328  1EE2  01DD               	clrf	i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1
 13329  1EE3  120A  118A  209C   	fcall	i1_CCP2_PWM_DUTY_CYCLE_LOAD
 13330  1EE6  0008               	return
 13331  1EE7                     __end_of_HEATER_UPDATE:	
 13332                           
 13333                           	psect	text46
 13334  05CA                     __ptext46:	
 13335 ;; *************** function i1___fldiv *****************
 13336 ;; Defined at:
 13337 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c"
 13338 ;; Parameters:    Size  Location     Type
 13339 ;;  a               4    0[BANK0 ] unsigned int 
 13340 ;;  b               4    4[BANK0 ] unsigned int 
 13341 ;; Auto vars:     Size  Location     Type
 13342 ;;  __fldiv         4   19[BANK0 ] unsigned long 
 13343 ;;  __fldiv         4   12[BANK0 ] unsigned long 
 13344 ;;  __fldiv         2   17[BANK0 ] int 
 13345 ;;  __fldiv         1   24[BANK0 ] unsigned char 
 13346 ;;  __fldiv         1   23[BANK0 ] unsigned char 
 13347 ;;  __fldiv         1   16[BANK0 ] unsigned char 
 13348 ;; Return value:  Size  Location     Type
 13349 ;;                  4    0[BANK0 ] unsigned char 
 13350 ;; Registers used:
 13351 ;;		wreg, status,2, status,0, btemp+1
 13352 ;; Tracked objects:
 13353 ;;		On entry : 300/0
 13354 ;;		On exit  : 300/0
 13355 ;;		Unchanged: 0/0
 13356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13357 ;;      Params:         0       8       0       0       0
 13358 ;;      Locals:         0      13       0       0       0
 13359 ;;      Temps:          0       4       0       0       0
 13360 ;;      Totals:         0      25       0       0       0
 13361 ;;Total ram usage:       25 bytes
 13362 ;; Hardware stack levels used:    1
 13363 ;; This function calls:
 13364 ;;		Nothing
 13365 ;; This function is called by:
 13366 ;;		i1_CCP1_PWM_DUTY_CYCLE_LOAD
 13367 ;;		i1_CCP2_PWM_DUTY_CYCLE_LOAD
 13368 ;; This function uses a non-reentrant model
 13369 ;;
 13370                           
 13371                           
 13372                           ;psect for function i1___fldiv
 13373  05CA                     i1___fldiv:	
 13374                           
 13375                           ;incstack = 0
 13376                           ; Regs used in i1___fldiv: [wreg+status,2+status,0+btemp+1]
 13377  05CA  0827               	movf	i1___fldiv@b+3,w
 13378  05CB  00B0               	movwf	i1___fldiv@sign
 13379  05CC  3080               	movlw	128
 13380  05CD  05B0               	andwf	i1___fldiv@sign,f
 13381  05CE  1003               	clrc
 13382  05CF  0D27               	rlf	i1___fldiv@b+3,w
 13383  05D0  00B7               	movwf	i1___fldiv@bexp
 13384  05D1  1BA6               	btfsc	i1___fldiv@b+2,7
 13385  05D2  1437               	bsf	i1___fldiv@bexp,0
 13386  05D3  0837               	movf	i1___fldiv@bexp,w
 13387  05D4  1903               	btfsc	3,2
 13388  05D5  2DDE               	goto	i1l1368
 13389  05D6  0F37               	incfsz	i1___fldiv@bexp,w
 13390  05D7  2DDC               	goto	i1l1369
 13391  05D8  01A4               	clrf	i1___fldiv@b
 13392  05D9  01A5               	clrf	i1___fldiv@b+1
 13393  05DA  01A6               	clrf	i1___fldiv@b+2
 13394  05DB  01A7               	clrf	i1___fldiv@b+3
 13395  05DC                     i1l1369:	
 13396  05DC  17A6               	bsf	i1___fldiv@b+2,7
 13397  05DD  2DE1               	goto	L8
 13398  05DE                     i1l1368:	
 13399  05DE  01A4               	clrf	i1___fldiv@b
 13400  05DF  01A5               	clrf	i1___fldiv@b+1
 13401  05E0  01A6               	clrf	i1___fldiv@b+2
 13402  05E1                     L8:	
 13403  05E1  01A7               	clrf	i1___fldiv@b+3
 13404  05E2  0823               	movf	i1___fldiv@a+3,w
 13405  05E3  3980               	andlw	128
 13406  05E4  06B0               	xorwf	i1___fldiv@sign,f
 13407  05E5  1003               	clrc
 13408  05E6  0D23               	rlf	i1___fldiv@a+3,w
 13409  05E7  00B8               	movwf	i1___fldiv@aexp
 13410  05E8  1BA2               	btfsc	i1___fldiv@a+2,7
 13411  05E9  1438               	bsf	i1___fldiv@aexp,0
 13412  05EA  0838               	movf	i1___fldiv@aexp,w
 13413  05EB  1903               	btfsc	3,2
 13414  05EC  2DF5               	goto	i1l1372
 13415  05ED  0F38               	incfsz	i1___fldiv@aexp,w
 13416  05EE  2DF3               	goto	i1l1373
 13417  05EF  01A0               	clrf	i1___fldiv@a
 13418  05F0  01A1               	clrf	i1___fldiv@a+1
 13419  05F1  01A2               	clrf	i1___fldiv@a+2
 13420  05F2  01A3               	clrf	i1___fldiv@a+3
 13421  05F3                     i1l1373:	
 13422  05F3  17A2               	bsf	i1___fldiv@a+2,7
 13423  05F4  2DF8               	goto	L9
 13424  05F5                     i1l1372:	
 13425  05F5  01A0               	clrf	i1___fldiv@a
 13426  05F6  01A1               	clrf	i1___fldiv@a+1
 13427  05F7  01A2               	clrf	i1___fldiv@a+2
 13428  05F8                     L9:	
 13429  05F8  01A3               	clrf	i1___fldiv@a+3
 13430  05F9  0823               	movf	i1___fldiv@a+3,w
 13431  05FA  0422               	iorwf	i1___fldiv@a+2,w
 13432  05FB  0421               	iorwf	i1___fldiv@a+1,w
 13433  05FC  0420               	iorwf	i1___fldiv@a,w
 13434  05FD  1D03               	skipz
 13435  05FE  2E12               	goto	i1l5532
 13436  05FF  3080               	movlw	128
 13437  0600  01A4               	clrf	i1___fldiv@b
 13438  0601  01A5               	clrf	i1___fldiv@b+1
 13439  0602  01A6               	clrf	i1___fldiv@b+2
 13440  0603  01A7               	clrf	i1___fldiv@b+3
 13441  0604  04A6               	iorwf	i1___fldiv@b+2,f
 13442  0605  307F               	movlw	127
 13443  0606  04A7               	iorwf	i1___fldiv@b+3,f
 13444  0607                     L10:	
 13445  0607  0830               	movf	i1___fldiv@sign,w
 13446  0608  04A7               	iorwf	i1___fldiv@b+3,f
 13447  0609  0827               	movf	i1___fldiv@b+3,w
 13448  060A  00A3               	movwf	?i1___fldiv+3
 13449  060B  0826               	movf	i1___fldiv@b+2,w
 13450  060C  00A2               	movwf	?i1___fldiv+2
 13451  060D  0825               	movf	i1___fldiv@b+1,w
 13452  060E  00A1               	movwf	?i1___fldiv+1
 13453  060F  0824               	movf	i1___fldiv@b,w
 13454  0610  00A0               	movwf	?i1___fldiv
 13455  0611  0008               	return
 13456  0612                     i1l5532:	
 13457  0612  0837               	movf	i1___fldiv@bexp,w
 13458  0613  1D03               	btfss	3,2
 13459  0614  2E1A               	goto	i1l5540
 13460  0615  01A0               	clrf	?i1___fldiv
 13461  0616  01A1               	clrf	?i1___fldiv+1
 13462  0617  01A2               	clrf	?i1___fldiv+2
 13463  0618  01A3               	clrf	?i1___fldiv+3
 13464  0619  0008               	return
 13465  061A                     i1l5540:	
 13466  061A  0837               	movf	i1___fldiv@bexp,w
 13467  061B  00B1               	movwf	i1___fldiv@new_exp
 13468  061C  01B2               	clrf	i1___fldiv@new_exp+1
 13469  061D  0838               	movf	i1___fldiv@aexp,w
 13470  061E  02B1               	subwf	i1___fldiv@new_exp,f
 13471  061F  1C03               	skipc
 13472  0620  03B2               	decf	i1___fldiv@new_exp+1,f
 13473  0621  307F               	movlw	127
 13474  0622  07B1               	addwf	i1___fldiv@new_exp,f
 13475  0623  1803               	skipnc
 13476  0624  0AB2               	incf	i1___fldiv@new_exp+1,f
 13477  0625  0827               	movf	i1___fldiv@b+3,w
 13478  0626  00AF               	movwf	i1___fldiv@rem+3
 13479  0627  0826               	movf	i1___fldiv@b+2,w
 13480  0628  00AE               	movwf	i1___fldiv@rem+2
 13481  0629  0825               	movf	i1___fldiv@b+1,w
 13482  062A  00AD               	movwf	i1___fldiv@rem+1
 13483  062B  0824               	movf	i1___fldiv@b,w
 13484  062C  00AC               	movwf	i1___fldiv@rem
 13485  062D  01A4               	clrf	i1___fldiv@b
 13486  062E  01A5               	clrf	i1___fldiv@b+1
 13487  062F  01A6               	clrf	i1___fldiv@b+2
 13488  0630  01A7               	clrf	i1___fldiv@b+3
 13489  0631  01B3               	clrf	i1___fldiv@grs
 13490  0632  01B4               	clrf	i1___fldiv@grs+1
 13491  0633  01B5               	clrf	i1___fldiv@grs+2
 13492  0634  01B6               	clrf	i1___fldiv@grs+3
 13493  0635  01B8               	clrf	i1___fldiv@aexp
 13494  0636                     i1l5566:	
 13495  0636  301A               	movlw	26
 13496  0637  0238               	subwf	i1___fldiv@aexp,w
 13497  0638  1803               	btfsc	3,0
 13498  0639  2E6F               	goto	i1l5568
 13499  063A  0838               	movf	i1___fldiv@aexp,w
 13500  063B  1903               	btfsc	3,2
 13501  063C  2E4E               	goto	i1l5558
 13502  063D  1003               	clrc
 13503  063E  0DAC               	rlf	i1___fldiv@rem,f
 13504  063F  0DAD               	rlf	i1___fldiv@rem+1,f
 13505  0640  0DAE               	rlf	i1___fldiv@rem+2,f
 13506  0641  0DAF               	rlf	i1___fldiv@rem+3,f
 13507  0642  1003               	clrc
 13508  0643  0DA4               	rlf	i1___fldiv@b,f
 13509  0644  0DA5               	rlf	i1___fldiv@b+1,f
 13510  0645  0DA6               	rlf	i1___fldiv@b+2,f
 13511  0646  0DA7               	rlf	i1___fldiv@b+3,f
 13512  0647  1BB6               	btfsc	i1___fldiv@grs+3,7
 13513  0648  1424               	bsf	i1___fldiv@b,0
 13514  0649  1003               	clrc
 13515  064A  0DB3               	rlf	i1___fldiv@grs,f
 13516  064B  0DB4               	rlf	i1___fldiv@grs+1,f
 13517  064C  0DB5               	rlf	i1___fldiv@grs+2,f
 13518  064D  0DB6               	rlf	i1___fldiv@grs+3,f
 13519  064E                     i1l5558:	
 13520  064E  0823               	movf	i1___fldiv@a+3,w
 13521  064F  022F               	subwf	i1___fldiv@rem+3,w
 13522  0650  1D03               	skipz
 13523  0651  2E5C               	goto	u556_25
 13524  0652  0822               	movf	i1___fldiv@a+2,w
 13525  0653  022E               	subwf	i1___fldiv@rem+2,w
 13526  0654  1D03               	skipz
 13527  0655  2E5C               	goto	u556_25
 13528  0656  0821               	movf	i1___fldiv@a+1,w
 13529  0657  022D               	subwf	i1___fldiv@rem+1,w
 13530  0658  1D03               	skipz
 13531  0659  2E5C               	goto	u556_25
 13532  065A  0820               	movf	i1___fldiv@a,w
 13533  065B  022C               	subwf	i1___fldiv@rem,w
 13534  065C                     u556_25:	
 13535  065C  1C03               	skipc
 13536  065D  2E6D               	goto	i1l5564
 13537  065E  1736               	bsf	i1___fldiv@grs+3,6
 13538  065F  0820               	movf	i1___fldiv@a,w
 13539  0660  02AC               	subwf	i1___fldiv@rem,f
 13540  0661  0821               	movf	i1___fldiv@a+1,w
 13541  0662  1C03               	skipc
 13542  0663  0F21               	incfsz	i1___fldiv@a+1,w
 13543  0664  02AD               	subwf	i1___fldiv@rem+1,f
 13544  0665  0822               	movf	i1___fldiv@a+2,w
 13545  0666  1C03               	skipc
 13546  0667  0F22               	incfsz	i1___fldiv@a+2,w
 13547  0668  02AE               	subwf	i1___fldiv@rem+2,f
 13548  0669  0823               	movf	i1___fldiv@a+3,w
 13549  066A  1C03               	skipc
 13550  066B  0F23               	incfsz	i1___fldiv@a+3,w
 13551  066C  02AF               	subwf	i1___fldiv@rem+3,f
 13552  066D                     i1l5564:	
 13553  066D  0AB8               	incf	i1___fldiv@aexp,f
 13554  066E  2E36               	goto	i1l5566
 13555  066F                     i1l5568:	
 13556  066F  082F               	movf	i1___fldiv@rem+3,w
 13557  0670  042E               	iorwf	i1___fldiv@rem+2,w
 13558  0671  042D               	iorwf	i1___fldiv@rem+1,w
 13559  0672  042C               	iorwf	i1___fldiv@rem,w
 13560  0673  1D03               	btfss	3,2
 13561  0674  1433               	bsf	i1___fldiv@grs,0
 13562  0675                     i1l5582:	
 13563  0675  1BA6               	btfsc	i1___fldiv@b+2,7
 13564  0676  2E88               	goto	i1l5584
 13565  0677  1003               	clrc
 13566  0678  0DA4               	rlf	i1___fldiv@b,f
 13567  0679  0DA5               	rlf	i1___fldiv@b+1,f
 13568  067A  0DA6               	rlf	i1___fldiv@b+2,f
 13569  067B  0DA7               	rlf	i1___fldiv@b+3,f
 13570  067C  1BB6               	btfsc	i1___fldiv@grs+3,7
 13571  067D  1424               	bsf	i1___fldiv@b,0
 13572  067E  30FF               	movlw	-1
 13573  067F  1003               	clrc
 13574  0680  0DB3               	rlf	i1___fldiv@grs,f
 13575  0681  0DB4               	rlf	i1___fldiv@grs+1,f
 13576  0682  0DB5               	rlf	i1___fldiv@grs+2,f
 13577  0683  0DB6               	rlf	i1___fldiv@grs+3,f
 13578  0684  07B1               	addwf	i1___fldiv@new_exp,f
 13579  0685  1C03               	skipc
 13580  0686  03B2               	decf	i1___fldiv@new_exp+1,f
 13581  0687  2E75               	goto	i1l5582
 13582  0688                     i1l5584:	
 13583  0688  01B8               	clrf	i1___fldiv@aexp
 13584  0689  1FB6               	btfss	i1___fldiv@grs+3,7
 13585  068A  2E9D               	goto	i1l5594
 13586  068B  0833               	movf	i1___fldiv@grs,w
 13587  068C  00A8               	movwf	??i1___fldiv
 13588  068D  0834               	movf	i1___fldiv@grs+1,w
 13589  068E  00A9               	movwf	??i1___fldiv+1
 13590  068F  0835               	movf	i1___fldiv@grs+2,w
 13591  0690  00AA               	movwf	??i1___fldiv+2
 13592  0691  307F               	movlw	127
 13593  0692  0536               	andwf	i1___fldiv@grs+3,w
 13594  0693  00AB               	movwf	??i1___fldiv+3
 13595  0694  042A               	iorwf	??i1___fldiv+2,w
 13596  0695  0429               	iorwf	??i1___fldiv+1,w
 13597  0696  0428               	iorwf	??i1___fldiv,w
 13598  0697  1903               	skipnz
 13599  0698  1824               	btfsc	i1___fldiv@b,0
 13600  0699  2E9B               	goto	i1l5590
 13601  069A  2E9D               	goto	i1l5594
 13602  069B                     i1l5590:	
 13603  069B  01B8               	clrf	i1___fldiv@aexp
 13604  069C  0AB8               	incf	i1___fldiv@aexp,f
 13605  069D                     i1l5594:	
 13606  069D  0838               	movf	i1___fldiv@aexp,w
 13607  069E  1903               	btfsc	3,2
 13608  069F  2EB1               	goto	i1l5604
 13609  06A0  0AA4               	incf	i1___fldiv@b,f
 13610  06A1  1903               	skipnz
 13611  06A2  0AA5               	incf	i1___fldiv@b+1,f
 13612  06A3  1903               	skipnz
 13613  06A4  0AA6               	incf	i1___fldiv@b+2,f
 13614  06A5  1903               	skipnz
 13615  06A6  0AA7               	incf	i1___fldiv@b+3,f
 13616  06A7  1C27               	btfss	i1___fldiv@b+3,0
 13617  06A8  2EB1               	goto	i1l5604
 13618  06A9  0D27               	rlf	i1___fldiv@b+3,w
 13619  06AA  0CA7               	rrf	i1___fldiv@b+3,f
 13620  06AB  0CA6               	rrf	i1___fldiv@b+2,f
 13621  06AC  0CA5               	rrf	i1___fldiv@b+1,f
 13622  06AD  0CA4               	rrf	i1___fldiv@b,f
 13623  06AE  0AB1               	incf	i1___fldiv@new_exp,f
 13624  06AF  1903               	skipnz
 13625  06B0  0AB2               	incf	i1___fldiv@new_exp+1,f
 13626  06B1                     i1l5604:	
 13627  06B1  0832               	movf	i1___fldiv@new_exp+1,w
 13628  06B2  3A80               	xorlw	128
 13629  06B3  00FF               	movwf	127
 13630  06B4  3080               	movlw	128
 13631  06B5  027F               	subwf	127,w
 13632  06B6  1D03               	skipz
 13633  06B7  2EBA               	goto	u566_25
 13634  06B8  30FF               	movlw	255
 13635  06B9  0231               	subwf	i1___fldiv@new_exp,w
 13636  06BA                     u566_25:	
 13637  06BA  1C03               	skipc
 13638  06BB  2EC5               	goto	i1l5610
 13639  06BC  30FF               	movlw	255
 13640  06BD  1283               	bcf	3,5	;RP0=0, select bank0
 13641  06BE  1303               	bcf	3,6	;RP1=0, select bank0
 13642  06BF  00B1               	movwf	i1___fldiv@new_exp
 13643  06C0  01B2               	clrf	i1___fldiv@new_exp+1
 13644  06C1  01A4               	clrf	i1___fldiv@b
 13645  06C2  01A5               	clrf	i1___fldiv@b+1
 13646  06C3  01A6               	clrf	i1___fldiv@b+2
 13647  06C4  01A7               	clrf	i1___fldiv@b+3
 13648  06C5                     i1l5610:	
 13649  06C5  1283               	bcf	3,5	;RP0=0, select bank0
 13650  06C6  1303               	bcf	3,6	;RP1=0, select bank0
 13651  06C7  0832               	movf	i1___fldiv@new_exp+1,w
 13652  06C8  3A80               	xorlw	128
 13653  06C9  00FF               	movwf	127
 13654  06CA  3080               	movlw	128
 13655  06CB  027F               	subwf	127,w
 13656  06CC  1D03               	skipz
 13657  06CD  2ED0               	goto	u567_25
 13658  06CE  3001               	movlw	1
 13659  06CF  0231               	subwf	i1___fldiv@new_exp,w
 13660  06D0                     u567_25:	
 13661  06D0  1803               	skipnc
 13662  06D1  2EDB               	goto	i1l5616
 13663  06D2  1283               	bcf	3,5	;RP0=0, select bank0
 13664  06D3  1303               	bcf	3,6	;RP1=0, select bank0
 13665  06D4  01B1               	clrf	i1___fldiv@new_exp
 13666  06D5  01B2               	clrf	i1___fldiv@new_exp+1
 13667  06D6  01A4               	clrf	i1___fldiv@b
 13668  06D7  01A5               	clrf	i1___fldiv@b+1
 13669  06D8  01A6               	clrf	i1___fldiv@b+2
 13670  06D9  01A7               	clrf	i1___fldiv@b+3
 13671  06DA  01B0               	clrf	i1___fldiv@sign
 13672  06DB                     i1l5616:	
 13673  06DB  1283               	bcf	3,5	;RP0=0, select bank0
 13674  06DC  1303               	bcf	3,6	;RP1=0, select bank0
 13675  06DD  0831               	movf	i1___fldiv@new_exp,w
 13676  06DE  00B7               	movwf	i1___fldiv@bexp
 13677  06DF  1C37               	btfss	i1___fldiv@bexp,0
 13678  06E0  2EE3               	goto	i1l1397
 13679  06E1  17A6               	bsf	i1___fldiv@b+2,7
 13680  06E2  2EE4               	goto	i1l5622
 13681  06E3                     i1l1397:	
 13682  06E3  13A6               	bcf	i1___fldiv@b+2,7
 13683  06E4                     i1l5622:	
 13684  06E4  1003               	clrc
 13685  06E5  0C37               	rrf	i1___fldiv@bexp,w
 13686  06E6  00A7               	movwf	i1___fldiv@b+3
 13687  06E7  2E07               	goto	L10
 13688  06E8                     __end_ofi1___fldiv:	
 13689                           
 13690                           	psect	swtext1
 13691  18AB                     __pswtext1:	
 13692  18AB                     i1S6778:	
 13693  18AB  120A  158A  2833   	ljmp	i1l6430
 13694  18AE  120A  158A  2839   	ljmp	i1l6432
 13695  18B1  120A  158A  283D   	ljmp	i1l6434
 13696  18B4  120A  158A  2841   	ljmp	i1l6436
 13697  18B7  120A  158A  2845   	ljmp	i1l6438
 13698                           
 13699                           	psect	text48
 13700  06E8                     __ptext48:	
 13701 ;; *************** function _SET_TIME_HANDLER *****************
 13702 ;; Defined at:
 13703 ;;		line 84 in file "CONTROL.c"
 13704 ;; Parameters:    Size  Location     Type
 13705 ;;		None
 13706 ;; Auto vars:     Size  Location     Type
 13707 ;;		None
 13708 ;; Return value:  Size  Location     Type
 13709 ;;                  1    wreg      void 
 13710 ;; Registers used:
 13711 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 13712 ;; Tracked objects:
 13713 ;;		On entry : 0/0
 13714 ;;		On exit  : 0/0
 13715 ;;		Unchanged: 0/0
 13716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13717 ;;      Params:         0       0       0       0       0
 13718 ;;      Locals:         0       0       0       0       0
 13719 ;;      Temps:          0       2       0       0       0
 13720 ;;      Totals:         0       2       0       0       0
 13721 ;;Total ram usage:        2 bytes
 13722 ;; Hardware stack levels used:    1
 13723 ;; Hardware stack levels required when called:    7
 13724 ;; This function calls:
 13725 ;;		_DISP_SHOW_TIME_AT
 13726 ;;		_SET_TIME_HANDLER_ON_WORK
 13727 ;;		_STOP_BLINKING
 13728 ;; This function is called by:
 13729 ;;		_CONTROL_UPDATE
 13730 ;; This function uses a non-reentrant model
 13731 ;;
 13732                           
 13733                           
 13734                           ;psect for function _SET_TIME_HANDLER
 13735  06E8                     _SET_TIME_HANDLER:	
 13736                           
 13737                           ;CONTROL.c: 96:         break;
 13738                           
 13739                           ;CONTROL.c: 86:     switch (HANDLERS_STATES[SET_TIME])
 13740                           
 13741                           ;incstack = 0
 13742 ;; hardware stack exceeded
 13743                           ; Regs used in _SET_TIME_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 13744  06E8  1683               	bsf	3,5	;RP0=1, select bank3
 13745  06E9  1703               	bsf	3,6	;RP1=1, select bank3
 13746  06EA  0830               	movf	_HANDLERS_STATES^(0+384),w
 13747  06EB  1283               	bcf	3,5	;RP0=0, select bank0
 13748  06EC  1303               	bcf	3,6	;RP1=0, select bank0
 13749  06ED  00B3               	movwf	??_SET_TIME_HANDLER
 13750  06EE  01B4               	clrf	??_SET_TIME_HANDLER+1
 13751                           
 13752                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13753                           ; Switch size 1, requested type "speed"
 13754                           ; Number of cases is 1, Range of values is 0 to 0
 13755                           ; switch strategies available:
 13756                           ; Name         Instructions Cycles
 13757                           ; simple_byte            4     3 (average)
 13758                           ; direct_byte           11     8 (fixed)
 13759                           ; jumptable            260     6 (fixed)
 13760                           ;	Chosen strategy is simple_byte
 13761  06EF  0834               	movf	??_SET_TIME_HANDLER+1,w
 13762  06F0  3A00               	xorlw	0	; case 0
 13763  06F1  1903               	skipnz
 13764  06F2  2F0C               	goto	i1l6780
 13765  06F3  2F14               	goto	i1l720
 13766  06F4                     i1l5862:	
 13767                           
 13768                           ;CONTROL.c: 89:             STOP_BLINKING();
 13769  06F4  120A  158A  2483  120A  118A  	fcall	_STOP_BLINKING
 13770                           
 13771                           ;CONTROL.c: 90:             DISP_SHOW_TIME_AT(SETTED_TIME);
 13772  06F9  1283               	bcf	3,5	;RP0=0, select bank0
 13773  06FA  1303               	bcf	3,6	;RP1=0, select bank0
 13774  06FB  086B               	movf	_SETTED_TIME,w
 13775  06FC  00AF               	movwf	DISP_SHOW_TIME_AT@START_TIME
 13776  06FD  086C               	movf	_SETTED_TIME+1,w
 13777  06FE  00B0               	movwf	DISP_SHOW_TIME_AT@START_TIME+1
 13778  06FF  086D               	movf	_SETTED_TIME+2,w
 13779  0700  00B1               	movwf	DISP_SHOW_TIME_AT@START_TIME+2
 13780  0701  120A  158A  2476   	fcall	_DISP_SHOW_TIME_AT
 13781                           
 13782                           ;CONTROL.c: 91:             CURRENT_DIGIT = (6);
 13783  0704  3006               	movlw	6
 13784  0705  00EF               	movwf	_CURRENT_DIGIT
 13785                           
 13786                           ;CONTROL.c: 92:            HANDLERS_STATES[SET_TIME] = ON_WORK;
 13787  0706  1683               	bsf	3,5	;RP0=1, select bank3
 13788  0707  1703               	bsf	3,6	;RP1=1, select bank3
 13789  0708  01B0               	clrf	_HANDLERS_STATES^(0+384)
 13790  0709  0AB0               	incf	_HANDLERS_STATES^(0+384),f
 13791                           
 13792                           ;CONTROL.c: 93:         break;
 13793  070A  0008               	return
 13794  070B                     i1l5870:	
 13795                           
 13796                           ;CONTROL.c: 95:             SET_TIME_HANDLER_ON_WORK();
 13797  070B  2F15               	ljmp	i1l4812
 13798  070C                     i1l6780:	
 13799                           
 13800                           ; Switch size 1, requested type "speed"
 13801                           ; Number of cases is 2, Range of values is 0 to 1
 13802                           ; switch strategies available:
 13803                           ; Name         Instructions Cycles
 13804                           ; simple_byte            7     4 (average)
 13805                           ; direct_byte           14     8 (fixed)
 13806                           ; jumptable            260     6 (fixed)
 13807                           ;	Chosen strategy is simple_byte
 13808  070C  0833               	movf	??_SET_TIME_HANDLER,w
 13809  070D  3A00               	xorlw	0	; case 0
 13810  070E  1903               	skipnz
 13811  070F  2EF4               	goto	i1l5862
 13812  0710  3A01               	xorlw	1	; case 1
 13813  0711  1903               	skipnz
 13814  0712  2F0B               	goto	i1l5870
 13815  0713  2F14               	goto	i1l720
 13816  0714                     i1l720:	
 13817  0714  0008               	return
 13818  0715                     __end_of_SET_TIME_HANDLER:	
 13819  0715                     __ptext49:	
 13820 ;; *************** function _SET_TIME_HANDLER_ON_WORK *****************
 13821 ;; Defined at:
 13822 ;;		line 383 in file "CONTROL.c"
 13823 ;; Parameters:    Size  Location     Type
 13824 ;;		None
 13825 ;; Auto vars:     Size  Location     Type
 13826 ;;		None
 13827 ;; Return value:  Size  Location     Type
 13828 ;;                  1    wreg      void 
 13829 ;; Registers used:
 13830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 13831 ;; Tracked objects:
 13832 ;;		On entry : 300/0
 13833 ;;		On exit  : 800/800
 13834 ;;		Unchanged: 0/0
 13835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13836 ;;      Params:         0       0       0       0       0
 13837 ;;      Locals:         0       0       0       0       0
 13838 ;;      Temps:          0       0       0       0       0
 13839 ;;      Totals:         0       0       0       0       0
 13840 ;;Total ram usage:        0 bytes
 13841 ;; Hardware stack levels used:    1
 13842 ;; Hardware stack levels required when called:    6
 13843 ;; This function calls:
 13844 ;;		_GOTO_NEXT_DIGIT
 13845 ;;		_INCREMENT_THIS
 13846 ;;		_SW_GET_STATE
 13847 ;; This function is called by:
 13848 ;;		_SET_TIME_HANDLER
 13849 ;; This function uses a non-reentrant model
 13850 ;;
 13851                           
 13852                           
 13853                           ;psect for function _SET_TIME_HANDLER_ON_WORK
 13854  0715                     _SET_TIME_HANDLER_ON_WORK:	
 13855  0715                     i1l4812:	
 13856                           ;incstack = 0
 13857 ;; hardware stack exceeded
 13858                           ; Regs used in _SET_TIME_HANDLER_ON_WORK: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
 13859                           
 13860                           
 13861                           ;CONTROL.c: 385:             if ( PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )
 13862  0715  1683               	bsf	3,5	;RP0=1, select bank3
 13863  0716  1703               	bsf	3,6	;RP1=1, select bank3
 13864  0717  0B3F               	decfsz	(_PRESSED_KEY^(0+384)+1),w
 13865  0718  2F36               	goto	i1l4828
 13866                           
 13867                           ;CONTROL.c: 386:             {;CONTROL.c: 387:                     if ((PRESSED_KEY.KEYP
      +                          AD_NO != KEY_RIGHRT)&
 13868  0719  300B               	movlw	11
 13869  071A  063E               	xorwf	_PRESSED_KEY^(0+384),w
 13870  071B  1903               	btfsc	3,2
 13871  071C  2F2C               	goto	i1l4822
 13872  071D  3009               	movlw	9
 13873  071E  063E               	xorwf	_PRESSED_KEY^(0+384),w
 13874  071F  1903               	btfsc	3,2
 13875  0720  2F2C               	goto	i1l4822
 13876  0721  300C               	movlw	12
 13877  0722  063E               	xorwf	_PRESSED_KEY^(0+384),w
 13878  0723  1903               	btfsc	3,2
 13879  0724  2F2C               	goto	i1l4822
 13880                           
 13881                           ;CONTROL.c: 390:                     {;CONTROL.c: 391:                       INCREMENT_T
      +                          HIS ( PRESSED_KEY.KEYPAD_NO);
 13882  0725  083E               	movf	_PRESSED_KEY^(0+384),w
 13883  0726  120A  158A  22A0  120A  118A  	fcall	_INCREMENT_THIS
 13884                           
 13885                           ;CONTROL.c: 392:                     }
 13886  072B  2F36               	goto	i1l4828
 13887  072C                     i1l4822:	
 13888  072C  300B               	movlw	11
 13889  072D  063E               	xorwf	_PRESSED_KEY^(0+384),w
 13890  072E  1903               	btfsc	3,2
 13891  072F  2F34               	goto	i1l4826
 13892  0730  3009               	movlw	9
 13893  0731  063E               	xorwf	_PRESSED_KEY^(0+384),w
 13894  0732  1D03               	btfss	3,2
 13895  0733  2F36               	goto	i1l4828
 13896  0734                     i1l4826:	
 13897                           
 13898                           ;CONTROL.c: 397:                     {;CONTROL.c: 398:                        GOTO_NEXT_
      +                          DIGIT(PRESSED_KEY.KEYPAD_NO);
 13899  0734  083E               	movf	_PRESSED_KEY^(0+384),w
 13900  0735  2748               	fcall	_GOTO_NEXT_DIGIT
 13901  0736                     i1l4828:	
 13902                           ;CONTROL.c: 405:             }
 13903                           
 13904                           ;CONTROL.c: 399:                     }
 13905                           
 13906                           
 13907                           ;CONTROL.c: 410:             if (SW_GET_STATE(Cancel) ==SW_PRE_PRESSED )
 13908  0736  3001               	movlw	1
 13909  0737  120A  158A  2240  120A  118A  	fcall	_SW_GET_STATE
 13910  073C  3A01               	xorlw	1
 13911  073D  1D03               	skipz
 13912  073E  0008               	return
 13913                           
 13914                           ;CONTROL.c: 411:             {;CONTROL.c: 412:                 SETTED_TIME.HOURS = 0;
 13915  073F  1283               	bcf	3,5	;RP0=0, select bank0
 13916  0740  1303               	bcf	3,6	;RP1=0, select bank0
 13917  0741  01ED               	clrf	_SETTED_TIME+2
 13918                           
 13919                           ;CONTROL.c: 413:                 SETTED_TIME.MINUTES = 0;
 13920  0742  01EC               	clrf	_SETTED_TIME+1
 13921                           
 13922                           ;CONTROL.c: 414:                 SETTED_TIME.SECONDS = 0;
 13923  0743  01EB               	clrf	_SETTED_TIME
 13924                           
 13925                           ;CONTROL.c: 415:                 HANDLERS_STATES[SET_TIME] = FIRST_TIME;
 13926  0744  1683               	bsf	3,5	;RP0=1, select bank3
 13927  0745  1703               	bsf	3,6	;RP1=1, select bank3
 13928  0746  01B0               	clrf	_HANDLERS_STATES^(0+384)
 13929                           
 13930                           ;CONTROL.c: 416:             }
 13931  0747  0008               	return
 13932  0748                     __end_of_SET_TIME_HANDLER_ON_WORK:	
 13933  0748                     __ptext52:	
 13934 ;; *************** function _GOTO_NEXT_DIGIT *****************
 13935 ;; Defined at:
 13936 ;;		line 424 in file "CONTROL.c"
 13937 ;; Parameters:    Size  Location     Type
 13938 ;;  KEY             1    wreg     unsigned char 
 13939 ;; Auto vars:     Size  Location     Type
 13940 ;;  KEY             1    8[BANK0 ] unsigned char 
 13941 ;; Return value:  Size  Location     Type
 13942 ;;                  1    wreg      void 
 13943 ;; Registers used:
 13944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13945 ;; Tracked objects:
 13946 ;;		On entry : 0/300
 13947 ;;		On exit  : 0/0
 13948 ;;		Unchanged: 0/0
 13949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13950 ;;      Params:         0       0       0       0       0
 13951 ;;      Locals:         0       1       0       0       0
 13952 ;;      Temps:          0       2       0       0       0
 13953 ;;      Totals:         0       3       0       0       0
 13954 ;;Total ram usage:        3 bytes
 13955 ;; Hardware stack levels used:    1
 13956 ;; Hardware stack levels required when called:    4
 13957 ;; This function calls:
 13958 ;;		_START_BLINKING_AT
 13959 ;; This function is called by:
 13960 ;;		_SET_TIME_HANDLER_ON_WORK
 13961 ;;		_INCREMENT_THIS
 13962 ;; This function uses a non-reentrant model
 13963 ;;
 13964                           
 13965                           
 13966                           ;psect for function _GOTO_NEXT_DIGIT
 13967  0748                     _GOTO_NEXT_DIGIT:	
 13968                           
 13969                           ;incstack = 0
 13970 ;; hardware stack exceeded
 13971                           ; Regs used in _GOTO_NEXT_DIGIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13972                           ;GOTO_NEXT_DIGIT@KEY stored from wreg
 13973  0748  1283               	bcf	3,5	;RP0=0, select bank0
 13974  0749  1303               	bcf	3,6	;RP1=0, select bank0
 13975  074A  00A8               	movwf	GOTO_NEXT_DIGIT@KEY
 13976                           
 13977                           ;CONTROL.c: 424: static void GOTO_NEXT_DIGIT (tbyte KEY);CONTROL.c: 425: {;CONTROL.c: 42
      +                          6:     static tbyte count_right = 0 ;;CONTROL.c: 427:     static tbyte count_left =0;;CO
      +                          NTROL.c: 428:    switch ( CURRENT_DIGIT )
 13978  074B  2FA5               	goto	i1l4394
 13979  074C                     i1l4330:	
 13980                           
 13981                           ;CONTROL.c: 431:            if (KEY == KEY_RIGHRT)
 13982  074C  300B               	movlw	11
 13983  074D  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 13984  074E  1D03               	btfss	3,2
 13985  074F  2F52               	goto	i1l4334
 13986  0750                     i1l4332:	
 13987                           
 13988                           ;CONTROL.c: 432:            {;CONTROL.c: 433:                 CURRENT_DIGIT = (7);
 13989  0750  3007               	movlw	7
 13990  0751  2F89               	goto	L19
 13991  0752                     i1l4334:	
 13992                           ;CONTROL.c: 434:            }
 13993                           
 13994  0752  3009               	movlw	9
 13995  0753  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 13996  0754  1D03               	btfss	3,2
 13997  0755  2FC1               	goto	i1l4396
 13998                           
 13999                           ;CONTROL.c: 436:             {;CONTROL.c: 437:                count_left++;
 14000  0756  1683               	bsf	3,5	;RP0=1, select bank3
 14001  0757  1703               	bsf	3,6	;RP1=1, select bank3
 14002  0758  3002               	movlw	2
 14003  0759  0AC4               	incf	GOTO_NEXT_DIGIT@count_left^(0+384),f
 14004                           
 14005                           ;CONTROL.c: 438:                if (count_left == 2 )
 14006  075A  0644               	xorwf	GOTO_NEXT_DIGIT@count_left^(0+384),w
 14007  075B  1D03               	btfss	3,2
 14008  075C  2FC1               	goto	i1l4396
 14009                           
 14010                           ;CONTROL.c: 439:                {;CONTROL.c: 440:                     CONTROL_CURRENT_ST
      +                          ATE = SET_ROTOR_PWR ;
 14011  075D  3002               	movlw	2
 14012  075E  00C8               	movwf	_CONTROL_CURRENT_STATE^(0+384)
 14013                           
 14014                           ;CONTROL.c: 441:                     HANDLERS_STATES[SET_TIME] = FIRST_TIME;
 14015  075F  01B0               	clrf	_HANDLERS_STATES^(0+384)
 14016                           
 14017                           ;CONTROL.c: 442:                     count_left = 0;
 14018  0760  01C4               	clrf	GOTO_NEXT_DIGIT@count_left^(0+384)
 14019                           
 14020                           ;CONTROL.c: 446:         break;
 14021  0761  2FC1               	goto	i1l4396
 14022  0762                     i1l4346:	
 14023                           
 14024                           ;CONTROL.c: 448:             if (KEY == KEY_RIGHRT)
 14025  0762  300B               	movlw	11
 14026  0763  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14027  0764  1D03               	btfss	3,2
 14028  0765  2F68               	goto	i1l4350
 14029  0766                     i1l4348:	
 14030                           
 14031                           ;CONTROL.c: 449:             {;CONTROL.c: 450:                 CURRENT_DIGIT = (9);
 14032  0766  3009               	movlw	9
 14033  0767  2F89               	goto	L19
 14034  0768                     i1l4350:	
 14035                           ;CONTROL.c: 451:             }
 14036                           
 14037  0768  3009               	movlw	9
 14038  0769  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14039  076A  1D03               	btfss	3,2
 14040  076B  2FC1               	goto	i1l4396
 14041                           
 14042                           ;CONTROL.c: 453:             {;CONTROL.c: 454:                 CURRENT_DIGIT = (6);
 14043  076C  3006               	movlw	6
 14044  076D  2F89               	goto	L19
 14045  076E                     i1l4354:	
 14046                           
 14047                           ;CONTROL.c: 458:             if (KEY == KEY_RIGHRT)
 14048  076E  300B               	movlw	11
 14049  076F  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14050  0770  1D03               	btfss	3,2
 14051  0771  2F74               	goto	i1l4358
 14052  0772                     i1l4356:	
 14053                           
 14054                           ;CONTROL.c: 459:             {;CONTROL.c: 460:                 CURRENT_DIGIT = (10);
 14055  0772  300A               	movlw	10
 14056  0773  2F89               	goto	L19
 14057  0774                     i1l4358:	
 14058                           ;CONTROL.c: 461:             }
 14059                           
 14060  0774  3009               	movlw	9
 14061  0775  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14062  0776  1903               	btfsc	3,2
 14063  0777  2F50               	goto	i1l4332
 14064  0778  2FC1               	goto	i1l4396
 14065  0779                     i1l4362:	
 14066                           
 14067                           ;CONTROL.c: 468:             if (KEY == KEY_RIGHRT)
 14068  0779  300B               	movlw	11
 14069  077A  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14070  077B  1D03               	btfss	3,2
 14071  077C  2F7F               	goto	i1l4366
 14072  077D                     i1l4364:	
 14073                           
 14074                           ;CONTROL.c: 469:             {;CONTROL.c: 470:                 CURRENT_DIGIT = (12);
 14075  077D  300C               	movlw	12
 14076  077E  2F89               	goto	L19
 14077  077F                     i1l4366:	
 14078                           ;CONTROL.c: 471:             }
 14079                           
 14080  077F  3009               	movlw	9
 14081  0780  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14082  0781  1903               	btfsc	3,2
 14083  0782  2F66               	goto	i1l4348
 14084  0783  2FC1               	goto	i1l4396
 14085  0784                     i1l4370:	
 14086                           
 14087                           ;CONTROL.c: 478:             if (KEY == KEY_RIGHRT)
 14088  0784  300B               	movlw	11
 14089  0785  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14090  0786  1D03               	btfss	3,2
 14091  0787  2F8B               	goto	i1l4374
 14092                           
 14093                           ;CONTROL.c: 479:             {;CONTROL.c: 480:                 CURRENT_DIGIT = (13);
 14094  0788  300D               	movlw	13
 14095  0789                     L19:	
 14096  0789  00EF               	movwf	_CURRENT_DIGIT
 14097                           
 14098                           ;CONTROL.c: 481:             }
 14099  078A  2FC1               	goto	i1l4396
 14100  078B                     i1l4374:	
 14101  078B  3009               	movlw	9
 14102  078C  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14103  078D  1903               	btfsc	3,2
 14104  078E  2F72               	goto	i1l4356
 14105  078F  2FC1               	goto	i1l4396
 14106  0790                     i1l4378:	
 14107                           
 14108                           ;CONTROL.c: 488:             if (KEY == KEY_RIGHRT)
 14109  0790  300B               	movlw	11
 14110  0791  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14111  0792  1D03               	btfss	3,2
 14112  0793  2FA0               	goto	i1l4388
 14113                           
 14114                           ;CONTROL.c: 489:             {;CONTROL.c: 490:                count_right++;
 14115  0794  1683               	bsf	3,5	;RP0=1, select bank3
 14116  0795  1703               	bsf	3,6	;RP1=1, select bank3
 14117  0796  3002               	movlw	2
 14118  0797  0AC5               	incf	GOTO_NEXT_DIGIT@count_right^(0+384),f
 14119                           
 14120                           ;CONTROL.c: 491:                if (count_right == 2 )
 14121  0798  0645               	xorwf	GOTO_NEXT_DIGIT@count_right^(0+384),w
 14122  0799  1D03               	btfss	3,2
 14123  079A  2FC1               	goto	i1l4396
 14124                           
 14125                           ;CONTROL.c: 492:                {;CONTROL.c: 493:                  CONTROL_CURRENT_STATE
      +                           = SET_HEATING ;
 14126  079B  01C8               	clrf	_CONTROL_CURRENT_STATE^(0+384)
 14127  079C  0AC8               	incf	_CONTROL_CURRENT_STATE^(0+384),f
 14128                           
 14129                           ;CONTROL.c: 494:                  HANDLERS_STATES[SET_TIME] = FIRST_TIME;
 14130  079D  01B0               	clrf	_HANDLERS_STATES^(0+384)
 14131                           
 14132                           ;CONTROL.c: 495:                  count_right = 0;
 14133  079E  01C5               	clrf	GOTO_NEXT_DIGIT@count_right^(0+384)
 14134                           
 14135                           ;CONTROL.c: 496:                }
 14136  079F  2FC1               	goto	i1l4396
 14137  07A0                     i1l4388:	
 14138  07A0  3009               	movlw	9
 14139  07A1  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14140  07A2  1903               	btfsc	3,2
 14141  07A3  2F7D               	goto	i1l4364
 14142  07A4  2FC1               	goto	i1l4396
 14143  07A5                     i1l4394:	
 14144  07A5  086F               	movf	_CURRENT_DIGIT,w
 14145  07A6  00A6               	movwf	??_GOTO_NEXT_DIGIT
 14146  07A7  01A7               	clrf	??_GOTO_NEXT_DIGIT+1
 14147                           
 14148                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14149                           ; Switch size 1, requested type "speed"
 14150                           ; Number of cases is 1, Range of values is 0 to 0
 14151                           ; switch strategies available:
 14152                           ; Name         Instructions Cycles
 14153                           ; simple_byte            4     3 (average)
 14154                           ; direct_byte           11     8 (fixed)
 14155                           ; jumptable            260     6 (fixed)
 14156                           ;	Chosen strategy is simple_byte
 14157  07A8  0827               	movf	??_GOTO_NEXT_DIGIT+1,w
 14158  07A9  3A00               	xorlw	0	; case 0
 14159  07AA  1903               	skipnz
 14160  07AB  2FAD               	goto	i1l6784
 14161  07AC  2FC1               	goto	i1l4396
 14162  07AD                     i1l6784:	
 14163                           
 14164                           ; Switch size 1, requested type "speed"
 14165                           ; Number of cases is 6, Range of values is 6 to 13
 14166                           ; switch strategies available:
 14167                           ; Name         Instructions Cycles
 14168                           ; simple_byte           19    10 (average)
 14169                           ; direct_byte           35    11 (fixed)
 14170                           ; jumptable            263     9 (fixed)
 14171                           ;	Chosen strategy is simple_byte
 14172  07AD  0826               	movf	??_GOTO_NEXT_DIGIT,w
 14173  07AE  3A06               	xorlw	6	; case 6
 14174  07AF  1903               	skipnz
 14175  07B0  2F4C               	goto	i1l4330
 14176  07B1  3A01               	xorlw	1	; case 7
 14177  07B2  1903               	skipnz
 14178  07B3  2F62               	goto	i1l4346
 14179  07B4  3A0E               	xorlw	14	; case 9
 14180  07B5  1903               	skipnz
 14181  07B6  2F6E               	goto	i1l4354
 14182  07B7  3A03               	xorlw	3	; case 10
 14183  07B8  1903               	skipnz
 14184  07B9  2F79               	goto	i1l4362
 14185  07BA  3A06               	xorlw	6	; case 12
 14186  07BB  1903               	skipnz
 14187  07BC  2F84               	goto	i1l4370
 14188  07BD  3A01               	xorlw	1	; case 13
 14189  07BE  1903               	skipnz
 14190  07BF  2F90               	goto	i1l4378
 14191  07C0  2FC1               	goto	i1l4396
 14192  07C1                     i1l4396:	
 14193                           
 14194                           ;CONTROL.c: 515:    if (( CURRENT_DIGIT != (13))&(KEY != KEY_RIGHRT))
 14195  07C1  300D               	movlw	13
 14196  07C2  1283               	bcf	3,5	;RP0=0, select bank0
 14197  07C3  1303               	bcf	3,6	;RP1=0, select bank0
 14198  07C4  066F               	xorwf	_CURRENT_DIGIT,w
 14199  07C5  1903               	btfsc	3,2
 14200  07C6  2FCE               	goto	i1l4402
 14201  07C7  300B               	movlw	11
 14202  07C8  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14203  07C9  1903               	btfsc	3,2
 14204  07CA  2FCE               	goto	i1l4402
 14205                           
 14206                           ;CONTROL.c: 516:    {;CONTROL.c: 517:      count_right = 0;
 14207  07CB  1683               	bsf	3,5	;RP0=1, select bank3
 14208  07CC  1703               	bsf	3,6	;RP1=1, select bank3
 14209  07CD  01C5               	clrf	GOTO_NEXT_DIGIT@count_right^(0+384)
 14210  07CE                     i1l4402:	
 14211                           
 14212                           ;CONTROL.c: 519:    if (( CURRENT_DIGIT != (6))&(KEY != KEY_LEFT))
 14213  07CE  3006               	movlw	6
 14214  07CF  1283               	bcf	3,5	;RP0=0, select bank0
 14215  07D0  1303               	bcf	3,6	;RP1=0, select bank0
 14216  07D1  066F               	xorwf	_CURRENT_DIGIT,w
 14217  07D2  1903               	btfsc	3,2
 14218  07D3  2FDB               	goto	i1l4408
 14219  07D4  3009               	movlw	9
 14220  07D5  0628               	xorwf	GOTO_NEXT_DIGIT@KEY,w
 14221  07D6  1903               	btfsc	3,2
 14222  07D7  2FDB               	goto	i1l4408
 14223                           
 14224                           ;CONTROL.c: 520:    {;CONTROL.c: 521:      count_left = 0;
 14225  07D8  1683               	bsf	3,5	;RP0=1, select bank3
 14226  07D9  1703               	bsf	3,6	;RP1=1, select bank3
 14227  07DA  01C4               	clrf	GOTO_NEXT_DIGIT@count_left^(0+384)
 14228  07DB                     i1l4408:	
 14229                           
 14230                           ;CONTROL.c: 523:     START_BLINKING_AT(CURRENT_DIGIT);
 14231  07DB  1283               	bcf	3,5	;RP0=0, select bank0
 14232  07DC  1303               	bcf	3,6	;RP1=0, select bank0
 14233  07DD  086F               	movf	_CURRENT_DIGIT,w
 14234  07DE  120A  158A  293D   	ljmp	_START_BLINKING_AT
 14235  07E1                     __end_of_GOTO_NEXT_DIGIT:	
 14236                           
 14237                           	psect	text72
 14238  1E91                     __ptext72:	
 14239 ;; *************** function _DISP_ON_WORKING_FOOD_ERR *****************
 14240 ;; Defined at:
 14241 ;;		line 103 in file "Display.c"
 14242 ;; Parameters:    Size  Location     Type
 14243 ;;		None
 14244 ;; Auto vars:     Size  Location     Type
 14245 ;;		None
 14246 ;; Return value:  Size  Location     Type
 14247 ;;                  1    wreg      void 
 14248 ;; Registers used:
 14249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 14250 ;; Tracked objects:
 14251 ;;		On entry : 300/B00
 14252 ;;		On exit  : 300/0
 14253 ;;		Unchanged: 0/0
 14254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14255 ;;      Params:         0       0       0       0       0
 14256 ;;      Locals:         0       0       0       0       0
 14257 ;;      Temps:          0       0       0       0       0
 14258 ;;      Totals:         0       0       0       0       0
 14259 ;;Total ram usage:        0 bytes
 14260 ;; Hardware stack levels used:    1
 14261 ;; Hardware stack levels required when called:    3
 14262 ;; This function calls:
 14263 ;;		_LCD_SEND_A_STRING
 14264 ;;		_LCD_SET_CURSOR
 14265 ;; This function is called by:
 14266 ;;		_HEATING_HANDLER
 14267 ;; This function uses a non-reentrant model
 14268 ;;
 14269                           
 14270                           
 14271                           ;psect for function _DISP_ON_WORKING_FOOD_ERR
 14272  1E91                     _DISP_ON_WORKING_FOOD_ERR:	
 14273  1E91                     i1l4790:	
 14274                           ;incstack = 0
 14275 ;; hardware stack exceeded
 14276                           ; Regs used in _DISP_ON_WORKING_FOOD_ERR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
 14277                           
 14278                           
 14279                           ;Display.c: 105:     LCD_SET_CURSOR(1,0);
 14280  1E91  1283               	bcf	3,5	;RP0=0, select bank0
 14281  1E92  1303               	bcf	3,6	;RP1=0, select bank0
 14282  1E93  3001               	movlw	1
 14283  1E94  01A1               	clrf	LCD_SET_CURSOR@row
 14284  1E95  120A  158A  2666   	fcall	_LCD_SET_CURSOR
 14285                           
 14286                           ;Display.c: 106:  LCD_SEND_A_STRING("< CHECK FOOD !!>");
 14287  1E98  3078               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
 14288  1E99  1283               	bcf	3,5	;RP0=0, select bank0
 14289  1E9A  1303               	bcf	3,6	;RP1=0, select bank0
 14290  1E9B  00A1               	movwf	LCD_SEND_A_STRING@string
 14291  1E9C  3080               	movlw	128
 14292  1E9D  00A2               	movwf	LCD_SEND_A_STRING@string+1
 14293  1E9E  120A  158A  2E48   	ljmp	i1l4274
 14294  1EA1                     __end_of_DISP_ON_WORKING_FOOD_ERR:	
 14295                           
 14296                           	psect	text73
 14297  1E81                     __ptext73:	
 14298 ;; *************** function _DISP_CANCEL *****************
 14299 ;; Defined at:
 14300 ;;		line 109 in file "Display.c"
 14301 ;; Parameters:    Size  Location     Type
 14302 ;;		None
 14303 ;; Auto vars:     Size  Location     Type
 14304 ;;		None
 14305 ;; Return value:  Size  Location     Type
 14306 ;;                  1    wreg      void 
 14307 ;; Registers used:
 14308 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 14309 ;; Tracked objects:
 14310 ;;		On entry : 300/B00
 14311 ;;		On exit  : 300/0
 14312 ;;		Unchanged: 0/0
 14313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14314 ;;      Params:         0       0       0       0       0
 14315 ;;      Locals:         0       0       0       0       0
 14316 ;;      Temps:          0       0       0       0       0
 14317 ;;      Totals:         0       0       0       0       0
 14318 ;;Total ram usage:        0 bytes
 14319 ;; Hardware stack levels used:    1
 14320 ;; Hardware stack levels required when called:    3
 14321 ;; This function calls:
 14322 ;;		_LCD_SEND_A_STRING
 14323 ;;		_LCD_SET_CURSOR
 14324 ;; This function is called by:
 14325 ;;		_HEATING_HANDLER
 14326 ;; This function uses a non-reentrant model
 14327 ;;
 14328                           
 14329                           
 14330                           ;psect for function _DISP_CANCEL
 14331  1E81                     _DISP_CANCEL:	
 14332  1E81                     i1l4794:	
 14333                           ;incstack = 0
 14334 ;; hardware stack exceeded
 14335                           ; Regs used in _DISP_CANCEL: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 14336                           
 14337                           
 14338                           ;Display.c: 111:     LCD_SET_CURSOR(1,0);
 14339  1E81  1283               	bcf	3,5	;RP0=0, select bank0
 14340  1E82  1303               	bcf	3,6	;RP1=0, select bank0
 14341  1E83  3001               	movlw	1
 14342  1E84  01A1               	clrf	LCD_SET_CURSOR@row
 14343  1E85  120A  158A  2666   	fcall	_LCD_SET_CURSOR
 14344                           
 14345                           ;Display.c: 112:     LCD_SEND_A_STRING("< CANCELLED !! >");
 14346  1E88  3034               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
 14347  1E89  1283               	bcf	3,5	;RP0=0, select bank0
 14348  1E8A  1303               	bcf	3,6	;RP1=0, select bank0
 14349  1E8B  00A1               	movwf	LCD_SEND_A_STRING@string
 14350  1E8C  3080               	movlw	128
 14351  1E8D  00A2               	movwf	LCD_SEND_A_STRING@string+1
 14352  1E8E  120A  158A  2E48   	ljmp	i1l4274
 14353  1E91                     __end_of_DISP_CANCEL:	
 14354                           
 14355                           	psect	text75
 14356  1E73                     __ptext75:	
 14357 ;; *************** function _DISP_FINISH *****************
 14358 ;; Defined at:
 14359 ;;		line 115 in file "Display.c"
 14360 ;; Parameters:    Size  Location     Type
 14361 ;;		None
 14362 ;; Auto vars:     Size  Location     Type
 14363 ;;		None
 14364 ;; Return value:  Size  Location     Type
 14365 ;;                  1    wreg      void 
 14366 ;; Registers used:
 14367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 14368 ;; Tracked objects:
 14369 ;;		On entry : 300/0
 14370 ;;		On exit  : 300/0
 14371 ;;		Unchanged: 0/0
 14372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14373 ;;      Params:         0       0       0       0       0
 14374 ;;      Locals:         0       0       0       0       0
 14375 ;;      Temps:          0       0       0       0       0
 14376 ;;      Totals:         0       0       0       0       0
 14377 ;;Total ram usage:        0 bytes
 14378 ;; Hardware stack levels used:    1
 14379 ;; Hardware stack levels required when called:    3
 14380 ;; This function calls:
 14381 ;;		_LCD_SEND_A_STRING
 14382 ;;		_LCD_SET_CURSOR
 14383 ;; This function is called by:
 14384 ;;		_FINISH_HANDLER
 14385 ;; This function uses a non-reentrant model
 14386 ;;
 14387                           
 14388                           
 14389                           ;psect for function _DISP_FINISH
 14390  1E73                     _DISP_FINISH:	
 14391                           
 14392                           ;incstack = 0
 14393 ;; hardware stack exceeded
 14394                           ; Regs used in _DISP_FINISH: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 14395  1E73  3001               	movlw	1
 14396                           
 14397                           ;Display.c: 117:  LCD_SET_CURSOR(1,0);
 14398  1E74  01A1               	clrf	LCD_SET_CURSOR@row
 14399  1E75  120A  158A  2666   	fcall	_LCD_SET_CURSOR
 14400                           
 14401                           ;Display.c: 118:  LCD_SEND_A_STRING("< FINISHED !!! >");
 14402  1E78  3045               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
 14403  1E79  1283               	bcf	3,5	;RP0=0, select bank0
 14404  1E7A  1303               	bcf	3,6	;RP1=0, select bank0
 14405  1E7B  00A1               	movwf	LCD_SEND_A_STRING@string
 14406  1E7C  3080               	movlw	128
 14407  1E7D  00A2               	movwf	LCD_SEND_A_STRING@string+1
 14408  1E7E  120A  158A  2E48   	ljmp	i1l4274
 14409  1E81                     __end_of_DISP_FINISH:	
 14410                           
 14411                           	psect	text88
 14412  1F65                     __ptext88:	
 14413 ;; *************** function _utoa *****************
 14414 ;; Defined at:
 14415 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\itoa.c"
 14416 ;; Parameters:    Size  Location     Type
 14417 ;;  buf             1    wreg     PTR unsigned char 
 14418 ;;		 -> LCD_SEND_A_NUMBER@string(4), 
 14419 ;;  val             2    7[COMMON] unsigned int 
 14420 ;;  base            2    9[COMMON] int 
 14421 ;; Auto vars:     Size  Location     Type
 14422 ;;  buf             1    3[BANK0 ] PTR unsigned char 
 14423 ;;		 -> LCD_SEND_A_NUMBER@string(4), 
 14424 ;;  v               2    0[BANK0 ] unsigned int 
 14425 ;;  c               1    2[BANK0 ] unsigned char 
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  1    wreg      PTR unsigned char 
 14428 ;; Registers used:
 14429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14430 ;; Tracked objects:
 14431 ;;		On entry : 300/0
 14432 ;;		On exit  : B00/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14435 ;;      Params:         4       0       0       0       0
 14436 ;;      Locals:         0       4       0       0       0
 14437 ;;      Temps:          0       0       0       0       0
 14438 ;;      Totals:         4       4       0       0       0
 14439 ;;Total ram usage:        8 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; Hardware stack levels required when called:    1
 14442 ;; This function calls:
 14443 ;;		___lwdiv
 14444 ;;		___lwmod
 14445 ;; This function is called by:
 14446 ;;		_itoa
 14447 ;; This function uses a non-reentrant model
 14448 ;;
 14449                           
 14450                           
 14451                           ;psect for function _utoa
 14452  1F65                     _utoa:	
 14453                           
 14454                           ;incstack = 0
 14455 ;; hardware stack exceeded
 14456                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14457                           ;utoa@buf stored from wreg
 14458  1F65  00A3               	movwf	utoa@buf
 14459  1F66  0878               	movf	utoa@val+1,w
 14460  1F67  00A1               	movwf	utoa@v+1
 14461  1F68  0877               	movf	utoa@val,w
 14462  1F69  00A0               	movwf	utoa@v
 14463  1F6A                     i1l4236:	
 14464  1F6A  087A               	movf	utoa@base+1,w
 14465  1F6B  00F1               	movwf	___lwdiv@divisor+1
 14466  1F6C  0879               	movf	utoa@base,w
 14467  1F6D  00F0               	movwf	___lwdiv@divisor
 14468  1F6E  0821               	movf	utoa@v+1,w
 14469  1F6F  00F3               	movwf	___lwdiv@dividend+1
 14470  1F70  0820               	movf	utoa@v,w
 14471  1F71  00F2               	movwf	___lwdiv@dividend
 14472  1F72  27B2  160A  158A   	fcall	___lwdiv
 14473  1F75  0871               	movf	?___lwdiv+1,w
 14474  1F76  00A1               	movwf	utoa@v+1
 14475  1F77  0870               	movf	?___lwdiv,w
 14476  1F78  00A0               	movwf	utoa@v
 14477  1F79  0AA3               	incf	utoa@buf,f
 14478  1F7A  0421               	iorwf	utoa@v+1,w
 14479  1F7B  1D03               	btfss	3,2
 14480  1F7C  2F6A               	goto	i1l4236
 14481  1F7D  0823               	movf	utoa@buf,w
 14482  1F7E  0084               	movwf	4
 14483  1F7F  1383               	bcf	3,7	;select IRP bank0
 14484  1F80  0180               	clrf	0
 14485  1F81  03A3               	decf	utoa@buf,f
 14486  1F82                     i1l4246:	
 14487  1F82  087A               	movf	utoa@base+1,w
 14488  1F83  00F1               	movwf	___lwmod@divisor+1
 14489  1F84  0879               	movf	utoa@base,w
 14490  1F85  00F0               	movwf	___lwmod@divisor
 14491  1F86  0878               	movf	utoa@val+1,w
 14492  1F87  00F3               	movwf	___lwmod@dividend+1
 14493  1F88  0877               	movf	utoa@val,w
 14494  1F89  00F2               	movwf	___lwmod@dividend
 14495  1F8A  27DC  160A  158A   	fcall	___lwmod
 14496  1F8D  0870               	movf	?___lwmod,w
 14497  1F8E  00A2               	movwf	utoa@c
 14498  1F8F  087A               	movf	utoa@base+1,w
 14499  1F90  00F1               	movwf	___lwdiv@divisor+1
 14500  1F91  0879               	movf	utoa@base,w
 14501  1F92  00F0               	movwf	___lwdiv@divisor
 14502  1F93  0878               	movf	utoa@val+1,w
 14503  1F94  00F3               	movwf	___lwdiv@dividend+1
 14504  1F95  0877               	movf	utoa@val,w
 14505  1F96  00F2               	movwf	___lwdiv@dividend
 14506  1F97  27B2  160A  158A   	fcall	___lwdiv
 14507  1F9A  0871               	movf	?___lwdiv+1,w
 14508  1F9B  00F8               	movwf	utoa@val+1
 14509  1F9C  0870               	movf	?___lwdiv,w
 14510  1F9D  00F7               	movwf	utoa@val
 14511  1F9E  300A               	movlw	10
 14512  1F9F  0222               	subwf	utoa@c,w
 14513  1FA0  1C03               	skipc
 14514  1FA1  2FA4               	goto	i1l1479
 14515  1FA2  3007               	movlw	7
 14516  1FA3  07A2               	addwf	utoa@c,f
 14517  1FA4                     i1l1479:	
 14518  1FA4  3030               	movlw	48
 14519  1FA5  07A2               	addwf	utoa@c,f
 14520  1FA6  0823               	movf	utoa@buf,w
 14521  1FA7  0084               	movwf	4
 14522  1FA8  0822               	movf	utoa@c,w
 14523  1FA9  1383               	bcf	3,7	;select IRP bank0
 14524  1FAA  0080               	movwf	0
 14525  1FAB  03A3               	decf	utoa@buf,f
 14526  1FAC  0877               	movf	utoa@val,w
 14527  1FAD  0478               	iorwf	utoa@val+1,w
 14528  1FAE  1D03               	btfss	3,2
 14529  1FAF  2F82               	goto	i1l4246
 14530                           
 14531                           ;	Return value of _utoa is never used
 14532  1FB0  0AA3               	incf	utoa@buf,f
 14533  1FB1  0008               	return
 14534  1FB2                     __end_of_utoa:	
 14535  1FB2                     __ptext90:	
 14536 ;; *************** function ___lwdiv *****************
 14537 ;; Defined at:
 14538 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
 14539 ;; Parameters:    Size  Location     Type
 14540 ;;  divisor         2    0[COMMON] unsigned int 
 14541 ;;  dividend        2    2[COMMON] unsigned int 
 14542 ;; Auto vars:     Size  Location     Type
 14543 ;;  quotient        2    4[COMMON] unsigned int 
 14544 ;;  counter         1    6[COMMON] unsigned char 
 14545 ;; Return value:  Size  Location     Type
 14546 ;;                  2    0[COMMON] unsigned int 
 14547 ;; Registers used:
 14548 ;;		wreg, status,2, status,0
 14549 ;; Tracked objects:
 14550 ;;		On entry : 300/0
 14551 ;;		On exit  : 300/0
 14552 ;;		Unchanged: 300/0
 14553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14554 ;;      Params:         4       0       0       0       0
 14555 ;;      Locals:         3       0       0       0       0
 14556 ;;      Temps:          0       0       0       0       0
 14557 ;;      Totals:         7       0       0       0       0
 14558 ;;Total ram usage:        7 bytes
 14559 ;; Hardware stack levels used:    1
 14560 ;; This function calls:
 14561 ;;		Nothing
 14562 ;; This function is called by:
 14563 ;;		_utoa
 14564 ;; This function uses a non-reentrant model
 14565 ;;
 14566                           
 14567                           
 14568                           ;psect for function ___lwdiv
 14569  1FB2                     ___lwdiv:	
 14570                           
 14571                           ;incstack = 0
 14572 ;; hardware stack exceeded
 14573                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 14574  1FB2  01F4               	clrf	___lwdiv@quotient
 14575  1FB3  01F5               	clrf	___lwdiv@quotient+1
 14576  1FB4  0870               	movf	___lwdiv@divisor,w
 14577  1FB5  0471               	iorwf	___lwdiv@divisor+1,w
 14578  1FB6  1903               	btfsc	3,2
 14579  1FB7  2FD7               	goto	i1l4188
 14580  1FB8  01F6               	clrf	___lwdiv@counter
 14581  1FB9                     L25:	
 14582  1FB9  0AF6               	incf	___lwdiv@counter,f
 14583  1FBA  1BF1               	btfsc	___lwdiv@divisor+1,7
 14584  1FBB  2FC0               	goto	i1l4176
 14585  1FBC  1003               	clrc
 14586  1FBD  0DF0               	rlf	___lwdiv@divisor,f
 14587  1FBE  0DF1               	rlf	___lwdiv@divisor+1,f
 14588  1FBF  2FB9               	goto	L25
 14589  1FC0                     i1l4176:	
 14590  1FC0  1003               	clrc
 14591  1FC1  0DF4               	rlf	___lwdiv@quotient,f
 14592  1FC2  0DF5               	rlf	___lwdiv@quotient+1,f
 14593  1FC3  0871               	movf	___lwdiv@divisor+1,w
 14594  1FC4  0273               	subwf	___lwdiv@dividend+1,w
 14595  1FC5  1D03               	skipz
 14596  1FC6  2FC9               	goto	u338_25
 14597  1FC7  0870               	movf	___lwdiv@divisor,w
 14598  1FC8  0272               	subwf	___lwdiv@dividend,w
 14599  1FC9                     u338_25:	
 14600  1FC9  1C03               	skipc
 14601  1FCA  2FD3               	goto	L26
 14602  1FCB  0870               	movf	___lwdiv@divisor,w
 14603  1FCC  02F2               	subwf	___lwdiv@dividend,f
 14604  1FCD  0871               	movf	___lwdiv@divisor+1,w
 14605  1FCE  1C03               	skipc
 14606  1FCF  03F3               	decf	___lwdiv@dividend+1,f
 14607  1FD0  02F3               	subwf	___lwdiv@dividend+1,f
 14608  1FD1  1474               	bsf	___lwdiv@quotient,0
 14609  1FD2  1003               	clrc
 14610  1FD3                     L26:	
 14611  1FD3  0CF1               	rrf	___lwdiv@divisor+1,f
 14612  1FD4  0CF0               	rrf	___lwdiv@divisor,f
 14613  1FD5  0BF6               	decfsz	___lwdiv@counter,f
 14614  1FD6  2FC0               	goto	i1l4176
 14615  1FD7                     i1l4188:	
 14616  1FD7  0875               	movf	___lwdiv@quotient+1,w
 14617  1FD8  00F1               	movwf	?___lwdiv+1
 14618  1FD9  0874               	movf	___lwdiv@quotient,w
 14619  1FDA  00F0               	movwf	?___lwdiv
 14620  1FDB  0008               	return
 14621  1FDC                     __end_of___lwdiv:	
 14622  1FDC                     __ptext89:	
 14623 ;; *************** function ___lwmod *****************
 14624 ;; Defined at:
 14625 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
 14626 ;; Parameters:    Size  Location     Type
 14627 ;;  divisor         2    0[COMMON] unsigned int 
 14628 ;;  dividend        2    2[COMMON] unsigned int 
 14629 ;; Auto vars:     Size  Location     Type
 14630 ;;  counter         1    4[COMMON] unsigned char 
 14631 ;; Return value:  Size  Location     Type
 14632 ;;                  2    0[COMMON] unsigned int 
 14633 ;; Registers used:
 14634 ;;		wreg, status,2, status,0
 14635 ;; Tracked objects:
 14636 ;;		On entry : 300/0
 14637 ;;		On exit  : 300/0
 14638 ;;		Unchanged: 300/0
 14639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14640 ;;      Params:         4       0       0       0       0
 14641 ;;      Locals:         1       0       0       0       0
 14642 ;;      Temps:          0       0       0       0       0
 14643 ;;      Totals:         5       0       0       0       0
 14644 ;;Total ram usage:        5 bytes
 14645 ;; Hardware stack levels used:    1
 14646 ;; This function calls:
 14647 ;;		Nothing
 14648 ;; This function is called by:
 14649 ;;		_utoa
 14650 ;; This function uses a non-reentrant model
 14651 ;;
 14652                           
 14653                           
 14654                           ;psect for function ___lwmod
 14655  1FDC                     ___lwmod:	
 14656                           
 14657                           ;incstack = 0
 14658 ;; hardware stack exceeded
 14659                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 14660  1FDC  0870               	movf	___lwmod@divisor,w
 14661  1FDD  0471               	iorwf	___lwmod@divisor+1,w
 14662  1FDE  1903               	btfsc	3,2
 14663  1FDF  2FFB               	goto	i1l4208
 14664  1FE0  01F4               	clrf	___lwmod@counter
 14665  1FE1                     L23:	
 14666  1FE1  0AF4               	incf	___lwmod@counter,f
 14667  1FE2  1BF1               	btfsc	___lwmod@divisor+1,7
 14668  1FE3  2FE8               	goto	i1l4200
 14669  1FE4  1003               	clrc
 14670  1FE5  0DF0               	rlf	___lwmod@divisor,f
 14671  1FE6  0DF1               	rlf	___lwmod@divisor+1,f
 14672  1FE7  2FE1               	goto	L23
 14673  1FE8                     i1l4200:	
 14674  1FE8  0871               	movf	___lwmod@divisor+1,w
 14675  1FE9  0273               	subwf	___lwmod@dividend+1,w
 14676  1FEA  1D03               	skipz
 14677  1FEB  2FEE               	goto	u342_25
 14678  1FEC  0870               	movf	___lwmod@divisor,w
 14679  1FED  0272               	subwf	___lwmod@dividend,w
 14680  1FEE                     u342_25:	
 14681  1FEE  1C03               	skipc
 14682  1FEF  2FF7               	goto	L24
 14683  1FF0  0870               	movf	___lwmod@divisor,w
 14684  1FF1  02F2               	subwf	___lwmod@dividend,f
 14685  1FF2  0871               	movf	___lwmod@divisor+1,w
 14686  1FF3  1C03               	skipc
 14687  1FF4  03F3               	decf	___lwmod@dividend+1,f
 14688  1FF5  02F3               	subwf	___lwmod@dividend+1,f
 14689  1FF6  1003               	clrc
 14690  1FF7                     L24:	
 14691  1FF7  0CF1               	rrf	___lwmod@divisor+1,f
 14692  1FF8  0CF0               	rrf	___lwmod@divisor,f
 14693  1FF9  0BF4               	decfsz	___lwmod@counter,f
 14694  1FFA  2FE8               	goto	i1l4200
 14695  1FFB                     i1l4208:	
 14696  1FFB  0873               	movf	___lwmod@dividend+1,w
 14697  1FFC  00F1               	movwf	?___lwmod+1
 14698  1FFD  0872               	movf	___lwmod@dividend,w
 14699  1FFE  00F0               	movwf	?___lwmod
 14700  1FFF  0008               	return
 14701  2000                     __end_of___lwmod:	


Data Sizes:
    Strings     155
    Constant    0
    Data        33
    BSS         33
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      80
    BANK1            80     80      80
    BANK3            96     25      88
    BANK2            96      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> LCD_SEND_A_NUMBER@string(BANK0[4]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> LCD_SEND_A_NUMBER@string(BANK0[4]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> LCD_SEND_A_NUMBER@string(BANK0[4]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 4
		 -> LCD_SEND_A_NUMBER@string(BANK0[4]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 4
		 -> LCD_SEND_A_NUMBER@string(BANK0[4]), 

    LCD_SEND_A_STRING@string	PTR unsigned char  size(2) Largest target is 17
		 -> STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[17]), 
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[17]), LCD_SEND_A_NUMBER@string(BANK0[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _SYS_UPDATE in COMMON

    _SWs_UPDATE->_GPIO_PIN_GET_STATE
    i1_CCP1_PWM_DUTY_CYCLE_LOAD->i1___xxtofl
    _KEYPAD_UPDATE->i1_GPIO_PIN_SET_STATE
    _GPIO_PIN_GET_STATE->i1___bmul
    i1_CCP2_PWM_DUTY_CYCLE_LOAD->i1___xxtofl
    i1___fltol->i1___xxtofl
    i1___flmul->i1___xxtofl
    i1___fldiv->i1___xxtofl
    _LED_SET_STATE->i1_GPIO_PIN_SET_STATE
    _SW_GET_STATE->i1___bmul
    _itoa->_utoa
    _utoa->___lwdiv
    i1_LCD_SND_COMMAND->i1_GPIO_PIN_SET_STATE
    _LCD_SEND_CHARACTER->i1_GPIO_PIN_SET_STATE
    i1_GPIO_PIN_SET_STATE->i1___bmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _SYS_UPDATE in BANK0

    _MOTOR_UPDATE->i1_CCP1_PWM_DUTY_CYCLE_LOAD
    i1_CCP1_PWM_DUTY_CYCLE_LOAD->i1___fltol
    _HEATER_UPDATE->i1_CCP2_PWM_DUTY_CYCLE_LOAD
    i1_CCP2_PWM_DUTY_CYCLE_LOAD->i1___fltol
    i1___fltol->i1___flmul
    i1___flmul->i1___fldiv
    _CONTROL_UPDATE->_HEATING_HANDLER
    _SET_TIME_HANDLER_ON_WORK->_INCREMENT_THIS
    _INCREMENT_THIS->_DISP_UPDATE_TIME_UNIT_AT
    _GOTO_NEXT_DIGIT->_START_BLINKING_AT
    _DISP_UPDATE_TIME_UNIT_AT->_LCD_SEND_A_NUMBER
    _SET_ROTOR_PWR_HANDLER->_SET_ROTOR_PWR_HANDLER_ON_WORK
    _SET_ROTOR_PWR_HANDLER_ON_WORK->_START_BLINKING_AT
    _DISP_MOTOR_DATA->_LCD_SET_CURSOR
    _SET_HEATING_HANDLER->_SET_HEATING_HANDLER_ON_WORK
    _SET_HEATING_HANDLER_ON_WORK->_START_BLINKING_AT
    _START_BLINKING_AT->_LCD_SET_CURSOR
    _DISP_HEATER_DATA->_LCD_SET_CURSOR
    _HEATING_HANDLER->_DISP_SHOW_TIME_AT
    _HEATING_HANDLER->_DISP_UPDATE_TIME
    _STOP_HEATING->_LED_SET_STATE
    _DISP_UPDATE_TIME->_UPDATE_LCD_HOURS
    _DISP_UPDATE_TIME->_UPDATE_LCD_MINUTES
    _DISP_UPDATE_TIME->_UPDATE_LCD_SECONDS
    _DISP_ON_WORKING_FOOD_ERR->_LCD_SET_CURSOR
    _DISP_CANCEL->_LCD_SET_CURSOR
    _DISP_FINISH->_LCD_SET_CURSOR
    _DEFAULT_HANDLER->_DISP_SHOW_TIME_AT
    _STOP_BLINKING->i1_LCD_SND_COMMAND
    _DISP_TIME_ERR->_LCD_SET_CURSOR
    _DISP_SHOW_TIME_AT->_UPDATE_LCD_HOURS
    _DISP_SHOW_TIME_AT->_UPDATE_LCD_MINUTES
    _DISP_SHOW_TIME_AT->_UPDATE_LCD_SECONDS
    _UPDATE_LCD_SECONDS->_LCD_SEND_A_NUMBER
    _UPDATE_LCD_MINUTES->_LCD_SEND_A_NUMBER
    _UPDATE_LCD_HOURS->_LCD_SEND_A_NUMBER
    _LCD_SEND_A_NUMBER->_itoa
    _itoa->_utoa
    _DISP_SHOW_TIME->_LCD_SET_CURSOR
    _LCD_CLEAR->i1_LCD_SND_COMMAND
    _DISP_FOOD_ERR->_LCD_SET_CURSOR
    _DISP_DOOR_ERR->_LCD_SET_CURSOR
    _LCD_SET_CURSOR->i1_LCD_SND_COMMAND
    _LCD_SEND_A_STRING->_LCD_SEND_CHARACTER

Critical Paths under _main in BANK1

    _SWs_INIT->_GPIO_PIN_INIT
    _CCP1_INIT->_GPIO_PIN_INIT
    _LCD_INIT->_GPIO_PIN_INIT
    _LCD_SND_COMMAND->_GPIO_PIN_SET_STATE
    _KEYPAD_INIT->_GPIO_PIN_INIT
    _CCP_PWM_PERIOD_LOAD->___fladd
    ___fladd->___flmul
    ___fltol->___fladd
    ___flmul->___fldiv
    ___fldiv->___xxtofl
    _CCP2_INIT->_GPIO_PIN_INIT
    _GPIO_PIN_INIT->___bmul

Critical Paths under _SYS_UPDATE in BANK1

    None.

Critical Paths under _main in BANK3

    _MOTOR_INIT->_CCP1_PWM_DUTY_CYCLE_LOAD
    _CCP1_PWM_DUTY_CYCLE_LOAD->___fltol
    _HEATER_INIT->_CCP2_PWM_DUTY_CYCLE_LOAD
    _CCP_PWM_PERIOD_LOAD->___fltol
    _CCP2_PWM_DUTY_CYCLE_LOAD->___fltol
    ___fltol->___fladd

Critical Paths under _SYS_UPDATE in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _SYS_UPDATE in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   52335
                       _CONTROL_INIT
                    _ENABLE_INTERUPT
                        _HEATER_INIT
                        _KEYPAD_INIT
                           _LCD_INIT
                         _MOTOR_INIT
                           _SWs_INIT
                        _TIMER0_INIT
                       _TIMER0_START
 ---------------------------------------------------------------------------------
 (1) _TIMER0_START                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_INIT                                          0     0      0       0
                        _TIMER0_STOP
 ---------------------------------------------------------------------------------
 (2) _TIMER0_STOP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SWs_INIT                                             3     3      0    3728
                                             18 BANK1      3     3      0
                      _GPIO_PIN_INIT
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     870
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (1) _MOTOR_INIT                                           0     0      0   17912
                          _CCP1_INIT
           _CCP1_PWM_DUTY_CYCLE_LOAD
                _CCP_PWM_PERIOD_LOAD
                    _MOTOR_SET_STATE
 ---------------------------------------------------------------------------------
 (2) _MOTOR_SET_STATE                                      1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _CCP1_PWM_DUTY_CYCLE_LOAD                            11     9      2    7201
                                             14 BANK3     11     9      2
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _CCP1_INIT                                            0     0      0    2671
                      _GPIO_PIN_INIT
                        _TIMER2_INIT
                       _TIMER2_START
 ---------------------------------------------------------------------------------
 (1) _LCD_INIT                                             1     1      0    7536
                                             18 BANK1      1     1      0
                      _GPIO_PIN_INIT
                 _GPIO_PIN_SET_STATE
                    _LCD_SND_COMMAND
 ---------------------------------------------------------------------------------
 (2) _LCD_SND_COMMAND                                      1     1      0    2606
                                             11 BANK1      1     1      0
                 _GPIO_PIN_SET_STATE
                _GPIO_PORT_SET_STATE
 ---------------------------------------------------------------------------------
 (3) _GPIO_PORT_SET_STATE                                  5     4      1     303
                                              0 BANK1      5     4      1
 ---------------------------------------------------------------------------------
 (1) _KEYPAD_INIT                                          1     1      0    5179
                                             18 BANK1      1     1      0
                      _GPIO_PIN_INIT
                 _GPIO_PIN_SET_STATE
 ---------------------------------------------------------------------------------
 (3) _GPIO_PIN_SET_STATE                                  11     9      2    2259
                                              0 BANK1     11     9      2
 ---------------------------------------------------------------------------------
 (1) _HEATER_INIT                                          0     0      0   17912
                          _CCP2_INIT
           _CCP2_PWM_DUTY_CYCLE_LOAD
                _CCP_PWM_PERIOD_LOAD
                   _HEATER_SET_STATE
 ---------------------------------------------------------------------------------
 (2) _HEATER_SET_STATE                                     1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _CCP_PWM_PERIOD_LOAD                                  5     3      2    8018
                                             14 BANK3      5     3      2
                            ___fladd
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    2242
                                             64 BANK1     16     8      8
                                              0 BANK3      4     4      0
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _CCP2_PWM_DUTY_CYCLE_LOAD                            11     9      2    7201
                                             14 BANK3     11     9      2
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     865
                                              0 BANK1     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     772
                                              4 BANK3     10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3935
                                             39 BANK1     25    17      8
                          __Umul8_16
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) __Umul8_16                                            8     5      3    1097
                                              0 BANK1      8     5      3
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1406
                                             14 BANK1     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _CCP2_INIT                                            0     0      0    2671
                      _GPIO_PIN_INIT
                        _TIMER2_INIT
                       _TIMER2_START
 ---------------------------------------------------------------------------------
 (3) _TIMER2_START                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TIMER2_INIT                                          0     0      0       0
                        _TIMER2_STOP
 ---------------------------------------------------------------------------------
 (4) _TIMER2_STOP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GPIO_PIN_INIT                                       15    13      2    2671
                                              3 BANK1     15    13      2
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ENABLE_INTERUPT                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CONTROL_INIT                                         1     1      0      68
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _SYS_UPDATE                                           4     4      0  212597
                                             71 BANK0      4     4      0
                     _CONTROL_UPDATE
                      _HEATER_UPDATE
                      _KEYPAD_UPDATE
                       _MOTOR_UPDATE
                         _SWs_UPDATE
                      _TIMER0_UPDATE
                        _TIME_UPDATE
 ---------------------------------------------------------------------------------
 (6) _TIME_UPDATE                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _TIMER0_UPDATE                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _SWs_UPDATE                                           6     6      0    1461
                                             10 COMMON     3     3      0
                                              0 BANK0      3     3      0
                 _GPIO_PIN_GET_STATE
                           i1___bmul
 ---------------------------------------------------------------------------------
 (6) _MOTOR_UPDATE                                         0     0      0    4287
         i1_CCP1_PWM_DUTY_CYCLE_LOAD
 ---------------------------------------------------------------------------------
 (7) i1_CCP1_PWM_DUTY_CYCLE_LOAD                          11     9      2    4287
                                             60 BANK0     11     9      2
                          i1___fldiv
                          i1___flmul
                          i1___fltol
                         i1___xxtofl
 ---------------------------------------------------------------------------------
 (6) _KEYPAD_UPDATE                                        4     4      0    1259
                                              0 BANK0      4     4      0
                 _GPIO_PIN_GET_STATE
               i1_GPIO_PIN_SET_STATE
 ---------------------------------------------------------------------------------
 (7) _GPIO_PIN_GET_STATE                                   7     6      1     241
                                              3 COMMON     7     6      1
                           i1___bmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _HEATER_UPDATE                                        0     0      0    4287
         i1_CCP2_PWM_DUTY_CYCLE_LOAD
 ---------------------------------------------------------------------------------
 (7) i1_CCP2_PWM_DUTY_CYCLE_LOAD                          11     9      2    4287
                                             60 BANK0     11     9      2
                          i1___fldiv
                          i1___flmul
                          i1___fltol
                         i1___xxtofl
 ---------------------------------------------------------------------------------
 (8) i1___xxtofl                                          14    10      4     374
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (8) i1___fltol                                           10     6      4     281
                                             50 BANK0     10     6      4
                          i1___fldiv (ARG)
                          i1___flmul (ARG)
                         i1___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (8) i1___flmul                                           25    17      8    2303
                                             25 BANK0     25    17      8
                        i1__Umul8_16
                          i1___fldiv (ARG)
                         i1___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (9) i1__Umul8_16                                          8     5      3     647
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (8) i1___fldiv                                           25    17      8    1206
                                              0 BANK0     25    17      8
                         i1___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) _CONTROL_UPDATE                                       2     2      0  201303
                                             23 BANK0      2     2      0
                    _DEFAULT_HANDLER
                     _FINISH_HANDLER
                    _HEATING_HANDLER
             _KEYPAD_GET_PRESSED_KEY
                _SET_HEATING_HANDLER
              _SET_ROTOR_PWR_HANDLER
                   _SET_TIME_HANDLER
 ---------------------------------------------------------------------------------
 (7) _SET_TIME_HANDLER                                     2     2      0   51332
                                             19 BANK0      2     2      0
                  _DISP_SHOW_TIME_AT
           _SET_TIME_HANDLER_ON_WORK
                      _STOP_BLINKING
 ---------------------------------------------------------------------------------
 (8) _SET_TIME_HANDLER_ON_WORK                             0     0      0   20542
                    _GOTO_NEXT_DIGIT
                     _INCREMENT_THIS
                       _SW_GET_STATE
 ---------------------------------------------------------------------------------
 (9) _INCREMENT_THIS                                       3     3      0   15752
                                             16 BANK0      3     3      0
           _DISP_UPDATE_TIME_UNIT_AT
                    _GOTO_NEXT_DIGIT
                     _LCD_SET_CURSOR
                            ___lbmod
                           i1___bmul
 ---------------------------------------------------------------------------------
 (10) ___lbmod                                             5     4      1     615
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (10) _GOTO_NEXT_DIGIT                                     3     3      0    4020
                                              6 BANK0      3     3      0
                  _START_BLINKING_AT
 ---------------------------------------------------------------------------------
 (10) _DISP_UPDATE_TIME_UNIT_AT                            2     1      1    7517
                                             14 BANK0      2     1      1
                  _LCD_SEND_A_NUMBER
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (7) _SET_ROTOR_PWR_HANDLER                                2     2      0   11796
                                             10 BANK0      2     2      0
                    _DISP_MOTOR_DATA
      _SET_ROTOR_PWR_HANDLER_ON_WORK
                      _STOP_BLINKING
 ---------------------------------------------------------------------------------
 (8) _SET_ROTOR_PWR_HANDLER_ON_WORK                        4     4      0    4861
                                              6 BANK0      4     4      0
             _KEYPAD_GET_PRESSED_KEY
                  _START_BLINKING_AT
                      _STOP_BLINKING
 ---------------------------------------------------------------------------------
 (9) _KEYPAD_GET_PRESSED_KEY                               4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _DISP_MOTOR_DATA                                      0     0      0    5943
                          _LCD_CLEAR
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (7) _SET_HEATING_HANDLER                                  2     2      0   11639
                                              8 BANK0      2     2      0
                   _DISP_HEATER_DATA
        _SET_HEATING_HANDLER_ON_WORK
                      _STOP_BLINKING
 ---------------------------------------------------------------------------------
 (8) _SET_HEATING_HANDLER_ON_WORK                          2     2      0    4704
                                              6 BANK0      2     2      0
                  _START_BLINKING_AT
                      _STOP_BLINKING
 ---------------------------------------------------------------------------------
 (11) _START_BLINKING_AT                                   1     1      0    3712
                                              5 BANK0      1     1      0
                     _LCD_SET_CURSOR
                  i1_LCD_SND_COMMAND
 ---------------------------------------------------------------------------------
 (8) _DISP_HEATER_DATA                                     0     0      0    5943
                          _LCD_CLEAR
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (7) _HEATING_HANDLER                                      5     5      0   74379
                                             18 BANK0      5     5      0
                        _DISP_CANCEL
                      _DISP_DOOR_ERR
           _DISP_ON_WORKING_FOOD_ERR
                  _DISP_SHOW_TIME_AT
                   _DISP_UPDATE_TIME
                      _LED_SET_STATE
                      _STOP_BLINKING
                       _STOP_HEATING
                       _SW_GET_STATE
                           _TIME_GET
                      _TIME_START_AT
                 i1_HEATER_SET_STATE
                  i1_MOTOR_SET_STATE
 ---------------------------------------------------------------------------------
 (8) _TIME_START_AT                                        4     1      3     294
                                              0 COMMON     4     1      3
                      _TIME_CONTINUE
 ---------------------------------------------------------------------------------
 (9) _TIME_CONTINUE                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _STOP_HEATING                                         0     0      0    1894
                      _LED_SET_STATE
                           _TIME_GET
                          _TIME_STOP
                 i1_HEATER_SET_STATE
                  i1_MOTOR_SET_STATE
 ---------------------------------------------------------------------------------
 (8) i1_MOTOR_SET_STATE                                    1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_HEATER_SET_STATE                                   1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _TIME_STOP                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TIME_GET                                             3     0      3       0
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (9) _LED_SET_STATE                                        3     2      1    1850
                                              0 BANK0      3     2      1
               i1_GPIO_PIN_SET_STATE
                           i1___bmul
 ---------------------------------------------------------------------------------
 (8) _DISP_UPDATE_TIME                                     3     0      3   23793
                                             15 BANK0      3     0      3
                   _UPDATE_LCD_HOURS
                 _UPDATE_LCD_MINUTES
                 _UPDATE_LCD_SECONDS
 ---------------------------------------------------------------------------------
 (8) _DISP_ON_WORKING_FOOD_ERR                             0     0      0    4951
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (8) _DISP_CANCEL                                          0     0      0    4951
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (7) _FINISH_HANDLER                                       2     2      0    5721
                                              5 BANK0      2     2      0
                        _DISP_FINISH
                       _SW_GET_STATE
 ---------------------------------------------------------------------------------
 (8) _DISP_FINISH                                          0     0      0    4951
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (7) _DEFAULT_HANDLER                                      0     0      0   46413
                      _DISP_DOOR_ERR
                      _DISP_FOOD_ERR
                  _DISP_SHOW_TIME_AT
                      _DISP_TIME_ERR
                      _STOP_BLINKING
                       _SW_GET_STATE
 ---------------------------------------------------------------------------------
 (9) _SW_GET_STATE                                         2     2      0     770
                                              3 COMMON     2     2      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (7) i1___bmul                                             3     2      1     725
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (8) _STOP_BLINKING                                        0     0      0     992
                  i1_LCD_SND_COMMAND
 ---------------------------------------------------------------------------------
 (8) _DISP_TIME_ERR                                        0     0      0    4951
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (8) _DISP_SHOW_TIME_AT                                    3     0      3   29798
                                             15 BANK0      3     0      3
                     _DISP_SHOW_TIME
                   _UPDATE_LCD_HOURS
                 _UPDATE_LCD_MINUTES
                 _UPDATE_LCD_SECONDS
 ---------------------------------------------------------------------------------
 (9) _UPDATE_LCD_SECONDS                                   1     1      0    7853
                                             14 BANK0      1     1      0
                  _LCD_SEND_A_NUMBER
                     _LCD_SET_CURSOR
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (9) _UPDATE_LCD_MINUTES                                   1     1      0    7853
                                             14 BANK0      1     1      0
                  _LCD_SEND_A_NUMBER
                     _LCD_SET_CURSOR
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (9) _UPDATE_LCD_HOURS                                     1     1      0    7853
                                             14 BANK0      1     1      0
                  _LCD_SEND_A_NUMBER
                     _LCD_SET_CURSOR
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (10) ___lbdiv                                             4     3      1     390
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (11) _LCD_SEND_A_NUMBER                                   6     4      2    4699
                                              8 BANK0      6     4      2
                  _LCD_SEND_A_STRING
                               _itoa
 ---------------------------------------------------------------------------------
 (12) _itoa                                                6     2      4    1612
                                             11 COMMON     2     2      0
                                              4 BANK0      4     0      4
                               _utoa
 ---------------------------------------------------------------------------------
 (13) _utoa                                                8     4      4    1264
                                              7 COMMON     4     0      4
                                              0 BANK0      4     4      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (14) ___lwmod                                             5     1      4     311
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (14) ___lwdiv                                             7     3      4     466
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (9) _DISP_SHOW_TIME                                       0     0      0    5943
                          _LCD_CLEAR
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (10) _LCD_CLEAR                                           0     0      0     992
                  i1_LCD_SND_COMMAND
 ---------------------------------------------------------------------------------
 (8) _DISP_FOOD_ERR                                        0     0      0    4951
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (8) _DISP_DOOR_ERR                                        0     0      0    4951
                  _LCD_SEND_A_STRING
                     _LCD_SET_CURSOR
 ---------------------------------------------------------------------------------
 (10) _LCD_SET_CURSOR                                      4     3      1    2698
                                              1 BANK0      4     3      1
                  i1_LCD_SND_COMMAND
 ---------------------------------------------------------------------------------
 (9) i1_LCD_SND_COMMAND                                    1     1      0     992
                                              0 BANK0      1     1      0
               i1_GPIO_PIN_SET_STATE
              i1_GPIO_PORT_SET_STATE
 ---------------------------------------------------------------------------------
 (12) _LCD_SEND_A_STRING                                   2     0      2    2253
                                              1 BANK0      2     0      2
                 _LCD_SEND_CHARACTER
 ---------------------------------------------------------------------------------
 (13) _LCD_SEND_CHARACTER                                  1     1      0     992
                                              0 BANK0      1     1      0
               i1_GPIO_PIN_SET_STATE
              i1_GPIO_PORT_SET_STATE
 ---------------------------------------------------------------------------------
 (10) i1_GPIO_PORT_SET_STATE                               5     4      1     155
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (7) i1_GPIO_PIN_SET_STATE                                11     9      2     793
                                              3 COMMON    11     9      2
                           i1___bmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CONTROL_INIT
   _ENABLE_INTERUPT
   _HEATER_INIT
     _CCP2_INIT
       _GPIO_PIN_INIT
         ___bmul (ARG)
       _TIMER2_INIT
         _TIMER2_STOP
       _TIMER2_START
     _CCP2_PWM_DUTY_CYCLE_LOAD
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _CCP_PWM_PERIOD_LOAD
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _HEATER_SET_STATE
   _KEYPAD_INIT
     _GPIO_PIN_INIT
       ___bmul (ARG)
     _GPIO_PIN_SET_STATE
   _LCD_INIT
     _GPIO_PIN_INIT
       ___bmul (ARG)
     _GPIO_PIN_SET_STATE
     _LCD_SND_COMMAND
       _GPIO_PIN_SET_STATE
       _GPIO_PORT_SET_STATE
   _MOTOR_INIT
     _CCP1_INIT
       _GPIO_PIN_INIT
         ___bmul (ARG)
       _TIMER2_INIT
         _TIMER2_STOP
       _TIMER2_START
     _CCP1_PWM_DUTY_CYCLE_LOAD
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _CCP_PWM_PERIOD_LOAD
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _MOTOR_SET_STATE
   _SWs_INIT
     _GPIO_PIN_INIT
       ___bmul (ARG)
     ___bmul
   _TIMER0_INIT
     _TIMER0_STOP
   _TIMER0_START

 _SYS_UPDATE (ROOT)
   _CONTROL_UPDATE
     _DEFAULT_HANDLER
       _DISP_DOOR_ERR
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _DISP_FOOD_ERR
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _DISP_SHOW_TIME_AT
         _DISP_SHOW_TIME
           _LCD_CLEAR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SEND_A_STRING
             _LCD_SEND_CHARACTER
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
         _UPDATE_LCD_HOURS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_MINUTES
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_SECONDS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
       _DISP_TIME_ERR
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _STOP_BLINKING
         i1_LCD_SND_COMMAND
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1_GPIO_PORT_SET_STATE
       _SW_GET_STATE
         i1___bmul
     _FINISH_HANDLER
       _DISP_FINISH
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _SW_GET_STATE
         i1___bmul
     _HEATING_HANDLER
       _DISP_CANCEL
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _DISP_DOOR_ERR
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _DISP_ON_WORKING_FOOD_ERR
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _DISP_SHOW_TIME_AT
         _DISP_SHOW_TIME
           _LCD_CLEAR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SEND_A_STRING
             _LCD_SEND_CHARACTER
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
         _UPDATE_LCD_HOURS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_MINUTES
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_SECONDS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
       _DISP_UPDATE_TIME
         _UPDATE_LCD_HOURS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_MINUTES
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_SECONDS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
       _LED_SET_STATE
         i1_GPIO_PIN_SET_STATE
           i1___bmul (ARG)
         i1___bmul
       _STOP_BLINKING
         i1_LCD_SND_COMMAND
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1_GPIO_PORT_SET_STATE
       _STOP_HEATING
         _LED_SET_STATE
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1___bmul
         _TIME_GET
         _TIME_STOP
         i1_HEATER_SET_STATE
         i1_MOTOR_SET_STATE
       _SW_GET_STATE
         i1___bmul
       _TIME_GET
       _TIME_START_AT
         _TIME_CONTINUE
       i1_HEATER_SET_STATE
       i1_MOTOR_SET_STATE
     _KEYPAD_GET_PRESSED_KEY
     _SET_HEATING_HANDLER
       _DISP_HEATER_DATA
         _LCD_CLEAR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _SET_HEATING_HANDLER_ON_WORK
         _START_BLINKING_AT
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _STOP_BLINKING
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _STOP_BLINKING
         i1_LCD_SND_COMMAND
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1_GPIO_PORT_SET_STATE
     _SET_ROTOR_PWR_HANDLER
       _DISP_MOTOR_DATA
         _LCD_CLEAR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SEND_A_STRING
           _LCD_SEND_CHARACTER
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _LCD_SET_CURSOR
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _SET_ROTOR_PWR_HANDLER_ON_WORK
         _KEYPAD_GET_PRESSED_KEY
         _START_BLINKING_AT
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
         _STOP_BLINKING
           i1_LCD_SND_COMMAND
             i1_GPIO_PIN_SET_STATE
               i1___bmul (ARG)
             i1_GPIO_PORT_SET_STATE
       _STOP_BLINKING
         i1_LCD_SND_COMMAND
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1_GPIO_PORT_SET_STATE
     _SET_TIME_HANDLER
       _DISP_SHOW_TIME_AT
         _DISP_SHOW_TIME
           _LCD_CLEAR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SEND_A_STRING
             _LCD_SEND_CHARACTER
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
         _UPDATE_LCD_HOURS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_MINUTES
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
         _UPDATE_LCD_SECONDS
           _LCD_SEND_A_NUMBER
             _LCD_SEND_A_STRING
               _LCD_SEND_CHARACTER
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbdiv
       _SET_TIME_HANDLER_ON_WORK
         _GOTO_NEXT_DIGIT
           _START_BLINKING_AT
             _LCD_SET_CURSOR
               i1_LCD_SND_COMMAND
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
         _INCREMENT_THIS
           _DISP_UPDATE_TIME_UNIT_AT
             _LCD_SEND_A_NUMBER
               _LCD_SEND_A_STRING
                 _LCD_SEND_CHARACTER
                   i1_GPIO_PIN_SET_STATE
                     i1___bmul (ARG)
                   i1_GPIO_PORT_SET_STATE
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
             _LCD_SET_CURSOR
               i1_LCD_SND_COMMAND
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
           _GOTO_NEXT_DIGIT
             _START_BLINKING_AT
               _LCD_SET_CURSOR
                 i1_LCD_SND_COMMAND
                   i1_GPIO_PIN_SET_STATE
                     i1___bmul (ARG)
                   i1_GPIO_PORT_SET_STATE
               i1_LCD_SND_COMMAND
                 i1_GPIO_PIN_SET_STATE
                   i1___bmul (ARG)
                 i1_GPIO_PORT_SET_STATE
           _LCD_SET_CURSOR
             i1_LCD_SND_COMMAND
               i1_GPIO_PIN_SET_STATE
                 i1___bmul (ARG)
               i1_GPIO_PORT_SET_STATE
           ___lbmod
           i1___bmul
         _SW_GET_STATE
           i1___bmul
       _STOP_BLINKING
         i1_LCD_SND_COMMAND
           i1_GPIO_PIN_SET_STATE
             i1___bmul (ARG)
           i1_GPIO_PORT_SET_STATE
   _HEATER_UPDATE
     i1_CCP2_PWM_DUTY_CYCLE_LOAD
       i1___fldiv
         i1___xxtofl (ARG)
       i1___flmul
         i1__Umul8_16
         i1___fldiv (ARG)
           i1___xxtofl (ARG)
         i1___xxtofl (ARG)
       i1___fltol
         i1___fldiv (ARG)
           i1___xxtofl (ARG)
         i1___flmul (ARG)
           i1__Umul8_16
           i1___fldiv (ARG)
             i1___xxtofl (ARG)
           i1___xxtofl (ARG)
         i1___xxtofl (ARG)
       i1___xxtofl
   _KEYPAD_UPDATE
     _GPIO_PIN_GET_STATE
       i1___bmul (ARG)
     i1_GPIO_PIN_SET_STATE
       i1___bmul (ARG)
   _MOTOR_UPDATE
     i1_CCP1_PWM_DUTY_CYCLE_LOAD
       i1___fldiv
         i1___xxtofl (ARG)
       i1___flmul
         i1__Umul8_16
         i1___fldiv (ARG)
           i1___xxtofl (ARG)
         i1___xxtofl (ARG)
       i1___fltol
         i1___fldiv (ARG)
           i1___xxtofl (ARG)
         i1___flmul (ARG)
           i1__Umul8_16
           i1___fldiv (ARG)
             i1___xxtofl (ARG)
           i1___xxtofl (ARG)
         i1___xxtofl (ARG)
       i1___xxtofl
   _SWs_UPDATE
     _GPIO_PIN_GET_STATE
       i1___bmul (ARG)
     i1___bmul
   _TIMER0_UPDATE
   _TIME_UPDATE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     19      58       9       91.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     50      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4B      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     106      12        0.0%
ABS                  0      0     106       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Mar 01 11:13:50 2020

                       ??_MOTOR_SET_STATE 00A0                        __size_of_CCP1_INIT 0012  
                      __size_of_CCP2_INIT 0012              ?_SET_HEATING_HANDLER_ON_WORK 0070  
                            ___fldiv@aexp 00C6                              ___fldiv@bexp 00C5  
                                       pc 0002                              ___fldiv@sign 00BE  
                          ___bmul@product 00A1                               i1___fldiv@a 0020  
                             i1___fldiv@b 0024                               __CFG_CP$OFF 0000  
                             i1___flmul@a 003D                               i1___flmul@b 0039  
                                      fsr 0004               __size_of_GPIO_PIN_GET_STATE 001D  
                     __Umul8_16@word_mpld 00A6                             _GPIO_PIN_INIT 0525  
                              i1___xxtofl 0363                                       l931 1F14  
                                     _GIE 005F                                       _PR2 0092  
                            __CFG_CPD$OFF 0000                                       _PSA 040B  
                            _STOP_HEATING 0A4B                   ??_SET_ROTOR_PWR_HANDLER 002A  
                                     _SWs 0190                                       fsr0 0004  
                                     indf 0000                              i1___fltol@f1 0052  
              __size_ofi1_MOTOR_SET_STATE 0005           __size_of_KEYPAD_GET_PRESSED_KEY 000B  
                            __CFG_FOSC$HS 0000                              ?_KEYPAD_INIT 0070  
                            ___flmul@aexp 00D4                              ___flmul@bexp 00D9  
                         _DISP_MOTOR_DATA 0DBE                 UPDATE_LCD_MINUTES@MINUTES 002E  
                            ___flmul@sign 00D3                              ___flmul@temp 00DE  
                            ___flmul@prod 00DA                GOTO_NEXT_DIGIT@count_right 01C5  
                            __CFG_LVP$OFF 0000                             i1___fldiv@grs 0033  
                           i1___fldiv@rem 002C                              ___fltol@exp1 01DA  
                                    l1311 10C1                                      l1312 10BD  
                                    l1322 1171                                      l1404 13A5  
                                    l1324 1155                                      l1316 10E8  
                                    l1405 13A3                                      l1333 119B  
                                    l1325 115C                                      l1317 10E4  
                                    l1334 119D                                      l1326 115E  
                                    l1343 1229                                      l1408 13BC  
                                    l1344 122E                                      l1409 13BA  
                                    l1426 1585                                      l1339 120E  
                                    l1372 168F                                      l1452 160D  
                                    l1373 168C                                      l1359 126E  
                                    l1368 1677                                      l1369 1674  
                                    l1465 1643                                      l5010 10ED  
                                    l5002 10D9                                      l1491 15EB  
                                    l1397 177E                                      l5110 1233  
                                    l5112 1236                                      l5016 10F6  
                                    l5122 1244                                      l5204 16B4  
                                    l4510 17F4                                      l5222 16E8  
                                    l5230 16D0                                      l5142 1269  
                                    l5134 125A                                      l5118 1241  
                                    l5062 116B                                      l5046 1125  
                                    l5232 1709                                      l5320 13C0  
                                    l5170 167B                                      l5402 1578  
                                    l5146 1270                                      l5082 11AB  
                                    l5058 1163                                      l5228 1707  
                                    l4620 15A9                                      l5324 13CA  
                                    l5308 13A9                                      l5420 1605  
                                    l5092 1200                                      l5068 117C  
                                    l5254 1736                                      l5246 170F  
                                    l4614 159E                                      l5430 1625  
                                    l5078 11A2                                      l6230 04C7  
                                    l6206 0489                                      l5280 1776  
                                    l5248 1722                                      l5184 1693  
                                    l4632 15BF                                      l5432 1632  
                                    l5424 1618                                      l5274 1760  
                                    l5258 1738                                      l4650 15E0  
                                    l4626 15B4                                      l5450 1659  
                                    l5098 121F                                      l6218 04A8  
                                    l5268 174C                                      l5196 16AC  
                                    l4644 15D5                                      l5372 1525  
                                    l5436 1641                                      l5428 161A  
                                    l5286 177F                                      l4638 15CA  
                                    l5382 153B                                      l5438 1637  
                                    l6416 1EB4                                      l5392 154F  
                                    l6184 044D                                      l6176 0427  
                                    l5378 1539                                      l5396 1563  
                                    l4940 178F                                      l4954 17AD  
                                    l4938 178A                                      l6466 1EE7  
                                    l4964 17B9                                      l4980 10B2  
                                    l4966 17C3                                      l4958 17B5  
                                    l5838 1E6F                                      l4988 10C6  
                                    STR_1 1821                                      STR_2 18A9  
                                    STR_3 1852                                      STR_4 1832  
                                    STR_5 18A9                                      STR_6 1852  
                                    STR_7 1865                                      STR_8 1898  
                                    STR_9 1876                            ?_LED_SET_STATE 0020  
                           _STOP_BLINKING 0C83                                      _T0CS 040D  
                                    _T0SE 040C                                      u4054 052D  
                                    u4055 052B                                      u5015 1755  
                                    u4064 0544                                      u4065 0542  
                                    u5025 176B                                      u4074 059E  
                                    u4075 059C                                      u4500 114A  
                                    u4084 05AE                                      u4325 1798  
                                    u4085 05AC                                      u4603 11BE  
                                    _PEIE 005E                                      u5255 1558  
                                    _LEDs 01AD                                      u5265 156E  
                                    u4490 1149                                      u4485 113D  
                                    u4915 16F6                                      u6717 0521  
                      __size_of_LCD_CLEAR 000B                                      _TMR0 0001  
                                    _TMR2 0011                                _SYS_UPDATE 0805  
                __end_of_DISP_HEATER_DATA 0E1A                              __CFG_WRT$OFF 0000  
                                    _main 1EE7               __end_of_SET_HEATING_HANDLER 0FD8  
                                    _itoa 0F53                             i1___flmul@grs 0047  
                                    btemp 007E                                      _utoa 1F65  
                 __end_of_ENABLE_INTERUPT 1E5F                 UPDATE_LCD_SECONDS@SECONDS 002E  
                                    start 0012                           ___fldiv@new_exp 00BF  
             __size_of_GPIO_PIN_SET_STATE 002A                         ___bmul@multiplier 00A2  
                           _KEYPAD_UPDATE 0D3D                   __end_of_DEFAULT_HANDLER 09B5  
                   __end_of_HEATER_UPDATE 1EE7                     __end_of_TIMER0_UPDATE 0FFD  
                        __end_of_LCD_INIT 0525                               ?_MOTOR_INIT 0070  
           ??_SET_HEATING_HANDLER_ON_WORK 0026                            i1___fldiv@aexp 0038  
                          i1___fldiv@bexp 0037                            i1___fldiv@sign 0030  
                          ?_GPIO_PIN_INIT 00A3                             ___fltol@sign1 01D9  
                         __end_of___fladd 127B                                     ?_main 0070  
                         __end_of___fldiv 1783                                     ?_itoa 0024  
                         __end_of___lbdiv 0CE6                                     STR_10 1887  
                                   STR_11 1843                                     STR_12 1854  
                                   STR_13 1810                                     STR_14 18A9  
                                   STR_15 1852                             __CFG_WDTE$OFF 0000  
                         __end_of___lbmod 0B51                           __end_of___flmul 1590  
                         __end_of___fltol 17D2                                     ?_utoa 0077  
                         __end_of___lwdiv 1FDC                           __end_of___lwmod 2000  
                                   i1l284 0B52                                     i1l375 0E8E  
                                   i1l607 1F64                                     i1l720 0714  
                                   i1l752 0A3F                                     i1l728 0FD7  
                                   i1l736 0FF6                                     i1l762 0FB8  
                                   i1l926 0820                  _DISP_ON_WORKING_FOOD_ERR 1E91  
                         _HEATING_HANDLER 09B5                             __CFG_PWRTE$ON 0000  
                      __size_of_TIME_STOP 0004                     __size_of_SW_GET_STATE 000B  
                        __end_of_TIME_GET 0C8F                ??_CCP2_PWM_DUTY_CYCLE_LOAD 01DD  
       __size_of_DISP_UPDATE_TIME_UNIT_AT 000C                         __end_of_CCP1_INIT 1032  
                       __end_of_CCP2_INIT 17E4                            i1___flmul@aexp 0046  
                          i1___flmul@bexp 004B                 __size_of_HEATER_SET_STATE 0005  
               ?_DISP_UPDATE_TIME_UNIT_AT 002E                            ?_STOP_BLINKING 0070  
                              _SWs_UPDATE 0B51                            i1___flmul@sign 0045  
                          i1___flmul@temp 0050                      __size_of_HEATER_INIT 0015  
                          i1___flmul@prod 004C               __size_of_UPDATE_LCD_MINUTES 001F  
             __size_of_UPDATE_LCD_SECONDS 001F                          _DISP_UPDATE_TIME 0861  
                        __end_ofi1___bmul 0C76                            __CFG_BOREN$OFF 0000  
                                   pclath 000A                            i1___fltol@exp1 005B  
                                   utoa@c 0022                                     utoa@v 0020  
                                   status 0003             _CCP2_PWM_DUTY_CYCLE_LOAD$1939 01E0  
                                   wtemp0 007E                        __size_ofi1___fldiv 011E  
                      __size_ofi1___flmul 01FE                        __size_ofi1___fltol 004F  
                         ___lbdiv@divisor 0070                           ___lbdiv@counter 0072  
                  _KEYPAD_GET_PRESSED_KEY 0F6D                            ?_KEYPAD_UPDATE 0070  
       __size_of_CCP1_PWM_DUTY_CYCLE_LOAD 008B                      DISP_UPDATE_TIME@time 002F  
               ?_CCP1_PWM_DUTY_CYCLE_LOAD 01DB                           __initialization 0015  
                        __end_of_SWs_INIT 045D                              __end_of_main 1F15  
                            __end_of_itoa 0F6D                              __end_of_utoa 1FB2  
            DISP_UPDATE_TIME_UNIT_AT@UNIT 002F                         __end_of_LCD_CLEAR 0F36  
                            _SW_GET_STATE 0A40                   __end_of_DISP_MOTOR_DATA 0DEC  
                            ?_TIMER0_INIT 0070                     __end_of_TIME_CONTINUE 1000  
                            ?_TIMER2_INIT 0070                                    ??_main 00F0  
                            ?_TIMER0_STOP 0070                               ?i1___xxtofl 0070  
                                  ??_itoa 007B                              ?_TIMER2_STOP 0070  
                    __size_of_DISP_CANCEL 0010                                    ??_utoa 007B  
                    __size_of_DISP_FINISH 000E                    LCD_SND_COMMAND@command 00AB  
                        ??_INCREMENT_THIS 0030                      __end_of_CONTROL_INIT 1ECB  
                         ??_LED_SET_STATE 007E               ?i1_CCP2_PWM_DUTY_CYCLE_LOAD 005C  
    __size_of_SET_HEATING_HANDLER_ON_WORK 004B                                    i1S6778 18AB  
                                  _CCPR1L 0015                                    _CCPR2L 001B  
                            ?_TIME_UPDATE 0070                                    i1l1228 0CD7  
                                  i1l1404 0119                                    i1l1405 0117  
                                  i1l1408 0130                                    i1l1409 012E  
                                  i1l1426 02F8                                    i1l1372 05F5  
                                  i1l1452 0380                                    i1l1373 05F3  
                                  i1l4200 1FE8                                    i1l1368 05DE  
                                  i1l1369 05DC                                    i1l1465 03B6  
                                  i1l1491 035E                                    i1l4300 0E6C  
                                  i1l1397 06E3                                    i1l4302 0E70  
                                  i1l1479 1FA4                                    i1l4304 0E74  
                                  i1l4208 1FFB                                    i1l4402 07CE  
                                  i1l4330 074C                                    i1l4308 0E78  
                                  i1l4236 1F6A                                    i1l4316 0CBC  
                                  i1l4332 0750                                    i1l4246 1F82  
                                  i1l4422 0CD1                                    i1l6022 09A4  
                                  i1l6014 0998                                    i1l4350 0768  
                                  i1l4334 0752                                    i1l4280 0E48  
                                  i1l4176 1FC0                                    i1l4408 07DB  
                                  i1l4600 0B31                                    i1l4274 0E48  
                                  i1l6026 09AC                                    i1l6018 099C  
                                  i1l4370 0784                                    i1l4362 0779  
                                  i1l4354 076E                                    i1l4346 0762  
                                  i1l6130 0B54                                    i1l4188 1FD7  
                                  i1l4292 0F61                                    i1l4436 0CE4  
                                  i1l4364 077D                                    i1l4356 0772  
                                  i1l4348 0766                                    i1l4452 0B4D  
                                  i1l4444 0B39                                    i1l4700 0348  
                                  i1l6300 0DBB                                    i1l4526 0C83  
                                  i1l4374 078B                                    i1l4366 077F  
                                  i1l4358 0774                                    i1l6144 0BC7  
                                  i1l6160 0C23                                    i1l4298 0E68  
                                  i1l4554 095C                                    i1l4546 0CB3  
                                  i1l4538 0CFC                                    i1l4378 0790  
                                  i1l4394 07A5                                    i1l5610 06C5  
                                  i1l4706 0353                                    i1l6322 07F2  
                                  i1l6154 0C08                                    i1l6162 0C44  
                                  i1l6138 0B9D                                    i1l6402 1F50  
                                  i1l4900 0922                                    i1l4388 07A0  
                                  i1l4396 07C1                                    i1l4580 0ABB  
                                  i1l4812 0715                                    i1l5604 06B1  
                                  i1l5540 061A                                    i1l5532 0612  
                                  i1l6244 0D45                                    i1l6148 0BE2  
                                  i1l6404 1F60                                    i1l4566 0FFD  
                                  i1l4910 0934                                    i1l4582 0AC8  
                                  i1l4822 072C                                    i1l6430 0833  
                                  i1l5622 06E4                                    i1l4670 0311  
                                  i1l6270 0D6B                                    i1l6262 0D5B  
                                  i1l6254 0D54                                    i1l6326 07F6  
                                  i1l6318 07EC                                    i1l4832 0896  
                                  i1l4904 092B                                    i1l4584 0ADA  
                                  i1l4592 0B06                                    i1l6432 0839  
                                  i1l5616 06DB                                    i1l5472 03FF  
                                  i1l5456 03DC                                    i1l6352 1EDE  
                                  i1l6344 1ED4                                    i1l4754 0883  
                                  i1l4850 08C7                                    i1l4834 0897  
                                  i1l4842 08A6                                    i1l4586 0AE7  
                                  i1l4594 0B22                                    i1l4578 0AA9  
                                  i1l4826 0734                                    i1l6434 083D  
                                  i1l6442 0849                                    i1l4682 0327  
                                  i1l5714 02AC                                    i1l5482 040B  
                                  i1l5458 03E1                                    i1l6362 1F23  
                                  i1l4836 089C                                    i1l4844 08BD  
                                  i1l5900 0FE4                                    i1l4588 0AF9  
                                  i1l4828 0736                                    i1l6436 0841  
                                  i1l6444 0860                                    i1l5564 066D  
                                  i1l4676 031C                                    i1l5732 02D6  
                                  i1l5708 0299                                    i1l5660 013E  
                                  i1l5644 011D                                    i1l5484 0415  
                                  i1l5476 0407                                    i1l6348 1EDA  
                                  i1l6292 0DAF                                    i1l6276 0D84  
                                  i1l6380 1F38                                    i1l6372 1F2F  
                                  i1l4782 0C8F                                    i1l4790 1E91  
                                  i1l4854 08CC                                    i1l4838 08A1  
                                  i1l6438 0845                                    i1l5590 069B  
                                  i1l5582 0675                                    i1l5558 064E  
                                  i1l5566 0636                                    i1l4694 033D  
                                  i1l5718 02AE                                    i1l6390 1F48  
                                  i1l6366 1F28                                    i1l4880 08E7  
                                  i1l5584 0688                                    i1l5568 066F  
                                  i1l4688 0332                                    i1l5728 02C2  
                                  i1l5656 0134                                    i1l5760 038B  
                                  i1l6392 1F44                                    i1l6384 1F3E  
                                  i1l4786 0D2F                                    i1l4794 1E81  
                                  i1l5930 09F8                                    i1l4866 08DB  
                                  i1l4858 08D3                                    i1l4882 08EC  
                                  i1l5906 0FED                                    i1l5594 069D  
                                  i1l5738 02EB                                    i1l6378 1F36  
                                  i1l4876 08E1                                    i1l5772 03B4  
                                  i1l5764 038D                                    i1l5756 0378  
                                  i1l6388 1F46                                    i1l5950 0A21  
                                  i1l5918 09CC                                    i1l4878 08E2  
                                  i1l4886 08F1                                    i1l5870 070B  
                                  i1l5862 06F4                                    i1l5774 03AA  
                                  i1l5766 0398                                    i1l5944 0A16  
                                  i1l4896 091B                                    i1l4888 0908  
                                  i1l5768 03A5                                    i1l5882 0FC5  
                                  i1l5786 03CC                                    i1l5972 0F79  
                                  i1l5956 0A2C                                    i1l6780 070C  
                                  i1l6772 1F58                                    i1l5982 0F86  
                                  i1l6790 0FCF                                    i1l6782 0B0E  
                                  i1l6774 0C36                                    i1l6792 08B2  
                                  i1l5888 0FCE                                    i1l6784 07AD  
                                  i1l6776 0853                                    i1l5994 0965  
                                  i1l6794 0A37                                    i1l6786 0FEE  
                                  i1l6796 0FB0                                    i1l5988 0FA4  
                                  i1l6788 08FD                                    i1l6798 0E80  
                             ?_SYS_UPDATE 0070                                    u342_25 1FEE  
                                  u344_24 0EFF                                    u344_25 0EFD  
                     __size_of_MOTOR_INIT 0015                                    u345_24 0F0F  
                                  u345_25 0F0D                                    u338_25 1FC9  
                                  u611_20 0F8F                                    u611_22 0F90  
                                  u603_24 0F43                                    u603_25 0F41  
                                  u612_20 0F99                                    u612_22 0F9A  
                                  u604_24 0F4D                                    u604_25 0F4B  
                                  u539_25 03EA                                    u556_25 065C  
                                  u566_25 06BA                                    u590_25 02CB  
                                  u567_25 06D0                                    u591_25 02E1  
                                  _TMR0IE 005D                                    _TMR0IF 005A  
                                  _TMR2IE 0461                ??_SET_TIME_HANDLER_ON_WORK 007E  
                                  _TMR2ON 0092                     __end_of_TIME_START_AT 0D23  
                       ?_UPDATE_LCD_HOURS 0070                          __end_of___xxtofl 1662  
                 __size_of_FINISH_HANDLER 0041                          ?_ENABLE_INTERUPT 0070  
                      ??_UPDATE_LCD_HOURS 007E                __end_ofi1_HEATER_SET_STATE 0A75  
                        ??_LCD_SET_CURSOR 0022                         __end_of_TIME_STOP 0D17  
                 LCD_SEND_A_NUMBER@string 002A                          ?_DEFAULT_HANDLER 0070  
                                  ___bmul 045D                                 ??___fladd 00E8  
                               ??___fldiv 00B6                                 ??___lbdiv 0071  
                               ??___lbmod 0071                                 ??___flmul 00CF  
                 GPIO_PIN_INIT@GPIO_PORTx 00B1                                 ??___fltol 01D5  
                         ??_GPIO_PIN_INIT 00A5                                 ??___lwdiv 0074  
                               ??___lwmod 0074                   __end_of_HEATING_HANDLER 0A40  
                KEYPAD_UPDATE@ROW_counter 0023                         __end_ofi1___fldiv 06E8  
                       __end_ofi1___flmul 0303                         __end_ofi1___fltol 0424  
                      __size_of__Umul8_16 0060                   SWs_INIT@Samples_Counter 00B3  
SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY 0028                                    saved_w 007E  
                       _DISP_SHOW_TIME_AT 0C76                           i1___fltol@sign1 005A  
                         ??_STOP_BLINKING 007E                     GPIO_PIN_GET_STATE@ret 0079  
                       i1_LCD_SND_COMMAND 0EC3                        ?_DISP_SHOW_TIME_AT 002F  
                             ?_SWs_UPDATE 0070                              _DESIRED_HEAT 01E6  
                    __size_of_KEYPAD_INIT 004F                          ___lbdiv@dividend 0071  
            __end_ofi1_GPIO_PIN_SET_STATE 0F21                        ?i1_LCD_SND_COMMAND 0070  
                         _MOTOR_SET_STATE 17FB                              ___xxtofl@arg 00AA  
                               ?_LCD_INIT 0070                              ___xxtofl@exp 00A9  
                            ___xxtofl@val 00A0              __size_of_CCP_PWM_PERIOD_LOAD 0047  
                __size_of_LCD_SND_COMMAND 0038                           ___lbmod@divisor 0070  
                 __end_of__initialization 002F                           ___lbmod@counter 0073  
                       ?_SET_TIME_HANDLER 0070                       ??_DISP_SHOW_TIME_AT 007E  
                         ??_KEYPAD_UPDATE 0020                       __size_ofi1___xxtofl 0072  
             __end_of_GPIO_PORT_SET_STATE 05CA                                ___fltol@f1 01D1  
                            ?i1__Umul8_16 0070                       ??i1_LCD_SND_COMMAND 007E  
                      ??_SET_TIME_HANDLER 0033                       ___bmul@multiplicand 00A0  
                       _START_BLINKING_AT 093D           i1_CCP2_PWM_DUTY_CYCLE_LOAD$2076 0061  
                   __end_of_DISP_DOOR_ERR 0C9D                     __end_of_DISP_FOOD_ERR 0D3D  
                          __pcstackCOMMON 0070                                 ?_TIME_GET 0070  
                            __pidataBANK0 0000                              __pidataBANK3 1000  
                      ?_START_BLINKING_AT 0070                  __size_of_GOTO_NEXT_DIGIT 0099  
                        ___lbdiv@quotient 0073                                 ?i1___bmul 0070  
                        ?_DISP_MOTOR_DATA 0070                       __size_of_SYS_UPDATE 0026  
               __end_of_DISP_SHOW_TIME_AT 0C83                     __end_of_DISP_TIME_ERR 0D13  
                     ??_START_BLINKING_AT 007E                            _OPTION_REGbits 0081  
               __end_ofi1_LCD_SND_COMMAND 0EF8            __size_of_SET_ROTOR_PWR_HANDLER 001F  
           __end_of_SET_ROTOR_PWR_HANDLER 0FF7                __end_of_LCD_SEND_CHARACTER 0EC3  
                       _TIME_TICKING_TYPE 01C9                          i1___bmul@product 0072  
                           ?_TIMER0_START 0070                          _HEATER_SET_STATE 17F6  
                           ?_TIMER2_START 0070                     i1_GPIO_PORT_SET_STATE 0F21  
                               ?_SWs_INIT 0070                             _current_angle 01CC  
                              __pbssBANK0 006B                                __pbssBANK3 01B0  
                           ?_MOTOR_UPDATE 0070                                ??_LCD_INIT 00B2  
                       ?_DISP_HEATER_DATA 0070                            i1___xxtofl@arg 007A  
                          i1___xxtofl@exp 0079                            i1___xxtofl@val 0070  
               __end_of_START_BLINKING_AT 0946                         _LCD_SEND_A_NUMBER 0CBC  
                      ??_DISP_HEATER_DATA 007E                  START_BLINKING_AT@BLINKED 0025  
                       _LCD_SEND_A_STRING 0E48                         __end_of__Umul8_16 15F0  
                 __size_of_DISP_SHOW_TIME 002E                        ?_LCD_SEND_A_NUMBER 0028  
                              __pmaintext 1EE7                                   ?___bmul 00A0  
                      ?_LCD_SEND_A_STRING 0021                                ??_TIME_GET 0073  
              __end_of_GPIO_PIN_GET_STATE 0F53                ??_DISP_ON_WORKING_FOOD_ERR 007E  
                              __pintentry 0004                              ??_MOTOR_INIT 00F0  
                                 _CCP1CON 0017                                   _CCP2CON 001D  
                     __size_of_SWs_UPDATE 00FB                  __end_of_DISP_UPDATE_TIME 0896  
                   __size_of_CONTROL_INIT 0019          __end_of_DISP_UPDATE_TIME_UNIT_AT 0D2F  
                        ?_HEATING_HANDLER 0070                       ??_LCD_SEND_A_NUMBER 007E  
                              ??i1___bmul 0071                       ??_LCD_SEND_A_STRING 007E  
                    __size_of_TIMER0_INIT 0008                                 ?___xxtofl 00A0  
                    __size_of_TIMER2_INIT 000E             CCP_PWM_PERIOD_LOAD@LOAD_VALUE 01DE  
                    __size_of_TIMER0_STOP 0004                   __end_of_MOTOR_SET_STATE 1800  
                    __size_of_TIMER2_STOP 0002                       i1__Umul8_16@product 0073  
                          ??_TIMER0_START 00A0                            ??_TIMER2_START 00A0  
        __end_of_CCP1_PWM_DUTY_CYCLE_LOAD 1306              ??i1_CCP1_PWM_DUTY_CYCLE_LOAD 005E  
                          ??_MOTOR_UPDATE 007E                                ??_SWs_INIT 00B2  
                              __stringtab 1800                MOTOR_SET_STATE@MOTOR_STATE 00A0  
                 ?_KEYPAD_GET_PRESSED_KEY 0070                 __end_of_LCD_SEND_A_NUMBER 0CCB  
                               _CCP1_INIT 1020                        __end_of_MOTOR_INIT 1047  
                               _CCP2_INIT 17D2                            _FINISH_HANDLER 0F78  
               __end_of_LCD_SEND_A_STRING 0E66                      __size_of_TIME_UPDATE 0050  
              __end_of_GPIO_PIN_SET_STATE 05C0             GPIO_PORT_SET_STATE@GPIO_PORTx 00A4  
                 __size_of_CONTROL_UPDATE 0036                              _CONTROL_INIT 1EB2  
                       ??_LCD_SND_COMMAND 00AB              __size_of_SET_HEATING_HANDLER 001F  
                         __size_of___bmul 002A                                   ___fladd 10A3  
                                 ___fldiv 1662                                   ___lbdiv 0CCB  
                                 ___lbmod 0B35                                   ___flmul 1391  
                                 ___fltol 1783                                   ___lwdiv 1FB2  
                      GOTO_NEXT_DIGIT@KEY 0028                                   ___lwmod 1FDC  
                GPIO_PIN_INIT@GPIO_PIN_NO 00A3                      i1_GPIO_PIN_SET_STATE 0EF8  
                            ??i1___xxtofl 0074                                   __ptext1 0801  
                                 __ptext2 1E67                                   __ptext3 1E6F  
                                 __ptext4 0424                                   __ptext5 045D  
                                 __ptext6 1032                                   __ptext7 17FB  
                                 __ptext8 127B                                   __ptext9 1020  
     __size_ofi1_CCP1_PWM_DUTY_CYCLE_LOAD 0069                __size_of_DISP_SHOW_TIME_AT 000D  
                               _T2CONbits 0012                                 _LCD_CLEAR 0F2B  
              __size_ofi1_LCD_SND_COMMAND 0035                                ??___xxtofl 00A4  
                       ??_GOTO_NEXT_DIGIT 0026                             ??_HEATER_INIT 00F0  
                     i1___bmul@multiplier 0071                __end_of_UPDATE_LCD_MINUTES 0CBC  
              __end_of_UPDATE_LCD_SECONDS 0D05                    ?i1_GPIO_PORT_SET_STATE 0070  
           _CCP1_PWM_DUTY_CYCLE_LOAD$1938 01E0                    __size_of_HEATER_UPDATE 001C  
                         SW_GET_STATE@ret 0074                                   clrloop0 1E60  
          __end_of_KEYPAD_GET_PRESSED_KEY 0F78                      end_of_initialization 002F  
                  __end_of_FINISH_HANDLER 0FB9                    __size_of_TIMER0_UPDATE 0006  
                            ??_SYS_UPDATE 0067                                   itoa@buf 007C  
                              ?_CCP1_INIT 0070                                   itoa@val 0024  
                              ?_CCP2_INIT 0070                __size_of_START_BLINKING_AT 0009  
                       LCD_SET_CURSOR@row 0021                        __end_ofi1___xxtofl 03D5  
       __size_of_CCP2_PWM_DUTY_CYCLE_LOAD 008B                 ?_CCP2_PWM_DUTY_CYCLE_LOAD 01DB  
             HEATING_HANDLER@current_time 0034       __end_of_SET_HEATING_HANDLER_ON_WORK 08E1  
             _SET_HEATING_HANDLER_ON_WORK 0896                      __size_ofi1__Umul8_16 0060  
                           ??_DISP_CANCEL 007E                                   utoa@buf 0023  
                                 utoa@val 0077                     ?i1_GPIO_PIN_SET_STATE 0073  
                               _TIME_STOP 0D13                             ??_DISP_FINISH 007E  
                     _CCP_PWM_PERIOD_LOAD 105C                 __size_of_UPDATE_LCD_HOURS 001F  
                   i1__Umul8_16@word_mpld 0076                             _DESIRED_SPEED 01E7  
                      i1_HEATER_SET_STATE 0A72                        __end_of_SYS_UPDATE 082B  
   __end_of_SET_ROTOR_PWR_HANDLER_ON_WORK 093D    __size_of_SET_ROTOR_PWR_HANDLER_ON_WORK 005C  
           _SET_ROTOR_PWR_HANDLER_ON_WORK 08E1                               ___fladd@grs 01D0  
                              ?_LCD_CLEAR 0070                  _DISP_UPDATE_TIME_UNIT_AT 0D23  
                        ___lbmod@dividend 0072                             ___xxtofl@sign 00A8  
                        ?_MOTOR_SET_STATE 0070                              _CURRENT_TIME 01B5  
                               i1___fldiv 05CA                                 i1___flmul 0105  
                             ___fldiv@grs 00C1                                 i1___fltol 03D5  
                             ___fldiv@rem 00BA                       ?i1_HEATER_SET_STATE 0070  
                            ??_SWs_UPDATE 007A                     __end_of_LED_SET_STATE 0AA0  
                         ?_FINISH_HANDLER 0070                      ?_CCP_PWM_PERIOD_LOAD 01DB  
    i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 005C        CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 01DB  
                     __end_of_HEATER_INIT 105C                               ___lbmod@rem 0074  
               GOTO_NEXT_DIGIT@count_left 01C4                               ___flmul@grs 00D5  
              __size_of_LCD_SEND_A_NUMBER 000F                          _LAST_PRESSED_KEY 01C2  
    i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 0065        CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 01E4  
                             _CCP1CONbits 0017                  _CCP1_PWM_DUTY_CYCLE_LOAD 127B  
              __size_of_LCD_SEND_A_STRING 001E                               _CCP2CONbits 001D  
                  __size_of_TIME_CONTINUE 0003                         __size_of_LCD_INIT 004F  
                          _DISP_SHOW_TIME 0E1A                      ??i1_HEATER_SET_STATE 0070  
         i1GPIO_PORT_SET_STATE@GPIO_PORTx 0074                      __end_of_TIMER0_START 0805  
                           _HEATER_UPDATE 1ECB                      __end_of_TIMER2_START 17F4  
                __end_of_HEATER_SET_STATE 17FB                            __end_of___bmul 0487  
                    __end_of_MOTOR_UPDATE 07FF                             _TIMER0_UPDATE 0FF7  
                              ?_TIME_STOP 0070                  __size_of_ENABLE_INTERUPT 0003  
                       __size_of_TIME_GET 0009                        __end_of_SWs_UPDATE 0C4C  
       __size_of_SET_TIME_HANDLER_ON_WORK 0033                     __end_of_GPIO_PIN_INIT 055E  
               CCP_PWM_PERIOD_LOAD@PERIOD 01DB                 __size_of_SET_TIME_HANDLER 002D  
               ?_SET_TIME_HANDLER_ON_WORK 0070                          _MOTOR_WORK_STATE 01C7  
                           ?_STOP_HEATING 0070                  __size_of_DEFAULT_HANDLER 0050  
                  __size_of_TIME_START_AT 000C               DISP_SHOW_TIME_AT@START_TIME 002F  
                       __size_ofi1___bmul 002A                       __end_of_DISP_CANCEL 1E91  
                     start_initialization 0015                             ??_KEYPAD_INIT 00B2  
                     HEATER@current_angle 01CB                       __end_of_DISP_FINISH 1E81  
                    SWs_UPDATE@sw_counter 0022              HEATER_SET_STATE@HEATER_STATE 00A0  
                              ?i1___fldiv 0020        __end_ofi1_CCP1_PWM_DUTY_CYCLE_LOAD 009C  
              i1_CCP1_PWM_DUTY_CYCLE_LOAD 0033                                ?i1___flmul 0039  
                              ?i1___fltol 0052                     __end_of_STOP_BLINKING 0C86  
            i1MOTOR_SET_STATE@MOTOR_STATE 0070                     ??_CCP_PWM_PERIOD_LOAD 00F0  
         i1_CCP1_PWM_DUTY_CYCLE_LOAD$2075 0061                               ??_CCP1_INIT 00B2  
                             ??_CCP2_INIT 00B2                   __size_of_INCREMENT_THIS 0095  
                       __size_of_SWs_INIT 0039            DISP_UPDATE_TIME_UNIT_AT@NUMBER 002E  
                  __end_of_DISP_SHOW_TIME 0E48                            _CONTROL_UPDATE 082B  
      i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE 0074          GPIO_PIN_SET_STATE@GPIO_PIN_STATE 00A1  
             GPIO_PIN_INIT@GPIO_DIRECTION 00A4                        _LCD_SEND_CHARACTER 0E8F  
                   __end_of_KEYPAD_UPDATE 0DBE                            ?_HEATER_UPDATE 0070  
                                ??___bmul 00A1                    ??i1_GPIO_PIN_SET_STATE 0075  
                              init_fetch0 1EA1                            ?_TIMER0_UPDATE 0070  
                     ?_LCD_SEND_CHARACTER 0070                                 __Umul8_16 1590  
            __size_of_GPIO_PORT_SET_STATE 000A                               __pdataBANK0 006F  
                             __pdataBANK3 0190                 __size_of_DISP_HEATER_DATA 002E  
                       ?_DISP_UPDATE_TIME 002F                            ??_STOP_HEATING 007E  
                           _TIME_CONTINUE 0FFD                                 ___fladd@a 00E4  
                               ___fladd@b 00E0                        ??_DISP_UPDATE_TIME 007E  
                 __size_of_LCD_SET_CURSOR 0029                                 ___fldiv@a 00AE  
                               ___fldiv@b 00B2                               ??_LCD_CLEAR 007E  
                               ___flmul@a 00CB                                 ___flmul@b 00C7  
                               ___latbits 0002                        _GPIO_PIN_GET_STATE 0F36  
                           __pcstackBANK0 0020                             __pcstackBANK1 00A0  
                           __pcstackBANK3 01CD      i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE 0070  
      GPIO_PORT_SET_STATE@GPIO_PORT_STATE 00A0                               _HEATER_INIT 1047  
                       __size_of___xxtofl 0072                        KEYPAD_INIT@counter 00B2  
                     _SET_HEATING_HANDLER 0FB9            ?_SET_ROTOR_PWR_HANDLER_ON_WORK 0070  
                __size_of_DISP_MOTOR_DATA 002E                    __size_of_DISP_DOOR_ERR 000E  
                  __size_of_DISP_FOOD_ERR 000E                      ??_LCD_SEND_CHARACTER 007E  
                   _SET_ROTOR_PWR_HANDLER 0FD8                           _LCD_SND_COMMAND 055E  
                         i1___xxtofl@sign 0078                       ?_GPIO_PIN_GET_STATE 0073  
                  __end_of_CONTROL_UPDATE 0861                       __end_of_KEYPAD_INIT 04D6  
                       i1___fldiv@new_exp 0031                           ?_DISP_SHOW_TIME 0070  
                           _TIME_START_AT 0D17                                 __pnvBANK3 01E6  
                  __size_of_DISP_TIME_ERR 000E                          ___lwdiv@dividend 0072  
                 LCD_SEND_A_STRING@string 0021                         _HEATER_WORK_STATE 01C6  
                    ?_SET_HEATING_HANDLER 0070                  i1__Umul8_16@multiplicand 0070  
                    LCD_SET_CURSOR@coloum 0024                                  ?___fladd 00E0  
                                ?___fldiv 00AE                           _GOTO_NEXT_DIGIT 0748  
                               __ptext100 0EF8                                  ?___lbdiv 0070  
                                ?___lbmod 0070                                  ?___flmul 00C7  
                       CONTROL_INIT@count 00A0                                  ?___fltol 01D1  
                              ?__Umul8_16 00A0                                  ?___lwdiv 0070  
                                ?___lwmod 0070                               ??_TIME_STOP 0070  
                             _DISP_CANCEL 1E81                      ??_GPIO_PIN_GET_STATE 0074  
                           ?_SW_GET_STATE 0070                        _GPIO_PIN_SET_STATE 0596  
                        _UPDATE_LCD_HOURS 0946                             ??_TIMER0_INIT 00A0  
                             _DISP_FINISH 1E73                             ??_TIMER2_INIT 00A0  
                               __pstrings 1800                             ??_TIMER0_STOP 00A0  
                           ??_TIMER2_STOP 00A0                            ?_TIME_CONTINUE 0070  
                               __pswtext1 18AB                   ??i1_GPIO_PORT_SET_STATE 0071  
          i1GPIO_PIN_SET_STATE@GPIO_PORTx 007D                         ??_ENABLE_INTERUPT 00A0  
                     ?_GPIO_PIN_SET_STATE 00A0                               ??i1___fldiv 0028  
                __size_of_HEATING_HANDLER 008B                    LED_SET_STATE@LED_STATE 0020  
                             ??i1___flmul 0041         __size_of_DISP_ON_WORKING_FOOD_ERR 0010  
                             ??i1___fltol 0056                                 _last_time 01B8  
               ?_DISP_ON_WORKING_FOOD_ERR 0070                          ___lwdiv@quotient 0074  
                       ??_DEFAULT_HANDLER 007E          __end_of_CCP2_PWM_DUTY_CYCLE_LOAD 1391  
            ??i1_CCP2_PWM_DUTY_CYCLE_LOAD 005E                             ??_TIME_UPDATE 0070  
                   _CONTROL_CURRENT_STATE 01C8                                  _LCD_INIT 04D6  
                         ?_CONTROL_UPDATE 0070                         interrupt_function 0004  
                          ?_TIME_START_AT 0070                     __size_of_TIMER0_START 0004  
                               clear_ram0 1E5F                     __size_of_TIMER2_START 0002  
                          _keypad_sapmles 01BB                           ??_HEATER_UPDATE 007E  
                      _UPDATE_LCD_MINUTES 0C9D                        _UPDATE_LCD_SECONDS 0CE6  
                   i1___bmul@multiplicand 0070                      ??_GPIO_PIN_SET_STATE 00A2  
                   __size_of_MOTOR_UPDATE 001E                           ??_TIMER0_UPDATE 0070  
                   ??_SET_HEATING_HANDLER 0028                                  _TIME_GET 0C86  
                           _DISP_DOOR_ERR 0C8F                             _DISP_FOOD_ERR 0D2F  
              ??_DISP_UPDATE_TIME_UNIT_AT 007E                            ??_SW_GET_STATE 0073  
                     ?_UPDATE_LCD_MINUTES 0070                       ?_UPDATE_LCD_SECONDS 0070  
                  KEYPAD_UPDATE@KEY_STATE 0021                         SW_GET_STATE@SW_NO 0073  
                        _SET_TIME_HANDLER 06E8                                  i1___bmul 0C4C  
                             __stringbase 180F                              _TICK_COUNTER 01C0  
     __size_ofi1_CCP2_PWM_DUTY_CYCLE_LOAD 0069                            _COUNT_DECISION 01CA  
                 __end_of_LCD_SND_COMMAND 0596                             _DISP_TIME_ERR 0D05  
                   UPDATE_LCD_HOURS@HOURS 002E                          ??_FINISH_HANDLER 0025  
                             _KEYPAD_INIT 0487                ??_CCP1_PWM_DUTY_CYCLE_LOAD 01DD  
                     __end_of_TIMER0_INIT 1E6F                       __end_of_TIMER2_INIT 17F2  
                  ?_SET_ROTOR_PWR_HANDLER 0070                       __end_of_TIMER0_STOP 1E73  
                     __end_of_TIMER2_STOP 17F6                              _TIMER0_START 0801  
                             _KEYPAD_info 01A4                              _TIMER2_START 17F2  
                    ??_UPDATE_LCD_MINUTES 007E                      ??_UPDATE_LCD_SECONDS 007E  
                                _SWs_INIT 0424                              _MOTOR_UPDATE 07E1  
                          _INCREMENT_THIS 0AA0                      __end_of_STOP_HEATING 0A6D  
                       ??_DISP_MOTOR_DATA 007E                   __end_of_GOTO_NEXT_DIGIT 07E1  
        __end_of_SET_TIME_HANDLER_ON_WORK 0748                             ??i1__Umul8_16 0073  
                     __end_of_TIME_UPDATE 1F65                            ?_DISP_DOOR_ERR 0070  
                          ?_DISP_FOOD_ERR 0070               KEYPAD_UPDATE@KEYPAD_counter 006E  
                             ??__Umul8_16 00A3      i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 005C  
      CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE 01DB                         ?_HEATER_SET_STATE 0070  
                        __size_of___fladd 01D8                          __size_of___fldiv 0121  
                        __size_of___lbdiv 001B                           ??_TIME_CONTINUE 0070  
                        __size_of___lbmod 001C                          __size_of___flmul 01FF  
                        __size_of___fltol 004F      i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 0065  
      CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE 01E4                          _DISP_HEATER_DATA 0DEC  
                        __size_of___lwdiv 002A                          __size_of___lwmod 0024  
                      ??_HEATER_SET_STATE 00A0                        __end_of__stringtab 1810  
                          _LCD_SET_CURSOR 0E66             GPIO_PIN_GET_STATE@GPIO_PIN_NO 0073  
                          ?_DISP_TIME_ERR 0070                                  ___xxtofl 15F0  
           GPIO_PIN_SET_STATE@GPIO_PIN_NO 00A0                           ___lwdiv@divisor 0070  
                       INCREMENT_THIS@KEY 0032                           ___lwdiv@counter 0076  
                                __ptext10 04D6                                  __ptext11 055E  
                                __ptext20 15F0                                  __ptext12 05C0  
                                __ptext21 1783                                  __ptext13 0487  
                                __ptext30 1E5C                                  __ptext22 1391  
                                __ptext14 0596                                  __ptext31 1EB2  
                                __ptext23 1590                                  __ptext15 1047  
                                __ptext40 1ECB                                  __ptext32 0805  
                                __ptext24 1662                                  __ptext16 17F6  
                                __ptext41 009C                                  __ptext33 1F15  
                                __ptext25 17D2                                  __ptext17 105C  
                                __ptext50 0AA0                                  __ptext42 0363  
                                __ptext34 0FF7                                  __ptext26 17F2  
                                __ptext18 10A3                                  __ptext51 0B35  
                                __ptext43 03D5                                  __ptext35 0B51  
                                __ptext27 17E4                                  __ptext19 1306  
                                __ptext60 093D                                  __ptext52 0748  
                                __ptext44 0105                                  __ptext36 07E1  
                                __ptext28 17F4                                  __ptext61 0DEC  
                                __ptext53 0D23                                  __ptext45 0303  
                                __ptext37 0033                                  __ptext29 0525  
                                __ptext70 0A75                                  __ptext62 09B5  
                                __ptext54 0FD8                                  __ptext46 05CA  
                                __ptext38 0D3D                                  __ptext71 0861  
                                __ptext63 0D17                                  __ptext55 08E1  
                                __ptext47 082B                                  __ptext39 0F36  
                                __ptext80 0D05                                  __ptext72 1E91  
                                __ptext64 0FFD                                  __ptext56 0F6D  
                                __ptext48 06E8                                  __ptext81 0C76  
                                __ptext73 1E81                                  __ptext65 0A4B  
                                __ptext57 0DBE                                  __ptext49 0715  
                                __ptext90 1FB2                                  __ptext82 0CE6  
                                __ptext74 0F78                                  __ptext66 0A6D  
                                __ptext58 0FB9                                  __ptext91 0E1A  
                                __ptext83 0C9D                                  __ptext75 1E73  
                                __ptext67 0A72                                  __ptext59 0896  
                                __ptext92 0F2B                                  __ptext84 0946  
                                __ptext76 0965                                  __ptext68 0D13  
                                __ptext93 0D2F                                  __ptext85 0CCB  
                                __ptext77 0A40                                  __ptext69 0C86  
                                __ptext94 0C8F                                  __ptext86 0CBC  
                                __ptext78 0C4C                                  __ptext95 0E66  
                                __ptext87 0F53                                  __ptext79 0C83  
                                __ptext96 0EC3                                  __ptext88 1F65  
                                __ptext97 0E48                                  __ptext89 1FDC  
                                __ptext98 0E8F                                  __ptext99 0F21  
             ?i1_CCP1_PWM_DUTY_CYCLE_LOAD 005C                       LED_SET_STATE@LED_NO 0022  
                       i1_MOTOR_SET_STATE 0A6D                    __end_of_INCREMENT_THIS 0B35  
                     _GPIO_PORT_SET_STATE 05C0                           ??_TIME_START_AT 0073  
                      ?i1_MOTOR_SET_STATE 0070                  __size_of_MOTOR_SET_STATE 0005  
                       ??_HEATING_HANDLER 0032                             __size_of_main 002E  
                           __size_of_itoa 001A                  _CCP2_PWM_DUTY_CYCLE_LOAD 1306  
                           __size_of_utoa 004D                       ??i1_MOTOR_SET_STATE 0070  
              TIME_START_AT@START_MINUTES 0070                TIME_START_AT@START_SECONDS 0073  
             __size_ofi1_HEATER_SET_STATE 0003                      ?_GPIO_PORT_SET_STATE 00A0  
                     __end_ofi1__Umul8_16 0363                  i1LCD_SND_COMMAND@command 0020  
                  __end_of_LCD_SET_CURSOR 0E8F                TIME_START_AT@COUNTING_TYPE 0072  
                  __size_of_LED_SET_STATE 002B                 KEYPAD_GET_PRESSED_KEY@ret 0072  
                             _TIMER0_INIT 1E67                               _TIMER2_INIT 17E4  
                             _TIMER0_STOP 1E6F                               _TIMER2_STOP 17F4  
                             _SETTED_TIME 006B                  ??_KEYPAD_GET_PRESSED_KEY 0072  
                      SWs_INIT@SW_Counter 00B4                          ?_LCD_SND_COMMAND 0070  
               __end_ofi1_MOTOR_SET_STATE 0A72               __end_of_CCP_PWM_PERIOD_LOAD 10A3  
                             _PRESSED_KEY 01BE                              ?_HEATER_INIT 0070  
                                itoa@base 0026                                  init_ram0 1EA5  
      __end_ofi1_CCP2_PWM_DUTY_CYCLE_LOAD 0105                i1_CCP2_PWM_DUTY_CYCLE_LOAD 009C  
                        ??_DISP_SHOW_TIME 007E                           ?_INCREMENT_THIS 0070  
                                intlevel1 0000                 __size_of_DISP_UPDATE_TIME 0035  
                    __end_of_SW_GET_STATE 0A4B                               _TIME_UPDATE 1F15  
            GPIO_PIN_GET_STATE@GPIO_PORTx 0078                  __end_of_UPDATE_LCD_HOURS 0965  
            GPIO_PIN_SET_STATE@GPIO_PORTx 00AA                    i1__Umul8_16@multiplier 0075  
                        ___lwmod@dividend 0072                    __size_of_GPIO_PIN_INIT 0039  
                KEYPAD_UPDATE@COL_counter 0022                  TIME_START_AT@START_HOURS 0071  
                        ?_GOTO_NEXT_DIGIT 0070                           _HANDLERS_STATES 01B0  
                         ??_DISP_DOOR_ERR 007E                 SWs_UPDATE@samples_counter 0021  
                           ?_CONTROL_INIT 0070                           ??_DISP_FOOD_ERR 007E  
                               stringcode 180A           ??_SET_ROTOR_PWR_HANDLER_ON_WORK 0026  
          i1HEATER_SET_STATE@HEATER_STATE 0070                  _SET_TIME_HANDLER_ON_WORK 0715  
                   ??_GPIO_PORT_SET_STATE 00A1                           _ENABLE_INTERUPT 1E5C  
                      LCD_SEND_A_NUMBER@x 0028                                _MOTOR_INIT 1032  
                            ?_DISP_CANCEL 0070          __end_of_DISP_ON_WORKING_FOOD_ERR 1EA1  
                  __size_of_STOP_BLINKING 0003             __size_ofi1_GPIO_PIN_SET_STATE 0029  
                         ?_LCD_SET_CURSOR 0021                              ?_DISP_FINISH 0070  
                         _DEFAULT_HANDLER 0965                           ??_DISP_TIME_ERR 007E  
                                utoa@base 0079                    __Umul8_16@multiplicand 00A0  
             LCD_SEND_CHARACTER@character 0020                           ___lwmod@divisor 0070  
                         ___lwmod@counter 0074                                  stringdir 180A  
          __size_ofi1_GPIO_PORT_SET_STATE 000A                                  stringtab 1800  
           __end_ofi1_GPIO_PORT_SET_STATE 0F2B                          ??_CONTROL_UPDATE 0037  
                  __size_of_KEYPAD_UPDATE 0081                             ___fladd@signs 01CD  
                   __size_of_STOP_HEATING 0022               __size_of_LCD_SEND_CHARACTER 0034  
         i1GPIO_PIN_SET_STATE@GPIO_PIN_NO 0073                             _LED_SET_STATE 0A75  
                __end_of_SET_TIME_HANDLER 0715                              ___fladd@aexp 01CE  
                            ___fladd@bexp 01CF                      __Umul8_16@multiplier 00A5  
                          ??_CONTROL_INIT 00A0                               i1__Umul8_16 0303  
                           _CURRENT_DIGIT 006F                         __Umul8_16@product 00A3  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Mar 05 19:00:04 2020

Microchip MPLAB XC8 C Compiler v2.10 (Pro license) build 20190730164152 Og9f 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	plic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text32,local,class=CODE,merge=1,delta=2
    26                           	psect	text33,local,class=CODE,merge=1,delta=2
    27                           	psect	text34,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	text35,local,class=CODE,merge=1,delta=2
    30                           	psect	text38,local,class=CODE,merge=1,delta=2
    31                           	psect	text39,local,class=CODE,merge=1,delta=2
    32                           	psect	text42,local,class=CODE,merge=1,delta=2
    33                           	psect	text48,local,class=CODE,merge=1,delta=2
    34                           	psect	swtext1,local,class=CONST,delta=2
    35                           	psect	text50,local,class=CODE,merge=1,delta=2
    36                           	psect	text56,local,class=CODE,merge=1,delta=2
    37                           	psect	text60,local,class=CODE,merge=1,delta=2
    38                           	psect	text87,local,class=CODE,merge=1,delta=2,group=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 2.10
    42                           ; Generated 31/07/2019 GMT
    43                           ; 
    44                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F877A Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  000E                     	;# 
    91  000F                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  001D                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0086                     	;# 
   113  0087                     	;# 
   114  0088                     	;# 
   115  0089                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  0091                     	;# 
   120  0092                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  000D                     	;# 
   149  000E                     	;# 
   150  000E                     	;# 
   151  000F                     	;# 
   152  0010                     	;# 
   153  0011                     	;# 
   154  0012                     	;# 
   155  0013                     	;# 
   156  0014                     	;# 
   157  0015                     	;# 
   158  0015                     	;# 
   159  0016                     	;# 
   160  0017                     	;# 
   161  0018                     	;# 
   162  0019                     	;# 
   163  001A                     	;# 
   164  001B                     	;# 
   165  001B                     	;# 
   166  001C                     	;# 
   167  001D                     	;# 
   168  001E                     	;# 
   169  001F                     	;# 
   170  0081                     	;# 
   171  0085                     	;# 
   172  0086                     	;# 
   173  0087                     	;# 
   174  0088                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0098                     	;# 
   184  0099                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  010C                     	;# 
   190  010D                     	;# 
   191  010E                     	;# 
   192  010F                     	;# 
   193  018C                     	;# 
   194  018D                     	;# 
   195  0000                     	;# 
   196  0001                     	;# 
   197  0002                     	;# 
   198  0003                     	;# 
   199  0004                     	;# 
   200  0005                     	;# 
   201  0006                     	;# 
   202  0007                     	;# 
   203  0008                     	;# 
   204  0009                     	;# 
   205  000A                     	;# 
   206  000B                     	;# 
   207  000C                     	;# 
   208  000D                     	;# 
   209  000E                     	;# 
   210  000E                     	;# 
   211  000F                     	;# 
   212  0010                     	;# 
   213  0011                     	;# 
   214  0012                     	;# 
   215  0013                     	;# 
   216  0014                     	;# 
   217  0015                     	;# 
   218  0015                     	;# 
   219  0016                     	;# 
   220  0017                     	;# 
   221  0018                     	;# 
   222  0019                     	;# 
   223  001A                     	;# 
   224  001B                     	;# 
   225  001B                     	;# 
   226  001C                     	;# 
   227  001D                     	;# 
   228  001E                     	;# 
   229  001F                     	;# 
   230  0081                     	;# 
   231  0085                     	;# 
   232  0086                     	;# 
   233  0087                     	;# 
   234  0088                     	;# 
   235  0089                     	;# 
   236  008C                     	;# 
   237  008D                     	;# 
   238  008E                     	;# 
   239  0091                     	;# 
   240  0092                     	;# 
   241  0093                     	;# 
   242  0094                     	;# 
   243  0098                     	;# 
   244  0099                     	;# 
   245  009C                     	;# 
   246  009D                     	;# 
   247  009E                     	;# 
   248  009F                     	;# 
   249  010C                     	;# 
   250  010D                     	;# 
   251  010E                     	;# 
   252  010F                     	;# 
   253  018C                     	;# 
   254  018D                     	;# 
   255  0000                     	;# 
   256  0001                     	;# 
   257  0002                     	;# 
   258  0003                     	;# 
   259  0004                     	;# 
   260  0005                     	;# 
   261  0006                     	;# 
   262  0007                     	;# 
   263  0008                     	;# 
   264  0009                     	;# 
   265  000A                     	;# 
   266  000B                     	;# 
   267  000C                     	;# 
   268  000D                     	;# 
   269  000E                     	;# 
   270  000E                     	;# 
   271  000F                     	;# 
   272  0010                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0013                     	;# 
   276  0014                     	;# 
   277  0015                     	;# 
   278  0015                     	;# 
   279  0016                     	;# 
   280  0017                     	;# 
   281  0018                     	;# 
   282  0019                     	;# 
   283  001A                     	;# 
   284  001B                     	;# 
   285  001B                     	;# 
   286  001C                     	;# 
   287  001D                     	;# 
   288  001E                     	;# 
   289  001F                     	;# 
   290  0081                     	;# 
   291  0085                     	;# 
   292  0086                     	;# 
   293  0087                     	;# 
   294  0088                     	;# 
   295  0089                     	;# 
   296  008C                     	;# 
   297  008D                     	;# 
   298  008E                     	;# 
   299  0091                     	;# 
   300  0092                     	;# 
   301  0093                     	;# 
   302  0094                     	;# 
   303  0098                     	;# 
   304  0099                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  009F                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  010F                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000D                     	;# 
   329  000E                     	;# 
   330  000E                     	;# 
   331  000F                     	;# 
   332  0010                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0013                     	;# 
   336  0014                     	;# 
   337  0015                     	;# 
   338  0015                     	;# 
   339  0016                     	;# 
   340  0017                     	;# 
   341  0018                     	;# 
   342  0019                     	;# 
   343  001A                     	;# 
   344  001B                     	;# 
   345  001B                     	;# 
   346  001C                     	;# 
   347  001D                     	;# 
   348  001E                     	;# 
   349  001F                     	;# 
   350  0081                     	;# 
   351  0085                     	;# 
   352  0086                     	;# 
   353  0087                     	;# 
   354  0088                     	;# 
   355  0089                     	;# 
   356  008C                     	;# 
   357  008D                     	;# 
   358  008E                     	;# 
   359  0091                     	;# 
   360  0092                     	;# 
   361  0093                     	;# 
   362  0094                     	;# 
   363  0098                     	;# 
   364  0099                     	;# 
   365  009C                     	;# 
   366  009D                     	;# 
   367  009E                     	;# 
   368  009F                     	;# 
   369  010C                     	;# 
   370  010D                     	;# 
   371  010E                     	;# 
   372  010F                     	;# 
   373  018C                     	;# 
   374  018D                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0008                     	;# 
   384  0009                     	;# 
   385  000A                     	;# 
   386  000B                     	;# 
   387  000C                     	;# 
   388  000D                     	;# 
   389  000E                     	;# 
   390  000E                     	;# 
   391  000F                     	;# 
   392  0010                     	;# 
   393  0011                     	;# 
   394  0012                     	;# 
   395  0013                     	;# 
   396  0014                     	;# 
   397  0015                     	;# 
   398  0015                     	;# 
   399  0016                     	;# 
   400  0017                     	;# 
   401  0018                     	;# 
   402  0019                     	;# 
   403  001A                     	;# 
   404  001B                     	;# 
   405  001B                     	;# 
   406  001C                     	;# 
   407  001D                     	;# 
   408  001E                     	;# 
   409  001F                     	;# 
   410  0081                     	;# 
   411  0085                     	;# 
   412  0086                     	;# 
   413  0087                     	;# 
   414  0088                     	;# 
   415  0089                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0093                     	;# 
   422  0094                     	;# 
   423  0098                     	;# 
   424  0099                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  009F                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  010F                     	;# 
   433  018C                     	;# 
   434  018D                     	;# 
   435  0000                     	;# 
   436  0001                     	;# 
   437  0002                     	;# 
   438  0003                     	;# 
   439  0004                     	;# 
   440  0005                     	;# 
   441  0006                     	;# 
   442  0007                     	;# 
   443  0008                     	;# 
   444  0009                     	;# 
   445  000A                     	;# 
   446  000B                     	;# 
   447  000C                     	;# 
   448  000D                     	;# 
   449  000E                     	;# 
   450  000E                     	;# 
   451  000F                     	;# 
   452  0010                     	;# 
   453  0011                     	;# 
   454  0012                     	;# 
   455  0013                     	;# 
   456  0014                     	;# 
   457  0015                     	;# 
   458  0015                     	;# 
   459  0016                     	;# 
   460  0017                     	;# 
   461  0018                     	;# 
   462  0019                     	;# 
   463  001A                     	;# 
   464  001B                     	;# 
   465  001B                     	;# 
   466  001C                     	;# 
   467  001D                     	;# 
   468  001E                     	;# 
   469  001F                     	;# 
   470  0081                     	;# 
   471  0085                     	;# 
   472  0086                     	;# 
   473  0087                     	;# 
   474  0088                     	;# 
   475  0089                     	;# 
   476  008C                     	;# 
   477  008D                     	;# 
   478  008E                     	;# 
   479  0091                     	;# 
   480  0092                     	;# 
   481  0093                     	;# 
   482  0094                     	;# 
   483  0098                     	;# 
   484  0099                     	;# 
   485  009C                     	;# 
   486  009D                     	;# 
   487  009E                     	;# 
   488  009F                     	;# 
   489  010C                     	;# 
   490  010D                     	;# 
   491  010E                     	;# 
   492  010F                     	;# 
   493  018C                     	;# 
   494  018D                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0008                     	;# 
   504  0009                     	;# 
   505  000A                     	;# 
   506  000B                     	;# 
   507  000C                     	;# 
   508  000D                     	;# 
   509  000E                     	;# 
   510  000E                     	;# 
   511  000F                     	;# 
   512  0010                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0013                     	;# 
   516  0014                     	;# 
   517  0015                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  001D                     	;# 
   528  001E                     	;# 
   529  001F                     	;# 
   530  0081                     	;# 
   531  0085                     	;# 
   532  0086                     	;# 
   533  0087                     	;# 
   534  0088                     	;# 
   535  0089                     	;# 
   536  008C                     	;# 
   537  008D                     	;# 
   538  008E                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0094                     	;# 
   543  0098                     	;# 
   544  0099                     	;# 
   545  009C                     	;# 
   546  009D                     	;# 
   547  009E                     	;# 
   548  009F                     	;# 
   549  010C                     	;# 
   550  010D                     	;# 
   551  010E                     	;# 
   552  010F                     	;# 
   553  018C                     	;# 
   554  018D                     	;# 
   555  0000                     	;# 
   556  0001                     	;# 
   557  0002                     	;# 
   558  0003                     	;# 
   559  0004                     	;# 
   560  0005                     	;# 
   561  0006                     	;# 
   562  0007                     	;# 
   563  0008                     	;# 
   564  0009                     	;# 
   565  000A                     	;# 
   566  000B                     	;# 
   567  000C                     	;# 
   568  000D                     	;# 
   569  000E                     	;# 
   570  000E                     	;# 
   571  000F                     	;# 
   572  0010                     	;# 
   573  0011                     	;# 
   574  0012                     	;# 
   575  0013                     	;# 
   576  0014                     	;# 
   577  0015                     	;# 
   578  0015                     	;# 
   579  0016                     	;# 
   580  0017                     	;# 
   581  0018                     	;# 
   582  0019                     	;# 
   583  001A                     	;# 
   584  001B                     	;# 
   585  001B                     	;# 
   586  001C                     	;# 
   587  001D                     	;# 
   588  001E                     	;# 
   589  001F                     	;# 
   590  0081                     	;# 
   591  0085                     	;# 
   592  0086                     	;# 
   593  0087                     	;# 
   594  0088                     	;# 
   595  0089                     	;# 
   596  008C                     	;# 
   597  008D                     	;# 
   598  008E                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0094                     	;# 
   603  0098                     	;# 
   604  0099                     	;# 
   605  009C                     	;# 
   606  009D                     	;# 
   607  009E                     	;# 
   608  009F                     	;# 
   609  010C                     	;# 
   610  010D                     	;# 
   611  010E                     	;# 
   612  010F                     	;# 
   613  018C                     	;# 
   614  018D                     	;# 
   615  0000                     	;# 
   616  0001                     	;# 
   617  0002                     	;# 
   618  0003                     	;# 
   619  0004                     	;# 
   620  0005                     	;# 
   621  0006                     	;# 
   622  0007                     	;# 
   623  0008                     	;# 
   624  0009                     	;# 
   625  000A                     	;# 
   626  000B                     	;# 
   627  000C                     	;# 
   628  000D                     	;# 
   629  000E                     	;# 
   630  000E                     	;# 
   631  000F                     	;# 
   632  0010                     	;# 
   633  0011                     	;# 
   634  0012                     	;# 
   635  0013                     	;# 
   636  0014                     	;# 
   637  0015                     	;# 
   638  0015                     	;# 
   639  0016                     	;# 
   640  0017                     	;# 
   641  0018                     	;# 
   642  0019                     	;# 
   643  001A                     	;# 
   644  001B                     	;# 
   645  001B                     	;# 
   646  001C                     	;# 
   647  001D                     	;# 
   648  001E                     	;# 
   649  001F                     	;# 
   650  0081                     	;# 
   651  0085                     	;# 
   652  0086                     	;# 
   653  0087                     	;# 
   654  0088                     	;# 
   655  0089                     	;# 
   656  008C                     	;# 
   657  008D                     	;# 
   658  008E                     	;# 
   659  0091                     	;# 
   660  0092                     	;# 
   661  0093                     	;# 
   662  0094                     	;# 
   663  0098                     	;# 
   664  0099                     	;# 
   665  009C                     	;# 
   666  009D                     	;# 
   667  009E                     	;# 
   668  009F                     	;# 
   669  010C                     	;# 
   670  010D                     	;# 
   671  010E                     	;# 
   672  010F                     	;# 
   673  018C                     	;# 
   674  018D                     	;# 
   675  0000                     	;# 
   676  0001                     	;# 
   677  0002                     	;# 
   678  0003                     	;# 
   679  0004                     	;# 
   680  0005                     	;# 
   681  0006                     	;# 
   682  0007                     	;# 
   683  0008                     	;# 
   684  0009                     	;# 
   685  000A                     	;# 
   686  000B                     	;# 
   687  000C                     	;# 
   688  000D                     	;# 
   689  000E                     	;# 
   690  000E                     	;# 
   691  000F                     	;# 
   692  0010                     	;# 
   693  0011                     	;# 
   694  0012                     	;# 
   695  0013                     	;# 
   696  0014                     	;# 
   697  0015                     	;# 
   698  0015                     	;# 
   699  0016                     	;# 
   700  0017                     	;# 
   701  0018                     	;# 
   702  0019                     	;# 
   703  001A                     	;# 
   704  001B                     	;# 
   705  001B                     	;# 
   706  001C                     	;# 
   707  001D                     	;# 
   708  001E                     	;# 
   709  001F                     	;# 
   710  0081                     	;# 
   711  0085                     	;# 
   712  0086                     	;# 
   713  0087                     	;# 
   714  0088                     	;# 
   715  0089                     	;# 
   716  008C                     	;# 
   717  008D                     	;# 
   718  008E                     	;# 
   719  0091                     	;# 
   720  0092                     	;# 
   721  0093                     	;# 
   722  0094                     	;# 
   723  0098                     	;# 
   724  0099                     	;# 
   725  009C                     	;# 
   726  009D                     	;# 
   727  009E                     	;# 
   728  009F                     	;# 
   729  010C                     	;# 
   730  010D                     	;# 
   731  010E                     	;# 
   732  010F                     	;# 
   733  018C                     	;# 
   734  018D                     	;# 
   735  0000                     	;# 
   736  0001                     	;# 
   737  0002                     	;# 
   738  0003                     	;# 
   739  0004                     	;# 
   740  0005                     	;# 
   741  0006                     	;# 
   742  0007                     	;# 
   743  0008                     	;# 
   744  0009                     	;# 
   745  000A                     	;# 
   746  000B                     	;# 
   747  000C                     	;# 
   748  000D                     	;# 
   749  000E                     	;# 
   750  000E                     	;# 
   751  000F                     	;# 
   752  0010                     	;# 
   753  0011                     	;# 
   754  0012                     	;# 
   755  0013                     	;# 
   756  0014                     	;# 
   757  0015                     	;# 
   758  0015                     	;# 
   759  0016                     	;# 
   760  0017                     	;# 
   761  0018                     	;# 
   762  0019                     	;# 
   763  001A                     	;# 
   764  001B                     	;# 
   765  001B                     	;# 
   766  001C                     	;# 
   767  001D                     	;# 
   768  001E                     	;# 
   769  001F                     	;# 
   770  0081                     	;# 
   771  0085                     	;# 
   772  0086                     	;# 
   773  0087                     	;# 
   774  0088                     	;# 
   775  0089                     	;# 
   776  008C                     	;# 
   777  008D                     	;# 
   778  008E                     	;# 
   779  0091                     	;# 
   780  0092                     	;# 
   781  0093                     	;# 
   782  0094                     	;# 
   783  0098                     	;# 
   784  0099                     	;# 
   785  009C                     	;# 
   786  009D                     	;# 
   787  009E                     	;# 
   788  009F                     	;# 
   789  010C                     	;# 
   790  010D                     	;# 
   791  010E                     	;# 
   792  010F                     	;# 
   793  018C                     	;# 
   794  018D                     	;# 
   795  0000                     	;# 
   796  0001                     	;# 
   797  0002                     	;# 
   798  0003                     	;# 
   799  0004                     	;# 
   800  0005                     	;# 
   801  0006                     	;# 
   802  0007                     	;# 
   803  0008                     	;# 
   804  0009                     	;# 
   805  000A                     	;# 
   806  000B                     	;# 
   807  000C                     	;# 
   808  000D                     	;# 
   809  000E                     	;# 
   810  000E                     	;# 
   811  000F                     	;# 
   812  0010                     	;# 
   813  0011                     	;# 
   814  0012                     	;# 
   815  0013                     	;# 
   816  0014                     	;# 
   817  0015                     	;# 
   818  0015                     	;# 
   819  0016                     	;# 
   820  0017                     	;# 
   821  0018                     	;# 
   822  0019                     	;# 
   823  001A                     	;# 
   824  001B                     	;# 
   825  001B                     	;# 
   826  001C                     	;# 
   827  001D                     	;# 
   828  001E                     	;# 
   829  001F                     	;# 
   830  0081                     	;# 
   831  0085                     	;# 
   832  0086                     	;# 
   833  0087                     	;# 
   834  0088                     	;# 
   835  0089                     	;# 
   836  008C                     	;# 
   837  008D                     	;# 
   838  008E                     	;# 
   839  0091                     	;# 
   840  0092                     	;# 
   841  0093                     	;# 
   842  0094                     	;# 
   843  0098                     	;# 
   844  0099                     	;# 
   845  009C                     	;# 
   846  009D                     	;# 
   847  009E                     	;# 
   848  009F                     	;# 
   849  010C                     	;# 
   850  010D                     	;# 
   851  010E                     	;# 
   852  010F                     	;# 
   853  018C                     	;# 
   854  018D                     	;# 
   855  0000                     	;# 
   856  0001                     	;# 
   857  0002                     	;# 
   858  0003                     	;# 
   859  0004                     	;# 
   860  0005                     	;# 
   861  0006                     	;# 
   862  0007                     	;# 
   863  0008                     	;# 
   864  0009                     	;# 
   865  000A                     	;# 
   866  000B                     	;# 
   867  000C                     	;# 
   868  000D                     	;# 
   869  000E                     	;# 
   870  000E                     	;# 
   871  000F                     	;# 
   872  0010                     	;# 
   873  0011                     	;# 
   874  0012                     	;# 
   875  0013                     	;# 
   876  0014                     	;# 
   877  0015                     	;# 
   878  0015                     	;# 
   879  0016                     	;# 
   880  0017                     	;# 
   881  0018                     	;# 
   882  0019                     	;# 
   883  001A                     	;# 
   884  001B                     	;# 
   885  001B                     	;# 
   886  001C                     	;# 
   887  001D                     	;# 
   888  001E                     	;# 
   889  001F                     	;# 
   890  0081                     	;# 
   891  0085                     	;# 
   892  0086                     	;# 
   893  0087                     	;# 
   894  0088                     	;# 
   895  0089                     	;# 
   896  008C                     	;# 
   897  008D                     	;# 
   898  008E                     	;# 
   899  0091                     	;# 
   900  0092                     	;# 
   901  0093                     	;# 
   902  0094                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009C                     	;# 
   906  009D                     	;# 
   907  009E                     	;# 
   908  009F                     	;# 
   909  010C                     	;# 
   910  010D                     	;# 
   911  010E                     	;# 
   912  010F                     	;# 
   913  018C                     	;# 
   914  018D                     	;# 
   915  0000                     	;# 
   916  0001                     	;# 
   917  0002                     	;# 
   918  0003                     	;# 
   919  0004                     	;# 
   920  0005                     	;# 
   921  0006                     	;# 
   922  0007                     	;# 
   923  0008                     	;# 
   924  0009                     	;# 
   925  000A                     	;# 
   926  000B                     	;# 
   927  000C                     	;# 
   928  000D                     	;# 
   929  000E                     	;# 
   930  000E                     	;# 
   931  000F                     	;# 
   932  0010                     	;# 
   933  0011                     	;# 
   934  0012                     	;# 
   935  0013                     	;# 
   936  0014                     	;# 
   937  0015                     	;# 
   938  0015                     	;# 
   939  0016                     	;# 
   940  0017                     	;# 
   941  0018                     	;# 
   942  0019                     	;# 
   943  001A                     	;# 
   944  001B                     	;# 
   945  001B                     	;# 
   946  001C                     	;# 
   947  001D                     	;# 
   948  001E                     	;# 
   949  001F                     	;# 
   950  0081                     	;# 
   951  0085                     	;# 
   952  0086                     	;# 
   953  0087                     	;# 
   954  0088                     	;# 
   955  0089                     	;# 
   956  008C                     	;# 
   957  008D                     	;# 
   958  008E                     	;# 
   959  0091                     	;# 
   960  0092                     	;# 
   961  0093                     	;# 
   962  0094                     	;# 
   963  0098                     	;# 
   964  0099                     	;# 
   965  009C                     	;# 
   966  009D                     	;# 
   967  009E                     	;# 
   968  009F                     	;# 
   969  010C                     	;# 
   970  010D                     	;# 
   971  010E                     	;# 
   972  010F                     	;# 
   973  018C                     	;# 
   974  018D                     	;# 
   975  0000                     	;# 
   976  0001                     	;# 
   977  0002                     	;# 
   978  0003                     	;# 
   979  0004                     	;# 
   980  0005                     	;# 
   981  0006                     	;# 
   982  0007                     	;# 
   983  0008                     	;# 
   984  0009                     	;# 
   985  000A                     	;# 
   986  000B                     	;# 
   987  000C                     	;# 
   988  000D                     	;# 
   989  000E                     	;# 
   990  000E                     	;# 
   991  000F                     	;# 
   992  0010                     	;# 
   993  0011                     	;# 
   994  0012                     	;# 
   995  0013                     	;# 
   996  0014                     	;# 
   997  0015                     	;# 
   998  0015                     	;# 
   999  0016                     	;# 
  1000  0017                     	;# 
  1001  0018                     	;# 
  1002  0019                     	;# 
  1003  001A                     	;# 
  1004  001B                     	;# 
  1005  001B                     	;# 
  1006  001C                     	;# 
  1007  001D                     	;# 
  1008  001E                     	;# 
  1009  001F                     	;# 
  1010  0081                     	;# 
  1011  0085                     	;# 
  1012  0086                     	;# 
  1013  0087                     	;# 
  1014  0088                     	;# 
  1015  0089                     	;# 
  1016  008C                     	;# 
  1017  008D                     	;# 
  1018  008E                     	;# 
  1019  0091                     	;# 
  1020  0092                     	;# 
  1021  0093                     	;# 
  1022  0094                     	;# 
  1023  0098                     	;# 
  1024  0099                     	;# 
  1025  009C                     	;# 
  1026  009D                     	;# 
  1027  009E                     	;# 
  1028  009F                     	;# 
  1029  010C                     	;# 
  1030  010D                     	;# 
  1031  010E                     	;# 
  1032  010F                     	;# 
  1033  018C                     	;# 
  1034  018D                     	;# 
  1035  0000                     	;# 
  1036  0001                     	;# 
  1037  0002                     	;# 
  1038  0003                     	;# 
  1039  0004                     	;# 
  1040  0005                     	;# 
  1041  0006                     	;# 
  1042  0007                     	;# 
  1043  0008                     	;# 
  1044  0009                     	;# 
  1045  000A                     	;# 
  1046  000B                     	;# 
  1047  000C                     	;# 
  1048  000D                     	;# 
  1049  000E                     	;# 
  1050  000E                     	;# 
  1051  000F                     	;# 
  1052  0010                     	;# 
  1053  0011                     	;# 
  1054  0012                     	;# 
  1055  0013                     	;# 
  1056  0014                     	;# 
  1057  0015                     	;# 
  1058  0015                     	;# 
  1059  0016                     	;# 
  1060  0017                     	;# 
  1061  0018                     	;# 
  1062  0019                     	;# 
  1063  001A                     	;# 
  1064  001B                     	;# 
  1065  001B                     	;# 
  1066  001C                     	;# 
  1067  001D                     	;# 
  1068  001E                     	;# 
  1069  001F                     	;# 
  1070  0081                     	;# 
  1071  0085                     	;# 
  1072  0086                     	;# 
  1073  0087                     	;# 
  1074  0088                     	;# 
  1075  0089                     	;# 
  1076  008C                     	;# 
  1077  008D                     	;# 
  1078  008E                     	;# 
  1079  0091                     	;# 
  1080  0092                     	;# 
  1081  0093                     	;# 
  1082  0094                     	;# 
  1083  0098                     	;# 
  1084  0099                     	;# 
  1085  009C                     	;# 
  1086  009D                     	;# 
  1087  009E                     	;# 
  1088  009F                     	;# 
  1089  010C                     	;# 
  1090  010D                     	;# 
  1091  010E                     	;# 
  1092  010F                     	;# 
  1093  018C                     	;# 
  1094  018D                     	;# 
  1095                           
  1096                           	psect	idataBANK0
  1097  0000                     __pidataBANK0:	
  1098                           
  1099                           	psect	idataBANK3
  1100  1000                     __pidataBANK3:	
  1101                           
  1102                           ;initializer for _SWs
  1103  1000  3406               	retlw	6
  1104  1001  3404               	retlw	4
  1105  1002  3400               	retlw	0
  1106  1003  3400               	retlw	0
  1107  1004  3400               	retlw	0
  1108  1005  3406               	retlw	6
  1109  1006  3405               	retlw	5
  1110  1007  3400               	retlw	0
  1111  1008  3400               	retlw	0
  1112  1009  3400               	retlw	0
  1113  100A  3405               	retlw	5
  1114  100B  3404               	retlw	4
  1115  100C  3400               	retlw	0
  1116  100D  3400               	retlw	0
  1117  100E  3400               	retlw	0
  1118  100F  3407               	retlw	7
  1119  1010  3407               	retlw	7
  1120  1011  3400               	retlw	0
  1121  1012  3400               	retlw	0
  1122  1013  3400               	retlw	0
  1123                           
  1124                           ;initializer for _KEYPAD_info
  1125  1014  3408               	retlw	8
  1126  1015  3406               	retlw	6
  1127  1016  3403               	retlw	3
  1128  1017  3402               	retlw	2
  1129  1018  3401               	retlw	1
  1130  1019  3400               	retlw	0
  1131  101A  3400               	retlw	0
  1132  101B  3401               	retlw	1
  1133  101C  3402               	retlw	2
  1134                           
  1135                           ;initializer for _LEDs
  1136  101D  3409               	retlw	9
  1137  101E  3400               	retlw	0
  1138  101F  3400               	retlw	0
  1139                           
  1140                           	psect	nvBANK3
  1141  01EB                     __pnvBANK3:	
  1142  01EB                     _DESIRED_HEAT:	
  1143  01EB                     	ds	1
  1144  01EC                     _DESIRED_SPEED:	
  1145  01EC                     	ds	1
  1146  0011                     _TMR2	set	17
  1147  0012                     _T2CONbits	set	18
  1148  0001                     _TMR0	set	1
  1149  001D                     _CCP2CON	set	29
  1150  0017                     _CCP1CON	set	23
  1151  001B                     _CCPR2L	set	27
  1152  0015                     _CCPR1L	set	21
  1153  001D                     _CCP2CONbits	set	29
  1154  0017                     _CCP1CONbits	set	23
  1155  005F                     _GIE	set	95
  1156  005E                     _PEIE	set	94
  1157  0092                     _TMR2ON	set	146
  1158  005A                     _TMR0IF	set	90
  1159  005D                     _TMR0IE	set	93
  1160  0081                     _OPTION_REGbits	set	129
  1161  0092                     _PR2	set	146
  1162  0461                     _TMR2IE	set	1121
  1163  040D                     _T0CS	set	1037
  1164  040C                     _T0SE	set	1036
  1165  040B                     _PSA	set	1035
  1166                           
  1167                           	psect	strings
  1168  070E                     __pstrings:	
  1169  070E                     stringtab:	
  1170  070E                     __stringtab:	
  1171                           
  1172                           ;	String table - string pointers are 1 byte each
  1173  070E  1BFF               	btfsc	btemp+1,7
  1174  070F  2F18               	ljmp	stringcode
  1175  0710  1383               	bcf	3,7
  1176  0711  187F               	btfsc	btemp+1,0
  1177  0712  1783               	bsf	3,7
  1178  0713  0800               	movf	0,w
  1179  0714  0A84               	incf	4,f
  1180  0715  1903               	skipnz
  1181  0716  0AFF               	incf	btemp+1,f
  1182  0717  0008               	return
  1183  0718                     stringcode:	
  1184  0718                     stringdir:	
  1185  0718  3007               	movlw	high stringdir
  1186  0719  008A               	movwf	10
  1187  071A  0804               	movf	4,w
  1188  071B  0A84               	incf	4,f
  1189  071C  0782               	addwf	2,f
  1190  071D                     __stringbase:	
  1191  071D  3400               	retlw	0
  1192  071E                     __end_of__stringtab:	
  1193  071E                     STR_12:	
  1194  071E  343C               	retlw	60	;'<'
  1195  071F  3420               	retlw	32	;' '
  1196  0720  3443               	retlw	67	;'C'
  1197  0721  3441               	retlw	65	;'A'
  1198  0722  344E               	retlw	78	;'N'
  1199  0723  3443               	retlw	67	;'C'
  1200  0724  3445               	retlw	69	;'E'
  1201  0725  344C               	retlw	76	;'L'
  1202  0726  344C               	retlw	76	;'L'
  1203  0727  3445               	retlw	69	;'E'
  1204  0728  3444               	retlw	68	;'D'
  1205  0729  3420               	retlw	32	;' '
  1206  072A  3421               	retlw	33	;'!'
  1207  072B  3421               	retlw	33	;'!'
  1208  072C  3420               	retlw	32	;' '
  1209  072D  343E               	retlw	62	;'>'
  1210  072E  3400               	retlw	0
  1211  072F                     STR_13:	
  1212  072F  343C               	retlw	60	;'<'
  1213  0730  3420               	retlw	32	;' '
  1214  0731  3446               	retlw	70	;'F'
  1215  0732  3449               	retlw	73	;'I'
  1216  0733  344E               	retlw	78	;'N'
  1217  0734  3449               	retlw	73	;'I'
  1218  0735  3453               	retlw	83	;'S'
  1219  0736  3448               	retlw	72	;'H'
  1220  0737  3445               	retlw	69	;'E'
  1221  0738  3444               	retlw	68	;'D'
  1222  0739  3420               	retlw	32	;' '
  1223  073A  3421               	retlw	33	;'!'
  1224  073B  3421               	retlw	33	;'!'
  1225  073C  3421               	retlw	33	;'!'
  1226  073D  3420               	retlw	32	;' '
  1227  073E  343E               	retlw	62	;'>'
  1228  073F  3400               	retlw	0
  1229  0740                     STR_14:	
  1230  0740  343C               	retlw	60	;'<'
  1231  0741  3420               	retlw	32	;' '
  1232  0742  3453               	retlw	83	;'S'
  1233  0743  3445               	retlw	69	;'E'
  1234  0744  3454               	retlw	84	;'T'
  1235  0745  3420               	retlw	32	;' '
  1236  0746  3454               	retlw	84	;'T'
  1237  0747  3449               	retlw	73	;'I'
  1238  0748  344D               	retlw	77	;'M'
  1239  0749  3445               	retlw	69	;'E'
  1240  074A  3420               	retlw	32	;' '
  1241  074B  3421               	retlw	33	;'!'
  1242  074C  3421               	retlw	33	;'!'
  1243  074D  3421               	retlw	33	;'!'
  1244  074E  3420               	retlw	32	;' '
  1245  074F  343E               	retlw	62	;'>'
  1246  0750  3400               	retlw	0
  1247  0751                     STR_16:	
  1248  0751  343C               	retlw	60	;'<'
  1249  0752  3420               	retlw	32	;' '
  1250  0753  3450               	retlw	80	;'P'
  1251  0754  3455               	retlw	85	;'U'
  1252  0755  3454               	retlw	84	;'T'
  1253  0756  3420               	retlw	32	;' '
  1254  0757  3446               	retlw	70	;'F'
  1255  0758  344F               	retlw	79	;'O'
  1256  0759  344F               	retlw	79	;'O'
  1257  075A  3444               	retlw	68	;'D'
  1258  075B  3420               	retlw	32	;' '
  1259  075C  3449               	retlw	73	;'I'
  1260  075D  344E               	retlw	78	;'N'
  1261  075E  3420               	retlw	32	;' '
  1262  075F  3421               	retlw	33	;'!'
  1263  0760  343E               	retlw	62	;'>'
  1264  0761  3400               	retlw	0
  1265  0762                     STR_10:	
  1266  0762  343C               	retlw	60	;'<'
  1267  0763  3420               	retlw	32	;' '
  1268  0764  3443               	retlw	67	;'C'
  1269  0765  3448               	retlw	72	;'H'
  1270  0766  3445               	retlw	69	;'E'
  1271  0767  3443               	retlw	67	;'C'
  1272  0768  344B               	retlw	75	;'K'
  1273  0769  3420               	retlw	32	;' '
  1274  076A  3446               	retlw	70	;'F'
  1275  076B  344F               	retlw	79	;'O'
  1276  076C  344F               	retlw	79	;'O'
  1277  076D  3444               	retlw	68	;'D'
  1278  076E  3420               	retlw	32	;' '
  1279  076F  3421               	retlw	33	;'!'
  1280  0770  3421               	retlw	33	;'!'
  1281  0771  343E               	retlw	62	;'>'
  1282  0772  3400               	retlw	0
  1283  0773                     STR_11:	
  1284  0773  343C               	retlw	60	;'<'
  1285  0774  3420               	retlw	32	;' '
  1286  0775  3443               	retlw	67	;'C'
  1287  0776  344C               	retlw	76	;'L'
  1288  0777  344F               	retlw	79	;'O'
  1289  0778  3453               	retlw	83	;'S'
  1290  0779  3445               	retlw	69	;'E'
  1291  077A  3420               	retlw	32	;' '
  1292  077B  3444               	retlw	68	;'D'
  1293  077C  344F               	retlw	79	;'O'
  1294  077D  344F               	retlw	79	;'O'
  1295  077E  3452               	retlw	82	;'R'
  1296  077F  3420               	retlw	32	;' '
  1297  0780  3421               	retlw	33	;'!'
  1298  0781  3421               	retlw	33	;'!'
  1299  0782  343E               	retlw	62	;'>'
  1300  0783  3400               	retlw	0
  1301  0784                     STR_7:	
  1302  0784  3420               	retlw	32	;' '
  1303  0785  3454               	retlw	84	;'T'
  1304  0786  3449               	retlw	73	;'I'
  1305  0787  344D               	retlw	77	;'M'
  1306  0788  3445               	retlw	69	;'E'
  1307  0789  343A               	retlw	58	;':'
  1308  078A  3430               	retlw	48	;'0'
  1309  078B  3430               	retlw	48	;'0'
  1310  078C  343A               	retlw	58	;':'
  1311  078D  3430               	retlw	48	;'0'
  1312  078E  3430               	retlw	48	;'0'
  1313  078F  343A               	retlw	58	;':'
  1314  0790  3430               	retlw	48	;'0'
  1315  0791  3430               	retlw	48	;'0'
  1316  0792  3420               	retlw	32	;' '
  1317  0793  3420               	retlw	32	;' '
  1318  0794  3400               	retlw	0
  1319  0795                     STR_1:	
  1320  0795  3420               	retlw	32	;' '
  1321  0796  3448               	retlw	72	;'H'
  1322  0797  3445               	retlw	69	;'E'
  1323  0798  3441               	retlw	65	;'A'
  1324  0799  3454               	retlw	84	;'T'
  1325  079A  3420               	retlw	32	;' '
  1326  079B  344C               	retlw	76	;'L'
  1327  079C  3456               	retlw	86	;'V'
  1328  079D  344C               	retlw	76	;'L'
  1329  079E  343A               	retlw	58	;':'
  1330  079F  3420               	retlw	32	;' '
  1331  07A0  3431               	retlw	49	;'1'
  1332  07A1  3420               	retlw	32	;' '
  1333  07A2  3432               	retlw	50	;'2'
  1334  07A3  3420               	retlw	32	;' '
  1335  07A4  3433               	retlw	51	;'3'
  1336  07A5  3400               	retlw	0
  1337  07A6                     STR_4:	
  1338  07A6  344D               	retlw	77	;'M'
  1339  07A7  344F               	retlw	79	;'O'
  1340  07A8  3454               	retlw	84	;'T'
  1341  07A9  344F               	retlw	79	;'O'
  1342  07AA  3452               	retlw	82	;'R'
  1343  07AB  3420               	retlw	32	;' '
  1344  07AC  3450               	retlw	80	;'P'
  1345  07AD  3457               	retlw	87	;'W'
  1346  07AE  3452               	retlw	82	;'R'
  1347  07AF  343A               	retlw	58	;':'
  1348  07B0  3420               	retlw	32	;' '
  1349  07B1  3431               	retlw	49	;'1'
  1350  07B2  3420               	retlw	32	;' '
  1351  07B3  3432               	retlw	50	;'2'
  1352  07B4  3420               	retlw	32	;' '
  1353  07B5  3433               	retlw	51	;'3'
  1354  07B6  3400               	retlw	0
  1355  07B7                     STR_2:	
  1356  07B7  343C               	retlw	60	;'<'
  1357  07B8  3400               	retlw	0
  1358  07B7                     
  1359                           ; #config settings
  1360  0000                     
  1361                           	psect	cinit
  1362  0015                     start_initialization:	
  1363  0015                     __initialization:	
  1364  0015  30D2               	movlw	low (__pdataBANK3+32)
  1365                           
  1366                           ; Initialize objects allocated to BANK3
  1367  0016  1783               	bsf	3,7	;select IRP bank2
  1368  0017  00FD               	movwf	125
  1369  0018  3010               	movlw	high __pidataBANK3
  1370  0019  00FE               	movwf	126
  1371  001A  3000               	movlw	low __pidataBANK3
  1372  001B  00FF               	movwf	127
  1373  001C  30B2               	movlw	low __pdataBANK3
  1374  001D  0084               	movwf	4
  1375  001E  160A  158A  2560  120A  118A  	fcall	init_ram0
  1376                           
  1377                           ;initializer for _CURRENT_DIGIT
  1378  0023  3006               	movlw	6
  1379  0024  00EF               	movwf	__pdataBANK0& (0+127)
  1380                           
  1381                           ; Clear objects allocated to BANK3
  1382  0025  3090               	movlw	low __pbssBANK3
  1383  0026  0084               	movwf	4
  1384  0027  30B2               	movlw	low (__pbssBANK3+34)
  1385  0028  160A  158A  254B   	fcall	clear_ram0
  1386                           
  1387                           ; Clear objects allocated to BANK0
  1388  002B  01EB               	clrf	__pbssBANK0& (0+127)
  1389  002C  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  1390  002D  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  1391  002E  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  1392  002F                     end_of_initialization:	
  1393                           ;End of C runtime variable initialization code
  1394                           
  1395  002F                     __end_of__initialization:	
  1396  002F  0183               	clrf	3
  1397  0030  120A  118A  2FB9   	ljmp	l6560	;jump to C main() function
  1398                           
  1399                           	psect	bssBANK0
  1400  006B                     __pbssBANK0:	
  1401  006B                     _SETTED_TIME:	
  1402  006B                     	ds	3
  1403  006E                     _CONTROL_CURRENT_STATE:	
  1404  006E                     	ds	1
  1405                           
  1406                           	psect	dataBANK0
  1407  006F                     __pdataBANK0:	
  1408  006F                     _CURRENT_DIGIT:	
  1409  006F                     	ds	1
  1410                           
  1411                           	psect	bssBANK3
  1412  0190                     __pbssBANK3:	
  1413  0190                     _HANDLERS_STATES:	
  1414  0190                     	ds	5
  1415  0195                     _CURRENT_TIME:	
  1416  0195                     	ds	3
  1417  0198                     _last_time:	
  1418  0198                     	ds	3
  1419  019B                     _keypad_sapmles:	
  1420  019B                     	ds	3
  1421  019E                     _PRESSED_KEY:	
  1422  019E                     	ds	2
  1423  01A0                     _TICK_COUNTER:	
  1424  01A0                     	ds	2
  1425  01A2                     _LAST_PRESSED_KEY:	
  1426  01A2                     	ds	2
  1427  01A4                     GOTO_NEXT_DIGIT@count_left:	
  1428  01A4                     	ds	1
  1429  01A5                     GOTO_NEXT_DIGIT@count_right:	
  1430  01A5                     	ds	1
  1431  01A6                     CONTROL_UPDATE@control_timer_counter:	
  1432  01A6                     	ds	1
  1433  01A7                     CONTROL_UPDATE@control_shift_counter:	
  1434  01A7                     	ds	1
  1435  01A8                     _HEATER_WORK_STATE:	
  1436  01A8                     	ds	1
  1437  01A9                     _MOTOR_WORK_STATE:	
  1438  01A9                     	ds	1
  1439  01AA                     _TIME_TICKING_TYPE:	
  1440  01AA                     	ds	1
  1441  01AB                     _COUNT_DECISION:	
  1442  01AB                     	ds	1
  1443  01AC                     HEATER_UPDATE@heater_timer_counter:	
  1444  01AC                     	ds	1
  1445  01AD                     HEATER@current_angle:	
  1446  01AD                     	ds	1
  1447  01AE                     MOTOR_UPDATE@motor_timer_counter:	
  1448  01AE                     	ds	1
  1449  01AF                     _current_angle:	
  1450  01AF                     	ds	1
  1451  01B0                     KEYPAD_UPDATE@KEYPAD_TICK_counter:	
  1452  01B0                     	ds	1
  1453  01B1                     SWs_UPDATE@SW_timer_counter:	
  1454  01B1                     	ds	1
  1455                           
  1456                           	psect	dataBANK3
  1457  01B2                     __pdataBANK3:	
  1458  01B2                     _SWs:	
  1459  01B2                     	ds	20
  1460  01C6                     _KEYPAD_info:	
  1461  01C6                     	ds	9
  1462  01CF                     _LEDs:	
  1463  01CF                     	ds	3
  1464                           
  1465                           	psect	inittext
  1466  1D5C                     init_fetch0:	
  1467                           ;	Called with low address in FSR and high address in W
  1468                           
  1469  1D5C  087E               	movf	126,w
  1470  1D5D  008A               	movwf	10
  1471  1D5E  087F               	movf	127,w
  1472  1D5F  0082               	movwf	2
  1473  1D60                     init_ram0:	
  1474                           ;Called with:
  1475                           ;	high address of idata address in btemp 
  1476                           ;	low address of idata address in btemp+1 
  1477                           ;	low address of data in FSR
  1478                           ;	high address + 1 of data in btemp-1
  1479                           
  1480  1D60  255C  160A  158A   	fcall	init_fetch0
  1481  1D63  0080               	movwf	0
  1482  1D64  0A84               	incf	4,f
  1483  1D65  0804               	movf	4,w
  1484  1D66  067D               	xorwf	125,w
  1485  1D67  1903               	btfsc	3,2
  1486  1D68  3400               	retlw	0
  1487  1D69  0AFF               	incf	127,f
  1488  1D6A  1903               	btfsc	3,2
  1489  1D6B  0AFE               	incf	126,f
  1490  1D6C  2D60               	goto	init_ram0
  1491                           
  1492                           	psect	clrtext
  1493  1D4B                     clear_ram0:	
  1494                           ;	Called with FSR containing the base address, and
  1495                           ;	W with the last address+1
  1496                           
  1497  1D4B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1498  1D4C                     clrloop0:	
  1499  1D4C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1500  1D4D  0A84               	incf	4,f	;increment pointer
  1501  1D4E  0604               	xorwf	4,w	;XOR with final address
  1502  1D4F  1903               	btfsc	3,2	;have we reached the end yet?
  1503  1D50  3400               	retlw	0	;all done for this memory range, return
  1504  1D51  0604               	xorwf	4,w	;XOR again to restore value
  1505  1D52  2D4C               	goto	clrloop0	;do the next byte
  1506                           
  1507                           	psect	cstackBANK3
  1508  01D2                     __pcstackBANK3:	
  1509  01D2                     ___fladd@signs:	
  1510                           
  1511                           ; 1 bytes @ 0x0
  1512  01D2                     	ds	1
  1513  01D3                     ___fladd@aexp:	
  1514                           
  1515                           ; 1 bytes @ 0x1
  1516  01D3                     	ds	1
  1517  01D4                     ___fladd@bexp:	
  1518                           
  1519                           ; 1 bytes @ 0x2
  1520  01D4                     	ds	1
  1521  01D5                     ___fladd@grs:	
  1522                           
  1523                           ; 1 bytes @ 0x3
  1524  01D5                     	ds	1
  1525  01D6                     ?___fltol:	
  1526  01D6                     ___fltol@f1:	
  1527                           ; 4 bytes @ 0x4
  1528                           
  1529                           
  1530                           ; 4 bytes @ 0x4
  1531  01D6                     	ds	4
  1532  01DA                     ??___fltol:	
  1533                           
  1534                           ; 1 bytes @ 0x8
  1535  01DA                     	ds	4
  1536  01DE                     ___fltol@sign1:	
  1537                           
  1538                           ; 1 bytes @ 0xC
  1539  01DE                     	ds	1
  1540  01DF                     ___fltol@exp1:	
  1541                           
  1542                           ; 1 bytes @ 0xD
  1543  01DF                     	ds	1
  1544  01E0                     ?_CCP_PWM_PERIOD_LOAD:	
  1545  01E0                     ?_CCP1_PWM_DUTY_CYCLE_LOAD:	
  1546                           ; 1 bytes @ 0xE
  1547                           
  1548  01E0                     ?_CCP2_PWM_DUTY_CYCLE_LOAD:	
  1549                           ; 1 bytes @ 0xE
  1550                           
  1551  01E0                     CCP_PWM_PERIOD_LOAD@PERIOD:	
  1552                           ; 1 bytes @ 0xE
  1553                           
  1554  01E0                     CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  1555                           ; 2 bytes @ 0xE
  1556                           
  1557  01E0                     CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  1558                           ; 2 bytes @ 0xE
  1559                           
  1560                           
  1561                           ; 2 bytes @ 0xE
  1562  01E0                     	ds	2
  1563  01E2                     ??_CCP1_PWM_DUTY_CYCLE_LOAD:	
  1564  01E2                     ??_CCP2_PWM_DUTY_CYCLE_LOAD:	
  1565                           ; 1 bytes @ 0x10
  1566                           
  1567                           
  1568                           ; 1 bytes @ 0x10
  1569  01E2                     	ds	1
  1570  01E3                     CCP_PWM_PERIOD_LOAD@LOAD_VALUE:	
  1571                           
  1572                           ; 2 bytes @ 0x11
  1573  01E3                     	ds	2
  1574  01E5                     _CCP1_PWM_DUTY_CYCLE_LOAD$1939:	
  1575  01E5                     _CCP2_PWM_DUTY_CYCLE_LOAD$1940:	
  1576                           ; 4 bytes @ 0x13
  1577                           
  1578                           
  1579                           ; 4 bytes @ 0x13
  1580  01E5                     	ds	4
  1581  01E9                     CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  1582  01E9                     CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  1583                           ; 2 bytes @ 0x17
  1584                           
  1585                           
  1586                           ; 2 bytes @ 0x17
  1587  01E9                     	ds	2
  1588                           
  1589                           	psect	cstackBANK1
  1590  00A0                     __pcstackBANK1:	
  1591  00A0                     ??_TIMER2_INIT:	
  1592  00A0                     ??_TIMER2_START:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  00A0                     ??_TIMER0_STOP:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  00A0                     ??_TIMER2_STOP:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  00A0                     ??_MOTOR_SET_STATE:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  00A0                     ??_HEATER_SET_STATE:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  00A0                     ??_TIMER0_INIT:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  00A0                     ??_TIMER0_START:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  00A0                     ?_GPIO_PIN_SET_STATE:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  00A0                     ?_GPIO_PORT_SET_STATE:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  00A0                     ??_ENABLE_INTERUPT:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  00A0                     ??_TIME_INIT:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  00A0                     ??_CONTROL_INIT:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  00A0                     ?___bmul:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  00A0                     ?__Umul8_16:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  00A0                     ?___xxtofl:	
  1635                           ; 2 bytes @ 0x0
  1636                           
  1637  00A0                     GPIO_PIN_SET_STATE@GPIO_PIN_NO:	
  1638                           ; 4 bytes @ 0x0
  1639                           
  1640  00A0                     GPIO_PORT_SET_STATE@GPIO_PORT_STATE:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  00A0                     MOTOR_SET_STATE@MOTOR_STATE:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  00A0                     HEATER_SET_STATE@HEATER_STATE:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  00A0                     CONTROL_INIT@count:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  00A0                     ___bmul@multiplicand:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655  00A0                     __Umul8_16@multiplicand:	
  1656                           ; 1 bytes @ 0x0
  1657                           
  1658  00A0                     ___xxtofl@val:	
  1659                           ; 1 bytes @ 0x0
  1660                           
  1661                           
  1662                           ; 4 bytes @ 0x0
  1663  00A0                     	ds	1
  1664  00A1                     ??_GPIO_PORT_SET_STATE:	
  1665  00A1                     ??___bmul:	
  1666                           ; 1 bytes @ 0x1
  1667                           
  1668  00A1                     GPIO_PIN_SET_STATE@GPIO_PIN_STATE:	
  1669                           ; 1 bytes @ 0x1
  1670                           
  1671  00A1                     ___bmul@product:	
  1672                           ; 1 bytes @ 0x1
  1673                           
  1674                           
  1675                           ; 1 bytes @ 0x1
  1676  00A1                     	ds	1
  1677  00A2                     ??_GPIO_PIN_SET_STATE:	
  1678  00A2                     ___bmul@multiplier:	
  1679                           ; 1 bytes @ 0x2
  1680                           
  1681                           
  1682                           ; 1 bytes @ 0x2
  1683  00A2                     	ds	1
  1684  00A3                     ?_GPIO_PIN_INIT:	
  1685  00A3                     ??__Umul8_16:	
  1686                           ; 1 bytes @ 0x3
  1687                           
  1688  00A3                     GPIO_PIN_INIT@GPIO_PIN_NO:	
  1689                           ; 1 bytes @ 0x3
  1690                           
  1691  00A3                     __Umul8_16@product:	
  1692                           ; 1 bytes @ 0x3
  1693                           
  1694                           
  1695                           ; 2 bytes @ 0x3
  1696  00A3                     	ds	1
  1697  00A4                     ??___xxtofl:	
  1698  00A4                     GPIO_PIN_INIT@GPIO_DIRECTION:	
  1699                           ; 1 bytes @ 0x4
  1700                           
  1701  00A4                     GPIO_PORT_SET_STATE@GPIO_PORTx:	
  1702                           ; 1 bytes @ 0x4
  1703                           
  1704                           
  1705                           ; 1 bytes @ 0x4
  1706  00A4                     	ds	1
  1707  00A5                     ??_GPIO_PIN_INIT:	
  1708  00A5                     __Umul8_16@multiplier:	
  1709                           ; 1 bytes @ 0x5
  1710                           
  1711                           
  1712                           ; 1 bytes @ 0x5
  1713  00A5                     	ds	1
  1714  00A6                     __Umul8_16@word_mpld:	
  1715                           
  1716                           ; 2 bytes @ 0x6
  1717  00A6                     	ds	2
  1718  00A8                     ___xxtofl@sign:	
  1719                           
  1720                           ; 1 bytes @ 0x8
  1721  00A8                     	ds	1
  1722  00A9                     ___xxtofl@exp:	
  1723                           
  1724                           ; 1 bytes @ 0x9
  1725  00A9                     	ds	1
  1726  00AA                     GPIO_PIN_SET_STATE@GPIO_PORTx:	
  1727  00AA                     ___xxtofl@arg:	
  1728                           ; 1 bytes @ 0xA
  1729                           
  1730                           
  1731                           ; 4 bytes @ 0xA
  1732  00AA                     	ds	1
  1733  00AB                     ??_LCD_SND_COMMAND:	
  1734  00AB                     LCD_SND_COMMAND@command:	
  1735                           ; 1 bytes @ 0xB
  1736                           
  1737                           
  1738                           ; 1 bytes @ 0xB
  1739  00AB                     	ds	3
  1740  00AE                     ?___fldiv:	
  1741  00AE                     ___fldiv@a:	
  1742                           ; 4 bytes @ 0xE
  1743                           
  1744                           
  1745                           ; 4 bytes @ 0xE
  1746  00AE                     	ds	3
  1747  00B1                     GPIO_PIN_INIT@GPIO_PORTx:	
  1748                           
  1749                           ; 1 bytes @ 0x11
  1750  00B1                     	ds	1
  1751  00B2                     ??_CCP1_INIT:	
  1752  00B2                     ??_CCP2_INIT:	
  1753                           ; 1 bytes @ 0x12
  1754                           
  1755  00B2                     ??_SWs_INIT:	
  1756                           ; 1 bytes @ 0x12
  1757                           
  1758  00B2                     ??_LEDs_INIT:	
  1759                           ; 1 bytes @ 0x12
  1760                           
  1761  00B2                     ??_LCD_INIT:	
  1762                           ; 1 bytes @ 0x12
  1763                           
  1764  00B2                     ??_KEYPAD_INIT:	
  1765                           ; 1 bytes @ 0x12
  1766                           
  1767  00B2                     LEDs_INIT@counter:	
  1768                           ; 1 bytes @ 0x12
  1769                           
  1770  00B2                     KEYPAD_INIT@counter:	
  1771                           ; 1 bytes @ 0x12
  1772                           
  1773  00B2                     ___fldiv@b:	
  1774                           ; 1 bytes @ 0x12
  1775                           
  1776                           
  1777                           ; 4 bytes @ 0x12
  1778  00B2                     	ds	1
  1779  00B3                     SWs_INIT@Samples_Counter:	
  1780                           
  1781                           ; 1 bytes @ 0x13
  1782  00B3                     	ds	1
  1783  00B4                     SWs_INIT@SW_Counter:	
  1784                           
  1785                           ; 1 bytes @ 0x14
  1786  00B4                     	ds	2
  1787  00B6                     ??___fldiv:	
  1788                           
  1789                           ; 1 bytes @ 0x16
  1790  00B6                     	ds	4
  1791  00BA                     ___fldiv@rem:	
  1792                           
  1793                           ; 4 bytes @ 0x1A
  1794  00BA                     	ds	4
  1795  00BE                     ___fldiv@sign:	
  1796                           
  1797                           ; 1 bytes @ 0x1E
  1798  00BE                     	ds	1
  1799  00BF                     ___fldiv@new_exp:	
  1800                           
  1801                           ; 2 bytes @ 0x1F
  1802  00BF                     	ds	2
  1803  00C1                     ___fldiv@grs:	
  1804                           
  1805                           ; 4 bytes @ 0x21
  1806  00C1                     	ds	4
  1807  00C5                     ___fldiv@bexp:	
  1808                           
  1809                           ; 1 bytes @ 0x25
  1810  00C5                     	ds	1
  1811  00C6                     ___fldiv@aexp:	
  1812                           
  1813                           ; 1 bytes @ 0x26
  1814  00C6                     	ds	1
  1815  00C7                     ?___flmul:	
  1816  00C7                     ___flmul@b:	
  1817                           ; 4 bytes @ 0x27
  1818                           
  1819                           
  1820                           ; 4 bytes @ 0x27
  1821  00C7                     	ds	4
  1822  00CB                     ___flmul@a:	
  1823                           
  1824                           ; 4 bytes @ 0x2B
  1825  00CB                     	ds	4
  1826  00CF                     ??___flmul:	
  1827                           
  1828                           ; 1 bytes @ 0x2F
  1829  00CF                     	ds	4
  1830  00D3                     ___flmul@sign:	
  1831                           
  1832                           ; 1 bytes @ 0x33
  1833  00D3                     	ds	1
  1834  00D4                     ___flmul@aexp:	
  1835                           
  1836                           ; 1 bytes @ 0x34
  1837  00D4                     	ds	1
  1838  00D5                     ___flmul@grs:	
  1839                           
  1840                           ; 4 bytes @ 0x35
  1841  00D5                     	ds	4
  1842  00D9                     ___flmul@bexp:	
  1843                           
  1844                           ; 1 bytes @ 0x39
  1845  00D9                     	ds	1
  1846  00DA                     ___flmul@prod:	
  1847                           
  1848                           ; 4 bytes @ 0x3A
  1849  00DA                     	ds	4
  1850  00DE                     ___flmul@temp:	
  1851                           
  1852                           ; 2 bytes @ 0x3E
  1853  00DE                     	ds	2
  1854  00E0                     ?___fladd:	
  1855  00E0                     ___fladd@b:	
  1856                           ; 4 bytes @ 0x40
  1857                           
  1858                           
  1859                           ; 4 bytes @ 0x40
  1860  00E0                     	ds	4
  1861  00E4                     ___fladd@a:	
  1862                           
  1863                           ; 4 bytes @ 0x44
  1864  00E4                     	ds	4
  1865  00E8                     ??___fladd:	
  1866                           
  1867                           ; 1 bytes @ 0x48
  1868  00E8                     	ds	8
  1869  00F0                     ??_CCP_PWM_PERIOD_LOAD:	
  1870  00F0                     ??_MOTOR_INIT:	
  1871                           ; 1 bytes @ 0x50
  1872                           
  1873  00F0                     ??_HEATER_INIT:	
  1874                           ; 1 bytes @ 0x50
  1875                           
  1876  00F0                     ??_main:	
  1877                           ; 1 bytes @ 0x50
  1878                           
  1879                           
  1880                           	psect	cstackCOMMON
  1881  0070                     __pcstackCOMMON:	
  1882                           ; 1 bytes @ 0x50
  1883                           
  1884  0070                     ?_TIMER2_INIT:	
  1885  0070                     ?_TIMER2_START:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  0070                     ?_TIMER0_STOP:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  0070                     ?_TIMER2_STOP:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  0070                     ?_LCD_SND_COMMAND:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897  0070                     ?_LCD_SEND_CHARACTER:	
  1898                           ; 1 bytes @ 0x0
  1899                           
  1900  0070                     ?_MOTOR_SET_STATE:	
  1901                           ; 1 bytes @ 0x0
  1902                           
  1903  0070                     ?_HEATER_SET_STATE:	
  1904                           ; 1 bytes @ 0x0
  1905                           
  1906  0070                     ?_UPDATE_LCD_SECONDS:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909  0070                     ?_UPDATE_LCD_MINUTES:	
  1910                           ; 1 bytes @ 0x0
  1911                           
  1912  0070                     ?_UPDATE_LCD_HOURS:	
  1913                           ; 1 bytes @ 0x0
  1914                           
  1915  0070                     ?_DISP_SHOW_TIME:	
  1916                           ; 1 bytes @ 0x0
  1917                           
  1918  0070                     ?_SET_TIME_HANDLER:	
  1919                           ; 1 bytes @ 0x0
  1920                           
  1921  0070                     ?_SET_HEATING_HANDLER:	
  1922                           ; 1 bytes @ 0x0
  1923                           
  1924  0070                     ?_SET_ROTOR_PWR_HANDLER:	
  1925                           ; 1 bytes @ 0x0
  1926                           
  1927  0070                     ?_HEATING_HANDLER:	
  1928                           ; 1 bytes @ 0x0
  1929                           
  1930  0070                     ?_FINISH_HANDLER:	
  1931                           ; 1 bytes @ 0x0
  1932                           
  1933  0070                     ?_DEFAULT_HANDLER:	
  1934                           ; 1 bytes @ 0x0
  1935                           
  1936  0070                     ?_SET_TIME_HANDLER_ON_WORK:	
  1937                           ; 1 bytes @ 0x0
  1938                           
  1939  0070                     ?_SET_HEATING_HANDLER_ON_WORK:	
  1940                           ; 1 bytes @ 0x0
  1941                           
  1942  0070                     ?_SET_ROTOR_PWR_HANDLER_ON_WORK:	
  1943                           ; 1 bytes @ 0x0
  1944                           
  1945  0070                     ?_STOP_HEATING:	
  1946                           ; 1 bytes @ 0x0
  1947                           
  1948  0070                     ?_INCREMENT_THIS:	
  1949                           ; 1 bytes @ 0x0
  1950                           
  1951  0070                     ?_GOTO_NEXT_DIGIT:	
  1952                           ; 1 bytes @ 0x0
  1953                           
  1954  0070                     ?_CCP1_INIT:	
  1955                           ; 1 bytes @ 0x0
  1956                           
  1957  0070                     ?_CCP2_INIT:	
  1958                           ; 1 bytes @ 0x0
  1959                           
  1960  0070                     ?_TIMER0_INIT:	
  1961                           ; 1 bytes @ 0x0
  1962                           
  1963  0070                     ?_TIMER0_UPDATE:	
  1964                           ; 1 bytes @ 0x0
  1965                           
  1966  0070                     ??_TIMER0_UPDATE:	
  1967                           ; 1 bytes @ 0x0
  1968                           
  1969  0070                     ?_TIMER0_START:	
  1970                           ; 1 bytes @ 0x0
  1971                           
  1972  0070                     ?_SWs_UPDATE:	
  1973                           ; 1 bytes @ 0x0
  1974                           
  1975  0070                     ?_SW_GET_STATE:	
  1976                           ; 1 bytes @ 0x0
  1977                           
  1978  0070                     ?_SWs_INIT:	
  1979                           ; 1 bytes @ 0x0
  1980                           
  1981  0070                     ?_LEDs_INIT:	
  1982                           ; 1 bytes @ 0x0
  1983                           
  1984  0070                     ?_LCD_INIT:	
  1985                           ; 1 bytes @ 0x0
  1986                           
  1987  0070                     ?_LCD_CLEAR:	
  1988                           ; 1 bytes @ 0x0
  1989                           
  1990  0070                     ?_START_BLINKING_AT:	
  1991                           ; 1 bytes @ 0x0
  1992                           
  1993  0070                     ?_STOP_BLINKING:	
  1994                           ; 1 bytes @ 0x0
  1995                           
  1996  0070                     ?_KEYPAD_INIT:	
  1997                           ; 1 bytes @ 0x0
  1998                           
  1999  0070                     ?_KEYPAD_UPDATE:	
  2000                           ; 1 bytes @ 0x0
  2001                           
  2002  0070                     ?_MOTOR_INIT:	
  2003                           ; 1 bytes @ 0x0
  2004                           
  2005  0070                     ?_MOTOR_UPDATE:	
  2006                           ; 1 bytes @ 0x0
  2007                           
  2008  0070                     ?_HEATER_INIT:	
  2009                           ; 1 bytes @ 0x0
  2010                           
  2011  0070                     ?_HEATER_UPDATE:	
  2012                           ; 1 bytes @ 0x0
  2013                           
  2014  0070                     ?_ENABLE_INTERUPT:	
  2015                           ; 1 bytes @ 0x0
  2016                           
  2017  0070                     ?_DISP_HEATER_DATA:	
  2018                           ; 1 bytes @ 0x0
  2019                           
  2020  0070                     ?_DISP_MOTOR_DATA:	
  2021                           ; 1 bytes @ 0x0
  2022                           
  2023  0070                     ?_DISP_STATMENT:	
  2024                           ; 1 bytes @ 0x0
  2025                           
  2026  0070                     ?_TIME_INIT:	
  2027                           ; 1 bytes @ 0x0
  2028                           
  2029  0070                     ?_TIME_CONTINUE:	
  2030                           ; 1 bytes @ 0x0
  2031                           
  2032  0070                     ??_TIME_CONTINUE:	
  2033                           ; 1 bytes @ 0x0
  2034                           
  2035  0070                     ?_TIME_STOP:	
  2036                           ; 1 bytes @ 0x0
  2037                           
  2038  0070                     ??_TIME_STOP:	
  2039                           ; 1 bytes @ 0x0
  2040                           
  2041  0070                     ?_TIME_UPDATE:	
  2042                           ; 1 bytes @ 0x0
  2043                           
  2044  0070                     ??_TIME_UPDATE:	
  2045                           ; 1 bytes @ 0x0
  2046                           
  2047  0070                     ?_TIME_START_AT:	
  2048                           ; 1 bytes @ 0x0
  2049                           
  2050  0070                     ?_CONTROL_INIT:	
  2051                           ; 1 bytes @ 0x0
  2052                           
  2053  0070                     ?_CONTROL_UPDATE:	
  2054                           ; 1 bytes @ 0x0
  2055                           
  2056  0070                     ?_SYS_UPDATE:	
  2057                           ; 1 bytes @ 0x0
  2058                           
  2059  0070                     ?_main:	
  2060                           ; 1 bytes @ 0x0
  2061                           
  2062  0070                     ?___lbdiv:	
  2063                           ; 1 bytes @ 0x0
  2064                           
  2065  0070                     ?___lbmod:	
  2066                           ; 1 bytes @ 0x0
  2067                           
  2068  0070                     ?i1_GPIO_PORT_SET_STATE:	
  2069                           ; 1 bytes @ 0x0
  2070                           
  2071  0070                     ?i1_LCD_SND_COMMAND:	
  2072                           ; 1 bytes @ 0x0
  2073                           
  2074  0070                     ?i1_MOTOR_SET_STATE:	
  2075                           ; 1 bytes @ 0x0
  2076                           
  2077  0070                     ??i1_MOTOR_SET_STATE:	
  2078                           ; 1 bytes @ 0x0
  2079                           
  2080  0070                     ?i1_HEATER_SET_STATE:	
  2081                           ; 1 bytes @ 0x0
  2082                           
  2083  0070                     ??i1_HEATER_SET_STATE:	
  2084                           ; 1 bytes @ 0x0
  2085                           
  2086  0070                     ?i1___bmul:	
  2087                           ; 1 bytes @ 0x0
  2088                           
  2089  0070                     ?_KEYPAD_GET_PRESSED_KEY:	
  2090                           ; 1 bytes @ 0x0
  2091                           
  2092  0070                     ?___lwdiv:	
  2093                           ; 2 bytes @ 0x0
  2094                           
  2095  0070                     ?___lwmod:	
  2096                           ; 2 bytes @ 0x0
  2097                           
  2098  0070                     ?i1__Umul8_16:	
  2099                           ; 2 bytes @ 0x0
  2100                           
  2101  0070                     ?_TIME_GET:	
  2102                           ; 2 bytes @ 0x0
  2103                           
  2104  0070                     ?i1___xxtofl:	
  2105                           ; 3 bytes @ 0x0
  2106                           
  2107  0070                     TIME_START_AT@START_MINUTES:	
  2108                           ; 4 bytes @ 0x0
  2109                           
  2110  0070                     ___lbdiv@divisor:	
  2111                           ; 1 bytes @ 0x0
  2112                           
  2113  0070                     ___lbmod@divisor:	
  2114                           ; 1 bytes @ 0x0
  2115                           
  2116  0070                     i1GPIO_PORT_SET_STATE@GPIO_PORT_STATE:	
  2117                           ; 1 bytes @ 0x0
  2118                           
  2119  0070                     i1MOTOR_SET_STATE@MOTOR_STATE:	
  2120                           ; 1 bytes @ 0x0
  2121                           
  2122  0070                     i1HEATER_SET_STATE@HEATER_STATE:	
  2123                           ; 1 bytes @ 0x0
  2124                           
  2125  0070                     i1__Umul8_16@multiplicand:	
  2126                           ; 1 bytes @ 0x0
  2127                           
  2128  0070                     i1___bmul@multiplicand:	
  2129                           ; 1 bytes @ 0x0
  2130                           
  2131  0070                     ___lwdiv@divisor:	
  2132                           ; 1 bytes @ 0x0
  2133                           
  2134  0070                     ___lwmod@divisor:	
  2135                           ; 2 bytes @ 0x0
  2136                           
  2137  0070                     i1___xxtofl@val:	
  2138                           ; 2 bytes @ 0x0
  2139                           
  2140                           
  2141                           ; 4 bytes @ 0x0
  2142  0070                     	ds	1
  2143  0071                     ??___lbdiv:	
  2144  0071                     ??___lbmod:	
  2145                           ; 1 bytes @ 0x1
  2146                           
  2147  0071                     ??i1_GPIO_PORT_SET_STATE:	
  2148                           ; 1 bytes @ 0x1
  2149                           
  2150  0071                     ??i1___bmul:	
  2151                           ; 1 bytes @ 0x1
  2152                           
  2153  0071                     TIME_START_AT@START_HOURS:	
  2154                           ; 1 bytes @ 0x1
  2155                           
  2156  0071                     ___lbdiv@dividend:	
  2157                           ; 1 bytes @ 0x1
  2158                           
  2159  0071                     i1___bmul@multiplier:	
  2160                           ; 1 bytes @ 0x1
  2161                           
  2162                           
  2163                           ; 1 bytes @ 0x1
  2164  0071                     	ds	1
  2165  0072                     ??_KEYPAD_GET_PRESSED_KEY:	
  2166  0072                     TIME_START_AT@COUNTING_TYPE:	
  2167                           ; 1 bytes @ 0x2
  2168                           
  2169  0072                     ___lbdiv@counter:	
  2170                           ; 1 bytes @ 0x2
  2171                           
  2172  0072                     ___lbmod@dividend:	
  2173                           ; 1 bytes @ 0x2
  2174                           
  2175  0072                     i1___bmul@product:	
  2176                           ; 1 bytes @ 0x2
  2177                           
  2178  0072                     KEYPAD_GET_PRESSED_KEY@ret:	
  2179                           ; 1 bytes @ 0x2
  2180                           
  2181  0072                     ___lwdiv@dividend:	
  2182                           ; 2 bytes @ 0x2
  2183                           
  2184  0072                     ___lwmod@dividend:	
  2185                           ; 2 bytes @ 0x2
  2186                           
  2187                           
  2188                           ; 2 bytes @ 0x2
  2189  0072                     	ds	1
  2190  0073                     ?_GPIO_PIN_GET_STATE:	
  2191  0073                     ??_SW_GET_STATE:	
  2192                           ; 1 bytes @ 0x3
  2193                           
  2194  0073                     ??_TIME_GET:	
  2195                           ; 1 bytes @ 0x3
  2196                           
  2197  0073                     ??_TIME_START_AT:	
  2198                           ; 1 bytes @ 0x3
  2199                           
  2200  0073                     ?i1_GPIO_PIN_SET_STATE:	
  2201                           ; 1 bytes @ 0x3
  2202                           
  2203  0073                     ??i1__Umul8_16:	
  2204                           ; 1 bytes @ 0x3
  2205                           
  2206  0073                     GPIO_PIN_GET_STATE@GPIO_PIN_NO:	
  2207                           ; 1 bytes @ 0x3
  2208                           
  2209  0073                     SW_GET_STATE@SW_NO:	
  2210                           ; 1 bytes @ 0x3
  2211                           
  2212  0073                     TIME_START_AT@START_SECONDS:	
  2213                           ; 1 bytes @ 0x3
  2214                           
  2215  0073                     ___lbdiv@quotient:	
  2216                           ; 1 bytes @ 0x3
  2217                           
  2218  0073                     ___lbmod@counter:	
  2219                           ; 1 bytes @ 0x3
  2220                           
  2221  0073                     i1GPIO_PIN_SET_STATE@GPIO_PIN_NO:	
  2222                           ; 1 bytes @ 0x3
  2223                           
  2224  0073                     i1__Umul8_16@product:	
  2225                           ; 1 bytes @ 0x3
  2226                           
  2227                           
  2228                           ; 2 bytes @ 0x3
  2229  0073                     	ds	1
  2230  0074                     ??_GPIO_PIN_GET_STATE:	
  2231  0074                     ??___lwdiv:	
  2232                           ; 1 bytes @ 0x4
  2233                           
  2234  0074                     ??___lwmod:	
  2235                           ; 1 bytes @ 0x4
  2236                           
  2237  0074                     ??i1___xxtofl:	
  2238                           ; 1 bytes @ 0x4
  2239                           
  2240  0074                     SW_GET_STATE@ret:	
  2241                           ; 1 bytes @ 0x4
  2242                           
  2243  0074                     ___lbmod@rem:	
  2244                           ; 1 bytes @ 0x4
  2245                           
  2246  0074                     ___lwmod@counter:	
  2247                           ; 1 bytes @ 0x4
  2248                           
  2249  0074                     i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE:	
  2250                           ; 1 bytes @ 0x4
  2251                           
  2252  0074                     i1GPIO_PORT_SET_STATE@GPIO_PORTx:	
  2253                           ; 1 bytes @ 0x4
  2254                           
  2255  0074                     ___lwdiv@quotient:	
  2256                           ; 1 bytes @ 0x4
  2257                           
  2258                           
  2259                           ; 2 bytes @ 0x4
  2260  0074                     	ds	1
  2261  0075                     ??i1_GPIO_PIN_SET_STATE:	
  2262  0075                     i1__Umul8_16@multiplier:	
  2263                           ; 1 bytes @ 0x5
  2264                           
  2265                           
  2266                           ; 1 bytes @ 0x5
  2267  0075                     	ds	1
  2268  0076                     ___lwdiv@counter:	
  2269  0076                     i1__Umul8_16@word_mpld:	
  2270                           ; 1 bytes @ 0x6
  2271                           
  2272                           
  2273                           ; 2 bytes @ 0x6
  2274  0076                     	ds	1
  2275  0077                     ?_utoa:	
  2276  0077                     utoa@val:	
  2277                           ; 1 bytes @ 0x7
  2278                           
  2279                           
  2280                           ; 2 bytes @ 0x7
  2281  0077                     	ds	1
  2282  0078                     GPIO_PIN_GET_STATE@GPIO_PORTx:	
  2283  0078                     i1___xxtofl@sign:	
  2284                           ; 1 bytes @ 0x8
  2285                           
  2286                           
  2287                           ; 1 bytes @ 0x8
  2288  0078                     	ds	1
  2289  0079                     GPIO_PIN_GET_STATE@ret:	
  2290  0079                     i1___xxtofl@exp:	
  2291                           ; 1 bytes @ 0x9
  2292                           
  2293  0079                     utoa@base:	
  2294                           ; 1 bytes @ 0x9
  2295                           
  2296                           
  2297                           ; 2 bytes @ 0x9
  2298  0079                     	ds	1
  2299  007A                     ??_SWs_UPDATE:	
  2300  007A                     i1___xxtofl@arg:	
  2301                           ; 1 bytes @ 0xA
  2302                           
  2303                           
  2304                           ; 4 bytes @ 0xA
  2305  007A                     	ds	1
  2306  007B                     ??_itoa:	
  2307  007B                     ??_utoa:	
  2308                           ; 1 bytes @ 0xB
  2309                           
  2310                           
  2311                           ; 1 bytes @ 0xB
  2312  007B                     	ds	1
  2313  007C                     itoa@buf:	
  2314                           
  2315                           ; 1 bytes @ 0xC
  2316  007C                     	ds	1
  2317  007D                     i1GPIO_PIN_SET_STATE@GPIO_PORTx:	
  2318                           
  2319                           ; 1 bytes @ 0xD
  2320  007D                     	ds	1
  2321  007E                     ??_LCD_SEND_CHARACTER:	
  2322  007E                     ??_UPDATE_LCD_SECONDS:	
  2323                           ; 1 bytes @ 0xE
  2324                           
  2325  007E                     ??_UPDATE_LCD_MINUTES:	
  2326                           ; 1 bytes @ 0xE
  2327                           
  2328  007E                     ??_UPDATE_LCD_HOURS:	
  2329                           ; 1 bytes @ 0xE
  2330                           
  2331  007E                     ??_DISP_SHOW_TIME:	
  2332                           ; 1 bytes @ 0xE
  2333                           
  2334  007E                     ??_DEFAULT_HANDLER:	
  2335                           ; 1 bytes @ 0xE
  2336                           
  2337  007E                     ??_SET_TIME_HANDLER_ON_WORK:	
  2338                           ; 1 bytes @ 0xE
  2339                           
  2340  007E                     ??_STOP_HEATING:	
  2341                           ; 1 bytes @ 0xE
  2342                           
  2343  007E                     ??_LED_SET_STATE:	
  2344                           ; 1 bytes @ 0xE
  2345                           
  2346  007E                     ??_LCD_SEND_A_STRING:	
  2347                           ; 1 bytes @ 0xE
  2348                           
  2349  007E                     ??_LCD_SEND_A_NUMBER:	
  2350                           ; 1 bytes @ 0xE
  2351                           
  2352  007E                     ??_LCD_CLEAR:	
  2353                           ; 1 bytes @ 0xE
  2354                           
  2355  007E                     ??_START_BLINKING_AT:	
  2356                           ; 1 bytes @ 0xE
  2357                           
  2358  007E                     ??_STOP_BLINKING:	
  2359                           ; 1 bytes @ 0xE
  2360                           
  2361  007E                     ??_MOTOR_UPDATE:	
  2362                           ; 1 bytes @ 0xE
  2363                           
  2364  007E                     ??_HEATER_UPDATE:	
  2365                           ; 1 bytes @ 0xE
  2366                           
  2367  007E                     ??_DISP_UPDATE_TIME:	
  2368                           ; 1 bytes @ 0xE
  2369                           
  2370  007E                     ??_DISP_UPDATE_TIME_UNIT_AT:	
  2371                           ; 1 bytes @ 0xE
  2372                           
  2373  007E                     ??_DISP_SHOW_TIME_AT:	
  2374                           ; 1 bytes @ 0xE
  2375                           
  2376  007E                     ??_DISP_HEATER_DATA:	
  2377                           ; 1 bytes @ 0xE
  2378                           
  2379  007E                     ??_DISP_MOTOR_DATA:	
  2380                           ; 1 bytes @ 0xE
  2381                           
  2382  007E                     ??_DISP_STATMENT:	
  2383                           ; 1 bytes @ 0xE
  2384                           
  2385  007E                     ??i1_LCD_SND_COMMAND:	
  2386                           ; 1 bytes @ 0xE
  2387                           
  2388                           
  2389                           	psect	cstackBANK0
  2390  0020                     __pcstackBANK0:	
  2391                           ; 1 bytes @ 0xE
  2392                           
  2393  0020                     ?_LED_SET_STATE:	
  2394  0020                     ??_KEYPAD_UPDATE:	
  2395                           ; 1 bytes @ 0x0
  2396                           
  2397  0020                     ?i1___fldiv:	
  2398                           ; 1 bytes @ 0x0
  2399                           
  2400  0020                     LED_SET_STATE@LED_STATE:	
  2401                           ; 4 bytes @ 0x0
  2402                           
  2403  0020                     LCD_SEND_CHARACTER@character:	
  2404                           ; 1 bytes @ 0x0
  2405                           
  2406  0020                     i1LCD_SND_COMMAND@command:	
  2407                           ; 1 bytes @ 0x0
  2408                           
  2409  0020                     utoa@v:	
  2410                           ; 1 bytes @ 0x0
  2411                           
  2412  0020                     i1___fldiv@a:	
  2413                           ; 2 bytes @ 0x0
  2414                           
  2415                           
  2416                           ; 4 bytes @ 0x0
  2417  0020                     	ds	1
  2418  0021                     ?_LCD_SEND_A_STRING:	
  2419  0021                     ?_LCD_SET_CURSOR:	
  2420                           ; 1 bytes @ 0x1
  2421                           
  2422  0021                     SWs_UPDATE@samples_counter:	
  2423                           ; 1 bytes @ 0x1
  2424                           
  2425  0021                     LCD_SET_CURSOR@row:	
  2426                           ; 1 bytes @ 0x1
  2427                           
  2428  0021                     KEYPAD_UPDATE@KEY_STATE:	
  2429                           ; 1 bytes @ 0x1
  2430                           
  2431  0021                     LCD_SEND_A_STRING@string:	
  2432                           ; 1 bytes @ 0x1
  2433                           
  2434                           
  2435                           ; 2 bytes @ 0x1
  2436  0021                     	ds	1
  2437  0022                     ??_LCD_SET_CURSOR:	
  2438  0022                     SWs_UPDATE@sw_counter:	
  2439                           ; 1 bytes @ 0x2
  2440                           
  2441  0022                     LED_SET_STATE@LED_NO:	
  2442                           ; 1 bytes @ 0x2
  2443                           
  2444  0022                     KEYPAD_UPDATE@KEYPAD_counter:	
  2445                           ; 1 bytes @ 0x2
  2446                           
  2447  0022                     utoa@c:	
  2448                           ; 1 bytes @ 0x2
  2449                           
  2450                           
  2451                           ; 1 bytes @ 0x2
  2452  0022                     	ds	1
  2453  0023                     KEYPAD_UPDATE@ROW_counter:	
  2454  0023                     utoa@buf:	
  2455                           ; 1 bytes @ 0x3
  2456                           
  2457                           
  2458                           ; 1 bytes @ 0x3
  2459  0023                     	ds	1
  2460  0024                     ?_itoa:	
  2461  0024                     LCD_SET_CURSOR@coloum:	
  2462                           ; 1 bytes @ 0x4
  2463                           
  2464  0024                     KEYPAD_UPDATE@COL_counter:	
  2465                           ; 1 bytes @ 0x4
  2466                           
  2467  0024                     itoa@val:	
  2468                           ; 1 bytes @ 0x4
  2469                           
  2470  0024                     i1___fldiv@b:	
  2471                           ; 2 bytes @ 0x4
  2472                           
  2473                           
  2474                           ; 4 bytes @ 0x4
  2475  0024                     	ds	1
  2476  0025                     START_BLINKING_AT@BLINKED:	
  2477  0025                     DISP_STATMENT@statment:	
  2478                           ; 1 bytes @ 0x5
  2479                           
  2480                           
  2481                           ; 1 bytes @ 0x5
  2482  0025                     	ds	1
  2483  0026                     ??_FINISH_HANDLER:	
  2484  0026                     ??_SET_HEATING_HANDLER_ON_WORK:	
  2485                           ; 1 bytes @ 0x6
  2486                           
  2487  0026                     ??_SET_ROTOR_PWR_HANDLER_ON_WORK:	
  2488                           ; 1 bytes @ 0x6
  2489                           
  2490  0026                     ??_GOTO_NEXT_DIGIT:	
  2491                           ; 1 bytes @ 0x6
  2492                           
  2493  0026                     itoa@base:	
  2494                           ; 1 bytes @ 0x6
  2495                           
  2496                           
  2497                           ; 2 bytes @ 0x6
  2498  0026                     	ds	2
  2499  0028                     ??_SET_HEATING_HANDLER:	
  2500  0028                     ?_LCD_SEND_A_NUMBER:	
  2501                           ; 1 bytes @ 0x8
  2502                           
  2503  0028                     ??i1___fldiv:	
  2504                           ; 1 bytes @ 0x8
  2505                           
  2506  0028                     GOTO_NEXT_DIGIT@KEY:	
  2507                           ; 1 bytes @ 0x8
  2508                           
  2509  0028                     LCD_SEND_A_NUMBER@x:	
  2510                           ; 1 bytes @ 0x8
  2511                           
  2512  0028                     SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY:	
  2513                           ; 2 bytes @ 0x8
  2514                           
  2515                           
  2516                           ; 2 bytes @ 0x8
  2517  0028                     	ds	2
  2518  002A                     ??_SET_ROTOR_PWR_HANDLER:	
  2519  002A                     LCD_SEND_A_NUMBER@string:	
  2520                           ; 1 bytes @ 0xA
  2521                           
  2522                           
  2523                           ; 4 bytes @ 0xA
  2524  002A                     	ds	2
  2525  002C                     i1___fldiv@rem:	
  2526                           
  2527                           ; 4 bytes @ 0xC
  2528  002C                     	ds	2
  2529  002E                     ?_DISP_UPDATE_TIME_UNIT_AT:	
  2530  002E                     DISP_UPDATE_TIME_UNIT_AT@NUMBER:	
  2531                           ; 1 bytes @ 0xE
  2532                           
  2533  002E                     UPDATE_LCD_SECONDS@SECONDS:	
  2534                           ; 1 bytes @ 0xE
  2535                           
  2536  002E                     UPDATE_LCD_MINUTES@MINUTES:	
  2537                           ; 1 bytes @ 0xE
  2538                           
  2539  002E                     UPDATE_LCD_HOURS@HOURS:	
  2540                           ; 1 bytes @ 0xE
  2541                           
  2542                           
  2543                           ; 1 bytes @ 0xE
  2544  002E                     	ds	1
  2545  002F                     ?_DISP_UPDATE_TIME:	
  2546  002F                     ?_DISP_SHOW_TIME_AT:	
  2547                           ; 1 bytes @ 0xF
  2548                           
  2549  002F                     DISP_UPDATE_TIME_UNIT_AT@UNIT:	
  2550                           ; 1 bytes @ 0xF
  2551                           
  2552  002F                     DISP_UPDATE_TIME@time:	
  2553                           ; 1 bytes @ 0xF
  2554                           
  2555  002F                     DISP_SHOW_TIME_AT@START_TIME:	
  2556                           ; 3 bytes @ 0xF
  2557                           
  2558                           
  2559                           ; 3 bytes @ 0xF
  2560  002F                     	ds	1
  2561  0030                     ??_INCREMENT_THIS:	
  2562  0030                     i1___fldiv@sign:	
  2563                           ; 1 bytes @ 0x10
  2564                           
  2565                           
  2566                           ; 1 bytes @ 0x10
  2567  0030                     	ds	1
  2568  0031                     i1___fldiv@new_exp:	
  2569                           
  2570                           ; 2 bytes @ 0x11
  2571  0031                     	ds	1
  2572  0032                     ??_HEATING_HANDLER:	
  2573  0032                     INCREMENT_THIS@KEY:	
  2574                           ; 1 bytes @ 0x12
  2575                           
  2576                           
  2577                           ; 1 bytes @ 0x12
  2578  0032                     	ds	1
  2579  0033                     ??_SET_TIME_HANDLER:	
  2580  0033                     i1___fldiv@grs:	
  2581                           ; 1 bytes @ 0x13
  2582                           
  2583                           
  2584                           ; 4 bytes @ 0x13
  2585  0033                     	ds	1
  2586  0034                     HEATING_HANDLER@current_time:	
  2587                           
  2588                           ; 3 bytes @ 0x14
  2589  0034                     	ds	3
  2590  0037                     ??_CONTROL_UPDATE:	
  2591  0037                     i1___fldiv@bexp:	
  2592                           ; 1 bytes @ 0x17
  2593                           
  2594                           
  2595                           ; 1 bytes @ 0x17
  2596  0037                     	ds	1
  2597  0038                     i1___fldiv@aexp:	
  2598                           
  2599                           ; 1 bytes @ 0x18
  2600  0038                     	ds	1
  2601  0039                     ?i1___flmul:	
  2602  0039                     i1___flmul@b:	
  2603                           ; 4 bytes @ 0x19
  2604                           
  2605                           
  2606                           ; 4 bytes @ 0x19
  2607  0039                     	ds	4
  2608  003D                     i1___flmul@a:	
  2609                           
  2610                           ; 4 bytes @ 0x1D
  2611  003D                     	ds	4
  2612  0041                     ??i1___flmul:	
  2613                           
  2614                           ; 1 bytes @ 0x21
  2615  0041                     	ds	4
  2616  0045                     i1___flmul@sign:	
  2617                           
  2618                           ; 1 bytes @ 0x25
  2619  0045                     	ds	1
  2620  0046                     i1___flmul@aexp:	
  2621                           
  2622                           ; 1 bytes @ 0x26
  2623  0046                     	ds	1
  2624  0047                     i1___flmul@grs:	
  2625                           
  2626                           ; 4 bytes @ 0x27
  2627  0047                     	ds	4
  2628  004B                     i1___flmul@bexp:	
  2629                           
  2630                           ; 1 bytes @ 0x2B
  2631  004B                     	ds	1
  2632  004C                     i1___flmul@prod:	
  2633                           
  2634                           ; 4 bytes @ 0x2C
  2635  004C                     	ds	4
  2636  0050                     i1___flmul@temp:	
  2637                           
  2638                           ; 2 bytes @ 0x30
  2639  0050                     	ds	2
  2640  0052                     ?i1___fltol:	
  2641  0052                     i1___fltol@f1:	
  2642                           ; 4 bytes @ 0x32
  2643                           
  2644                           
  2645                           ; 4 bytes @ 0x32
  2646  0052                     	ds	4
  2647  0056                     ??i1___fltol:	
  2648                           
  2649                           ; 1 bytes @ 0x36
  2650  0056                     	ds	4
  2651  005A                     i1___fltol@sign1:	
  2652                           
  2653                           ; 1 bytes @ 0x3A
  2654  005A                     	ds	1
  2655  005B                     i1___fltol@exp1:	
  2656                           
  2657                           ; 1 bytes @ 0x3B
  2658  005B                     	ds	1
  2659  005C                     ?i1_CCP1_PWM_DUTY_CYCLE_LOAD:	
  2660  005C                     ?i1_CCP2_PWM_DUTY_CYCLE_LOAD:	
  2661                           ; 1 bytes @ 0x3C
  2662                           
  2663  005C                     i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  2664                           ; 1 bytes @ 0x3C
  2665                           
  2666  005C                     i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE:	
  2667                           ; 2 bytes @ 0x3C
  2668                           
  2669                           
  2670                           ; 2 bytes @ 0x3C
  2671  005C                     	ds	2
  2672  005E                     ??i1_CCP1_PWM_DUTY_CYCLE_LOAD:	
  2673  005E                     ??i1_CCP2_PWM_DUTY_CYCLE_LOAD:	
  2674                           ; 1 bytes @ 0x3E
  2675                           
  2676                           
  2677                           ; 1 bytes @ 0x3E
  2678  005E                     	ds	3
  2679  0061                     i1_CCP1_PWM_DUTY_CYCLE_LOAD$2076:	
  2680  0061                     i1_CCP2_PWM_DUTY_CYCLE_LOAD$2077:	
  2681                           ; 4 bytes @ 0x41
  2682                           
  2683                           
  2684                           ; 4 bytes @ 0x41
  2685  0061                     	ds	4
  2686  0065                     i1CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  2687  0065                     i1CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE:	
  2688                           ; 2 bytes @ 0x45
  2689                           
  2690                           
  2691                           ; 2 bytes @ 0x45
  2692  0065                     	ds	2
  2693  0067                     ??_SYS_UPDATE:	
  2694                           
  2695                           ; 1 bytes @ 0x47
  2696  0067                     	ds	4
  2697                           
  2698                           	psect	maintext
  2699  07B9                     __pmaintext:	
  2700 ;;
  2701 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2702 ;;
  2703 ;; *************** function _main *****************
  2704 ;; Defined at:
  2705 ;;		line 50 in file "MICROWAVE.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;		None
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : B00/0
  2716 ;;		On exit  : 200/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2719 ;;      Params:         0       0       0       0       0
  2720 ;;      Locals:         0       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0
  2722 ;;      Totals:         0       0       0       0       0
  2723 ;;Total ram usage:        0 bytes
  2724 ;; Hardware stack levels required when called:   14
  2725 ;; This function calls:
  2726 ;;		_CONTROL_INIT
  2727 ;;		_ENABLE_INTERUPT
  2728 ;;		_HEATER_INIT
  2729 ;;		_KEYPAD_INIT
  2730 ;;		_LCD_INIT
  2731 ;;		_LEDs_INIT
  2732 ;;		_MOTOR_INIT
  2733 ;;		_SWs_INIT
  2734 ;;		_TIMER0_INIT
  2735 ;;		_TIMER0_START
  2736 ;;		_TIME_INIT
  2737 ;; This function is called by:
  2738 ;;		Startup code after reset
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           
  2743                           ;psect for function _main
  2744  07B9                     _main:	
  2745  07B9                     l6560:	
  2746                           ;incstack = 0
  2747 ;; hardware stack exceeded
  2748                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2749                           
  2750                           
  2751                           ;MICROWAVE.c: 53:     TIME_INIT ();
  2752  07B9  160A  158A  2553  120A  118A  	fcall	_TIME_INIT
  2753                           
  2754                           ;MICROWAVE.c: 54:     MOTOR_INIT();
  2755  07BE  160A  118A  2032  120A  118A  	fcall	_MOTOR_INIT
  2756                           
  2757                           ;MICROWAVE.c: 55:     HEATER_INIT();
  2758  07C3  160A  118A  2047  120A  118A  	fcall	_HEATER_INIT
  2759                           
  2760                           ;MICROWAVE.c: 56:     LCD_INIT();
  2761  07C8  120A  118A  24FA  120A  118A  	fcall	_LCD_INIT
  2762                           
  2763                           ;MICROWAVE.c: 57:     SWs_INIT();
  2764  07CD  120A  118A  2424  120A  118A  	fcall	_SWs_INIT
  2765                           
  2766                           ;MICROWAVE.c: 58:     LEDs_INIT();
  2767  07D2  120A  118A  2487  120A  118A  	fcall	_LEDs_INIT
  2768                           
  2769                           ;MICROWAVE.c: 59:     TIMER0_INIT();
  2770  07D7  120A  158A  2000  120A  118A  	fcall	_TIMER0_INIT
  2771                           
  2772                           ;MICROWAVE.c: 60:     KEYPAD_INIT();
  2773  07DC  120A  118A  24B7  120A  118A  	fcall	_KEYPAD_INIT
  2774                           
  2775                           ;MICROWAVE.c: 61:     CONTROL_INIT();
  2776  07E1  160A  158A  256D  120A  118A  	fcall	_CONTROL_INIT
  2777                           
  2778                           ;MICROWAVE.c: 62:     ENABLE_INTERUPT();
  2779  07E6  160A  158A  2544  120A  118A  	fcall	_ENABLE_INTERUPT
  2780                           
  2781                           ;MICROWAVE.c: 64:     TIMER0_START();
  2782  07EB  160A  158A  2547  120A  118A  	fcall	_TIMER0_START
  2783  07F0                     l939:	
  2784                           ;MICROWAVE.c: 65:     while(1)
  2785                           
  2786                           
  2787                           ;MICROWAVE.c: 66:     {;MICROWAVE.c: 68:     }
  2788  07F0  2FF0               	goto	l939
  2789  07F1                     __end_of_main:	
  2790                           
  2791                           	psect	text1
  2792  1D53                     __ptext1:	
  2793 ;; *************** function _TIME_INIT *****************
  2794 ;; Defined at:
  2795 ;;		line 32 in file "TIME.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		status,2
  2804 ;; Tracked objects:
  2805 ;;		On entry : B00/0
  2806 ;;		On exit  : B00/300
  2807 ;;		Unchanged: 800/0
  2808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2809 ;;      Params:         0       0       0       0       0
  2810 ;;      Locals:         0       0       0       0       0
  2811 ;;      Temps:          0       0       0       0       0
  2812 ;;      Totals:         0       0       0       0       0
  2813 ;;Total ram usage:        0 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:   10
  2816 ;; This function calls:
  2817 ;;		Nothing
  2818 ;; This function is called by:
  2819 ;;		_main
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           
  2824                           ;psect for function _TIME_INIT
  2825  1D53                     _TIME_INIT:	
  2826                           
  2827                           ;TIME.c: 34:  TICK_COUNTER = 0 ;
  2828                           
  2829                           ;incstack = 0
  2830 ;; hardware stack exceeded
  2831                           ; Regs used in _TIME_INIT: [status,2]
  2832  1D53  1683               	bsf	3,5	;RP0=1, select bank3
  2833  1D54  1703               	bsf	3,6	;RP1=1, select bank3
  2834  1D55  01A0               	clrf	_TICK_COUNTER^(0+384)
  2835  1D56  01A1               	clrf	(_TICK_COUNTER+1)^(0+384)
  2836                           
  2837                           ;TIME.c: 35:  COUNT_DECISION = NO ;
  2838  1D57  01AB               	clrf	_COUNT_DECISION^(0+384)
  2839                           
  2840                           ;TIME.c: 36:  CURRENT_TIME.HOURS = 0;
  2841  1D58  0197               	clrf	(_CURRENT_TIME^(0+384)+2)
  2842                           
  2843                           ;TIME.c: 37: CURRENT_TIME.MINUTES = 0;
  2844  1D59  0196               	clrf	(_CURRENT_TIME^(0+384)+1)
  2845                           
  2846                           ;TIME.c: 38: CURRENT_TIME.SECONDS = 0;
  2847  1D5A  0195               	clrf	_CURRENT_TIME^(0+384)
  2848  1D5B  0008               	return
  2849  1D5C                     __end_of_TIME_INIT:	
  2850                           
  2851                           	psect	text2
  2852  1D47                     __ptext2:	
  2853 ;; *************** function _TIMER0_START *****************
  2854 ;; Defined at:
  2855 ;;		line 80 in file "TIMR0.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;		None
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;		None
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		None
  2864 ;; Tracked objects:
  2865 ;;		On entry : B00/B00
  2866 ;;		On exit  : B00/900
  2867 ;;		Unchanged: 800/0
  2868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2869 ;;      Params:         0       0       0       0       0
  2870 ;;      Locals:         0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0
  2872 ;;      Totals:         0       0       0       0       0
  2873 ;;Total ram usage:        0 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:   10
  2876 ;; This function calls:
  2877 ;;		Nothing
  2878 ;; This function is called by:
  2879 ;;		_main
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           
  2884                           ;psect for function _TIMER0_START
  2885  1D47                     _TIMER0_START:	
  2886                           
  2887                           ;TIMR0.c: 82:  ( T0SE =( TIMER0_INTERNAL &0x01)); (T0CS = ( TIMER0_INTERNAL >>1));
  2888                           
  2889                           ;incstack = 0
  2890 ;; hardware stack exceeded
  2891                           ; Regs used in _TIMER0_START: []
  2892  1D47  1303               	bcf	3,6	;RP1=0, select bank1
  2893  1D48  1201               	bcf	1,4	;volatile
  2894  1D49  1281               	bcf	1,5	;volatile
  2895  1D4A  0008               	return
  2896  1D4B                     __end_of_TIMER0_START:	
  2897                           
  2898                           	psect	text3
  2899  0800                     __ptext3:	
  2900 ;; *************** function _TIMER0_INIT *****************
  2901 ;; Defined at:
  2902 ;;		line 29 in file "TIMR0.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg, status,2, status,0, pclath, cstack
  2911 ;; Tracked objects:
  2912 ;;		On entry : B00/900
  2913 ;;		On exit  : B00/900
  2914 ;;		Unchanged: 800/0
  2915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2916 ;;      Params:         0       0       0       0       0
  2917 ;;      Locals:         0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0
  2919 ;;      Totals:         0       0       0       0       0
  2920 ;;Total ram usage:        0 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:   11
  2923 ;; This function calls:
  2924 ;;		_TIMER0_STOP
  2925 ;; This function is called by:
  2926 ;;		_main
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           
  2931                           ;psect for function _TIMER0_INIT
  2932  0800                     _TIMER0_INIT:	
  2933                           
  2934                           ;TIMR0.c: 32:  ( PSA = GPIO_PIN_OFF); (OPTION_REGbits.PS = TIMER0_CLK_256 );
  2935                           
  2936                           ;incstack = 0
  2937 ;; hardware stack exceeded
  2938                           ; Regs used in _TIMER0_INIT: [wreg+status,2+status,0+pclath+cstack]
  2939  0800  1181               	bcf	1,3	;volatile
  2940  0801  3007               	movlw	7
  2941  0802  0481               	iorwf	1,f	;volatile
  2942                           
  2943                           ;TIMR0.c: 34:  (TMR0IE = TIMER0_INTERUPT_BASED );
  2944  0803  168B               	bsf	11,5	;volatile
  2945                           
  2946                           ;TIMR0.c: 36:     (TMR0 = ((tWORD)((256) - ( (5)* ((double) (8 * 1000) / ( 4 * 256 ) ) )
      +                          )) );
  2947  0804  30D8               	movlw	216
  2948  0805  1283               	bcf	3,5	;RP0=0, select bank0
  2949  0806  0081               	movwf	1	;volatile
  2950                           
  2951                           ;TIMR0.c: 37:  TIMER0_STOP();
  2952  0807  2808               	ljmp	l5858
  2953  0808                     __end_of_TIMER0_INIT:	
  2954  0808                     __ptext4:	
  2955 ;; *************** function _TIMER0_STOP *****************
  2956 ;; Defined at:
  2957 ;;		line 84 in file "TIMR0.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;		None
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;		None
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		None
  2966 ;; Tracked objects:
  2967 ;;		On entry : B00/800
  2968 ;;		On exit  : B00/900
  2969 ;;		Unchanged: 800/0
  2970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2971 ;;      Params:         0       0       0       0       0
  2972 ;;      Locals:         0       0       0       0       0
  2973 ;;      Temps:          0       0       0       0       0
  2974 ;;      Totals:         0       0       0       0       0
  2975 ;;Total ram usage:        0 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:   10
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_TIMER0_INIT
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           
  2986                           ;psect for function _TIMER0_STOP
  2987  0808                     _TIMER0_STOP:	
  2988  0808                     l5858:	
  2989                           ;incstack = 0
  2990 ;; hardware stack exceeded
  2991                           ; Regs used in _TIMER0_STOP: []
  2992                           
  2993                           
  2994                           ;TIMR0.c: 86:     ( T0SE =( TIMER0_EXTERNAL_RISING_EDGE &0x01)); (T0CS = ( TIMER0_EXTERN
      +                          AL_RISING_EDGE >>1));
  2995  0808  1683               	bsf	3,5	;RP0=1, select bank1
  2996  0809  1601               	bsf	1,4	;volatile
  2997  080A  1281               	bcf	1,5	;volatile
  2998  080B  0008               	return
  2999  080C                     __end_of_TIMER0_STOP:	
  3000                           
  3001                           	psect	text5
  3002  0424                     __ptext5:	
  3003 ;; *************** function _SWs_INIT *****************
  3004 ;; Defined at:
  3005 ;;		line 131 in file "SW.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;		None
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  SW_Counter      1   20[BANK1 ] unsigned char 
  3010 ;;  Samples_Coun    1   19[BANK1 ] unsigned char 
  3011 ;;  ret             1    0        enum E861
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  1    wreg      enum E861
  3014 ;; Registers used:
  3015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/300
  3018 ;;		On exit  : B00/900
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3021 ;;      Params:         0       0       0       0       0
  3022 ;;      Locals:         0       0       3       0       0
  3023 ;;      Temps:          0       0       0       0       0
  3024 ;;      Totals:         0       0       3       0       0
  3025 ;;Total ram usage:        3 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:   11
  3028 ;; This function calls:
  3029 ;;		_GPIO_PIN_INIT
  3030 ;;		___bmul
  3031 ;; This function is called by:
  3032 ;;		_main
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           
  3037                           ;psect for function _SWs_INIT
  3038  0424                     _SWs_INIT:	
  3039                           
  3040                           ;SW.c: 134:  tbyte SW_Counter ;;SW.c: 135:  tbyte Samples_Counter;;SW.c: 136:  for (SW_C
      +                          ounter =0 ; SW_Counter < 4 ; SW_Counter++)
  3041                           
  3042                           ;incstack = 0
  3043 ;; hardware stack exceeded
  3044                           ; Regs used in _SWs_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3045  0424  1683               	bsf	3,5	;RP0=1, select bank1
  3046  0425  1303               	bcf	3,6	;RP1=0, select bank1
  3047  0426  01B4               	clrf	SWs_INIT@SW_Counter^(0+128)
  3048  0427                     l6214:	
  3049                           
  3050                           ;SW.c: 137:  {;SW.c: 139:   GPIO_PIN_INIT ( SWs[SW_Counter].SW_PORT, SWs[SW_Counter].SW_
      +                          PIN , GPIO_PIN_IN );
  3051  0427  3005               	movlw	5
  3052  0428  00A0               	movwf	___bmul@multiplicand^(0+128)
  3053  0429  0834               	movf	SWs_INIT@SW_Counter^(0+128),w
  3054  042A  245D  120A  118A   	fcall	___bmul
  3055  042D  3EB3               	addlw	(low ((_SWs| (0+256)+1)))& (0+255)
  3056  042E  0084               	movwf	4
  3057  042F  1783               	bsf	3,7	;select IRP bank3
  3058  0430  0800               	movf	0,w
  3059  0431  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3060  0432  3005               	movlw	5
  3061  0433  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3062  0434  0AA4               	incf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128),f
  3063  0435  00A0               	movwf	___bmul@multiplicand^(0+128)
  3064  0436  0834               	movf	SWs_INIT@SW_Counter^(0+128),w
  3065  0437  245D  120A  118A   	fcall	___bmul
  3066  043A  3EB2               	addlw	(low (_SWs| (0+256)))& (0+255)
  3067  043B  0084               	movwf	4
  3068  043C  1783               	bsf	3,7	;select IRP bank3
  3069  043D  0800               	movf	0,w
  3070  043E  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3071                           
  3072                           ;SW.c: 141:     SWs[SW_Counter].SW_STATE = SW_RELEASED ;
  3073  0441  3005               	movlw	5
  3074  0442  00A0               	movwf	___bmul@multiplicand^(0+128)
  3075  0443  0834               	movf	SWs_INIT@SW_Counter^(0+128),w
  3076  0444  245D  120A  118A   	fcall	___bmul
  3077  0447  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  3078  0448  0084               	movwf	4
  3079  0449  3002               	movlw	2
  3080  044A  1783               	bsf	3,7	;select IRP bank3
  3081  044B  0080               	movwf	0
  3082                           
  3083                           ;SW.c: 143:   for (Samples_Counter =0 ; Samples_Counter < 2 ; Samples_Counter++)
  3084  044C  01B3               	clrf	SWs_INIT@Samples_Counter^(0+128)
  3085  044D                     l6222:	
  3086                           
  3087                           ;SW.c: 144:   {;SW.c: 146:    SWs->SW_SAMPLES[Samples_Counter] = (1) ;
  3088  044D  0833               	movf	SWs_INIT@Samples_Counter^(0+128),w
  3089  044E  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  3090  044F  0084               	movwf	4
  3091  0450  3002               	movlw	2
  3092  0451  0180               	clrf	0
  3093  0452  0A80               	incf	0,f
  3094                           
  3095                           ;SW.c: 147:   }
  3096  0453  0AB3               	incf	SWs_INIT@Samples_Counter^(0+128),f
  3097  0454  0233               	subwf	SWs_INIT@Samples_Counter^(0+128),w
  3098  0455  1C03               	skipc
  3099  0456  2C4D               	goto	l6222
  3100  0457  3004               	movlw	4
  3101                           
  3102                           ;SW.c: 148:  }
  3103  0458  0AB4               	incf	SWs_INIT@SW_Counter^(0+128),f
  3104  0459  0234               	subwf	SWs_INIT@SW_Counter^(0+128),w
  3105  045A  1803               	btfsc	3,0
  3106  045B  0008               	return
  3107  045C  2C27               	goto	l6214
  3108  045D                     __end_of_SWs_INIT:	
  3109  045D                     __ptext6:	
  3110 ;; *************** function ___bmul *****************
  3111 ;; Defined at:
  3112 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  multiplier      1    wreg     unsigned char 
  3115 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;  multiplier      1    2[BANK1 ] unsigned char 
  3118 ;;  product         1    1[BANK1 ] unsigned char 
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      unsigned char 
  3121 ;; Registers used:
  3122 ;;		wreg, status,2, status,0
  3123 ;; Tracked objects:
  3124 ;;		On entry : 300/100
  3125 ;;		On exit  : 300/100
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3128 ;;      Params:         0       0       1       0       0
  3129 ;;      Locals:         0       0       2       0       0
  3130 ;;      Temps:          0       0       0       0       0
  3131 ;;      Totals:         0       0       3       0       0
  3132 ;;Total ram usage:        3 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:   10
  3135 ;; This function calls:
  3136 ;;		Nothing
  3137 ;; This function is called by:
  3138 ;;		_SWs_UPDATE
  3139 ;;		_SW_GET_STATE
  3140 ;;		_SWs_INIT
  3141 ;;		_LED_SET_STATE
  3142 ;;		_INCREMENT_THIS
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           
  3147                           ;psect for function ___bmul
  3148  045D                     ___bmul:	
  3149                           
  3150                           ;incstack = 0
  3151 ;; hardware stack exceeded
  3152                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3153                           ;___bmul@multiplier stored from wreg
  3154  045D  00A2               	movwf	___bmul@multiplier^(0+128)
  3155  045E  01A1               	clrf	___bmul@product^(0+128)
  3156  045F  0820               	movf	___bmul@multiplicand^(0+128),w
  3157  0460  1822               	btfsc	___bmul@multiplier^(0+128),0
  3158  0461  07A1               	addwf	___bmul@product^(0+128),f
  3159  0462  1003               	clrc
  3160  0463  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3161  0464  0820               	movf	___bmul@multiplicand^(0+128),w
  3162  0465  18A2               	btfsc	___bmul@multiplier^(0+128),1
  3163  0466  07A1               	addwf	___bmul@product^(0+128),f
  3164  0467  1003               	clrc
  3165  0468  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3166  0469  0820               	movf	___bmul@multiplicand^(0+128),w
  3167  046A  1922               	btfsc	___bmul@multiplier^(0+128),2
  3168  046B  07A1               	addwf	___bmul@product^(0+128),f
  3169  046C  1003               	clrc
  3170  046D  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3171  046E  0820               	movf	___bmul@multiplicand^(0+128),w
  3172  046F  19A2               	btfsc	___bmul@multiplier^(0+128),3
  3173  0470  07A1               	addwf	___bmul@product^(0+128),f
  3174  0471  1003               	clrc
  3175  0472  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3176  0473  0820               	movf	___bmul@multiplicand^(0+128),w
  3177  0474  1A22               	btfsc	___bmul@multiplier^(0+128),4
  3178  0475  07A1               	addwf	___bmul@product^(0+128),f
  3179  0476  1003               	clrc
  3180  0477  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3181  0478  0820               	movf	___bmul@multiplicand^(0+128),w
  3182  0479  1AA2               	btfsc	___bmul@multiplier^(0+128),5
  3183  047A  07A1               	addwf	___bmul@product^(0+128),f
  3184  047B  1003               	clrc
  3185  047C  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3186  047D  0820               	movf	___bmul@multiplicand^(0+128),w
  3187  047E  1B22               	btfsc	___bmul@multiplier^(0+128),6
  3188  047F  07A1               	addwf	___bmul@product^(0+128),f
  3189  0480  1003               	clrc
  3190  0481  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  3191  0482  0820               	movf	___bmul@multiplicand^(0+128),w
  3192  0483  1BA2               	btfsc	___bmul@multiplier^(0+128),7
  3193  0484  07A1               	addwf	___bmul@product^(0+128),f
  3194  0485  0821               	movf	___bmul@product^(0+128),w
  3195  0486  0008               	return
  3196  0487                     __end_of___bmul:	
  3197  0487                     __ptext11:	
  3198 ;; *************** function _LEDs_INIT *****************
  3199 ;; Defined at:
  3200 ;;		line 29 in file "LED.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;		None
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;  counter         1   18[BANK1 ] unsigned char 
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  1    wreg      void 
  3207 ;; Registers used:
  3208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3209 ;; Tracked objects:
  3210 ;;		On entry : B00/900
  3211 ;;		On exit  : B00/900
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3214 ;;      Params:         0       0       0       0       0
  3215 ;;      Locals:         0       0       1       0       0
  3216 ;;      Temps:          0       0       0       0       0
  3217 ;;      Totals:         0       0       1       0       0
  3218 ;;Total ram usage:        1 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:   11
  3221 ;; This function calls:
  3222 ;;		_GPIO_PIN_INIT
  3223 ;;		_GPIO_PIN_SET_STATE
  3224 ;; This function is called by:
  3225 ;;		_main
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           
  3230                           ;psect for function _LEDs_INIT
  3231  0487                     _LEDs_INIT:	
  3232                           
  3233                           ;LED.c: 31:  tbyte counter ;;LED.c: 32:  for (counter =0 ; counter < 1 ; counter++)
  3234                           
  3235                           ;incstack = 0
  3236 ;; hardware stack exceeded
  3237                           ; Regs used in _LEDs_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3238  0487  01B2               	clrf	LEDs_INIT@counter^(0+128)
  3239  0488                     l6238:	
  3240                           
  3241                           ;LED.c: 33:  {;LED.c: 35:   GPIO_PIN_INIT ( LEDs[counter].LED_PORT, LEDs[counter].LED_PI
      +                          N , GPIO_PIN_OUT );
  3242  0488  0832               	movf	LEDs_INIT@counter^(0+128),w
  3243  0489  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3244  048A  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3245  048B  3ED0               	addlw	(low ((_LEDs| (0+256)+1)))& (0+255)
  3246  048C  0084               	movwf	4
  3247  048D  0800               	movf	0,w
  3248  048E  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3249  048F  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3250  0490  0832               	movf	LEDs_INIT@counter^(0+128),w
  3251  0491  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3252  0492  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3253  0493  3ECF               	addlw	(low (_LEDs| (0+256)))& (0+255)
  3254  0494  0084               	movwf	4
  3255  0495  0800               	movf	0,w
  3256  0496  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3257                           
  3258                           ;LED.c: 36:   GPIO_PIN_SET_STATE ( LEDs[counter].LED_PORT , LEDs[counter].LED_PIN , LED_
      +                          OFF );
  3259  0499  0832               	movf	LEDs_INIT@counter^(0+128),w
  3260  049A  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3261  049B  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3262  049C  3ED0               	addlw	(low ((_LEDs| (0+256)+1)))& (0+255)
  3263  049D  0084               	movwf	4
  3264  049E  1783               	bsf	3,7	;select IRP bank3
  3265  049F  0800               	movf	0,w
  3266  04A0  00A0               	movwf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3267  04A1  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3268  04A2  0832               	movf	LEDs_INIT@counter^(0+128),w
  3269  04A3  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3270  04A4  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3271  04A5  3ECF               	addlw	(low (_LEDs| (0+256)))& (0+255)
  3272  04A6  0084               	movwf	4
  3273  04A7  0800               	movf	0,w
  3274  04A8  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3275                           
  3276                           ;LED.c: 37:         LEDs[counter].LED_STATE = LED_OFF ;
  3277  04AB  0832               	movf	LEDs_INIT@counter^(0+128),w
  3278  04AC  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3279  04AD  0732               	addwf	LEDs_INIT@counter^(0+128),w
  3280  04AE  3ED1               	addlw	(low ((_LEDs| (0+256)+2)))& (0+255)
  3281  04AF  0084               	movwf	4
  3282  04B0  1783               	bsf	3,7	;select IRP bank3
  3283  04B1  0180               	clrf	0
  3284                           
  3285                           ;LED.c: 39:  }
  3286  04B2  0AB2               	incf	LEDs_INIT@counter^(0+128),f
  3287  04B3  0832               	movf	LEDs_INIT@counter^(0+128),w
  3288  04B4  1D03               	btfss	3,2
  3289  04B5  0008               	return
  3290  04B6  2C88               	goto	l6238
  3291  04B7                     __end_of_LEDs_INIT:	
  3292  04B7                     __ptext15:	
  3293 ;; *************** function _KEYPAD_INIT *****************
  3294 ;; Defined at:
  3295 ;;		line 12 in file "Keypad.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;		None
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;  counter         1   18[BANK1 ] unsigned char 
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      void 
  3302 ;; Registers used:
  3303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : B00/900
  3306 ;;		On exit  : B00/B00
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3309 ;;      Params:         0       0       0       0       0
  3310 ;;      Locals:         0       0       1       0       0
  3311 ;;      Temps:          0       0       0       0       0
  3312 ;;      Totals:         0       0       1       0       0
  3313 ;;Total ram usage:        1 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:   11
  3316 ;; This function calls:
  3317 ;;		_GPIO_PIN_INIT
  3318 ;;		_GPIO_PIN_SET_STATE
  3319 ;; This function is called by:
  3320 ;;		_main
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           
  3325                           ;psect for function _KEYPAD_INIT
  3326  04B7                     _KEYPAD_INIT:	
  3327                           
  3328                           ;Keypad.c: 14:  tbyte counter = 0 ;
  3329                           
  3330                           ;incstack = 0
  3331 ;; hardware stack exceeded
  3332                           ; Regs used in _KEYPAD_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3333  04B7  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3334                           
  3335                           ;Keypad.c: 15:  for (counter = 0 ; counter <4 ; counter++ )
  3336  04B8  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3337  04B9                     l6258:	
  3338                           
  3339                           ;Keypad.c: 16:  {;Keypad.c: 17:   GPIO_PIN_INIT(KEYPAD_info.KEYPAD_ROW_RORT , KEYPAD_inf
      +                          o.KEYPAD_ROW_PIN[counter] , GPIO_PIN_OUT);
  3340  04B9  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3341  04BA  3EC8               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
  3342  04BB  0084               	movwf	4
  3343  04BC  1783               	bsf	3,7	;select IRP bank3
  3344  04BD  0800               	movf	0,w
  3345  04BE  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3346  04BF  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3347  04C0  1703               	bsf	3,6	;RP1=1, select bank3
  3348  04C1  0846               	movf	_KEYPAD_info^(0+384),w
  3349  04C2  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3350                           
  3351                           ;Keypad.c: 18:   GPIO_PIN_SET_STATE(KEYPAD_info.KEYPAD_ROW_RORT , KEYPAD_info.KEYPAD_ROW
      +                          _PIN[counter] , (1));
  3352  04C5  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3353  04C6  3EC8               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
  3354  04C7  0084               	movwf	4
  3355  04C8  1783               	bsf	3,7	;select IRP bank3
  3356  04C9  0800               	movf	0,w
  3357  04CA  00A0               	movwf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3358  04CB  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3359  04CC  0AA1               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),f
  3360  04CD  1703               	bsf	3,6	;RP1=1, select bank3
  3361  04CE  0846               	movf	_KEYPAD_info^(0+384),w
  3362  04CF  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3363  04D2  3004               	movlw	4
  3364                           
  3365                           ;Keypad.c: 19:  }
  3366  04D3  0AB2               	incf	KEYPAD_INIT@counter^(0+128),f
  3367  04D4  0232               	subwf	KEYPAD_INIT@counter^(0+128),w
  3368  04D5  1C03               	skipc
  3369  04D6  2CB9               	goto	l6258
  3370                           
  3371                           ;Keypad.c: 20:  for (counter = 0 ; counter <3 ; counter++ )
  3372  04D7  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3373  04D8                     l6270:	
  3374                           
  3375                           ;Keypad.c: 21:  {;Keypad.c: 22:   GPIO_PIN_INIT(KEYPAD_info.KEYPAD_COL_PORT , KEYPAD_inf
      +                          o.KEYPAD_COL_PIN[counter] , GPIO_PIN_IN);
  3376  04D8  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3377  04D9  3ECC               	addlw	(low ((_KEYPAD_info| (0+256)+6)))& (0+255)
  3378  04DA  0084               	movwf	4
  3379  04DB  1783               	bsf	3,7	;select IRP bank3
  3380  04DC  0800               	movf	0,w
  3381  04DD  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3382  04DE  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3383  04DF  0AA4               	incf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128),f
  3384  04E0  1703               	bsf	3,6	;RP1=1, select bank3
  3385  04E1  0847               	movf	(_KEYPAD_info^(0+384)+1),w
  3386  04E2  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3387  04E5  3003               	movlw	3
  3388                           
  3389                           ;Keypad.c: 23:  }
  3390  04E6  0AB2               	incf	KEYPAD_INIT@counter^(0+128),f
  3391  04E7  0232               	subwf	KEYPAD_INIT@counter^(0+128),w
  3392  04E8  1C03               	skipc
  3393  04E9  2CD8               	goto	l6270
  3394                           
  3395                           ;Keypad.c: 24:  for (counter = 0 ; counter <3 ; counter++ )
  3396  04EA  01B2               	clrf	KEYPAD_INIT@counter^(0+128)
  3397  04EB                     l6282:	
  3398                           
  3399                           ;Keypad.c: 25:  {;Keypad.c: 26:   keypad_sapmles[counter] = NO_KEY;
  3400  04EB  0832               	movf	KEYPAD_INIT@counter^(0+128),w
  3401  04EC  3E9B               	addlw	(low (_keypad_sapmles| (0+256)))& (0+255)
  3402  04ED  0084               	movwf	4
  3403  04EE  300C               	movlw	12
  3404  04EF  1783               	bsf	3,7	;select IRP bank3
  3405  04F0  0080               	movwf	0
  3406  04F1  3003               	movlw	3
  3407                           
  3408                           ;Keypad.c: 27:  }
  3409  04F2  0AB2               	incf	KEYPAD_INIT@counter^(0+128),f
  3410  04F3  0232               	subwf	KEYPAD_INIT@counter^(0+128),w
  3411  04F4  1C03               	skipc
  3412  04F5  2CEB               	goto	l6282
  3413                           
  3414                           ;Keypad.c: 28:  LAST_PRESSED_KEY.KEYPAD_NO = NO_KEY;
  3415  04F6  300C               	movlw	12
  3416  04F7  1703               	bsf	3,6	;RP1=1, select bank3
  3417  04F8  00A2               	movwf	_LAST_PRESSED_KEY^(0+384)
  3418  04F9  0008               	return
  3419  04FA                     __end_of_KEYPAD_INIT:	
  3420  04FA                     __ptext12:	
  3421 ;; *************** function _LCD_INIT *****************
  3422 ;; Defined at:
  3423 ;;		line 27 in file "LCD.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;		None
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;		None
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  1    wreg      void 
  3430 ;; Registers used:
  3431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3432 ;; Tracked objects:
  3433 ;;		On entry : 300/300
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3437 ;;      Params:         0       0       0       0       0
  3438 ;;      Locals:         0       0       0       0       0
  3439 ;;      Temps:          0       0       1       0       0
  3440 ;;      Totals:         0       0       1       0       0
  3441 ;;Total ram usage:        1 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:   12
  3444 ;; This function calls:
  3445 ;;		_GPIO_PIN_INIT
  3446 ;;		_GPIO_PIN_SET_STATE
  3447 ;;		_LCD_SND_COMMAND
  3448 ;; This function is called by:
  3449 ;;		_main
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           
  3454                           ;psect for function _LCD_INIT
  3455  04FA                     _LCD_INIT:	
  3456                           
  3457                           ;LCD.c: 30:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_4 , GPIO_PORT_OUT);
  3458                           
  3459                           ;incstack = 0
  3460 ;; hardware stack exceeded
  3461                           ; Regs used in _LCD_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3462  04FA  3004               	movlw	4
  3463  04FB  1303               	bcf	3,6	;RP1=0, select bank1
  3464  04FC  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3465  04FD  3008               	movlw	8
  3466  04FE  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3467  04FF  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3468                           
  3469                           ;LCD.c: 31:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_5 , GPIO_PORT_OUT);
  3470  0502  3005               	movlw	5
  3471  0503  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3472  0504  3008               	movlw	8
  3473  0505  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3474  0506  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3475                           
  3476                           ;LCD.c: 32:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_6 , GPIO_PORT_OUT);
  3477  0509  3006               	movlw	6
  3478  050A  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3479  050B  3008               	movlw	8
  3480  050C  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3481  050D  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3482                           
  3483                           ;LCD.c: 33:         GPIO_PIN_INIT((0x0008) , GPIO_PIN_7 , GPIO_PORT_OUT);
  3484  0510  3007               	movlw	7
  3485  0511  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3486  0512  3008               	movlw	8
  3487  0513  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3488  0514  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3489                           
  3490                           ;LCD.c: 39:         GPIO_PIN_INIT((0x0009) , 2 , GPIO_PIN_OUT );
  3491  0517  3002               	movlw	2
  3492  0518  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3493  0519  3009               	movlw	9
  3494  051A  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3495  051B  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3496  051E  3009               	movlw	9
  3497                           
  3498                           ;LCD.c: 40:         GPIO_PIN_INIT((0x0009) , 1 , GPIO_PIN_OUT );
  3499  051F  01A3               	clrf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3500  0520  0AA3               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),f
  3501  0521  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3502  0522  2549  120A  118A   	fcall	_GPIO_PIN_INIT
  3503  0525  3009               	movlw	9
  3504                           
  3505                           ;LCD.c: 41:         GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
  3506  0526  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3507  0527  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3508  0528  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3509  0529  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3510                           
  3511                           ;LCD.c: 43:         _delay((unsigned long)((2)*(((8 * 1000) * 1000)/4000.0)));
  3512  052C  2D2D               	nop2	;2 cycle nop
  3513                           
  3514                           ;LCD.c: 45:         LCD_SND_COMMAND(0x33);
  3515  052D  3033               	movlw	51
  3516  052E  2582  120A  118A   	fcall	_LCD_SND_COMMAND
  3517                           
  3518                           ;LCD.c: 46:         LCD_SND_COMMAND(0x32);
  3519  0531  3032               	movlw	50
  3520  0532  2582  120A  118A   	fcall	_LCD_SND_COMMAND
  3521                           
  3522                           ;LCD.c: 49:   LCD_SND_COMMAND(0x28);
  3523  0535  3028               	movlw	40
  3524  0536  2582  120A  118A   	fcall	_LCD_SND_COMMAND
  3525                           
  3526                           ;LCD.c: 54:     LCD_SND_COMMAND(0x0c);
  3527  0539  300C               	movlw	12
  3528  053A  2582  120A  118A   	fcall	_LCD_SND_COMMAND
  3529                           
  3530                           ;LCD.c: 55:     LCD_SND_COMMAND(0x01);
  3531  053D  3001               	movlw	1
  3532  053E  2582  120A  118A   	fcall	_LCD_SND_COMMAND
  3533                           
  3534                           ;LCD.c: 56:     _delay((unsigned long)((10)*(((8 * 1000) * 1000)/4000.0)));
  3535  0541  3002               	movlw	2
  3536  0542  1683               	bsf	3,5	;RP0=1, select bank1
  3537  0543  1303               	bcf	3,6	;RP1=0, select bank1
  3538  0544  00B2               	movwf	??_LCD_INIT^(0+128)
  3539  0545                     u6857:	
  3540  0545  0BB2               	decfsz	??_LCD_INIT^(0+128),f
  3541  0546  2D45               	goto	u6857
  3542  0547  2D48               	nop2
  3543  0548  0008               	return
  3544  0549                     __end_of_LCD_INIT:	
  3545  0549                     __ptext31:	
  3546 ;; *************** function _GPIO_PIN_INIT *****************
  3547 ;; Defined at:
  3548 ;;		line 18 in file "GPIO.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;  GPIO_PORTx      1    wreg     unsigned char 
  3551 ;;  GPIO_PIN_NO     1    3[BANK1 ] enum E867
  3552 ;;  GPIO_DIRECTI    1    4[BANK1 ] enum E877
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;  GPIO_PORTx      1   17[BANK1 ] unsigned char 
  3555 ;;  ret             1    0        enum E861
  3556 ;; Return value:  Size  Location     Type
  3557 ;;                  1    wreg      enum E861
  3558 ;; Registers used:
  3559 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3560 ;; Tracked objects:
  3561 ;;		On entry : 100/900
  3562 ;;		On exit  : 300/100
  3563 ;;		Unchanged: 0/0
  3564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3565 ;;      Params:         0       0       2       0       0
  3566 ;;      Locals:         0       0       2       0       0
  3567 ;;      Temps:          0       0      11       0       0
  3568 ;;      Totals:         0       0      15       0       0
  3569 ;;Total ram usage:       15 bytes
  3570 ;; Hardware stack levels used:    1
  3571 ;; Hardware stack levels required when called:   10
  3572 ;; This function calls:
  3573 ;;		Nothing
  3574 ;; This function is called by:
  3575 ;;		_CCP1_INIT
  3576 ;;		_CCP2_INIT
  3577 ;;		_SWs_INIT
  3578 ;;		_LEDs_INIT
  3579 ;;		_LCD_INIT
  3580 ;;		_KEYPAD_INIT
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           
  3585                           ;psect for function _GPIO_PIN_INIT
  3586  0549                     _GPIO_PIN_INIT:	
  3587                           
  3588                           ;incstack = 0
  3589 ;; hardware stack exceeded
  3590                           ; Regs used in _GPIO_PIN_INIT: [wreg-fsr0h+status,2+status,0]
  3591                           ;GPIO_PIN_INIT@GPIO_PORTx stored from wreg
  3592  0549  1303               	bcf	3,6	;RP1=0, select bank1
  3593  054A  00B1               	movwf	GPIO_PIN_INIT@GPIO_PORTx^(0+128)
  3594                           
  3595                           ;GPIO.c: 21:   ( ((*((volatile unsigned char* )( GPIO_PORTx + (0x80) )))) = ((((*((volat
      +                          ile unsigned char* )( GPIO_PORTx + (0x80) )))) & (~(1<< GPIO_PIN_NO)) ) | (GPIO_DIRECTIO
      +                          N << GPIO_PIN_NO)) );
  3596  054B  0824               	movf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128),w
  3597  054C  00A5               	movwf	??_GPIO_PIN_INIT^(0+128)
  3598  054D  0A23               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),w
  3599  054E  2D51               	goto	u4124
  3600  054F                     u4125:	
  3601  054F  1003               	clrc
  3602  0550  0DA5               	rlf	??_GPIO_PIN_INIT^(0+128),f
  3603  0551                     u4124:	
  3604  0551  3EFF               	addlw	-1
  3605  0552  1D03               	skipz
  3606  0553  2D4F               	goto	u4125
  3607  0554  0831               	movf	GPIO_PIN_INIT@GPIO_PORTx^(0+128),w
  3608  0555  00A6               	movwf	(??_GPIO_PIN_INIT+1)^(0+128)
  3609  0556  01A7               	clrf	((??_GPIO_PIN_INIT+1)^(0+128)+1)
  3610  0557  3E80               	addlw	128
  3611  0558  00A8               	movwf	(??_GPIO_PIN_INIT+3)^(0+128)
  3612  0559  0827               	movf	(??_GPIO_PIN_INIT+2)^(0+128),w
  3613  055A  1803               	skipnc
  3614  055B  3E01               	addlw	1
  3615  055C  00A9               	movwf	(??_GPIO_PIN_INIT+4)^(0+128)
  3616  055D  0828               	movf	(??_GPIO_PIN_INIT+3)^(0+128),w
  3617  055E  0084               	movwf	4
  3618  055F  1783               	bsf	3,7
  3619  0560  1C29               	btfss	(??_GPIO_PIN_INIT+4)^(0+128),0
  3620  0561  1383               	bcf	3,7
  3621  0562  3001               	movlw	1
  3622  0563  00AA               	movwf	(??_GPIO_PIN_INIT+5)^(0+128)
  3623  0564  0A23               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),w
  3624  0565  2D68               	goto	u4134
  3625  0566                     u4135:	
  3626  0566  1003               	clrc
  3627  0567  0DAA               	rlf	(??_GPIO_PIN_INIT+5)^(0+128),f
  3628  0568                     u4134:	
  3629  0568  3EFF               	addlw	-1
  3630  0569  1D03               	skipz
  3631  056A  2D66               	goto	u4135
  3632  056B  082A               	movf	(??_GPIO_PIN_INIT+5)^(0+128),w
  3633  056C  3AFF               	xorlw	255
  3634  056D  0500               	andwf	0,w
  3635  056E  0425               	iorwf	??_GPIO_PIN_INIT^(0+128),w
  3636  056F  00AB               	movwf	(??_GPIO_PIN_INIT+6)^(0+128)
  3637  0570  0831               	movf	GPIO_PIN_INIT@GPIO_PORTx^(0+128),w
  3638  0571  00AC               	movwf	(??_GPIO_PIN_INIT+7)^(0+128)
  3639  0572  01AD               	clrf	((??_GPIO_PIN_INIT+7)^(0+128)+1)
  3640  0573  3E80               	addlw	128
  3641  0574  00AE               	movwf	(??_GPIO_PIN_INIT+9)^(0+128)
  3642  0575  082D               	movf	(??_GPIO_PIN_INIT+8)^(0+128),w
  3643  0576  1803               	skipnc
  3644  0577  3E01               	addlw	1
  3645  0578  3E00               	addlw	0
  3646  0579  00AF               	movwf	(??_GPIO_PIN_INIT+10)^(0+128)
  3647  057A  082E               	movf	(??_GPIO_PIN_INIT+9)^(0+128),w
  3648  057B  0084               	movwf	4
  3649  057C  1783               	bsf	3,7
  3650  057D  1C2F               	btfss	(??_GPIO_PIN_INIT+10)^(0+128),0
  3651  057E  1383               	bcf	3,7
  3652  057F  082B               	movf	(??_GPIO_PIN_INIT+6)^(0+128),w
  3653  0580  0080               	movwf	0
  3654  0581  0008               	return
  3655  0582                     __end_of_GPIO_PIN_INIT:	
  3656  0582                     __ptext13:	
  3657 ;; *************** function _LCD_SND_COMMAND *****************
  3658 ;; Defined at:
  3659 ;;		line 171 in file "LCD.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;  command         1    wreg     unsigned char 
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;  command         1   11[BANK1 ] unsigned char 
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      void 
  3666 ;; Registers used:
  3667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/100
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3673 ;;      Params:         0       0       0       0       0
  3674 ;;      Locals:         0       0       1       0       0
  3675 ;;      Temps:          0       0       0       0       0
  3676 ;;      Totals:         0       0       1       0       0
  3677 ;;Total ram usage:        1 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:   11
  3680 ;; This function calls:
  3681 ;;		_GPIO_PIN_SET_STATE
  3682 ;;		_GPIO_PORT_SET_STATE
  3683 ;; This function is called by:
  3684 ;;		_LCD_INIT
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           
  3689                           ;psect for function _LCD_SND_COMMAND
  3690  0582                     _LCD_SND_COMMAND:	
  3691                           
  3692                           ;incstack = 0
  3693 ;; hardware stack exceeded
  3694                           ; Regs used in _LCD_SND_COMMAND: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3695                           ;LCD_SND_COMMAND@command stored from wreg
  3696  0582  1683               	bsf	3,5	;RP0=1, select bank1
  3697  0583  1303               	bcf	3,6	;RP1=0, select bank1
  3698  0584  00AB               	movwf	LCD_SND_COMMAND@command^(0+128)
  3699                           
  3700                           ;LCD.c: 171: static void LCD_SND_COMMAND ( tbyte command);LCD.c: 172: {;LCD.c: 174:  GPI
      +                          O_PORT_SET_STATE((0x0008) , (command &0xf0) );
  3701  0585  00A0               	movwf	GPIO_PORT_SET_STATE@GPIO_PORT_STATE^(0+128)
  3702  0586  30F0               	movlw	240
  3703  0587  05A0               	andwf	GPIO_PORT_SET_STATE@GPIO_PORT_STATE^(0+128),f
  3704  0588  3008               	movlw	8
  3705  0589  25E6  120A  118A   	fcall	_GPIO_PORT_SET_STATE
  3706                           
  3707                           ;LCD.c: 176:  GPIO_PIN_SET_STATE((0x0009) , 2 , GPIO_PIN_OFF);
  3708  058C  3002               	movlw	2
  3709  058D  00A0               	movwf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3710  058E  3009               	movlw	9
  3711  058F  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3712  0590  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3713  0593  3009               	movlw	9
  3714                           
  3715                           ;LCD.c: 178:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
  3716  0594  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3717  0595  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3718  0596  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3719  0597  0AA1               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),f
  3720  0598  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3721                           
  3722                           ;LCD.c: 179:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
  3723                           ;LCD.c: 181:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
  3724  059B  1683               	bsf	3,5	;RP0=1, select bank1
  3725  059C  1303               	bcf	3,6	;RP1=0, select bank1
  3726  059D  3009               	movlw	9
  3727  059E  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3728  059F  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3729  05A0  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3730  05A1  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3731                           
  3732                           ;LCD.c: 182:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
  3733                           ;LCD.c: 184:  GPIO_PORT_SET_STATE((0x0008) , (command <<4) );
  3734  05A4  1683               	bsf	3,5	;RP0=1, select bank1
  3735  05A5  1303               	bcf	3,6	;RP1=0, select bank1
  3736  05A6  0E2B               	swapf	LCD_SND_COMMAND@command^(0+128),w
  3737  05A7  39F0               	andlw	240
  3738  05A8  00A0               	movwf	GPIO_PORT_SET_STATE@GPIO_PORT_STATE^(0+128)
  3739  05A9  3008               	movlw	8
  3740  05AA  25E6  120A  118A   	fcall	_GPIO_PORT_SET_STATE
  3741  05AD  3009               	movlw	9
  3742                           
  3743                           ;LCD.c: 186:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_ON);
  3744  05AE  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3745  05AF  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3746  05B0  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3747  05B1  0AA1               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),f
  3748  05B2  25BC  120A  118A   	fcall	_GPIO_PIN_SET_STATE
  3749                           
  3750                           ;LCD.c: 187:  _delay((unsigned long)((1)*(((8 * 1000) * 1000)/4000000.0)));
  3751                           ;LCD.c: 189:  GPIO_PIN_SET_STATE((0x0009) , 1 , GPIO_PIN_OFF);
  3752  05B5  1683               	bsf	3,5	;RP0=1, select bank1
  3753  05B6  1303               	bcf	3,6	;RP1=0, select bank1
  3754  05B7  3009               	movlw	9
  3755  05B8  01A0               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128)
  3756  05B9  0AA0               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),f
  3757  05BA  01A1               	clrf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128)
  3758  05BB  2DBC               	ljmp	_GPIO_PIN_SET_STATE
  3759  05BC                     __end_of_LCD_SND_COMMAND:	
  3760                           ;LCD.c: 190:  _delay((unsigned long)((100)*(((8 * 1000) * 1000)/4000000.0)));
  3761                           
  3762  05BC                     __ptext16:	
  3763 ;; *************** function _GPIO_PIN_SET_STATE *****************
  3764 ;; Defined at:
  3765 ;;		line 31 in file "GPIO.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  GPIO_PORTx      1    wreg     unsigned char 
  3768 ;;  GPIO_PIN_NO     1    0[BANK1 ] enum E867
  3769 ;;  GPIO_PIN_STA    1    1[BANK1 ] enum E883
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;  GPIO_PORTx      1   10[BANK1 ] unsigned char 
  3772 ;;  ret             1    0        enum E861
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      enum E861
  3775 ;; Registers used:
  3776 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3777 ;; Tracked objects:
  3778 ;;		On entry : 100/900
  3779 ;;		On exit  : 300/100
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3782 ;;      Params:         0       0       2       0       0
  3783 ;;      Locals:         0       0       2       0       0
  3784 ;;      Temps:          0       0       7       0       0
  3785 ;;      Totals:         0       0      11       0       0
  3786 ;;Total ram usage:       11 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:   10
  3789 ;; This function calls:
  3790 ;;		Nothing
  3791 ;; This function is called by:
  3792 ;;		_LEDs_INIT
  3793 ;;		_LCD_INIT
  3794 ;;		_LCD_SND_COMMAND
  3795 ;;		_KEYPAD_INIT
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           
  3800                           ;psect for function _GPIO_PIN_SET_STATE
  3801  05BC                     _GPIO_PIN_SET_STATE:	
  3802                           
  3803                           ;incstack = 0
  3804 ;; hardware stack exceeded
  3805                           ; Regs used in _GPIO_PIN_SET_STATE: [wreg-fsr0h+status,2+status,0]
  3806                           ;GPIO_PIN_SET_STATE@GPIO_PORTx stored from wreg
  3807  05BC  1303               	bcf	3,6	;RP1=0, select bank1
  3808  05BD  00AA               	movwf	GPIO_PIN_SET_STATE@GPIO_PORTx^(0+128)
  3809                           
  3810                           ;GPIO.c: 34:   ( (*((volatile unsigned char* )( GPIO_PORTx + (0x00) ))) = (((*((volatile
      +                           unsigned char* )( GPIO_PORTx + (0x00) ))) & (~(1<< GPIO_PIN_NO)) ) | (GPIO_PIN_STATE <<
      +                           GPIO_PIN_NO)) );
  3811  05BE  0821               	movf	GPIO_PIN_SET_STATE@GPIO_PIN_STATE^(0+128),w
  3812  05BF  00A2               	movwf	??_GPIO_PIN_SET_STATE^(0+128)
  3813  05C0  0A20               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),w
  3814  05C1  2DC4               	goto	u4144
  3815  05C2                     u4145:	
  3816  05C2  1003               	clrc
  3817  05C3  0DA2               	rlf	??_GPIO_PIN_SET_STATE^(0+128),f
  3818  05C4                     u4144:	
  3819  05C4  3EFF               	addlw	-1
  3820  05C5  1D03               	skipz
  3821  05C6  2DC2               	goto	u4145
  3822  05C7  082A               	movf	GPIO_PIN_SET_STATE@GPIO_PORTx^(0+128),w
  3823  05C8  00A3               	movwf	(??_GPIO_PIN_SET_STATE+1)^(0+128)
  3824  05C9  01A4               	clrf	((??_GPIO_PIN_SET_STATE+1)^(0+128)+1)
  3825  05CA  0084               	movwf	4
  3826  05CB  1783               	bsf	3,7
  3827  05CC  1C24               	btfss	(??_GPIO_PIN_SET_STATE+2)^(0+128),0
  3828  05CD  1383               	bcf	3,7
  3829  05CE  3001               	movlw	1
  3830  05CF  00A5               	movwf	(??_GPIO_PIN_SET_STATE+3)^(0+128)
  3831  05D0  0A20               	incf	GPIO_PIN_SET_STATE@GPIO_PIN_NO^(0+128),w
  3832  05D1  2DD4               	goto	u4154
  3833  05D2                     u4155:	
  3834  05D2  1003               	clrc
  3835  05D3  0DA5               	rlf	(??_GPIO_PIN_SET_STATE+3)^(0+128),f
  3836  05D4                     u4154:	
  3837  05D4  3EFF               	addlw	-1
  3838  05D5  1D03               	skipz
  3839  05D6  2DD2               	goto	u4155
  3840  05D7  0825               	movf	(??_GPIO_PIN_SET_STATE+3)^(0+128),w
  3841  05D8  3AFF               	xorlw	255
  3842  05D9  0500               	andwf	0,w
  3843  05DA  0422               	iorwf	??_GPIO_PIN_SET_STATE^(0+128),w
  3844  05DB  00A6               	movwf	(??_GPIO_PIN_SET_STATE+4)^(0+128)
  3845  05DC  082A               	movf	GPIO_PIN_SET_STATE@GPIO_PORTx^(0+128),w
  3846  05DD  00A7               	movwf	(??_GPIO_PIN_SET_STATE+5)^(0+128)
  3847  05DE  01A8               	clrf	((??_GPIO_PIN_SET_STATE+5)^(0+128)+1)
  3848  05DF  0084               	movwf	4
  3849  05E0  1783               	bsf	3,7
  3850  05E1  1C28               	btfss	(??_GPIO_PIN_SET_STATE+6)^(0+128),0
  3851  05E2  1383               	bcf	3,7
  3852  05E3  0826               	movf	(??_GPIO_PIN_SET_STATE+4)^(0+128),w
  3853  05E4  0080               	movwf	0
  3854  05E5  0008               	return
  3855  05E6                     __end_of_GPIO_PIN_SET_STATE:	
  3856  05E6                     __ptext14:	
  3857 ;; *************** function _GPIO_PORT_SET_STATE *****************
  3858 ;; Defined at:
  3859 ;;		line 38 in file "GPIO.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  GPIO_PORTx      1    wreg     unsigned char 
  3862 ;;  GPIO_PORT_ST    1    0[BANK1 ] enum E883
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  GPIO_PORTx      1    4[BANK1 ] unsigned char 
  3865 ;;  ret             1    0        enum E861
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  1    wreg      enum E861
  3868 ;; Registers used:
  3869 ;;		wreg, fsr0l, fsr0h, status,2
  3870 ;; Tracked objects:
  3871 ;;		On entry : 300/100
  3872 ;;		On exit  : 300/100
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3875 ;;      Params:         0       0       1       0       0
  3876 ;;      Locals:         0       0       2       0       0
  3877 ;;      Temps:          0       0       2       0       0
  3878 ;;      Totals:         0       0       5       0       0
  3879 ;;Total ram usage:        5 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; Hardware stack levels required when called:   10
  3882 ;; This function calls:
  3883 ;;		Nothing
  3884 ;; This function is called by:
  3885 ;;		_LCD_SND_COMMAND
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           
  3890                           ;psect for function _GPIO_PORT_SET_STATE
  3891  05E6                     _GPIO_PORT_SET_STATE:	
  3892                           
  3893                           ;incstack = 0
  3894 ;; hardware stack exceeded
  3895                           ; Regs used in _GPIO_PORT_SET_STATE: [wreg-fsr0h+status,2]
  3896                           ;GPIO_PORT_SET_STATE@GPIO_PORTx stored from wreg
  3897  05E6  00A4               	movwf	GPIO_PORT_SET_STATE@GPIO_PORTx^(0+128)
  3898                           
  3899                           ;GPIO.c: 41:   (*((volatile unsigned char* )( GPIO_PORTx + (0x00) ))) = GPIO_PORT_STATE 
      +                          ;
  3900  05E7  00A1               	movwf	??_GPIO_PORT_SET_STATE^(0+128)
  3901  05E8  01A2               	clrf	(??_GPIO_PORT_SET_STATE^(0+128)+1)
  3902  05E9  0084               	movwf	4
  3903  05EA  1783               	bsf	3,7
  3904  05EB  1C22               	btfss	(??_GPIO_PORT_SET_STATE+1)^(0+128),0
  3905  05EC  1383               	bcf	3,7
  3906  05ED  0820               	movf	GPIO_PORT_SET_STATE@GPIO_PORT_STATE^(0+128),w
  3907  05EE  0080               	movwf	0
  3908  05EF  0008               	return
  3909  05F0                     __end_of_GPIO_PORT_SET_STATE:	
  3910                           
  3911                           	psect	text10
  3912  1020                     __ptext10:	
  3913 ;; *************** function _CCP1_INIT *****************
  3914 ;; Defined at:
  3915 ;;		line 24 in file "CCP.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;		None
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;		None
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      void 
  3922 ;; Registers used:
  3923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : B00/300
  3926 ;;		On exit  : 300/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3929 ;;      Params:         0       0       0       0       0
  3930 ;;      Locals:         0       0       0       0       0
  3931 ;;      Temps:          0       0       0       0       0
  3932 ;;      Totals:         0       0       0       0       0
  3933 ;;Total ram usage:        0 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:   12
  3936 ;; This function calls:
  3937 ;;		_GPIO_PIN_INIT
  3938 ;;		_TIMER2_INIT
  3939 ;;		_TIMER2_START
  3940 ;; This function is called by:
  3941 ;;		_MOTOR_INIT
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _CCP1_INIT
  3947  1020                     _CCP1_INIT:	
  3948                           
  3949                           ;CCP.c: 39:  {;CCP.c: 40:   TIMER2_INIT();
  3950                           
  3951                           ;incstack = 0
  3952 ;; hardware stack exceeded
  3953                           ; Regs used in _CCP1_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3954  1020  27E4  160A  118A   	fcall	_TIMER2_INIT
  3955                           
  3956                           ;CCP.c: 41:         TIMER2_START();
  3957  1023  27F2               	fcall	_TIMER2_START
  3958                           
  3959                           ;CCP.c: 42:   GPIO_PIN_INIT( (0x0007), GPIO_PIN_2, GPIO_PIN_OUT );
  3960  1024  3002               	movlw	2
  3961  1025  1683               	bsf	3,5	;RP0=1, select bank1
  3962  1026  00A3               	movwf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  3963  1027  3007               	movlw	7
  3964  1028  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  3965  1029  120A  118A  2549   	fcall	_GPIO_PIN_INIT
  3966                           
  3967                           ;CCP.c: 43:  };CCP.c: 55:  (CCP1CONbits.CCP1M = 12 ) ;
  3968  102C  1283               	bcf	3,5	;RP0=0, select bank0
  3969  102D  0817               	movf	23,w	;volatile
  3970  102E  39F0               	andlw	-16
  3971  102F  380C               	iorlw	12
  3972  1030  0097               	movwf	23	;volatile
  3973  1031  0008               	return
  3974  1032                     __end_of_CCP1_INIT:	
  3975  1032                     __ptext7:	
  3976 ;; *************** function _MOTOR_INIT *****************
  3977 ;; Defined at:
  3978 ;;		line 26 in file "MOTOR.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;		None
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : B00/300
  3989 ;;		On exit  : 300/300
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3992 ;;      Params:         0       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0
  3995 ;;      Totals:         0       0       0       0       0
  3996 ;;Total ram usage:        0 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:   13
  3999 ;; This function calls:
  4000 ;;		_CCP1_INIT
  4001 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  4002 ;;		_CCP_PWM_PERIOD_LOAD
  4003 ;;		_MOTOR_SET_STATE
  4004 ;; This function is called by:
  4005 ;;		_main
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function _MOTOR_INIT
  4011  1032                     _MOTOR_INIT:	
  4012                           
  4013                           ;MOTOR.c: 29:     CCP1_INIT ( );
  4014                           
  4015                           ;incstack = 0
  4016 ;; hardware stack exceeded
  4017                           ; Regs used in _MOTOR_INIT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4018  1032  2020  160A  118A   	fcall	_CCP1_INIT
  4019                           
  4020                           ;MOTOR.c: 31:     CCP_PWM_PERIOD_LOAD( 10 );
  4021  1035  300A               	movlw	10
  4022  1036  1683               	bsf	3,5	;RP0=1, select bank3
  4023  1037  1703               	bsf	3,6	;RP1=1, select bank3
  4024  1038  00E0               	movwf	CCP_PWM_PERIOD_LOAD@PERIOD^(0+384)
  4025  1039  01E1               	clrf	(CCP_PWM_PERIOD_LOAD@PERIOD+1)^(0+384)
  4026  103A  205C  160A  118A   	fcall	_CCP_PWM_PERIOD_LOAD
  4027                           
  4028                           ;MOTOR.c: 33:     CCP1_PWM_DUTY_CYCLE_LOAD(0);
  4029  103D  1703               	bsf	3,6	;RP1=1, select bank3
  4030  103E  01E0               	clrf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384)
  4031  103F  01E1               	clrf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384)
  4032  1040  227B  160A  118A   	fcall	_CCP1_PWM_DUTY_CYCLE_LOAD
  4033                           
  4034                           ;MOTOR.c: 35:     MOTOR_SET_STATE(0);
  4035  1043  3000               	movlw	0
  4036  1044  27FB               	fcall	_MOTOR_SET_STATE
  4037                           
  4038                           ;MOTOR.c: 37:     current_angle = 0 ;
  4039  1045  01AF               	clrf	_current_angle^(0+384)
  4040  1046  0008               	return
  4041  1047                     __end_of_MOTOR_INIT:	
  4042  1047                     __ptext17:	
  4043 ;; *************** function _HEATER_INIT *****************
  4044 ;; Defined at:
  4045 ;;		line 26 in file "HEATER.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 300/300
  4056 ;;		On exit  : 300/300
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4059 ;;      Params:         0       0       0       0       0
  4060 ;;      Locals:         0       0       0       0       0
  4061 ;;      Temps:          0       0       0       0       0
  4062 ;;      Totals:         0       0       0       0       0
  4063 ;;Total ram usage:        0 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:   13
  4066 ;; This function calls:
  4067 ;;		_CCP2_INIT
  4068 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  4069 ;;		_CCP_PWM_PERIOD_LOAD
  4070 ;;		_HEATER_SET_STATE
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _HEATER_INIT
  4078  1047                     _HEATER_INIT:	
  4079                           
  4080                           ;HEATER.c: 29:     CCP2_INIT ( );
  4081                           
  4082                           ;incstack = 0
  4083 ;; hardware stack exceeded
  4084                           ; Regs used in _HEATER_INIT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4085  1047  27D2  160A  118A   	fcall	_CCP2_INIT
  4086                           
  4087                           ;HEATER.c: 31:     CCP_PWM_PERIOD_LOAD( 10 );
  4088  104A  300A               	movlw	10
  4089  104B  1683               	bsf	3,5	;RP0=1, select bank3
  4090  104C  1703               	bsf	3,6	;RP1=1, select bank3
  4091  104D  00E0               	movwf	CCP_PWM_PERIOD_LOAD@PERIOD^(0+384)
  4092  104E  01E1               	clrf	(CCP_PWM_PERIOD_LOAD@PERIOD+1)^(0+384)
  4093  104F  205C  160A  118A   	fcall	_CCP_PWM_PERIOD_LOAD
  4094                           
  4095                           ;HEATER.c: 33:     CCP2_PWM_DUTY_CYCLE_LOAD(0);
  4096  1052  1703               	bsf	3,6	;RP1=1, select bank3
  4097  1053  01E0               	clrf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384)
  4098  1054  01E1               	clrf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384)
  4099  1055  2306  160A  118A   	fcall	_CCP2_PWM_DUTY_CYCLE_LOAD
  4100                           
  4101                           ;HEATER.c: 35:     HEATER_SET_STATE(0);
  4102  1058  3000               	movlw	0
  4103  1059  27F6               	fcall	_HEATER_SET_STATE
  4104                           
  4105                           ;HEATER.c: 37:     current_angle = 0 ;
  4106  105A  01AD               	clrf	HEATER@current_angle^(0+384)
  4107  105B  0008               	return
  4108  105C                     __end_of_HEATER_INIT:	
  4109  105C                     __ptext19:	
  4110 ;; *************** function _CCP_PWM_PERIOD_LOAD *****************
  4111 ;; Defined at:
  4112 ;;		line 186 in file "CCP.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;  PERIOD          2   14[BANK3 ] unsigned int 
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;  LOAD_VALUE      2   17[BANK3 ] unsigned int 
  4117 ;;  ret             1    0        enum E861
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      enum E861
  4120 ;; Registers used:
  4121 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4122 ;; Tracked objects:
  4123 ;;		On entry : 300/300
  4124 ;;		On exit  : 300/100
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4127 ;;      Params:         0       0       0       2       0
  4128 ;;      Locals:         0       0       0       3       0
  4129 ;;      Temps:          0       0       0       0       0
  4130 ;;      Totals:         0       0       0       5       0
  4131 ;;Total ram usage:        5 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:   12
  4134 ;; This function calls:
  4135 ;;		___fladd
  4136 ;;		___flmul
  4137 ;;		___fltol
  4138 ;;		___xxtofl
  4139 ;; This function is called by:
  4140 ;;		_MOTOR_INIT
  4141 ;;		_HEATER_INIT
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           
  4146                           ;psect for function _CCP_PWM_PERIOD_LOAD
  4147  105C                     _CCP_PWM_PERIOD_LOAD:	
  4148                           
  4149                           ;CCP.c: 190:     tPWM_CYCLE LOAD_VALUE = ((PERIOD * ((double) (8 * 1000) / ( 4 * 256 ) )
      +                          )-1);
  4150                           
  4151                           ;incstack = 0
  4152 ;; hardware stack exceeded
  4153                           ; Regs used in _CCP_PWM_PERIOD_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4154  105C  0860               	movf	CCP_PWM_PERIOD_LOAD@PERIOD^(0+384),w
  4155  105D  1303               	bcf	3,6	;RP1=0, select bank1
  4156  105E  00A0               	movwf	___xxtofl@val^(0+128)
  4157  105F  1703               	bsf	3,6	;RP1=1, select bank3
  4158  1060  0861               	movf	(CCP_PWM_PERIOD_LOAD@PERIOD+1)^(0+384),w
  4159  1061  1303               	bcf	3,6	;RP1=0, select bank1
  4160  1062  00A1               	movwf	(___xxtofl@val^(0+128)+1)
  4161  1063  3000               	movlw	0
  4162  1064  01A2               	clrf	(___xxtofl@val^(0+128)+2)
  4163  1065  01A3               	clrf	(___xxtofl@val^(0+128)+3)
  4164  1066  25F0  160A  118A   	fcall	___xxtofl
  4165  1069  0823               	movf	(?___xxtofl+3)^(0+128),w
  4166  106A  00CE               	movwf	(___flmul@a+3)^(0+128)
  4167  106B  0822               	movf	(?___xxtofl+2)^(0+128),w
  4168  106C  00CD               	movwf	(___flmul@a+2)^(0+128)
  4169  106D  0821               	movf	(?___xxtofl+1)^(0+128),w
  4170  106E  00CC               	movwf	(___flmul@a+1)^(0+128)
  4171  106F  0820               	movf	?___xxtofl^(0+128),w
  4172  1070  00CB               	movwf	___flmul@a^(0+128)
  4173  1071  3040               	movlw	64
  4174  1072  00CA               	movwf	(___flmul@b+3)^(0+128)
  4175  1073  30FA               	movlw	250
  4176  1074  00C9               	movwf	(___flmul@b+2)^(0+128)
  4177  1075  01C8               	clrf	(___flmul@b+1)^(0+128)
  4178  1076  01C7               	clrf	___flmul@b^(0+128)
  4179  1077  2391  160A  118A   	fcall	___flmul
  4180  107A  084A               	movf	(?___flmul+3)^(0+128),w
  4181  107B  00E7               	movwf	(___fladd@a+3)^(0+128)
  4182  107C  0849               	movf	(?___flmul+2)^(0+128),w
  4183  107D  00E6               	movwf	(___fladd@a+2)^(0+128)
  4184  107E  0848               	movf	(?___flmul+1)^(0+128),w
  4185  107F  00E5               	movwf	(___fladd@a+1)^(0+128)
  4186  1080  0847               	movf	?___flmul^(0+128),w
  4187  1081  00E4               	movwf	___fladd@a^(0+128)
  4188  1082  30BF               	movlw	191
  4189  1083  00E3               	movwf	(___fladd@b+3)^(0+128)
  4190  1084  3080               	movlw	128
  4191  1085  00E2               	movwf	(___fladd@b+2)^(0+128)
  4192  1086  01E1               	clrf	(___fladd@b+1)^(0+128)
  4193  1087  01E0               	clrf	___fladd@b^(0+128)
  4194  1088  20A3  160A  118A   	fcall	___fladd
  4195  108B  1303               	bcf	3,6	;RP1=0, select bank1
  4196  108C  0863               	movf	(?___fladd+3)^(0+128),w
  4197  108D  1703               	bsf	3,6	;RP1=1, select bank3
  4198  108E  00D9               	movwf	(___fltol@f1+3)^(0+384)
  4199  108F  1303               	bcf	3,6	;RP1=0, select bank1
  4200  1090  0862               	movf	(?___fladd+2)^(0+128),w
  4201  1091  1703               	bsf	3,6	;RP1=1, select bank3
  4202  1092  00D8               	movwf	(___fltol@f1+2)^(0+384)
  4203  1093  1303               	bcf	3,6	;RP1=0, select bank1
  4204  1094  0861               	movf	(?___fladd+1)^(0+128),w
  4205  1095  1703               	bsf	3,6	;RP1=1, select bank3
  4206  1096  00D7               	movwf	(___fltol@f1+1)^(0+384)
  4207  1097  1303               	bcf	3,6	;RP1=0, select bank1
  4208  1098  0860               	movf	?___fladd^(0+128),w
  4209  1099  1703               	bsf	3,6	;RP1=1, select bank3
  4210  109A  00D6               	movwf	___fltol@f1^(0+384)
  4211  109B  2783               	fcall	___fltol
  4212  109C  0857               	movf	(?___fltol+1)^(0+384),w
  4213  109D  00E4               	movwf	(CCP_PWM_PERIOD_LOAD@LOAD_VALUE+1)^(0+384)
  4214  109E  0856               	movf	?___fltol^(0+384),w
  4215  109F  00E3               	movwf	CCP_PWM_PERIOD_LOAD@LOAD_VALUE^(0+384)
  4216                           
  4217                           ;CCP.c: 192:     (PR2 = LOAD_VALUE);
  4218  10A0  1303               	bcf	3,6	;RP1=0, select bank1
  4219  10A1  0092               	movwf	18	;volatile
  4220  10A2  0008               	return
  4221  10A3                     __end_of_CCP_PWM_PERIOD_LOAD:	
  4222  10A3                     __ptext20:	
  4223 ;; *************** function ___fladd *****************
  4224 ;; Defined at:
  4225 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcadd.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;  b               4   64[BANK1 ] enum E861
  4228 ;;  a               4   68[BANK1 ] enum E861
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  grs             1    3[BANK3 ] unsigned char 
  4231 ;;  bexp            1    2[BANK3 ] unsigned char 
  4232 ;;  aexp            1    1[BANK3 ] unsigned char 
  4233 ;;  signs           1    0[BANK3 ] unsigned char 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  4   64[BANK1 ] unsigned char 
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, status,0, btemp+1
  4238 ;; Tracked objects:
  4239 ;;		On entry : 300/100
  4240 ;;		On exit  : 100/100
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4243 ;;      Params:         0       0       8       0       0
  4244 ;;      Locals:         0       0       0       4       0
  4245 ;;      Temps:          0       0       8       0       0
  4246 ;;      Totals:         0       0      16       4       0
  4247 ;;Total ram usage:       20 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:   10
  4250 ;; This function calls:
  4251 ;;		Nothing
  4252 ;; This function is called by:
  4253 ;;		_CCP_PWM_PERIOD_LOAD
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           
  4258                           ;psect for function ___fladd
  4259  10A3                     ___fladd:	
  4260                           
  4261                           ;incstack = 0
  4262 ;; hardware stack exceeded
  4263                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
  4264  10A3  0863               	movf	(___fladd@b^(0+128)+3),w
  4265  10A4  1703               	bsf	3,6	;RP1=1, select bank3
  4266  10A5  00D2               	movwf	___fladd@signs^(0+384)
  4267  10A6  3080               	movlw	128
  4268  10A7  05D2               	andwf	___fladd@signs^(0+384),f
  4269  10A8  1303               	bcf	3,6	;RP1=0, select bank1
  4270  10A9  1003               	clrc
  4271  10AA  0D63               	rlf	(___fladd@b^(0+128)+3),w
  4272  10AB  1703               	bsf	3,6	;RP1=1, select bank3
  4273  10AC  00D4               	movwf	___fladd@bexp^(0+384)
  4274  10AD  1303               	bcf	3,6	;RP1=0, select bank1
  4275  10AE  1FE2               	btfss	(___fladd@b^(0+128)+2),7
  4276  10AF  28B2               	goto	l5000
  4277  10B0  1703               	bsf	3,6	;RP1=1, select bank3
  4278  10B1  1454               	bsf	___fladd@bexp^(0+384),0
  4279  10B2                     l5000:	
  4280  10B2  1703               	bsf	3,6	;RP1=1, select bank3
  4281  10B3  0854               	movf	___fladd@bexp^(0+384),w
  4282  10B4  1903               	btfsc	3,2
  4283  10B5  28C1               	goto	l1319
  4284  10B6  0F54               	incfsz	___fladd@bexp^(0+384),w
  4285  10B7  28BD               	goto	l1320
  4286  10B8  1303               	bcf	3,6	;RP1=0, select bank1
  4287  10B9  01E0               	clrf	___fladd@b^(0+128)
  4288  10BA  01E1               	clrf	(___fladd@b+1)^(0+128)
  4289  10BB  01E2               	clrf	(___fladd@b+2)^(0+128)
  4290  10BC  01E3               	clrf	(___fladd@b+3)^(0+128)
  4291  10BD                     l1320:	
  4292  10BD  1303               	bcf	3,6	;RP1=0, select bank1
  4293  10BE  17E2               	bsf	(___fladd@b^(0+128)+2),7
  4294  10BF  01E3               	clrf	(___fladd@b^(0+128)+3)
  4295  10C0  28C6               	goto	l5008
  4296  10C1                     l1319:	
  4297  10C1  1303               	bcf	3,6	;RP1=0, select bank1
  4298  10C2  01E0               	clrf	___fladd@b^(0+128)
  4299  10C3  01E1               	clrf	(___fladd@b+1)^(0+128)
  4300  10C4  01E2               	clrf	(___fladd@b+2)^(0+128)
  4301  10C5  01E3               	clrf	(___fladd@b+3)^(0+128)
  4302  10C6                     l5008:	
  4303  10C6  0867               	movf	(___fladd@a^(0+128)+3),w
  4304  10C7  1703               	bsf	3,6	;RP1=1, select bank3
  4305  10C8  00D3               	movwf	___fladd@aexp^(0+384)
  4306  10C9  3080               	movlw	128
  4307  10CA  05D3               	andwf	___fladd@aexp^(0+384),f
  4308  10CB  0853               	movf	___fladd@aexp^(0+384),w
  4309  10CC  0652               	xorwf	___fladd@signs^(0+384),w
  4310  10CD  1D03               	btfss	3,2
  4311  10CE  1752               	bsf	___fladd@signs^(0+384),6
  4312  10CF  1303               	bcf	3,6	;RP1=0, select bank1
  4313  10D0  1003               	clrc
  4314  10D1  0D67               	rlf	(___fladd@a^(0+128)+3),w
  4315  10D2  1703               	bsf	3,6	;RP1=1, select bank3
  4316  10D3  00D3               	movwf	___fladd@aexp^(0+384)
  4317  10D4  1303               	bcf	3,6	;RP1=0, select bank1
  4318  10D5  1FE6               	btfss	(___fladd@a^(0+128)+2),7
  4319  10D6  28D9               	goto	l5022
  4320  10D7  1703               	bsf	3,6	;RP1=1, select bank3
  4321  10D8  1453               	bsf	___fladd@aexp^(0+384),0
  4322  10D9                     l5022:	
  4323  10D9  1703               	bsf	3,6	;RP1=1, select bank3
  4324  10DA  0853               	movf	___fladd@aexp^(0+384),w
  4325  10DB  1903               	btfsc	3,2
  4326  10DC  28E8               	goto	l1324
  4327  10DD  0F53               	incfsz	___fladd@aexp^(0+384),w
  4328  10DE  28E4               	goto	l1325
  4329  10DF  1303               	bcf	3,6	;RP1=0, select bank1
  4330  10E0  01E4               	clrf	___fladd@a^(0+128)
  4331  10E1  01E5               	clrf	(___fladd@a+1)^(0+128)
  4332  10E2  01E6               	clrf	(___fladd@a+2)^(0+128)
  4333  10E3  01E7               	clrf	(___fladd@a+3)^(0+128)
  4334  10E4                     l1325:	
  4335  10E4  1303               	bcf	3,6	;RP1=0, select bank1
  4336  10E5  17E6               	bsf	(___fladd@a^(0+128)+2),7
  4337  10E6  01E7               	clrf	(___fladd@a^(0+128)+3)
  4338  10E7  28ED               	goto	l5030
  4339  10E8                     l1324:	
  4340  10E8  1303               	bcf	3,6	;RP1=0, select bank1
  4341  10E9  01E4               	clrf	___fladd@a^(0+128)
  4342  10EA  01E5               	clrf	(___fladd@a+1)^(0+128)
  4343  10EB  01E6               	clrf	(___fladd@a+2)^(0+128)
  4344  10EC  01E7               	clrf	(___fladd@a+3)^(0+128)
  4345  10ED                     l5030:	
  4346  10ED  1703               	bsf	3,6	;RP1=1, select bank3
  4347  10EE  0854               	movf	___fladd@bexp^(0+384),w
  4348  10EF  0253               	subwf	___fladd@aexp^(0+384),w
  4349  10F0  1803               	skipnc
  4350  10F1  2925               	goto	l5066
  4351  10F2  1F52               	btfss	___fladd@signs^(0+384),6
  4352  10F3  28F6               	goto	l5036
  4353  10F4  3080               	movlw	128
  4354  10F5  06D2               	xorwf	___fladd@signs^(0+384),f
  4355  10F6                     l5036:	
  4356  10F6  0854               	movf	___fladd@bexp^(0+384),w
  4357  10F7  00D5               	movwf	___fladd@grs^(0+384)
  4358  10F8  0853               	movf	___fladd@aexp^(0+384),w
  4359  10F9  00D4               	movwf	___fladd@bexp^(0+384)
  4360  10FA  0855               	movf	___fladd@grs^(0+384),w
  4361  10FB  00D3               	movwf	___fladd@aexp^(0+384)
  4362  10FC  1303               	bcf	3,6	;RP1=0, select bank1
  4363  10FD  0860               	movf	___fladd@b^(0+128),w
  4364  10FE  1703               	bsf	3,6	;RP1=1, select bank3
  4365  10FF  00D5               	movwf	___fladd@grs^(0+384)
  4366  1100  1303               	bcf	3,6	;RP1=0, select bank1
  4367  1101  0864               	movf	___fladd@a^(0+128),w
  4368  1102  00E0               	movwf	___fladd@b^(0+128)
  4369  1103  1703               	bsf	3,6	;RP1=1, select bank3
  4370  1104  0855               	movf	___fladd@grs^(0+384),w
  4371  1105  1303               	bcf	3,6	;RP1=0, select bank1
  4372  1106  00E4               	movwf	___fladd@a^(0+128)
  4373  1107  0861               	movf	(___fladd@b^(0+128)+1),w
  4374  1108  1703               	bsf	3,6	;RP1=1, select bank3
  4375  1109  00D5               	movwf	___fladd@grs^(0+384)
  4376  110A  1303               	bcf	3,6	;RP1=0, select bank1
  4377  110B  0865               	movf	(___fladd@a^(0+128)+1),w
  4378  110C  00E1               	movwf	(___fladd@b^(0+128)+1)
  4379  110D  1703               	bsf	3,6	;RP1=1, select bank3
  4380  110E  0855               	movf	___fladd@grs^(0+384),w
  4381  110F  1303               	bcf	3,6	;RP1=0, select bank1
  4382  1110  00E5               	movwf	(___fladd@a^(0+128)+1)
  4383  1111  0862               	movf	(___fladd@b^(0+128)+2),w
  4384  1112  1703               	bsf	3,6	;RP1=1, select bank3
  4385  1113  00D5               	movwf	___fladd@grs^(0+384)
  4386  1114  1303               	bcf	3,6	;RP1=0, select bank1
  4387  1115  0866               	movf	(___fladd@a^(0+128)+2),w
  4388  1116  00E2               	movwf	(___fladd@b^(0+128)+2)
  4389  1117  1703               	bsf	3,6	;RP1=1, select bank3
  4390  1118  0855               	movf	___fladd@grs^(0+384),w
  4391  1119  1303               	bcf	3,6	;RP1=0, select bank1
  4392  111A  00E6               	movwf	(___fladd@a^(0+128)+2)
  4393  111B  0863               	movf	(___fladd@b^(0+128)+3),w
  4394  111C  1703               	bsf	3,6	;RP1=1, select bank3
  4395  111D  00D5               	movwf	___fladd@grs^(0+384)
  4396  111E  1303               	bcf	3,6	;RP1=0, select bank1
  4397  111F  0867               	movf	(___fladd@a^(0+128)+3),w
  4398  1120  00E3               	movwf	(___fladd@b^(0+128)+3)
  4399  1121  1703               	bsf	3,6	;RP1=1, select bank3
  4400  1122  0855               	movf	___fladd@grs^(0+384),w
  4401  1123  1303               	bcf	3,6	;RP1=0, select bank1
  4402  1124  00E7               	movwf	(___fladd@a^(0+128)+3)
  4403  1125                     l5066:	
  4404  1125  1703               	bsf	3,6	;RP1=1, select bank3
  4405  1126  01D5               	clrf	___fladd@grs^(0+384)
  4406  1127  0853               	movf	___fladd@aexp^(0+384),w
  4407  1128  1303               	bcf	3,6	;RP1=0, select bank1
  4408  1129  00E8               	movwf	??___fladd^(0+128)
  4409  112A  01E9               	clrf	(??___fladd^(0+128)+1)
  4410  112B  0869               	movf	(??___fladd+1)^(0+128),w
  4411  112C  00EB               	movwf	((??___fladd+2)^(0+128)+1)
  4412  112D  1703               	bsf	3,6	;RP1=1, select bank3
  4413  112E  0854               	movf	___fladd@bexp^(0+384),w
  4414  112F  1303               	bcf	3,6	;RP1=0, select bank1
  4415  1130  0268               	subwf	??___fladd^(0+128),w
  4416  1131  00EA               	movwf	(??___fladd+2)^(0+128)
  4417  1132  1C03               	skipc
  4418  1133  03EB               	decf	((??___fladd+2)^(0+128)+1),f
  4419  1134  086B               	movf	(??___fladd+3)^(0+128),w
  4420  1135  3A80               	xorlw	128
  4421  1136  00FF               	movwf	127
  4422  1137  3080               	movlw	128
  4423  1138  027F               	subwf	127,w
  4424  1139  1D03               	skipz
  4425  113A  293D               	goto	u4555
  4426  113B  301A               	movlw	26
  4427  113C  026A               	subwf	(??___fladd+2)^(0+128),w
  4428  113D                     u4555:	
  4429  113D  1C03               	skipc
  4430  113E  296B               	goto	l5082
  4431  113F  1683               	bsf	3,5	;RP0=1, select bank1
  4432  1140  1303               	bcf	3,6	;RP1=0, select bank1
  4433  1141  0863               	movf	(___fladd@b+3)^(0+128),w
  4434  1142  0462               	iorwf	(___fladd@b+2)^(0+128),w
  4435  1143  0461               	iorwf	(___fladd@b+1)^(0+128),w
  4436  1144  0460               	iorwf	___fladd@b^(0+128),w
  4437  1145  1903               	btfsc	3,2
  4438  1146  2949               	goto	u4560
  4439  1147  3001               	movlw	1
  4440  1148  294A               	goto	u4570
  4441  1149                     u4560:	
  4442  1149  3000               	movlw	0
  4443  114A                     u4570:	
  4444  114A  1703               	bsf	3,6	;RP1=1, select bank3
  4445  114B  00D5               	movwf	___fladd@grs^(0+384)
  4446  114C  1303               	bcf	3,6	;RP1=0, select bank1
  4447  114D  01E0               	clrf	___fladd@b^(0+128)
  4448  114E  01E1               	clrf	(___fladd@b+1)^(0+128)
  4449  114F  01E2               	clrf	(___fladd@b+2)^(0+128)
  4450  1150  01E3               	clrf	(___fladd@b+3)^(0+128)
  4451  1151  1703               	bsf	3,6	;RP1=1, select bank3
  4452  1152  0853               	movf	___fladd@aexp^(0+384),w
  4453  1153  00D4               	movwf	___fladd@bexp^(0+384)
  4454  1154  2971               	goto	l1330
  4455  1155                     l1332:	
  4456  1155  1C55               	btfss	___fladd@grs^(0+384),0
  4457  1156  295C               	goto	l1333
  4458  1157  1003               	clrc
  4459  1158  0C55               	rrf	___fladd@grs^(0+384),w
  4460  1159  3801               	iorlw	1
  4461  115A  00D5               	movwf	___fladd@grs^(0+384)
  4462  115B  295E               	goto	l1334
  4463  115C                     l1333:	
  4464  115C  1003               	clrc
  4465  115D  0CD5               	rrf	___fladd@grs^(0+384),f
  4466  115E                     l1334:	
  4467  115E  1303               	bcf	3,6	;RP1=0, select bank1
  4468  115F  1C60               	btfss	___fladd@b^(0+128),0
  4469  1160  2963               	goto	l5078
  4470  1161  1703               	bsf	3,6	;RP1=1, select bank3
  4471  1162  17D5               	bsf	___fladd@grs^(0+384),7
  4472  1163                     l5078:	
  4473  1163  1303               	bcf	3,6	;RP1=0, select bank1
  4474  1164  0D63               	rlf	(___fladd@b+3)^(0+128),w
  4475  1165  0CE3               	rrf	(___fladd@b+3)^(0+128),f
  4476  1166  0CE2               	rrf	(___fladd@b+2)^(0+128),f
  4477  1167  0CE1               	rrf	(___fladd@b+1)^(0+128),f
  4478  1168  0CE0               	rrf	___fladd@b^(0+128),f
  4479  1169  1703               	bsf	3,6	;RP1=1, select bank3
  4480  116A  0AD4               	incf	___fladd@bexp^(0+384),f
  4481  116B                     l5082:	
  4482  116B  1683               	bsf	3,5	;RP0=1, select bank3
  4483  116C  1703               	bsf	3,6	;RP1=1, select bank3
  4484  116D  0853               	movf	___fladd@aexp^(0+384),w
  4485  116E  0254               	subwf	___fladd@bexp^(0+384),w
  4486  116F  1C03               	skipc
  4487  1170  2955               	goto	l1332
  4488  1171                     l1330:	
  4489  1171  1B52               	btfsc	___fladd@signs^(0+384),6
  4490  1172  29AB               	goto	l5102
  4491  1173  0854               	movf	___fladd@bexp^(0+384),w
  4492  1174  1D03               	btfss	3,2
  4493  1175  297C               	goto	l5088
  4494  1176  1303               	bcf	3,6	;RP1=0, select bank1
  4495  1177  01E0               	clrf	?___fladd^(0+128)
  4496  1178  01E1               	clrf	(?___fladd+1)^(0+128)
  4497  1179  01E2               	clrf	(?___fladd+2)^(0+128)
  4498  117A  01E3               	clrf	(?___fladd+3)^(0+128)
  4499  117B  0008               	return
  4500  117C                     l5088:	
  4501  117C  1303               	bcf	3,6	;RP1=0, select bank1
  4502  117D  0864               	movf	___fladd@a^(0+128),w
  4503  117E  07E0               	addwf	___fladd@b^(0+128),f
  4504  117F  0865               	movf	(___fladd@a+1)^(0+128),w
  4505  1180  1103               	clrz
  4506  1181  1803               	skipnc
  4507  1182  3E01               	addlw	1
  4508  1183  1D03               	btfss	3,2
  4509  1184  07E1               	addwf	(___fladd@b+1)^(0+128),f
  4510  1185  0866               	movf	(___fladd@a+2)^(0+128),w
  4511  1186  1103               	clrz
  4512  1187  1803               	skipnc
  4513  1188  3E01               	addlw	1
  4514  1189  1D03               	btfss	3,2
  4515  118A  07E2               	addwf	(___fladd@b+2)^(0+128),f
  4516  118B  0867               	movf	(___fladd@a+3)^(0+128),w
  4517  118C  1103               	clrz
  4518  118D  1803               	skipnc
  4519  118E  3E01               	addlw	1
  4520  118F  1D03               	btfss	3,2
  4521  1190  07E3               	addwf	(___fladd@b+3)^(0+128),f
  4522  1191  1C63               	btfss	(___fladd@b+3)^(0+128),0
  4523  1192  2A36               	goto	l5132
  4524  1193  1703               	bsf	3,6	;RP1=1, select bank3
  4525  1194  1C55               	btfss	___fladd@grs^(0+384),0
  4526  1195  299B               	goto	l1341
  4527  1196  1003               	clrc
  4528  1197  0C55               	rrf	___fladd@grs^(0+384),w
  4529  1198  3801               	iorlw	1
  4530  1199  00D5               	movwf	___fladd@grs^(0+384)
  4531  119A  299D               	goto	l1342
  4532  119B                     l1341:	
  4533  119B  1003               	clrc
  4534  119C  0CD5               	rrf	___fladd@grs^(0+384),f
  4535  119D                     l1342:	
  4536  119D  1303               	bcf	3,6	;RP1=0, select bank1
  4537  119E  1C60               	btfss	___fladd@b^(0+128),0
  4538  119F  29A2               	goto	l5098
  4539  11A0  1703               	bsf	3,6	;RP1=1, select bank3
  4540  11A1  17D5               	bsf	___fladd@grs^(0+384),7
  4541  11A2                     l5098:	
  4542  11A2  1303               	bcf	3,6	;RP1=0, select bank1
  4543  11A3  0D63               	rlf	(___fladd@b+3)^(0+128),w
  4544  11A4  0CE3               	rrf	(___fladd@b+3)^(0+128),f
  4545  11A5  0CE2               	rrf	(___fladd@b+2)^(0+128),f
  4546  11A6  0CE1               	rrf	(___fladd@b+1)^(0+128),f
  4547  11A7  0CE0               	rrf	___fladd@b^(0+128),f
  4548  11A8  1703               	bsf	3,6	;RP1=1, select bank3
  4549  11A9  0AD4               	incf	___fladd@bexp^(0+384),f
  4550  11AA  2A36               	goto	l5132
  4551  11AB                     l5102:	
  4552  11AB  1303               	bcf	3,6	;RP1=0, select bank1
  4553  11AC  0863               	movf	(___fladd@b+3)^(0+128),w
  4554  11AD  3A80               	xorlw	128
  4555  11AE  00FF               	movwf	127
  4556  11AF  0867               	movf	(___fladd@a+3)^(0+128),w
  4557  11B0  3A80               	xorlw	128
  4558  11B1  027F               	subwf	127,w
  4559  11B2  1D03               	skipz
  4560  11B3  29BE               	goto	u4673
  4561  11B4  0866               	movf	(___fladd@a+2)^(0+128),w
  4562  11B5  0262               	subwf	(___fladd@b+2)^(0+128),w
  4563  11B6  1D03               	skipz
  4564  11B7  29BE               	goto	u4673
  4565  11B8  0865               	movf	(___fladd@a+1)^(0+128),w
  4566  11B9  0261               	subwf	(___fladd@b+1)^(0+128),w
  4567  11BA  1D03               	skipz
  4568  11BB  29BE               	goto	u4673
  4569  11BC  0864               	movf	___fladd@a^(0+128),w
  4570  11BD  0260               	subwf	___fladd@b^(0+128),w
  4571  11BE                     u4673:	
  4572  11BE  1803               	skipnc
  4573  11BF  2A00               	goto	l5112
  4574  11C0  30FF               	movlw	255
  4575  11C1  00E8               	movwf	??___fladd^(0+128)
  4576  11C2  00E9               	movwf	(??___fladd^(0+128)+1)
  4577  11C3  00EA               	movwf	(??___fladd^(0+128)+2)
  4578  11C4  00EB               	movwf	(??___fladd^(0+128)+3)
  4579  11C5  0864               	movf	___fladd@a^(0+128),w
  4580  11C6  00EC               	movwf	(??___fladd+4)^(0+128)
  4581  11C7  0865               	movf	(___fladd@a+1)^(0+128),w
  4582  11C8  00ED               	movwf	((??___fladd+4)^(0+128)+1)
  4583  11C9  0866               	movf	(___fladd@a+2)^(0+128),w
  4584  11CA  00EE               	movwf	((??___fladd+4)^(0+128)+2)
  4585  11CB  0867               	movf	(___fladd@a+3)^(0+128),w
  4586  11CC  00EF               	movwf	((??___fladd+4)^(0+128)+3)
  4587  11CD  0860               	movf	___fladd@b^(0+128),w
  4588  11CE  02EC               	subwf	(??___fladd+4)^(0+128),f
  4589  11CF  0861               	movf	(___fladd@b+1)^(0+128),w
  4590  11D0  1C03               	skipc
  4591  11D1  0F61               	incfsz	(___fladd@b+1)^(0+128),w
  4592  11D2  02ED               	subwf	((??___fladd+4)^(0+128)+1),f
  4593  11D3  0862               	movf	(___fladd@b+2)^(0+128),w
  4594  11D4  1C03               	skipc
  4595  11D5  0F62               	incfsz	(___fladd@b+2)^(0+128),w
  4596  11D6  02EE               	subwf	((??___fladd+4)^(0+128)+2),f
  4597  11D7  0863               	movf	(___fladd@b+3)^(0+128),w
  4598  11D8  1C03               	skipc
  4599  11D9  0F63               	incfsz	(___fladd@b+3)^(0+128),w
  4600  11DA  02EF               	subwf	((??___fladd+4)^(0+128)+3),f
  4601  11DB  086C               	movf	(??___fladd+4)^(0+128),w
  4602  11DC  07E8               	addwf	??___fladd^(0+128),f
  4603  11DD  086D               	movf	(??___fladd+5)^(0+128),w
  4604  11DE  1803               	skipnc
  4605  11DF  0F6D               	incfsz	(??___fladd+5)^(0+128),w
  4606  11E0  07E9               	addwf	(??___fladd^(0+128)+1),f
  4607  11E1  086E               	movf	(??___fladd+6)^(0+128),w
  4608  11E2  1803               	skipnc
  4609  11E3  0F6E               	incfsz	(??___fladd+6)^(0+128),w
  4610  11E4  07EA               	addwf	(??___fladd^(0+128)+2),f
  4611  11E5  086F               	movf	(??___fladd+7)^(0+128),w
  4612  11E6  1803               	skipnc
  4613  11E7  0A6F               	incf	(??___fladd+7)^(0+128),w
  4614  11E8  07EB               	addwf	(??___fladd^(0+128)+3),f
  4615  11E9  086B               	movf	(??___fladd+3)^(0+128),w
  4616  11EA  00E3               	movwf	(___fladd@b+3)^(0+128)
  4617  11EB  086A               	movf	(??___fladd+2)^(0+128),w
  4618  11EC  00E2               	movwf	(___fladd@b+2)^(0+128)
  4619  11ED  0869               	movf	(??___fladd+1)^(0+128),w
  4620  11EE  00E1               	movwf	(___fladd@b+1)^(0+128)
  4621  11EF  0868               	movf	??___fladd^(0+128),w
  4622  11F0  00E0               	movwf	___fladd@b^(0+128)
  4623  11F1  3080               	movlw	128
  4624  11F2  1703               	bsf	3,6	;RP1=1, select bank3
  4625  11F3  06D2               	xorwf	___fladd@signs^(0+384),f
  4626  11F4  09D5               	comf	___fladd@grs^(0+384),f
  4627  11F5  0FD5               	incfsz	___fladd@grs^(0+384),f
  4628  11F6  2A0E               	goto	l1347
  4629  11F7  1303               	bcf	3,6	;RP1=0, select bank1
  4630  11F8  0AE0               	incf	___fladd@b^(0+128),f
  4631  11F9  1903               	skipnz
  4632  11FA  0AE1               	incf	(___fladd@b+1)^(0+128),f
  4633  11FB  1903               	skipnz
  4634  11FC  0AE2               	incf	(___fladd@b+2)^(0+128),f
  4635  11FD  1903               	skipnz
  4636  11FE  0AE3               	incf	(___fladd@b+3)^(0+128),f
  4637  11FF  2A0E               	goto	l1347
  4638  1200                     l5112:	
  4639  1200  0864               	movf	___fladd@a^(0+128),w
  4640  1201  02E0               	subwf	___fladd@b^(0+128),f
  4641  1202  0865               	movf	(___fladd@a+1)^(0+128),w
  4642  1203  1C03               	skipc
  4643  1204  0F65               	incfsz	(___fladd@a+1)^(0+128),w
  4644  1205  02E1               	subwf	(___fladd@b+1)^(0+128),f
  4645  1206  0866               	movf	(___fladd@a+2)^(0+128),w
  4646  1207  1C03               	skipc
  4647  1208  0F66               	incfsz	(___fladd@a+2)^(0+128),w
  4648  1209  02E2               	subwf	(___fladd@b+2)^(0+128),f
  4649  120A  0867               	movf	(___fladd@a+3)^(0+128),w
  4650  120B  1C03               	skipc
  4651  120C  0F67               	incfsz	(___fladd@a+3)^(0+128),w
  4652  120D  02E3               	subwf	(___fladd@b+3)^(0+128),f
  4653  120E                     l1347:	
  4654  120E  1303               	bcf	3,6	;RP1=0, select bank1
  4655  120F  0863               	movf	(___fladd@b+3)^(0+128),w
  4656  1210  0462               	iorwf	(___fladd@b+2)^(0+128),w
  4657  1211  0461               	iorwf	(___fladd@b+1)^(0+128),w
  4658  1212  0460               	iorwf	___fladd@b^(0+128),w
  4659  1213  1D03               	skipz
  4660  1214  2A33               	goto	l5130
  4661  1215  1703               	bsf	3,6	;RP1=1, select bank3
  4662  1216  0855               	movf	___fladd@grs^(0+384),w
  4663  1217  1D03               	btfss	3,2
  4664  1218  2A33               	goto	l5130
  4665  1219  1303               	bcf	3,6	;RP1=0, select bank1
  4666  121A  01E0               	clrf	?___fladd^(0+128)
  4667  121B  01E1               	clrf	(?___fladd+1)^(0+128)
  4668  121C  01E2               	clrf	(?___fladd+2)^(0+128)
  4669  121D  01E3               	clrf	(?___fladd+3)^(0+128)
  4670  121E  0008               	return
  4671  121F                     l5118:	
  4672  121F  1003               	clrc
  4673  1220  0DE0               	rlf	___fladd@b^(0+128),f
  4674  1221  0DE1               	rlf	(___fladd@b+1)^(0+128),f
  4675  1222  0DE2               	rlf	(___fladd@b+2)^(0+128),f
  4676  1223  0DE3               	rlf	(___fladd@b+3)^(0+128),f
  4677  1224  1703               	bsf	3,6	;RP1=1, select bank3
  4678  1225  1FD5               	btfss	___fladd@grs^(0+384),7
  4679  1226  2A29               	goto	l1351
  4680  1227  1303               	bcf	3,6	;RP1=0, select bank1
  4681  1228  1460               	bsf	___fladd@b^(0+128),0
  4682  1229                     l1351:	
  4683  1229  1703               	bsf	3,6	;RP1=1, select bank3
  4684  122A  1C55               	btfss	___fladd@grs^(0+384),0
  4685  122B  2A2E               	goto	l1352
  4686  122C  1403               	setc
  4687  122D  2A2F               	goto	L1
  4688  122E                     l1352:	
  4689  122E  1003               	clrc
  4690  122F                     L1:	
  4691  122F  0DD5               	rlf	___fladd@grs^(0+384),f
  4692  1230  0854               	movf	___fladd@bexp^(0+384),w
  4693  1231  1D03               	btfss	3,2
  4694  1232  03D4               	decf	___fladd@bexp^(0+384),f
  4695  1233                     l5130:	
  4696  1233  1303               	bcf	3,6	;RP1=0, select bank1
  4697  1234  1FE2               	btfss	(___fladd@b+2)^(0+128),7
  4698  1235  2A1F               	goto	l5118
  4699  1236                     l5132:	
  4700  1236  1703               	bsf	3,6	;RP1=1, select bank3
  4701  1237  01D3               	clrf	___fladd@aexp^(0+384)
  4702  1238  1FD5               	btfss	___fladd@grs^(0+384),7
  4703  1239  2A44               	goto	l5142
  4704  123A  0855               	movf	___fladd@grs^(0+384),w
  4705  123B  397F               	andlw	127
  4706  123C  1D03               	btfss	3,2
  4707  123D  2A41               	goto	l5138
  4708  123E  1303               	bcf	3,6	;RP1=0, select bank1
  4709  123F  1C60               	btfss	___fladd@b^(0+128),0
  4710  1240  2A44               	goto	l5142
  4711  1241                     l5138:	
  4712  1241  1703               	bsf	3,6	;RP1=1, select bank3
  4713  1242  01D3               	clrf	___fladd@aexp^(0+384)
  4714  1243  0AD3               	incf	___fladd@aexp^(0+384),f
  4715  1244                     l5142:	
  4716  1244  1703               	bsf	3,6	;RP1=1, select bank3
  4717  1245  0853               	movf	___fladd@aexp^(0+384),w
  4718  1246  1903               	btfsc	3,2
  4719  1247  2A5A               	goto	l5154
  4720  1248  1303               	bcf	3,6	;RP1=0, select bank1
  4721  1249  0AE0               	incf	___fladd@b^(0+128),f
  4722  124A  1903               	skipnz
  4723  124B  0AE1               	incf	(___fladd@b+1)^(0+128),f
  4724  124C  1903               	skipnz
  4725  124D  0AE2               	incf	(___fladd@b+2)^(0+128),f
  4726  124E  1903               	skipnz
  4727  124F  0AE3               	incf	(___fladd@b+3)^(0+128),f
  4728  1250  1C63               	btfss	(___fladd@b+3)^(0+128),0
  4729  1251  2A5A               	goto	l5154
  4730  1252  0D63               	rlf	(___fladd@b+3)^(0+128),w
  4731  1253  0CE3               	rrf	(___fladd@b+3)^(0+128),f
  4732  1254  0CE2               	rrf	(___fladd@b+2)^(0+128),f
  4733  1255  0CE1               	rrf	(___fladd@b+1)^(0+128),f
  4734  1256  0CE0               	rrf	___fladd@b^(0+128),f
  4735  1257  1703               	bsf	3,6	;RP1=1, select bank3
  4736  1258  0F54               	incfsz	___fladd@bexp^(0+384),w
  4737  1259  0AD4               	incf	___fladd@bexp^(0+384),f
  4738  125A                     l5154:	
  4739  125A  1703               	bsf	3,6	;RP1=1, select bank3
  4740  125B  0A54               	incf	___fladd@bexp^(0+384),w
  4741  125C  1D03               	btfss	3,2
  4742  125D  0854               	movf	___fladd@bexp^(0+384),w
  4743  125E  1D03               	btfss	3,2
  4744  125F  2A69               	goto	l5162
  4745  1260  1303               	bcf	3,6	;RP1=0, select bank1
  4746  1261  01E0               	clrf	___fladd@b^(0+128)
  4747  1262  01E1               	clrf	(___fladd@b+1)^(0+128)
  4748  1263  01E2               	clrf	(___fladd@b+2)^(0+128)
  4749  1264  01E3               	clrf	(___fladd@b+3)^(0+128)
  4750  1265  1703               	bsf	3,6	;RP1=1, select bank3
  4751  1266  0854               	movf	___fladd@bexp^(0+384),w
  4752  1267  1903               	btfsc	3,2
  4753  1268  01D2               	clrf	___fladd@signs^(0+384)
  4754  1269                     l5162:	
  4755  1269  1C54               	btfss	___fladd@bexp^(0+384),0
  4756  126A  2A6E               	goto	l1367
  4757  126B  1303               	bcf	3,6	;RP1=0, select bank1
  4758  126C  17E2               	bsf	(___fladd@b^(0+128)+2),7
  4759  126D  2A70               	goto	l5166
  4760  126E                     l1367:	
  4761  126E  1303               	bcf	3,6	;RP1=0, select bank1
  4762  126F  13E2               	bcf	(___fladd@b^(0+128)+2),7
  4763  1270                     l5166:	
  4764  1270  1703               	bsf	3,6	;RP1=1, select bank3
  4765  1271  1003               	clrc
  4766  1272  0C54               	rrf	___fladd@bexp^(0+384),w
  4767  1273  1303               	bcf	3,6	;RP1=0, select bank1
  4768  1274  00E3               	movwf	(___fladd@b^(0+128)+3)
  4769  1275  1703               	bsf	3,6	;RP1=1, select bank3
  4770  1276  1FD2               	btfss	___fladd@signs^(0+384),7
  4771  1277  0008               	return
  4772  1278  1303               	bcf	3,6	;RP1=0, select bank1
  4773  1279  17E3               	bsf	(___fladd@b^(0+128)+3),7
  4774  127A  0008               	return
  4775  127B                     __end_of___fladd:	
  4776  127B                     __ptext9:	
  4777 ;; *************** function _CCP1_PWM_DUTY_CYCLE_LOAD *****************
  4778 ;; Defined at:
  4779 ;;		line 196 in file "CCP.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;  DUTY_CYCLE      2   14[BANK3 ] unsigned int 
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;  DUTY_VALUE      2   23[BANK3 ] unsigned int 
  4784 ;;  ret             1    0        enum E861
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      enum E861
  4787 ;; Registers used:
  4788 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 300/300
  4791 ;;		On exit  : 300/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4794 ;;      Params:         0       0       0       2       0
  4795 ;;      Locals:         0       0       0       7       0
  4796 ;;      Temps:          0       0       0       2       0
  4797 ;;      Totals:         0       0       0      11       0
  4798 ;;Total ram usage:       11 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:   12
  4801 ;; This function calls:
  4802 ;;		___fldiv
  4803 ;;		___flmul
  4804 ;;		___fltol
  4805 ;;		___xxtofl
  4806 ;; This function is called by:
  4807 ;;		_MOTOR_INIT
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           
  4812                           ;psect for function _CCP1_PWM_DUTY_CYCLE_LOAD
  4813  127B                     _CCP1_PWM_DUTY_CYCLE_LOAD:	
  4814                           
  4815                           ;CCP.c: 199:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 201:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
  4816                           
  4817                           ;incstack = 0
  4818 ;; hardware stack exceeded
  4819                           ; Regs used in _CCP1_PWM_DUTY_CYCLE_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4820  127B  0860               	movf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384),w
  4821  127C  1303               	bcf	3,6	;RP1=0, select bank1
  4822  127D  00A0               	movwf	___xxtofl@val^(0+128)
  4823  127E  1703               	bsf	3,6	;RP1=1, select bank3
  4824  127F  0861               	movf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384),w
  4825  1280  1303               	bcf	3,6	;RP1=0, select bank1
  4826  1281  00A1               	movwf	(___xxtofl@val^(0+128)+1)
  4827  1282  3000               	movlw	0
  4828  1283  01A2               	clrf	(___xxtofl@val^(0+128)+2)
  4829  1284  01A3               	clrf	(___xxtofl@val^(0+128)+3)
  4830  1285  25F0  160A  118A   	fcall	___xxtofl
  4831  1288  0823               	movf	(?___xxtofl+3)^(0+128),w
  4832  1289  00B5               	movwf	(___fldiv@b+3)^(0+128)
  4833  128A  0822               	movf	(?___xxtofl+2)^(0+128),w
  4834  128B  00B4               	movwf	(___fldiv@b+2)^(0+128)
  4835  128C  0821               	movf	(?___xxtofl+1)^(0+128),w
  4836  128D  00B3               	movwf	(___fldiv@b+1)^(0+128)
  4837  128E  0820               	movf	?___xxtofl^(0+128),w
  4838  128F  00B2               	movwf	___fldiv@b^(0+128)
  4839  1290  3043               	movlw	67
  4840  1291  00B1               	movwf	(___fldiv@a+3)^(0+128)
  4841  1292  3034               	movlw	52
  4842  1293  00B0               	movwf	(___fldiv@a+2)^(0+128)
  4843  1294  01AF               	clrf	(___fldiv@a+1)^(0+128)
  4844  1295  01AE               	clrf	___fldiv@a^(0+128)
  4845  1296  2662  160A  118A   	fcall	___fldiv
  4846  1299  0831               	movf	(?___fldiv+3)^(0+128),w
  4847  129A  00CE               	movwf	(___flmul@a+3)^(0+128)
  4848  129B  0830               	movf	(?___fldiv+2)^(0+128),w
  4849  129C  00CD               	movwf	(___flmul@a+2)^(0+128)
  4850  129D  082F               	movf	(?___fldiv+1)^(0+128),w
  4851  129E  00CC               	movwf	(___flmul@a+1)^(0+128)
  4852  129F  082E               	movf	?___fldiv^(0+128),w
  4853  12A0  00CB               	movwf	___flmul@a^(0+128)
  4854  12A1  3041               	movlw	65
  4855  12A2  00CA               	movwf	(___flmul@b+3)^(0+128)
  4856  12A3  3020               	movlw	32
  4857  12A4  00C9               	movwf	(___flmul@b+2)^(0+128)
  4858  12A5  01C8               	clrf	(___flmul@b+1)^(0+128)
  4859  12A6  01C7               	clrf	___flmul@b^(0+128)
  4860  12A7  2391  160A  118A   	fcall	___flmul
  4861  12AA  084A               	movf	(?___flmul+3)^(0+128),w
  4862  12AB  1703               	bsf	3,6	;RP1=1, select bank3
  4863  12AC  00E8               	movwf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1939+3)^(0+384)
  4864  12AD  1303               	bcf	3,6	;RP1=0, select bank1
  4865  12AE  0849               	movf	(?___flmul+2)^(0+128),w
  4866  12AF  1703               	bsf	3,6	;RP1=1, select bank3
  4867  12B0  00E7               	movwf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1939+2)^(0+384)
  4868  12B1  1303               	bcf	3,6	;RP1=0, select bank1
  4869  12B2  0848               	movf	(?___flmul+1)^(0+128),w
  4870  12B3  1703               	bsf	3,6	;RP1=1, select bank3
  4871  12B4  00E6               	movwf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1939+1)^(0+384)
  4872  12B5  1303               	bcf	3,6	;RP1=0, select bank1
  4873  12B6  0847               	movf	?___flmul^(0+128),w
  4874  12B7  1703               	bsf	3,6	;RP1=1, select bank3
  4875  12B8  00E5               	movwf	_CCP1_PWM_DUTY_CYCLE_LOAD$1939^(0+384)
  4876                           
  4877                           ;CCP.c: 199:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 201:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
  4878  12B9  0868               	movf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1939+3)^(0+384),w
  4879  12BA  1303               	bcf	3,6	;RP1=0, select bank1
  4880  12BB  00CE               	movwf	(___flmul@a+3)^(0+128)
  4881  12BC  1703               	bsf	3,6	;RP1=1, select bank3
  4882  12BD  0867               	movf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1939+2)^(0+384),w
  4883  12BE  1303               	bcf	3,6	;RP1=0, select bank1
  4884  12BF  00CD               	movwf	(___flmul@a+2)^(0+128)
  4885  12C0  1703               	bsf	3,6	;RP1=1, select bank3
  4886  12C1  0866               	movf	(_CCP1_PWM_DUTY_CYCLE_LOAD$1939+1)^(0+384),w
  4887  12C2  1303               	bcf	3,6	;RP1=0, select bank1
  4888  12C3  00CC               	movwf	(___flmul@a+1)^(0+128)
  4889  12C4  1703               	bsf	3,6	;RP1=1, select bank3
  4890  12C5  0865               	movf	_CCP1_PWM_DUTY_CYCLE_LOAD$1939^(0+384),w
  4891  12C6  1303               	bcf	3,6	;RP1=0, select bank1
  4892  12C7  00CB               	movwf	___flmul@a^(0+128)
  4893  12C8  3041               	movlw	65
  4894  12C9  00CA               	movwf	(___flmul@b+3)^(0+128)
  4895  12CA  30FA               	movlw	250
  4896  12CB  00C9               	movwf	(___flmul@b+2)^(0+128)
  4897  12CC  01C8               	clrf	(___flmul@b+1)^(0+128)
  4898  12CD  01C7               	clrf	___flmul@b^(0+128)
  4899  12CE  2391  160A  118A   	fcall	___flmul
  4900  12D1  084A               	movf	(?___flmul+3)^(0+128),w
  4901  12D2  1703               	bsf	3,6	;RP1=1, select bank3
  4902  12D3  00D9               	movwf	(___fltol@f1+3)^(0+384)
  4903  12D4  1303               	bcf	3,6	;RP1=0, select bank1
  4904  12D5  0849               	movf	(?___flmul+2)^(0+128),w
  4905  12D6  1703               	bsf	3,6	;RP1=1, select bank3
  4906  12D7  00D8               	movwf	(___fltol@f1+2)^(0+384)
  4907  12D8  1303               	bcf	3,6	;RP1=0, select bank1
  4908  12D9  0848               	movf	(?___flmul+1)^(0+128),w
  4909  12DA  1703               	bsf	3,6	;RP1=1, select bank3
  4910  12DB  00D7               	movwf	(___fltol@f1+1)^(0+384)
  4911  12DC  1303               	bcf	3,6	;RP1=0, select bank1
  4912  12DD  0847               	movf	?___flmul^(0+128),w
  4913  12DE  1703               	bsf	3,6	;RP1=1, select bank3
  4914  12DF  00D6               	movwf	___fltol@f1^(0+384)
  4915  12E0  2783               	fcall	___fltol
  4916  12E1  0857               	movf	(?___fltol+1)^(0+384),w
  4917  12E2  00EA               	movwf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384)
  4918  12E3  0856               	movf	?___fltol^(0+384),w
  4919  12E4  00E9               	movwf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384)
  4920                           
  4921                           ;CCP.c: 203:  (CCPR1L =((tbyte)(DUTY_VALUE >>2))); ( CCP1CON =((CCP1CON & 0b11001111)| (
      +                          (DUTY_VALUE&0x0003)<<4)));
  4922  12E5  086A               	movf	(CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384),w
  4923  12E6  00E3               	movwf	(??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)+1)
  4924  12E7  0869               	movf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  4925  12E8  00E2               	movwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)
  4926  12E9  1003               	clrc
  4927  12EA  0CE3               	rrf	(??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  4928  12EB  0CE2               	rrf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),f
  4929  12EC  1003               	clrc
  4930  12ED  0CE3               	rrf	(??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  4931  12EE  0CE2               	rrf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),f
  4932  12EF  0862               	movf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),w
  4933  12F0  1283               	bcf	3,5	;RP0=0, select bank0
  4934  12F1  1303               	bcf	3,6	;RP1=0, select bank0
  4935  12F2  0095               	movwf	21	;volatile
  4936  12F3  1683               	bsf	3,5	;RP0=1, select bank3
  4937  12F4  1703               	bsf	3,6	;RP1=1, select bank3
  4938  12F5  0869               	movf	CCP1_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  4939  12F6  3903               	andlw	3
  4940  12F7  00E2               	movwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)
  4941  12F8  0E62               	swapf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),w
  4942  12F9  39F0               	andlw	240
  4943  12FA  00E2               	movwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384)
  4944  12FB  1283               	bcf	3,5	;RP0=0, select bank0
  4945  12FC  1303               	bcf	3,6	;RP1=0, select bank0
  4946  12FD  0817               	movf	23,w	;volatile
  4947  12FE  39CF               	andlw	207
  4948  12FF  1683               	bsf	3,5	;RP0=1, select bank3
  4949  1300  1703               	bsf	3,6	;RP1=1, select bank3
  4950  1301  0462               	iorwf	??_CCP1_PWM_DUTY_CYCLE_LOAD^(0+384),w
  4951  1302  1283               	bcf	3,5	;RP0=0, select bank0
  4952  1303  1303               	bcf	3,6	;RP1=0, select bank0
  4953  1304  0097               	movwf	23	;volatile
  4954  1305  0008               	return
  4955  1306                     __end_of_CCP1_PWM_DUTY_CYCLE_LOAD:	
  4956  1306                     __ptext21:	
  4957 ;; *************** function _CCP2_PWM_DUTY_CYCLE_LOAD *****************
  4958 ;; Defined at:
  4959 ;;		line 207 in file "CCP.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  DUTY_CYCLE      2   14[BANK3 ] unsigned int 
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;  DUTY_VALUE      2   23[BANK3 ] unsigned int 
  4964 ;;  ret             1    0        enum E861
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  1    wreg      enum E861
  4967 ;; Registers used:
  4968 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4969 ;; Tracked objects:
  4970 ;;		On entry : 300/300
  4971 ;;		On exit  : 300/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4974 ;;      Params:         0       0       0       2       0
  4975 ;;      Locals:         0       0       0       7       0
  4976 ;;      Temps:          0       0       0       2       0
  4977 ;;      Totals:         0       0       0      11       0
  4978 ;;Total ram usage:       11 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; Hardware stack levels required when called:   12
  4981 ;; This function calls:
  4982 ;;		___fldiv
  4983 ;;		___flmul
  4984 ;;		___fltol
  4985 ;;		___xxtofl
  4986 ;; This function is called by:
  4987 ;;		_HEATER_INIT
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _CCP2_PWM_DUTY_CYCLE_LOAD
  4993  1306                     _CCP2_PWM_DUTY_CYCLE_LOAD:	
  4994                           
  4995                           ;CCP.c: 210:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 211:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
  4996                           
  4997                           ;incstack = 0
  4998 ;; hardware stack exceeded
  4999                           ; Regs used in _CCP2_PWM_DUTY_CYCLE_LOAD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5000  1306  0860               	movf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE^(0+384),w
  5001  1307  1303               	bcf	3,6	;RP1=0, select bank1
  5002  1308  00A0               	movwf	___xxtofl@val^(0+128)
  5003  1309  1703               	bsf	3,6	;RP1=1, select bank3
  5004  130A  0861               	movf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_CYCLE+1)^(0+384),w
  5005  130B  1303               	bcf	3,6	;RP1=0, select bank1
  5006  130C  00A1               	movwf	(___xxtofl@val^(0+128)+1)
  5007  130D  3000               	movlw	0
  5008  130E  01A2               	clrf	(___xxtofl@val^(0+128)+2)
  5009  130F  01A3               	clrf	(___xxtofl@val^(0+128)+3)
  5010  1310  25F0  160A  118A   	fcall	___xxtofl
  5011  1313  0823               	movf	(?___xxtofl+3)^(0+128),w
  5012  1314  00B5               	movwf	(___fldiv@b+3)^(0+128)
  5013  1315  0822               	movf	(?___xxtofl+2)^(0+128),w
  5014  1316  00B4               	movwf	(___fldiv@b+2)^(0+128)
  5015  1317  0821               	movf	(?___xxtofl+1)^(0+128),w
  5016  1318  00B3               	movwf	(___fldiv@b+1)^(0+128)
  5017  1319  0820               	movf	?___xxtofl^(0+128),w
  5018  131A  00B2               	movwf	___fldiv@b^(0+128)
  5019  131B  3043               	movlw	67
  5020  131C  00B1               	movwf	(___fldiv@a+3)^(0+128)
  5021  131D  3034               	movlw	52
  5022  131E  00B0               	movwf	(___fldiv@a+2)^(0+128)
  5023  131F  01AF               	clrf	(___fldiv@a+1)^(0+128)
  5024  1320  01AE               	clrf	___fldiv@a^(0+128)
  5025  1321  2662  160A  118A   	fcall	___fldiv
  5026  1324  0831               	movf	(?___fldiv+3)^(0+128),w
  5027  1325  00CE               	movwf	(___flmul@a+3)^(0+128)
  5028  1326  0830               	movf	(?___fldiv+2)^(0+128),w
  5029  1327  00CD               	movwf	(___flmul@a+2)^(0+128)
  5030  1328  082F               	movf	(?___fldiv+1)^(0+128),w
  5031  1329  00CC               	movwf	(___flmul@a+1)^(0+128)
  5032  132A  082E               	movf	?___fldiv^(0+128),w
  5033  132B  00CB               	movwf	___flmul@a^(0+128)
  5034  132C  3041               	movlw	65
  5035  132D  00CA               	movwf	(___flmul@b+3)^(0+128)
  5036  132E  3020               	movlw	32
  5037  132F  00C9               	movwf	(___flmul@b+2)^(0+128)
  5038  1330  01C8               	clrf	(___flmul@b+1)^(0+128)
  5039  1331  01C7               	clrf	___flmul@b^(0+128)
  5040  1332  2391  160A  118A   	fcall	___flmul
  5041  1335  084A               	movf	(?___flmul+3)^(0+128),w
  5042  1336  1703               	bsf	3,6	;RP1=1, select bank3
  5043  1337  00E8               	movwf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1940+3)^(0+384)
  5044  1338  1303               	bcf	3,6	;RP1=0, select bank1
  5045  1339  0849               	movf	(?___flmul+2)^(0+128),w
  5046  133A  1703               	bsf	3,6	;RP1=1, select bank3
  5047  133B  00E7               	movwf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1940+2)^(0+384)
  5048  133C  1303               	bcf	3,6	;RP1=0, select bank1
  5049  133D  0848               	movf	(?___flmul+1)^(0+128),w
  5050  133E  1703               	bsf	3,6	;RP1=1, select bank3
  5051  133F  00E6               	movwf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1940+1)^(0+384)
  5052  1340  1303               	bcf	3,6	;RP1=0, select bank1
  5053  1341  0847               	movf	?___flmul^(0+128),w
  5054  1342  1703               	bsf	3,6	;RP1=1, select bank3
  5055  1343  00E5               	movwf	_CCP2_PWM_DUTY_CYCLE_LOAD$1940^(0+384)
  5056                           
  5057                           ;CCP.c: 210:  tPWM_DUTYCYCLE DUTY_VALUE ;;CCP.c: 211:  DUTY_VALUE = ((((float) DUTY_CYCL
      +                          E / 180 )* 10 * ((double) (8 * 1000) / 256 ) ));
  5058  1344  0868               	movf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1940+3)^(0+384),w
  5059  1345  1303               	bcf	3,6	;RP1=0, select bank1
  5060  1346  00CE               	movwf	(___flmul@a+3)^(0+128)
  5061  1347  1703               	bsf	3,6	;RP1=1, select bank3
  5062  1348  0867               	movf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1940+2)^(0+384),w
  5063  1349  1303               	bcf	3,6	;RP1=0, select bank1
  5064  134A  00CD               	movwf	(___flmul@a+2)^(0+128)
  5065  134B  1703               	bsf	3,6	;RP1=1, select bank3
  5066  134C  0866               	movf	(_CCP2_PWM_DUTY_CYCLE_LOAD$1940+1)^(0+384),w
  5067  134D  1303               	bcf	3,6	;RP1=0, select bank1
  5068  134E  00CC               	movwf	(___flmul@a+1)^(0+128)
  5069  134F  1703               	bsf	3,6	;RP1=1, select bank3
  5070  1350  0865               	movf	_CCP2_PWM_DUTY_CYCLE_LOAD$1940^(0+384),w
  5071  1351  1303               	bcf	3,6	;RP1=0, select bank1
  5072  1352  00CB               	movwf	___flmul@a^(0+128)
  5073  1353  3041               	movlw	65
  5074  1354  00CA               	movwf	(___flmul@b+3)^(0+128)
  5075  1355  30FA               	movlw	250
  5076  1356  00C9               	movwf	(___flmul@b+2)^(0+128)
  5077  1357  01C8               	clrf	(___flmul@b+1)^(0+128)
  5078  1358  01C7               	clrf	___flmul@b^(0+128)
  5079  1359  2391  160A  118A   	fcall	___flmul
  5080  135C  084A               	movf	(?___flmul+3)^(0+128),w
  5081  135D  1703               	bsf	3,6	;RP1=1, select bank3
  5082  135E  00D9               	movwf	(___fltol@f1+3)^(0+384)
  5083  135F  1303               	bcf	3,6	;RP1=0, select bank1
  5084  1360  0849               	movf	(?___flmul+2)^(0+128),w
  5085  1361  1703               	bsf	3,6	;RP1=1, select bank3
  5086  1362  00D8               	movwf	(___fltol@f1+2)^(0+384)
  5087  1363  1303               	bcf	3,6	;RP1=0, select bank1
  5088  1364  0848               	movf	(?___flmul+1)^(0+128),w
  5089  1365  1703               	bsf	3,6	;RP1=1, select bank3
  5090  1366  00D7               	movwf	(___fltol@f1+1)^(0+384)
  5091  1367  1303               	bcf	3,6	;RP1=0, select bank1
  5092  1368  0847               	movf	?___flmul^(0+128),w
  5093  1369  1703               	bsf	3,6	;RP1=1, select bank3
  5094  136A  00D6               	movwf	___fltol@f1^(0+384)
  5095  136B  2783               	fcall	___fltol
  5096  136C  0857               	movf	(?___fltol+1)^(0+384),w
  5097  136D  00EA               	movwf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384)
  5098  136E  0856               	movf	?___fltol^(0+384),w
  5099  136F  00E9               	movwf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384)
  5100                           
  5101                           ;CCP.c: 213:  (CCPR2L =((tbyte)(DUTY_VALUE >>2))); ( CCP2CON =((CCP2CON & 0b11001111)| (
      +                          (DUTY_VALUE&0x0003)<<4)));
  5102  1370  086A               	movf	(CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE+1)^(0+384),w
  5103  1371  00E3               	movwf	(??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)+1)
  5104  1372  0869               	movf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  5105  1373  00E2               	movwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)
  5106  1374  1003               	clrc
  5107  1375  0CE3               	rrf	(??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  5108  1376  0CE2               	rrf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),f
  5109  1377  1003               	clrc
  5110  1378  0CE3               	rrf	(??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)+1),f
  5111  1379  0CE2               	rrf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),f
  5112  137A  0862               	movf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),w
  5113  137B  1283               	bcf	3,5	;RP0=0, select bank0
  5114  137C  1303               	bcf	3,6	;RP1=0, select bank0
  5115  137D  009B               	movwf	27	;volatile
  5116  137E  1683               	bsf	3,5	;RP0=1, select bank3
  5117  137F  1703               	bsf	3,6	;RP1=1, select bank3
  5118  1380  0869               	movf	CCP2_PWM_DUTY_CYCLE_LOAD@DUTY_VALUE^(0+384),w
  5119  1381  3903               	andlw	3
  5120  1382  00E2               	movwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)
  5121  1383  0E62               	swapf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),w
  5122  1384  39F0               	andlw	240
  5123  1385  00E2               	movwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384)
  5124  1386  1283               	bcf	3,5	;RP0=0, select bank0
  5125  1387  1303               	bcf	3,6	;RP1=0, select bank0
  5126  1388  081D               	movf	29,w	;volatile
  5127  1389  39CF               	andlw	207
  5128  138A  1683               	bsf	3,5	;RP0=1, select bank3
  5129  138B  1703               	bsf	3,6	;RP1=1, select bank3
  5130  138C  0462               	iorwf	??_CCP2_PWM_DUTY_CYCLE_LOAD^(0+384),w
  5131  138D  1283               	bcf	3,5	;RP0=0, select bank0
  5132  138E  1303               	bcf	3,6	;RP1=0, select bank0
  5133  138F  009D               	movwf	29	;volatile
  5134  1390  0008               	return
  5135  1391                     __end_of_CCP2_PWM_DUTY_CYCLE_LOAD:	
  5136  1391                     __ptext24:	
  5137 ;; *************** function ___flmul *****************
  5138 ;; Defined at:
  5139 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcmul.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  b               4   39[BANK1 ] long 
  5142 ;;  a               4   43[BANK1 ] long 
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;  prod            4   58[BANK1 ] struct .
  5145 ;;  grs             4   53[BANK1 ] unsigned long 
  5146 ;;  temp            2   62[BANK1 ] struct .
  5147 ;;  bexp            1   57[BANK1 ] unsigned char 
  5148 ;;  aexp            1   52[BANK1 ] unsigned char 
  5149 ;;  sign            1   51[BANK1 ] unsigned char 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  4   39[BANK1 ] unsigned char 
  5152 ;; Registers used:
  5153 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5154 ;; Tracked objects:
  5155 ;;		On entry : 300/100
  5156 ;;		On exit  : 300/100
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5159 ;;      Params:         0       0       8       0       0
  5160 ;;      Locals:         0       0      13       0       0
  5161 ;;      Temps:          0       0       4       0       0
  5162 ;;      Totals:         0       0      25       0       0
  5163 ;;Total ram usage:       25 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:   11
  5166 ;; This function calls:
  5167 ;;		__Umul8_16
  5168 ;; This function is called by:
  5169 ;;		_CCP_PWM_PERIOD_LOAD
  5170 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  5171 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           
  5176                           ;psect for function ___flmul
  5177  1391                     ___flmul:	
  5178                           
  5179                           ;incstack = 0
  5180 ;; hardware stack exceeded
  5181                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5182  1391  084A               	movf	(___flmul@b^(0+128)+3),w
  5183  1392  00D3               	movwf	___flmul@sign^(0+128)
  5184  1393  3080               	movlw	128
  5185  1394  05D3               	andwf	___flmul@sign^(0+128),f
  5186  1395  1003               	clrc
  5187  1396  0D4A               	rlf	(___flmul@b^(0+128)+3),w
  5188  1397  00D9               	movwf	___flmul@bexp^(0+128)
  5189  1398  1BC9               	btfsc	(___flmul@b^(0+128)+2),7
  5190  1399  1459               	bsf	___flmul@bexp^(0+128),0
  5191  139A  0859               	movf	___flmul@bexp^(0+128),w
  5192  139B  1903               	btfsc	3,2
  5193  139C  2BA5               	goto	l1412
  5194  139D  0F59               	incfsz	___flmul@bexp^(0+128),w
  5195  139E  2BA3               	goto	l1413
  5196  139F  01C7               	clrf	___flmul@b^(0+128)
  5197  13A0  01C8               	clrf	(___flmul@b+1)^(0+128)
  5198  13A1  01C9               	clrf	(___flmul@b+2)^(0+128)
  5199  13A2  01CA               	clrf	(___flmul@b+3)^(0+128)
  5200  13A3                     l1413:	
  5201  13A3  17C9               	bsf	(___flmul@b^(0+128)+2),7
  5202  13A4  2BA9               	goto	l5328
  5203  13A5                     l1412:	
  5204  13A5  01C7               	clrf	___flmul@b^(0+128)
  5205  13A6  01C8               	clrf	(___flmul@b+1)^(0+128)
  5206  13A7  01C9               	clrf	(___flmul@b+2)^(0+128)
  5207  13A8  01CA               	clrf	(___flmul@b+3)^(0+128)
  5208  13A9                     l5328:	
  5209  13A9  084E               	movf	(___flmul@a^(0+128)+3),w
  5210  13AA  3980               	andlw	128
  5211  13AB  06D3               	xorwf	___flmul@sign^(0+128),f
  5212  13AC  1003               	clrc
  5213  13AD  0D4E               	rlf	(___flmul@a^(0+128)+3),w
  5214  13AE  00D4               	movwf	___flmul@aexp^(0+128)
  5215  13AF  1BCD               	btfsc	(___flmul@a^(0+128)+2),7
  5216  13B0  1454               	bsf	___flmul@aexp^(0+128),0
  5217  13B1  0854               	movf	___flmul@aexp^(0+128),w
  5218  13B2  1903               	btfsc	3,2
  5219  13B3  2BBC               	goto	l1416
  5220  13B4  0F54               	incfsz	___flmul@aexp^(0+128),w
  5221  13B5  2BBA               	goto	l1417
  5222  13B6  01CB               	clrf	___flmul@a^(0+128)
  5223  13B7  01CC               	clrf	(___flmul@a+1)^(0+128)
  5224  13B8  01CD               	clrf	(___flmul@a+2)^(0+128)
  5225  13B9  01CE               	clrf	(___flmul@a+3)^(0+128)
  5226  13BA                     l1417:	
  5227  13BA  17CD               	bsf	(___flmul@a^(0+128)+2),7
  5228  13BB  2BC0               	goto	l5340
  5229  13BC                     l1416:	
  5230  13BC  01CB               	clrf	___flmul@a^(0+128)
  5231  13BD  01CC               	clrf	(___flmul@a+1)^(0+128)
  5232  13BE  01CD               	clrf	(___flmul@a+2)^(0+128)
  5233  13BF  01CE               	clrf	(___flmul@a+3)^(0+128)
  5234  13C0                     l5340:	
  5235  13C0  0854               	movf	___flmul@aexp^(0+128),w
  5236  13C1  1D03               	btfss	3,2
  5237  13C2  0859               	movf	___flmul@bexp^(0+128),w
  5238  13C3  1D03               	btfss	3,2
  5239  13C4  2BCA               	goto	l5344
  5240  13C5  01C7               	clrf	?___flmul^(0+128)
  5241  13C6  01C8               	clrf	(?___flmul+1)^(0+128)
  5242  13C7  01C9               	clrf	(?___flmul+2)^(0+128)
  5243  13C8  01CA               	clrf	(?___flmul+3)^(0+128)
  5244  13C9  0008               	return
  5245  13CA                     l5344:	
  5246  13CA  0847               	movf	___flmul@b^(0+128),w
  5247  13CB  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5248  13CC  084D               	movf	(___flmul@a^(0+128)+2),w
  5249  13CD  2590  160A  118A   	fcall	__Umul8_16
  5250  13D0  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5251  13D1  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5252  13D2  0820               	movf	?__Umul8_16^(0+128),w
  5253  13D3  00DE               	movwf	___flmul@temp^(0+128)
  5254  13D4  00D5               	movwf	___flmul@grs^(0+128)
  5255  13D5  01D6               	clrf	(___flmul@grs+1)^(0+128)
  5256  13D6  01D7               	clrf	(___flmul@grs+2)^(0+128)
  5257  13D7  01D8               	clrf	(___flmul@grs+3)^(0+128)
  5258  13D8  085F               	movf	(___flmul@temp^(0+128)+1),w
  5259  13D9  00DA               	movwf	___flmul@prod^(0+128)
  5260  13DA  01DB               	clrf	(___flmul@prod+1)^(0+128)
  5261  13DB  01DC               	clrf	(___flmul@prod+2)^(0+128)
  5262  13DC  01DD               	clrf	(___flmul@prod+3)^(0+128)
  5263  13DD  0848               	movf	(___flmul@b^(0+128)+1),w
  5264  13DE  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5265  13DF  084C               	movf	(___flmul@a^(0+128)+1),w
  5266  13E0  2590  160A  118A   	fcall	__Umul8_16
  5267  13E3  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5268  13E4  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5269  13E5  0820               	movf	?__Umul8_16^(0+128),w
  5270  13E6  00DE               	movwf	___flmul@temp^(0+128)
  5271  13E7  07D5               	addwf	___flmul@grs^(0+128),f
  5272  13E8  3001               	movlw	1
  5273  13E9  1803               	skipnc
  5274  13EA  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5275  13EB  1803               	skipnc
  5276  13EC  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5277  13ED  1803               	skipnc
  5278  13EE  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5279  13EF  085F               	movf	(___flmul@temp^(0+128)+1),w
  5280  13F0  07DA               	addwf	___flmul@prod^(0+128),f
  5281  13F1  3001               	movlw	1
  5282  13F2  1803               	skipnc
  5283  13F3  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5284  13F4  1803               	skipnc
  5285  13F5  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5286  13F6  1803               	skipnc
  5287  13F7  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5288  13F8  0849               	movf	(___flmul@b^(0+128)+2),w
  5289  13F9  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5290  13FA  084B               	movf	___flmul@a^(0+128),w
  5291  13FB  2590  160A  118A   	fcall	__Umul8_16
  5292  13FE  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5293  13FF  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5294  1400  0820               	movf	?__Umul8_16^(0+128),w
  5295  1401  00DE               	movwf	___flmul@temp^(0+128)
  5296  1402  07D5               	addwf	___flmul@grs^(0+128),f
  5297  1403  3001               	movlw	1
  5298  1404  1803               	skipnc
  5299  1405  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5300  1406  1803               	skipnc
  5301  1407  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5302  1408  1803               	skipnc
  5303  1409  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5304  140A  085F               	movf	(___flmul@temp^(0+128)+1),w
  5305  140B  07DA               	addwf	___flmul@prod^(0+128),f
  5306  140C  3001               	movlw	1
  5307  140D  1803               	skipnc
  5308  140E  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5309  140F  1803               	skipnc
  5310  1410  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5311  1411  1803               	skipnc
  5312  1412  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5313  1413  0857               	movf	(___flmul@grs+2)^(0+128),w
  5314  1414  00D8               	movwf	(___flmul@grs+3)^(0+128)
  5315  1415  0856               	movf	(___flmul@grs+1)^(0+128),w
  5316  1416  00D7               	movwf	(___flmul@grs+2)^(0+128)
  5317  1417  0855               	movf	___flmul@grs^(0+128),w
  5318  1418  00D6               	movwf	(___flmul@grs+1)^(0+128)
  5319  1419  01D5               	clrf	___flmul@grs^(0+128)
  5320  141A  0848               	movf	(___flmul@b^(0+128)+1),w
  5321  141B  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5322  141C  084B               	movf	___flmul@a^(0+128),w
  5323  141D  2590  160A  118A   	fcall	__Umul8_16
  5324  1420  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5325  1421  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5326  1422  0820               	movf	?__Umul8_16^(0+128),w
  5327  1423  00DE               	movwf	___flmul@temp^(0+128)
  5328  1424  00CF               	movwf	??___flmul^(0+128)
  5329  1425  085F               	movf	(___flmul@temp+1)^(0+128),w
  5330  1426  00D0               	movwf	(??___flmul^(0+128)+1)
  5331  1427  01D1               	clrf	(??___flmul^(0+128)+2)
  5332  1428  01D2               	clrf	(??___flmul^(0+128)+3)
  5333  1429  084F               	movf	??___flmul^(0+128),w
  5334  142A  07D5               	addwf	___flmul@grs^(0+128),f
  5335  142B  0850               	movf	(??___flmul+1)^(0+128),w
  5336  142C  1103               	clrz
  5337  142D  1803               	skipnc
  5338  142E  3E01               	addlw	1
  5339  142F  1D03               	btfss	3,2
  5340  1430  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5341  1431  0851               	movf	(??___flmul+2)^(0+128),w
  5342  1432  1103               	clrz
  5343  1433  1803               	skipnc
  5344  1434  3E01               	addlw	1
  5345  1435  1D03               	btfss	3,2
  5346  1436  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5347  1437  0852               	movf	(??___flmul+3)^(0+128),w
  5348  1438  1103               	clrz
  5349  1439  1803               	skipnc
  5350  143A  3E01               	addlw	1
  5351  143B  1D03               	btfss	3,2
  5352  143C  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5353  143D  0847               	movf	___flmul@b^(0+128),w
  5354  143E  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5355  143F  084C               	movf	(___flmul@a^(0+128)+1),w
  5356  1440  2590  160A  118A   	fcall	__Umul8_16
  5357  1443  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5358  1444  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5359  1445  0820               	movf	?__Umul8_16^(0+128),w
  5360  1446  00DE               	movwf	___flmul@temp^(0+128)
  5361  1447  00CF               	movwf	??___flmul^(0+128)
  5362  1448  085F               	movf	(___flmul@temp+1)^(0+128),w
  5363  1449  00D0               	movwf	(??___flmul^(0+128)+1)
  5364  144A  01D1               	clrf	(??___flmul^(0+128)+2)
  5365  144B  01D2               	clrf	(??___flmul^(0+128)+3)
  5366  144C  084F               	movf	??___flmul^(0+128),w
  5367  144D  07D5               	addwf	___flmul@grs^(0+128),f
  5368  144E  0850               	movf	(??___flmul+1)^(0+128),w
  5369  144F  1103               	clrz
  5370  1450  1803               	skipnc
  5371  1451  3E01               	addlw	1
  5372  1452  1D03               	btfss	3,2
  5373  1453  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5374  1454  0851               	movf	(??___flmul+2)^(0+128),w
  5375  1455  1103               	clrz
  5376  1456  1803               	skipnc
  5377  1457  3E01               	addlw	1
  5378  1458  1D03               	btfss	3,2
  5379  1459  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5380  145A  0852               	movf	(??___flmul+3)^(0+128),w
  5381  145B  1103               	clrz
  5382  145C  1803               	skipnc
  5383  145D  3E01               	addlw	1
  5384  145E  1D03               	btfss	3,2
  5385  145F  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5386  1460  0857               	movf	(___flmul@grs+2)^(0+128),w
  5387  1461  00D8               	movwf	(___flmul@grs+3)^(0+128)
  5388  1462  0856               	movf	(___flmul@grs+1)^(0+128),w
  5389  1463  00D7               	movwf	(___flmul@grs+2)^(0+128)
  5390  1464  0855               	movf	___flmul@grs^(0+128),w
  5391  1465  00D6               	movwf	(___flmul@grs+1)^(0+128)
  5392  1466  01D5               	clrf	___flmul@grs^(0+128)
  5393  1467  0847               	movf	___flmul@b^(0+128),w
  5394  1468  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5395  1469  084B               	movf	___flmul@a^(0+128),w
  5396  146A  2590  160A  118A   	fcall	__Umul8_16
  5397  146D  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5398  146E  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5399  146F  0820               	movf	?__Umul8_16^(0+128),w
  5400  1470  00DE               	movwf	___flmul@temp^(0+128)
  5401  1471  00CF               	movwf	??___flmul^(0+128)
  5402  1472  085F               	movf	(___flmul@temp+1)^(0+128),w
  5403  1473  00D0               	movwf	(??___flmul^(0+128)+1)
  5404  1474  01D1               	clrf	(??___flmul^(0+128)+2)
  5405  1475  01D2               	clrf	(??___flmul^(0+128)+3)
  5406  1476  084F               	movf	??___flmul^(0+128),w
  5407  1477  07D5               	addwf	___flmul@grs^(0+128),f
  5408  1478  0850               	movf	(??___flmul+1)^(0+128),w
  5409  1479  1103               	clrz
  5410  147A  1803               	skipnc
  5411  147B  3E01               	addlw	1
  5412  147C  1D03               	btfss	3,2
  5413  147D  07D6               	addwf	(___flmul@grs+1)^(0+128),f
  5414  147E  0851               	movf	(??___flmul+2)^(0+128),w
  5415  147F  1103               	clrz
  5416  1480  1803               	skipnc
  5417  1481  3E01               	addlw	1
  5418  1482  1D03               	btfss	3,2
  5419  1483  07D7               	addwf	(___flmul@grs+2)^(0+128),f
  5420  1484  0852               	movf	(??___flmul+3)^(0+128),w
  5421  1485  1103               	clrz
  5422  1486  1803               	skipnc
  5423  1487  3E01               	addlw	1
  5424  1488  1D03               	btfss	3,2
  5425  1489  07D8               	addwf	(___flmul@grs+3)^(0+128),f
  5426  148A  0848               	movf	(___flmul@b^(0+128)+1),w
  5427  148B  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5428  148C  084D               	movf	(___flmul@a^(0+128)+2),w
  5429  148D  2590  160A  118A   	fcall	__Umul8_16
  5430  1490  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5431  1491  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5432  1492  0820               	movf	?__Umul8_16^(0+128),w
  5433  1493  00DE               	movwf	___flmul@temp^(0+128)
  5434  1494  00CF               	movwf	??___flmul^(0+128)
  5435  1495  085F               	movf	(___flmul@temp+1)^(0+128),w
  5436  1496  00D0               	movwf	(??___flmul^(0+128)+1)
  5437  1497  01D1               	clrf	(??___flmul^(0+128)+2)
  5438  1498  01D2               	clrf	(??___flmul^(0+128)+3)
  5439  1499  084F               	movf	??___flmul^(0+128),w
  5440  149A  07DA               	addwf	___flmul@prod^(0+128),f
  5441  149B  0850               	movf	(??___flmul+1)^(0+128),w
  5442  149C  1103               	clrz
  5443  149D  1803               	skipnc
  5444  149E  3E01               	addlw	1
  5445  149F  1D03               	btfss	3,2
  5446  14A0  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5447  14A1  0851               	movf	(??___flmul+2)^(0+128),w
  5448  14A2  1103               	clrz
  5449  14A3  1803               	skipnc
  5450  14A4  3E01               	addlw	1
  5451  14A5  1D03               	btfss	3,2
  5452  14A6  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5453  14A7  0852               	movf	(??___flmul+3)^(0+128),w
  5454  14A8  1103               	clrz
  5455  14A9  1803               	skipnc
  5456  14AA  3E01               	addlw	1
  5457  14AB  1D03               	btfss	3,2
  5458  14AC  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5459  14AD  0849               	movf	(___flmul@b^(0+128)+2),w
  5460  14AE  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5461  14AF  084C               	movf	(___flmul@a^(0+128)+1),w
  5462  14B0  2590  160A  118A   	fcall	__Umul8_16
  5463  14B3  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5464  14B4  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5465  14B5  0820               	movf	?__Umul8_16^(0+128),w
  5466  14B6  00DE               	movwf	___flmul@temp^(0+128)
  5467  14B7  00CF               	movwf	??___flmul^(0+128)
  5468  14B8  085F               	movf	(___flmul@temp+1)^(0+128),w
  5469  14B9  00D0               	movwf	(??___flmul^(0+128)+1)
  5470  14BA  01D1               	clrf	(??___flmul^(0+128)+2)
  5471  14BB  01D2               	clrf	(??___flmul^(0+128)+3)
  5472  14BC  084F               	movf	??___flmul^(0+128),w
  5473  14BD  07DA               	addwf	___flmul@prod^(0+128),f
  5474  14BE  0850               	movf	(??___flmul+1)^(0+128),w
  5475  14BF  1103               	clrz
  5476  14C0  1803               	skipnc
  5477  14C1  3E01               	addlw	1
  5478  14C2  1D03               	btfss	3,2
  5479  14C3  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5480  14C4  0851               	movf	(??___flmul+2)^(0+128),w
  5481  14C5  1103               	clrz
  5482  14C6  1803               	skipnc
  5483  14C7  3E01               	addlw	1
  5484  14C8  1D03               	btfss	3,2
  5485  14C9  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5486  14CA  0852               	movf	(??___flmul+3)^(0+128),w
  5487  14CB  1103               	clrz
  5488  14CC  1803               	skipnc
  5489  14CD  3E01               	addlw	1
  5490  14CE  1D03               	btfss	3,2
  5491  14CF  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5492  14D0  0849               	movf	(___flmul@b^(0+128)+2),w
  5493  14D1  00A0               	movwf	__Umul8_16@multiplicand^(0+128)
  5494  14D2  084D               	movf	(___flmul@a^(0+128)+2),w
  5495  14D3  2590  160A  118A   	fcall	__Umul8_16
  5496  14D6  0821               	movf	(?__Umul8_16+1)^(0+128),w
  5497  14D7  00DF               	movwf	(___flmul@temp+1)^(0+128)
  5498  14D8  0820               	movf	?__Umul8_16^(0+128),w
  5499  14D9  00DE               	movwf	___flmul@temp^(0+128)
  5500  14DA  00CF               	movwf	??___flmul^(0+128)
  5501  14DB  085F               	movf	(___flmul@temp+1)^(0+128),w
  5502  14DC  00D0               	movwf	(??___flmul^(0+128)+1)
  5503  14DD  01D1               	clrf	(??___flmul^(0+128)+2)
  5504  14DE  01D2               	clrf	(??___flmul^(0+128)+3)
  5505  14DF  0851               	movf	(??___flmul^(0+128)+2),w
  5506  14E0  00D2               	movwf	(??___flmul^(0+128)+3)
  5507  14E1  0850               	movf	(??___flmul^(0+128)+1),w
  5508  14E2  00D1               	movwf	(??___flmul^(0+128)+2)
  5509  14E3  084F               	movf	??___flmul^(0+128),w
  5510  14E4  00D0               	movwf	(??___flmul^(0+128)+1)
  5511  14E5  01CF               	clrf	??___flmul^(0+128)
  5512  14E6  084F               	movf	??___flmul^(0+128),w
  5513  14E7  07DA               	addwf	___flmul@prod^(0+128),f
  5514  14E8  0850               	movf	(??___flmul+1)^(0+128),w
  5515  14E9  1103               	clrz
  5516  14EA  1803               	skipnc
  5517  14EB  3E01               	addlw	1
  5518  14EC  1D03               	btfss	3,2
  5519  14ED  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5520  14EE  0851               	movf	(??___flmul+2)^(0+128),w
  5521  14EF  1103               	clrz
  5522  14F0  1803               	skipnc
  5523  14F1  3E01               	addlw	1
  5524  14F2  1D03               	btfss	3,2
  5525  14F3  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5526  14F4  0852               	movf	(??___flmul+3)^(0+128),w
  5527  14F5  1103               	clrz
  5528  14F6  1803               	skipnc
  5529  14F7  3E01               	addlw	1
  5530  14F8  1D03               	btfss	3,2
  5531  14F9  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5532  14FA  0858               	movf	(___flmul@grs^(0+128)+3),w
  5533  14FB  07DA               	addwf	___flmul@prod^(0+128),f
  5534  14FC  3001               	movlw	1
  5535  14FD  1803               	skipnc
  5536  14FE  07DB               	addwf	(___flmul@prod+1)^(0+128),f
  5537  14FF  1803               	skipnc
  5538  1500  07DC               	addwf	(___flmul@prod+2)^(0+128),f
  5539  1501  1803               	skipnc
  5540  1502  07DD               	addwf	(___flmul@prod+3)^(0+128),f
  5541  1503  0857               	movf	(___flmul@grs+2)^(0+128),w
  5542  1504  00D8               	movwf	(___flmul@grs+3)^(0+128)
  5543  1505  0856               	movf	(___flmul@grs+1)^(0+128),w
  5544  1506  00D7               	movwf	(___flmul@grs+2)^(0+128)
  5545  1507  0855               	movf	___flmul@grs^(0+128),w
  5546  1508  00D6               	movwf	(___flmul@grs+1)^(0+128)
  5547  1509  01D5               	clrf	___flmul@grs^(0+128)
  5548  150A  0859               	movf	___flmul@bexp^(0+128),w
  5549  150B  00DE               	movwf	___flmul@temp^(0+128)
  5550  150C  01DF               	clrf	(___flmul@temp+1)^(0+128)
  5551  150D  0854               	movf	___flmul@aexp^(0+128),w
  5552  150E  07DE               	addwf	___flmul@temp^(0+128),f
  5553  150F  1803               	skipnc
  5554  1510  0ADF               	incf	(___flmul@temp+1)^(0+128),f
  5555  1511  3082               	movlw	-126
  5556  1512                     L2:	
  5557  1512  07DE               	addwf	___flmul@temp^(0+128),f
  5558  1513  1C03               	skipc
  5559  1514  03DF               	decf	(___flmul@temp+1)^(0+128),f
  5560  1515  1BDC               	btfsc	(___flmul@prod+2)^(0+128),7
  5561  1516  2D25               	goto	l5392
  5562  1517  1003               	clrc
  5563  1518  0DDA               	rlf	___flmul@prod^(0+128),f
  5564  1519  0DDB               	rlf	(___flmul@prod+1)^(0+128),f
  5565  151A  0DDC               	rlf	(___flmul@prod+2)^(0+128),f
  5566  151B  0DDD               	rlf	(___flmul@prod+3)^(0+128),f
  5567  151C  1BD8               	btfsc	(___flmul@grs+3)^(0+128),7
  5568  151D  145A               	bsf	___flmul@prod^(0+128),0
  5569  151E  30FF               	movlw	-1
  5570  151F  1003               	clrc
  5571  1520  0DD5               	rlf	___flmul@grs^(0+128),f
  5572  1521  0DD6               	rlf	(___flmul@grs+1)^(0+128),f
  5573  1522  0DD7               	rlf	(___flmul@grs+2)^(0+128),f
  5574  1523  0DD8               	rlf	(___flmul@grs+3)^(0+128),f
  5575  1524  2D12               	goto	L2
  5576  1525                     l5392:	
  5577  1525  01D4               	clrf	___flmul@aexp^(0+128)
  5578  1526  1FD8               	btfss	(___flmul@grs+3)^(0+128),7
  5579  1527  2D3B               	goto	l5402
  5580  1528  0855               	movf	___flmul@grs^(0+128),w
  5581  1529  00CF               	movwf	??___flmul^(0+128)
  5582  152A  0856               	movf	(___flmul@grs+1)^(0+128),w
  5583  152B  00D0               	movwf	(??___flmul^(0+128)+1)
  5584  152C  0857               	movf	(___flmul@grs+2)^(0+128),w
  5585  152D  00D1               	movwf	(??___flmul^(0+128)+2)
  5586  152E  307F               	movlw	127
  5587  152F  0558               	andwf	(___flmul@grs+3)^(0+128),w
  5588  1530  00D2               	movwf	(??___flmul^(0+128)+3)
  5589  1531  0852               	movf	(??___flmul+3)^(0+128),w
  5590  1532  0451               	iorwf	(??___flmul+2)^(0+128),w
  5591  1533  0450               	iorwf	(??___flmul+1)^(0+128),w
  5592  1534  044F               	iorwf	??___flmul^(0+128),w
  5593  1535  1903               	skipnz
  5594  1536  185A               	btfsc	___flmul@prod^(0+128),0
  5595  1537  2D39               	goto	l5398
  5596  1538  2D3B               	goto	l5402
  5597  1539                     l5398:	
  5598  1539  01D4               	clrf	___flmul@aexp^(0+128)
  5599  153A  0AD4               	incf	___flmul@aexp^(0+128),f
  5600  153B                     l5402:	
  5601  153B  0854               	movf	___flmul@aexp^(0+128),w
  5602  153C  1903               	btfsc	3,2
  5603  153D  2D4F               	goto	l5412
  5604  153E  0ADA               	incf	___flmul@prod^(0+128),f
  5605  153F  1903               	skipnz
  5606  1540  0ADB               	incf	(___flmul@prod+1)^(0+128),f
  5607  1541  1903               	skipnz
  5608  1542  0ADC               	incf	(___flmul@prod+2)^(0+128),f
  5609  1543  1903               	skipnz
  5610  1544  0ADD               	incf	(___flmul@prod+3)^(0+128),f
  5611  1545  1C5D               	btfss	(___flmul@prod+3)^(0+128),0
  5612  1546  2D4F               	goto	l5412
  5613  1547  0D5D               	rlf	(___flmul@prod+3)^(0+128),w
  5614  1548  0CDD               	rrf	(___flmul@prod+3)^(0+128),f
  5615  1549  0CDC               	rrf	(___flmul@prod+2)^(0+128),f
  5616  154A  0CDB               	rrf	(___flmul@prod+1)^(0+128),f
  5617  154B  0CDA               	rrf	___flmul@prod^(0+128),f
  5618  154C  0ADE               	incf	___flmul@temp^(0+128),f
  5619  154D  1903               	skipnz
  5620  154E  0ADF               	incf	(___flmul@temp+1)^(0+128),f
  5621  154F                     l5412:	
  5622  154F  085F               	movf	(___flmul@temp+1)^(0+128),w
  5623  1550  3A80               	xorlw	128
  5624  1551  00FF               	movwf	127
  5625  1552  3080               	movlw	128
  5626  1553  027F               	subwf	127,w
  5627  1554  1D03               	skipz
  5628  1555  2D58               	goto	u5325
  5629  1556  30FF               	movlw	255
  5630  1557  025E               	subwf	___flmul@temp^(0+128),w
  5631  1558                     u5325:	
  5632  1558  1C03               	skipc
  5633  1559  2D63               	goto	l5416
  5634  155A  307F               	movlw	127
  5635  155B  1683               	bsf	3,5	;RP0=1, select bank1
  5636  155C  1303               	bcf	3,6	;RP1=0, select bank1
  5637  155D  00DD               	movwf	(___flmul@prod+3)^(0+128)
  5638  155E  3080               	movlw	128
  5639  155F  00DC               	movwf	(___flmul@prod+2)^(0+128)
  5640  1560  01DB               	clrf	(___flmul@prod+1)^(0+128)
  5641  1561  01DA               	clrf	___flmul@prod^(0+128)
  5642  1562  2D85               	goto	l1434
  5643  1563                     l5416:	
  5644  1563  1683               	bsf	3,5	;RP0=1, select bank1
  5645  1564  1303               	bcf	3,6	;RP1=0, select bank1
  5646  1565  085F               	movf	(___flmul@temp+1)^(0+128),w
  5647  1566  3A80               	xorlw	128
  5648  1567  00FF               	movwf	127
  5649  1568  3080               	movlw	128
  5650  1569  027F               	subwf	127,w
  5651  156A  1D03               	skipz
  5652  156B  2D6E               	goto	u5335
  5653  156C  3001               	movlw	1
  5654  156D  025E               	subwf	___flmul@temp^(0+128),w
  5655  156E                     u5335:	
  5656  156E  1803               	skipnc
  5657  156F  2D78               	goto	l5422
  5658  1570  1683               	bsf	3,5	;RP0=1, select bank1
  5659  1571  1303               	bcf	3,6	;RP1=0, select bank1
  5660  1572  01DA               	clrf	___flmul@prod^(0+128)
  5661  1573  01DB               	clrf	(___flmul@prod+1)^(0+128)
  5662  1574  01DC               	clrf	(___flmul@prod+2)^(0+128)
  5663  1575  01DD               	clrf	(___flmul@prod+3)^(0+128)
  5664  1576  01D3               	clrf	___flmul@sign^(0+128)
  5665  1577  2D85               	goto	l1434
  5666  1578                     l5422:	
  5667  1578  1683               	bsf	3,5	;RP0=1, select bank1
  5668  1579  1303               	bcf	3,6	;RP1=0, select bank1
  5669  157A  085E               	movf	___flmul@temp^(0+128),w
  5670  157B  00D9               	movwf	___flmul@bexp^(0+128)
  5671  157C  307F               	movlw	127
  5672  157D  05DC               	andwf	(___flmul@prod+2)^(0+128),f
  5673  157E  3000               	movlw	0
  5674  157F  01DD               	clrf	(___flmul@prod+3)^(0+128)
  5675  1580  1859               	btfsc	___flmul@bexp^(0+128),0
  5676  1581  17DC               	bsf	(___flmul@prod^(0+128)+2),7
  5677  1582  1003               	clrc
  5678  1583  0C59               	rrf	___flmul@bexp^(0+128),w
  5679  1584  00DD               	movwf	(___flmul@prod^(0+128)+3)
  5680  1585                     l1434:	
  5681  1585  0853               	movf	___flmul@sign^(0+128),w
  5682  1586  04DD               	iorwf	(___flmul@prod^(0+128)+3),f
  5683  1587  085D               	movf	(___flmul@prod+3)^(0+128),w
  5684  1588  00CA               	movwf	(?___flmul+3)^(0+128)
  5685  1589  085C               	movf	(___flmul@prod+2)^(0+128),w
  5686  158A  00C9               	movwf	(?___flmul+2)^(0+128)
  5687  158B  085B               	movf	(___flmul@prod+1)^(0+128),w
  5688  158C  00C8               	movwf	(?___flmul+1)^(0+128)
  5689  158D  085A               	movf	___flmul@prod^(0+128),w
  5690  158E  00C7               	movwf	?___flmul^(0+128)
  5691  158F  0008               	return
  5692  1590                     __end_of___flmul:	
  5693  1590                     __ptext25:	
  5694 ;; *************** function __Umul8_16 *****************
  5695 ;; Defined at:
  5696 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8_16.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;  multiplier      1    wreg     unsigned char 
  5699 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;  multiplier      1    5[BANK1 ] unsigned char 
  5702 ;;  word_mpld       2    6[BANK1 ] unsigned int 
  5703 ;;  product         2    3[BANK1 ] unsigned int 
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  2    0[BANK1 ] unsigned int 
  5706 ;; Registers used:
  5707 ;;		wreg, status,2, status,0
  5708 ;; Tracked objects:
  5709 ;;		On entry : 300/100
  5710 ;;		On exit  : 300/100
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5713 ;;      Params:         0       0       3       0       0
  5714 ;;      Locals:         0       0       5       0       0
  5715 ;;      Temps:          0       0       0       0       0
  5716 ;;      Totals:         0       0       8       0       0
  5717 ;;Total ram usage:        8 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:   10
  5720 ;; This function calls:
  5721 ;;		Nothing
  5722 ;; This function is called by:
  5723 ;;		___flmul
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           
  5728                           ;psect for function __Umul8_16
  5729  1590                     __Umul8_16:	
  5730                           
  5731                           ;incstack = 0
  5732 ;; hardware stack exceeded
  5733                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  5734                           ;__Umul8_16@multiplier stored from wreg
  5735  1590  00A5               	movwf	__Umul8_16@multiplier^(0+128)
  5736  1591  01A3               	clrf	__Umul8_16@product^(0+128)
  5737  1592  01A4               	clrf	(__Umul8_16@product+1)^(0+128)
  5738  1593  0820               	movf	__Umul8_16@multiplicand^(0+128),w
  5739  1594  00A6               	movwf	__Umul8_16@word_mpld^(0+128)
  5740  1595  01A7               	clrf	(__Umul8_16@word_mpld+1)^(0+128)
  5741  1596  1C25               	btfss	__Umul8_16@multiplier^(0+128),0
  5742  1597  2D9E               	goto	l4658
  5743  1598  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5744  1599  07A3               	addwf	__Umul8_16@product^(0+128),f
  5745  159A  1803               	skipnc
  5746  159B  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5747  159C  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5748  159D  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5749  159E                     l4658:	
  5750  159E  1003               	clrc
  5751  159F  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5752  15A0  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5753  15A1  1CA5               	btfss	__Umul8_16@multiplier^(0+128),1
  5754  15A2  2DA9               	goto	l4664
  5755  15A3  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5756  15A4  07A3               	addwf	__Umul8_16@product^(0+128),f
  5757  15A5  1803               	skipnc
  5758  15A6  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5759  15A7  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5760  15A8  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5761  15A9                     l4664:	
  5762  15A9  1003               	clrc
  5763  15AA  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5764  15AB  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5765  15AC  1D25               	btfss	__Umul8_16@multiplier^(0+128),2
  5766  15AD  2DB4               	goto	l4670
  5767  15AE  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5768  15AF  07A3               	addwf	__Umul8_16@product^(0+128),f
  5769  15B0  1803               	skipnc
  5770  15B1  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5771  15B2  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5772  15B3  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5773  15B4                     l4670:	
  5774  15B4  1003               	clrc
  5775  15B5  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5776  15B6  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5777  15B7  1DA5               	btfss	__Umul8_16@multiplier^(0+128),3
  5778  15B8  2DBF               	goto	l4676
  5779  15B9  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5780  15BA  07A3               	addwf	__Umul8_16@product^(0+128),f
  5781  15BB  1803               	skipnc
  5782  15BC  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5783  15BD  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5784  15BE  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5785  15BF                     l4676:	
  5786  15BF  1003               	clrc
  5787  15C0  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5788  15C1  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5789  15C2  1E25               	btfss	__Umul8_16@multiplier^(0+128),4
  5790  15C3  2DCA               	goto	l4682
  5791  15C4  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5792  15C5  07A3               	addwf	__Umul8_16@product^(0+128),f
  5793  15C6  1803               	skipnc
  5794  15C7  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5795  15C8  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5796  15C9  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5797  15CA                     l4682:	
  5798  15CA  1003               	clrc
  5799  15CB  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5800  15CC  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5801  15CD  1EA5               	btfss	__Umul8_16@multiplier^(0+128),5
  5802  15CE  2DD5               	goto	l4688
  5803  15CF  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5804  15D0  07A3               	addwf	__Umul8_16@product^(0+128),f
  5805  15D1  1803               	skipnc
  5806  15D2  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5807  15D3  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5808  15D4  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5809  15D5                     l4688:	
  5810  15D5  1003               	clrc
  5811  15D6  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5812  15D7  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5813  15D8  1F25               	btfss	__Umul8_16@multiplier^(0+128),6
  5814  15D9  2DE0               	goto	l4694
  5815  15DA  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5816  15DB  07A3               	addwf	__Umul8_16@product^(0+128),f
  5817  15DC  1803               	skipnc
  5818  15DD  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5819  15DE  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5820  15DF  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5821  15E0                     l4694:	
  5822  15E0  1003               	clrc
  5823  15E1  0DA6               	rlf	__Umul8_16@word_mpld^(0+128),f
  5824  15E2  0DA7               	rlf	(__Umul8_16@word_mpld+1)^(0+128),f
  5825  15E3  1FA5               	btfss	__Umul8_16@multiplier^(0+128),7
  5826  15E4  2DEB               	goto	l1499
  5827  15E5  0826               	movf	__Umul8_16@word_mpld^(0+128),w
  5828  15E6  07A3               	addwf	__Umul8_16@product^(0+128),f
  5829  15E7  1803               	skipnc
  5830  15E8  0AA4               	incf	(__Umul8_16@product+1)^(0+128),f
  5831  15E9  0827               	movf	(__Umul8_16@word_mpld+1)^(0+128),w
  5832  15EA  07A4               	addwf	(__Umul8_16@product+1)^(0+128),f
  5833  15EB                     l1499:	
  5834  15EB  0824               	movf	(__Umul8_16@product+1)^(0+128),w
  5835  15EC  00A1               	movwf	(?__Umul8_16+1)^(0+128)
  5836  15ED  0823               	movf	__Umul8_16@product^(0+128),w
  5837  15EE  00A0               	movwf	?__Umul8_16^(0+128)
  5838  15EF  0008               	return
  5839  15F0                     __end_of__Umul8_16:	
  5840  15F0                     __ptext22:	
  5841 ;; *************** function ___xxtofl *****************
  5842 ;; Defined at:
  5843 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\xxtofl.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;  sign            1    wreg     unsigned char 
  5846 ;;  val             4    0[BANK1 ] long 
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;  sign            1    8[BANK1 ] unsigned char 
  5849 ;;  arg             4   10[BANK1 ] unsigned long 
  5850 ;;  exp             1    9[BANK1 ] unsigned char 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  4    0[BANK1 ] unsigned char 
  5853 ;; Registers used:
  5854 ;;		wreg, status,2, status,0
  5855 ;; Tracked objects:
  5856 ;;		On entry : 300/100
  5857 ;;		On exit  : 300/100
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5860 ;;      Params:         0       0       4       0       0
  5861 ;;      Locals:         0       0       6       0       0
  5862 ;;      Temps:          0       0       4       0       0
  5863 ;;      Totals:         0       0      14       0       0
  5864 ;;Total ram usage:       14 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:   10
  5867 ;; This function calls:
  5868 ;;		Nothing
  5869 ;; This function is called by:
  5870 ;;		_CCP_PWM_PERIOD_LOAD
  5871 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  5872 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           
  5877                           ;psect for function ___xxtofl
  5878  15F0                     ___xxtofl:	
  5879                           
  5880                           ;incstack = 0
  5881 ;; hardware stack exceeded
  5882                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  5883                           ;___xxtofl@sign stored from wreg
  5884  15F0  00A8               	movwf	___xxtofl@sign^(0+128)
  5885  15F1  0828               	movf	___xxtofl@sign^(0+128),w
  5886  15F2  1D03               	btfss	3,2
  5887  15F3  1FA3               	btfss	(___xxtofl@val+3)^(0+128),7
  5888  15F4  2E05               	goto	l5440
  5889  15F5  0920               	comf	___xxtofl@val^(0+128),w
  5890  15F6  00AA               	movwf	___xxtofl@arg^(0+128)
  5891  15F7  0921               	comf	(___xxtofl@val^(0+128)+1),w
  5892  15F8  00AB               	movwf	(___xxtofl@arg+1)^(0+128)
  5893  15F9  0922               	comf	(___xxtofl@val^(0+128)+2),w
  5894  15FA  00AC               	movwf	(___xxtofl@arg+2)^(0+128)
  5895  15FB  0923               	comf	(___xxtofl@val^(0+128)+3),w
  5896  15FC  00AD               	movwf	(___xxtofl@arg+3)^(0+128)
  5897  15FD  0AAA               	incf	___xxtofl@arg^(0+128),f
  5898  15FE  1903               	skipnz
  5899  15FF  0AAB               	incf	(___xxtofl@arg+1)^(0+128),f
  5900  1600  1903               	skipnz
  5901  1601  0AAC               	incf	(___xxtofl@arg+2)^(0+128),f
  5902  1602  1903               	skipnz
  5903  1603  0AAD               	incf	(___xxtofl@arg+3)^(0+128),f
  5904  1604  2E0D               	goto	l1460
  5905  1605                     l5440:	
  5906  1605  0823               	movf	(___xxtofl@val+3)^(0+128),w
  5907  1606  00AD               	movwf	(___xxtofl@arg+3)^(0+128)
  5908  1607  0822               	movf	(___xxtofl@val+2)^(0+128),w
  5909  1608  00AC               	movwf	(___xxtofl@arg+2)^(0+128)
  5910  1609  0821               	movf	(___xxtofl@val+1)^(0+128),w
  5911  160A  00AB               	movwf	(___xxtofl@arg+1)^(0+128)
  5912  160B  0820               	movf	___xxtofl@val^(0+128),w
  5913  160C  00AA               	movwf	___xxtofl@arg^(0+128)
  5914  160D                     l1460:	
  5915  160D  0823               	movf	(___xxtofl@val+3)^(0+128),w
  5916  160E  0422               	iorwf	(___xxtofl@val+2)^(0+128),w
  5917  160F  0421               	iorwf	(___xxtofl@val+1)^(0+128),w
  5918  1610  0420               	iorwf	___xxtofl@val^(0+128),w
  5919  1611  1D03               	skipz
  5920  1612  2E18               	goto	l5444
  5921  1613  01A0               	clrf	?___xxtofl^(0+128)
  5922  1614  01A1               	clrf	(?___xxtofl+1)^(0+128)
  5923  1615  01A2               	clrf	(?___xxtofl+2)^(0+128)
  5924  1616  01A3               	clrf	(?___xxtofl+3)^(0+128)
  5925  1617  0008               	return
  5926  1618                     l5444:	
  5927  1618  3096               	movlw	150
  5928  1619  00A9               	movwf	___xxtofl@exp^(0+128)
  5929  161A                     l5448:	
  5930  161A  30FE               	movlw	254
  5931  161B  052D               	andwf	(___xxtofl@arg+3)^(0+128),w
  5932  161C  1903               	btfsc	3,2
  5933  161D  2E32               	goto	l5452
  5934  161E  0AA9               	incf	___xxtofl@exp^(0+128),f
  5935  161F  1003               	clrc
  5936  1620  0CAD               	rrf	(___xxtofl@arg+3)^(0+128),f
  5937  1621  0CAC               	rrf	(___xxtofl@arg+2)^(0+128),f
  5938  1622  0CAB               	rrf	(___xxtofl@arg+1)^(0+128),f
  5939  1623  0CAA               	rrf	___xxtofl@arg^(0+128),f
  5940  1624  2E1A               	goto	l5448
  5941  1625                     l5450:	
  5942  1625  0AA9               	incf	___xxtofl@exp^(0+128),f
  5943  1626  0AAA               	incf	___xxtofl@arg^(0+128),f
  5944  1627  1903               	skipnz
  5945  1628  0AAB               	incf	(___xxtofl@arg+1)^(0+128),f
  5946  1629  1903               	skipnz
  5947  162A  0AAC               	incf	(___xxtofl@arg+2)^(0+128),f
  5948  162B  1903               	skipnz
  5949  162C  0AAD               	incf	(___xxtofl@arg+3)^(0+128),f
  5950  162D  1003               	clrc
  5951  162E  0CAD               	rrf	(___xxtofl@arg+3)^(0+128),f
  5952  162F  0CAC               	rrf	(___xxtofl@arg+2)^(0+128),f
  5953  1630  0CAB               	rrf	(___xxtofl@arg+1)^(0+128),f
  5954  1631  0CAA               	rrf	___xxtofl@arg^(0+128),f
  5955  1632                     l5452:	
  5956  1632  30FF               	movlw	255
  5957  1633  052D               	andwf	(___xxtofl@arg+3)^(0+128),w
  5958  1634  1903               	btfsc	3,2
  5959  1635  2E41               	goto	l5456
  5960  1636  2E25               	goto	l5450
  5961  1637                     l5458:	
  5962  1637  3002               	movlw	2
  5963  1638  0229               	subwf	___xxtofl@exp^(0+128),w
  5964  1639  1C03               	btfss	3,0
  5965  163A  2E43               	goto	l1473
  5966  163B  03A9               	decf	___xxtofl@exp^(0+128),f
  5967  163C  1003               	clrc
  5968  163D  0DAA               	rlf	___xxtofl@arg^(0+128),f
  5969  163E  0DAB               	rlf	(___xxtofl@arg+1)^(0+128),f
  5970  163F  0DAC               	rlf	(___xxtofl@arg+2)^(0+128),f
  5971  1640  0DAD               	rlf	(___xxtofl@arg+3)^(0+128),f
  5972  1641                     l5456:	
  5973  1641  1FAC               	btfss	(___xxtofl@arg+2)^(0+128),7
  5974  1642  2E37               	goto	l5458
  5975  1643                     l1473:	
  5976  1643  1C29               	btfss	___xxtofl@exp^(0+128),0
  5977  1644  13AC               	bcf	(___xxtofl@arg^(0+128)+2),7
  5978  1645  1003               	clrc
  5979  1646  0CA9               	rrf	___xxtofl@exp^(0+128),f
  5980  1647  0829               	movf	___xxtofl@exp^(0+128),w
  5981  1648  00A7               	movwf	(??___xxtofl^(0+128)+3)
  5982  1649  01A6               	clrf	(??___xxtofl^(0+128)+2)
  5983  164A  01A5               	clrf	(??___xxtofl^(0+128)+1)
  5984  164B  01A4               	clrf	??___xxtofl^(0+128)
  5985  164C  0824               	movf	??___xxtofl^(0+128),w
  5986  164D  04AA               	iorwf	___xxtofl@arg^(0+128),f
  5987  164E  0825               	movf	(??___xxtofl+1)^(0+128),w
  5988  164F  04AB               	iorwf	(___xxtofl@arg+1)^(0+128),f
  5989  1650  0826               	movf	(??___xxtofl+2)^(0+128),w
  5990  1651  04AC               	iorwf	(___xxtofl@arg+2)^(0+128),f
  5991  1652  0827               	movf	(??___xxtofl+3)^(0+128),w
  5992  1653  04AD               	iorwf	(___xxtofl@arg+3)^(0+128),f
  5993  1654  0828               	movf	___xxtofl@sign^(0+128),w
  5994  1655  1D03               	btfss	3,2
  5995  1656  1FA3               	btfss	(___xxtofl@val+3)^(0+128),7
  5996  1657  2E59               	goto	l5470
  5997  1658  17AD               	bsf	(___xxtofl@arg^(0+128)+3),7
  5998  1659                     l5470:	
  5999  1659  082D               	movf	(___xxtofl@arg+3)^(0+128),w
  6000  165A  00A3               	movwf	(?___xxtofl+3)^(0+128)
  6001  165B  082C               	movf	(___xxtofl@arg+2)^(0+128),w
  6002  165C  00A2               	movwf	(?___xxtofl+2)^(0+128)
  6003  165D  082B               	movf	(___xxtofl@arg+1)^(0+128),w
  6004  165E  00A1               	movwf	(?___xxtofl+1)^(0+128)
  6005  165F  082A               	movf	___xxtofl@arg^(0+128),w
  6006  1660  00A0               	movwf	?___xxtofl^(0+128)
  6007  1661  0008               	return
  6008  1662                     __end_of___xxtofl:	
  6009  1662                     __ptext26:	
  6010 ;; *************** function ___fldiv *****************
  6011 ;; Defined at:
  6012 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sprcdiv.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  a               4   14[BANK1 ] unsigned int 
  6015 ;;  b               4   18[BANK1 ] unsigned int 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;  grs             4   33[BANK1 ] unsigned long 
  6018 ;;  rem             4   26[BANK1 ] unsigned long 
  6019 ;;  new_exp         2   31[BANK1 ] int 
  6020 ;;  aexp            1   38[BANK1 ] unsigned char 
  6021 ;;  bexp            1   37[BANK1 ] unsigned char 
  6022 ;;  sign            1   30[BANK1 ] unsigned char 
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  4   14[BANK1 ] unsigned char 
  6025 ;; Registers used:
  6026 ;;		wreg, status,2, status,0, btemp+1
  6027 ;; Tracked objects:
  6028 ;;		On entry : 300/100
  6029 ;;		On exit  : 300/100
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6032 ;;      Params:         0       0       8       0       0
  6033 ;;      Locals:         0       0      13       0       0
  6034 ;;      Temps:          0       0       4       0       0
  6035 ;;      Totals:         0       0      25       0       0
  6036 ;;Total ram usage:       25 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:   10
  6039 ;; This function calls:
  6040 ;;		Nothing
  6041 ;; This function is called by:
  6042 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  6043 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           
  6048                           ;psect for function ___fldiv
  6049  1662                     ___fldiv:	
  6050                           
  6051                           ;incstack = 0
  6052 ;; hardware stack exceeded
  6053                           ; Regs used in ___fldiv: [wreg+status,2+status,0+btemp+1]
  6054  1662  0835               	movf	(___fldiv@b^(0+128)+3),w
  6055  1663  00BE               	movwf	___fldiv@sign^(0+128)
  6056  1664  3080               	movlw	128
  6057  1665  05BE               	andwf	___fldiv@sign^(0+128),f
  6058  1666  1003               	clrc
  6059  1667  0D35               	rlf	(___fldiv@b^(0+128)+3),w
  6060  1668  00C5               	movwf	___fldiv@bexp^(0+128)
  6061  1669  1BB4               	btfsc	(___fldiv@b^(0+128)+2),7
  6062  166A  1445               	bsf	___fldiv@bexp^(0+128),0
  6063  166B  0845               	movf	___fldiv@bexp^(0+128),w
  6064  166C  1903               	btfsc	3,2
  6065  166D  2E77               	goto	l1376
  6066  166E  0F45               	incfsz	___fldiv@bexp^(0+128),w
  6067  166F  2E74               	goto	l1377
  6068  1670  01B2               	clrf	___fldiv@b^(0+128)
  6069  1671  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6070  1672  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6071  1673  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6072  1674                     l1377:	
  6073  1674  17B4               	bsf	(___fldiv@b^(0+128)+2),7
  6074  1675  01B5               	clrf	(___fldiv@b^(0+128)+3)
  6075  1676  2E7B               	goto	l5190
  6076  1677                     l1376:	
  6077  1677  01B2               	clrf	___fldiv@b^(0+128)
  6078  1678  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6079  1679  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6080  167A  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6081  167B                     l5190:	
  6082  167B  0831               	movf	(___fldiv@a^(0+128)+3),w
  6083  167C  3980               	andlw	128
  6084  167D  06BE               	xorwf	___fldiv@sign^(0+128),f
  6085  167E  1003               	clrc
  6086  167F  0D31               	rlf	(___fldiv@a^(0+128)+3),w
  6087  1680  00C6               	movwf	___fldiv@aexp^(0+128)
  6088  1681  1BB0               	btfsc	(___fldiv@a^(0+128)+2),7
  6089  1682  1446               	bsf	___fldiv@aexp^(0+128),0
  6090  1683  0846               	movf	___fldiv@aexp^(0+128),w
  6091  1684  1903               	btfsc	3,2
  6092  1685  2E8F               	goto	l1380
  6093  1686  0F46               	incfsz	___fldiv@aexp^(0+128),w
  6094  1687  2E8C               	goto	l1381
  6095  1688  01AE               	clrf	___fldiv@a^(0+128)
  6096  1689  01AF               	clrf	(___fldiv@a+1)^(0+128)
  6097  168A  01B0               	clrf	(___fldiv@a+2)^(0+128)
  6098  168B  01B1               	clrf	(___fldiv@a+3)^(0+128)
  6099  168C                     l1381:	
  6100  168C  17B0               	bsf	(___fldiv@a^(0+128)+2),7
  6101  168D  01B1               	clrf	(___fldiv@a^(0+128)+3)
  6102  168E  2E93               	goto	l5204
  6103  168F                     l1380:	
  6104  168F  01AE               	clrf	___fldiv@a^(0+128)
  6105  1690  01AF               	clrf	(___fldiv@a+1)^(0+128)
  6106  1691  01B0               	clrf	(___fldiv@a+2)^(0+128)
  6107  1692  01B1               	clrf	(___fldiv@a+3)^(0+128)
  6108  1693                     l5204:	
  6109  1693  0831               	movf	(___fldiv@a+3)^(0+128),w
  6110  1694  0430               	iorwf	(___fldiv@a+2)^(0+128),w
  6111  1695  042F               	iorwf	(___fldiv@a+1)^(0+128),w
  6112  1696  042E               	iorwf	___fldiv@a^(0+128),w
  6113  1697  1D03               	skipz
  6114  1698  2EAC               	goto	l5216
  6115  1699  3080               	movlw	128
  6116  169A  01B2               	clrf	___fldiv@b^(0+128)
  6117  169B  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6118  169C  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6119  169D  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6120  169E  04B4               	iorwf	(___fldiv@b^(0+128)+2),f
  6121  169F  307F               	movlw	127
  6122  16A0  04B5               	iorwf	((___fldiv@b+1)^(0+128)+2),f
  6123  16A1                     L3:	
  6124  16A1  083E               	movf	___fldiv@sign^(0+128),w
  6125  16A2  04B5               	iorwf	(___fldiv@b^(0+128)+3),f
  6126  16A3  0835               	movf	(___fldiv@b+3)^(0+128),w
  6127  16A4  00B1               	movwf	(?___fldiv+3)^(0+128)
  6128  16A5  0834               	movf	(___fldiv@b+2)^(0+128),w
  6129  16A6  00B0               	movwf	(?___fldiv+2)^(0+128)
  6130  16A7  0833               	movf	(___fldiv@b+1)^(0+128),w
  6131  16A8  00AF               	movwf	(?___fldiv+1)^(0+128)
  6132  16A9  0832               	movf	___fldiv@b^(0+128),w
  6133  16AA  00AE               	movwf	?___fldiv^(0+128)
  6134  16AB  0008               	return
  6135  16AC                     l5216:	
  6136  16AC  0845               	movf	___fldiv@bexp^(0+128),w
  6137  16AD  1D03               	btfss	3,2
  6138  16AE  2EB4               	goto	l5224
  6139  16AF  01AE               	clrf	?___fldiv^(0+128)
  6140  16B0  01AF               	clrf	(?___fldiv+1)^(0+128)
  6141  16B1  01B0               	clrf	(?___fldiv+2)^(0+128)
  6142  16B2  01B1               	clrf	(?___fldiv+3)^(0+128)
  6143  16B3  0008               	return
  6144  16B4                     l5224:	
  6145  16B4  0845               	movf	___fldiv@bexp^(0+128),w
  6146  16B5  00BF               	movwf	___fldiv@new_exp^(0+128)
  6147  16B6  01C0               	clrf	(___fldiv@new_exp+1)^(0+128)
  6148  16B7  0846               	movf	___fldiv@aexp^(0+128),w
  6149  16B8  02BF               	subwf	___fldiv@new_exp^(0+128),f
  6150  16B9  1C03               	skipc
  6151  16BA  03C0               	decf	(___fldiv@new_exp+1)^(0+128),f
  6152  16BB  307F               	movlw	127
  6153  16BC  07BF               	addwf	___fldiv@new_exp^(0+128),f
  6154  16BD  1803               	skipnc
  6155  16BE  0AC0               	incf	(___fldiv@new_exp+1)^(0+128),f
  6156  16BF  0835               	movf	(___fldiv@b+3)^(0+128),w
  6157  16C0  00BD               	movwf	(___fldiv@rem+3)^(0+128)
  6158  16C1  0834               	movf	(___fldiv@b+2)^(0+128),w
  6159  16C2  00BC               	movwf	(___fldiv@rem+2)^(0+128)
  6160  16C3  0833               	movf	(___fldiv@b+1)^(0+128),w
  6161  16C4  00BB               	movwf	(___fldiv@rem+1)^(0+128)
  6162  16C5  0832               	movf	___fldiv@b^(0+128),w
  6163  16C6  00BA               	movwf	___fldiv@rem^(0+128)
  6164  16C7  01B2               	clrf	___fldiv@b^(0+128)
  6165  16C8  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6166  16C9  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6167  16CA  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6168  16CB  01C1               	clrf	___fldiv@grs^(0+128)
  6169  16CC  01C2               	clrf	(___fldiv@grs+1)^(0+128)
  6170  16CD  01C3               	clrf	(___fldiv@grs+2)^(0+128)
  6171  16CE  01C4               	clrf	(___fldiv@grs+3)^(0+128)
  6172  16CF  01C6               	clrf	___fldiv@aexp^(0+128)
  6173  16D0                     l5250:	
  6174  16D0  301A               	movlw	26
  6175  16D1  0246               	subwf	___fldiv@aexp^(0+128),w
  6176  16D2  1803               	btfsc	3,0
  6177  16D3  2F09               	goto	l5252
  6178  16D4  0846               	movf	___fldiv@aexp^(0+128),w
  6179  16D5  1903               	btfsc	3,2
  6180  16D6  2EE8               	goto	l5242
  6181  16D7  1003               	clrc
  6182  16D8  0DBA               	rlf	___fldiv@rem^(0+128),f
  6183  16D9  0DBB               	rlf	(___fldiv@rem+1)^(0+128),f
  6184  16DA  0DBC               	rlf	(___fldiv@rem+2)^(0+128),f
  6185  16DB  0DBD               	rlf	(___fldiv@rem+3)^(0+128),f
  6186  16DC  1003               	clrc
  6187  16DD  0DB2               	rlf	___fldiv@b^(0+128),f
  6188  16DE  0DB3               	rlf	(___fldiv@b+1)^(0+128),f
  6189  16DF  0DB4               	rlf	(___fldiv@b+2)^(0+128),f
  6190  16E0  0DB5               	rlf	(___fldiv@b+3)^(0+128),f
  6191  16E1  1BC4               	btfsc	(___fldiv@grs+3)^(0+128),7
  6192  16E2  1432               	bsf	___fldiv@b^(0+128),0
  6193  16E3  1003               	clrc
  6194  16E4  0DC1               	rlf	___fldiv@grs^(0+128),f
  6195  16E5  0DC2               	rlf	(___fldiv@grs+1)^(0+128),f
  6196  16E6  0DC3               	rlf	(___fldiv@grs+2)^(0+128),f
  6197  16E7  0DC4               	rlf	(___fldiv@grs+3)^(0+128),f
  6198  16E8                     l5242:	
  6199  16E8  0831               	movf	(___fldiv@a+3)^(0+128),w
  6200  16E9  023D               	subwf	(___fldiv@rem+3)^(0+128),w
  6201  16EA  1D03               	skipz
  6202  16EB  2EF6               	goto	u4985
  6203  16EC  0830               	movf	(___fldiv@a+2)^(0+128),w
  6204  16ED  023C               	subwf	(___fldiv@rem+2)^(0+128),w
  6205  16EE  1D03               	skipz
  6206  16EF  2EF6               	goto	u4985
  6207  16F0  082F               	movf	(___fldiv@a+1)^(0+128),w
  6208  16F1  023B               	subwf	(___fldiv@rem+1)^(0+128),w
  6209  16F2  1D03               	skipz
  6210  16F3  2EF6               	goto	u4985
  6211  16F4  082E               	movf	___fldiv@a^(0+128),w
  6212  16F5  023A               	subwf	___fldiv@rem^(0+128),w
  6213  16F6                     u4985:	
  6214  16F6  1C03               	skipc
  6215  16F7  2F07               	goto	l5248
  6216  16F8  1744               	bsf	(___fldiv@grs^(0+128)+3),6
  6217  16F9  082E               	movf	___fldiv@a^(0+128),w
  6218  16FA  02BA               	subwf	___fldiv@rem^(0+128),f
  6219  16FB  082F               	movf	(___fldiv@a+1)^(0+128),w
  6220  16FC  1C03               	skipc
  6221  16FD  0F2F               	incfsz	(___fldiv@a+1)^(0+128),w
  6222  16FE  02BB               	subwf	(___fldiv@rem+1)^(0+128),f
  6223  16FF  0830               	movf	(___fldiv@a+2)^(0+128),w
  6224  1700  1C03               	skipc
  6225  1701  0F30               	incfsz	(___fldiv@a+2)^(0+128),w
  6226  1702  02BC               	subwf	(___fldiv@rem+2)^(0+128),f
  6227  1703  0831               	movf	(___fldiv@a+3)^(0+128),w
  6228  1704  1C03               	skipc
  6229  1705  0F31               	incfsz	(___fldiv@a+3)^(0+128),w
  6230  1706  02BD               	subwf	(___fldiv@rem+3)^(0+128),f
  6231  1707                     l5248:	
  6232  1707  0AC6               	incf	___fldiv@aexp^(0+128),f
  6233  1708  2ED0               	goto	l5250
  6234  1709                     l5252:	
  6235  1709  083D               	movf	(___fldiv@rem+3)^(0+128),w
  6236  170A  043C               	iorwf	(___fldiv@rem+2)^(0+128),w
  6237  170B  043B               	iorwf	(___fldiv@rem+1)^(0+128),w
  6238  170C  043A               	iorwf	___fldiv@rem^(0+128),w
  6239  170D  1D03               	btfss	3,2
  6240  170E  1441               	bsf	___fldiv@grs^(0+128),0
  6241  170F                     l5266:	
  6242  170F  1BB4               	btfsc	(___fldiv@b+2)^(0+128),7
  6243  1710  2F22               	goto	l5268
  6244  1711  1003               	clrc
  6245  1712  0DB2               	rlf	___fldiv@b^(0+128),f
  6246  1713  0DB3               	rlf	(___fldiv@b+1)^(0+128),f
  6247  1714  0DB4               	rlf	(___fldiv@b+2)^(0+128),f
  6248  1715  0DB5               	rlf	(___fldiv@b+3)^(0+128),f
  6249  1716  1BC4               	btfsc	(___fldiv@grs+3)^(0+128),7
  6250  1717  1432               	bsf	___fldiv@b^(0+128),0
  6251  1718  30FF               	movlw	-1
  6252  1719  1003               	clrc
  6253  171A  0DC1               	rlf	___fldiv@grs^(0+128),f
  6254  171B  0DC2               	rlf	(___fldiv@grs+1)^(0+128),f
  6255  171C  0DC3               	rlf	(___fldiv@grs+2)^(0+128),f
  6256  171D  0DC4               	rlf	(___fldiv@grs+3)^(0+128),f
  6257  171E  07BF               	addwf	___fldiv@new_exp^(0+128),f
  6258  171F  1C03               	skipc
  6259  1720  03C0               	decf	(___fldiv@new_exp+1)^(0+128),f
  6260  1721  2F0F               	goto	l5266
  6261  1722                     l5268:	
  6262  1722  01C6               	clrf	___fldiv@aexp^(0+128)
  6263  1723  1FC4               	btfss	(___fldiv@grs+3)^(0+128),7
  6264  1724  2F38               	goto	l5278
  6265  1725  0841               	movf	___fldiv@grs^(0+128),w
  6266  1726  00B6               	movwf	??___fldiv^(0+128)
  6267  1727  0842               	movf	(___fldiv@grs+1)^(0+128),w
  6268  1728  00B7               	movwf	(??___fldiv^(0+128)+1)
  6269  1729  0843               	movf	(___fldiv@grs+2)^(0+128),w
  6270  172A  00B8               	movwf	(??___fldiv^(0+128)+2)
  6271  172B  307F               	movlw	127
  6272  172C  0544               	andwf	(___fldiv@grs+3)^(0+128),w
  6273  172D  00B9               	movwf	(??___fldiv^(0+128)+3)
  6274  172E  0839               	movf	(??___fldiv+3)^(0+128),w
  6275  172F  0438               	iorwf	(??___fldiv+2)^(0+128),w
  6276  1730  0437               	iorwf	(??___fldiv+1)^(0+128),w
  6277  1731  0436               	iorwf	??___fldiv^(0+128),w
  6278  1732  1903               	skipnz
  6279  1733  1832               	btfsc	___fldiv@b^(0+128),0
  6280  1734  2F36               	goto	l5274
  6281  1735  2F38               	goto	l5278
  6282  1736                     l5274:	
  6283  1736  01C6               	clrf	___fldiv@aexp^(0+128)
  6284  1737  0AC6               	incf	___fldiv@aexp^(0+128),f
  6285  1738                     l5278:	
  6286  1738  0846               	movf	___fldiv@aexp^(0+128),w
  6287  1739  1903               	btfsc	3,2
  6288  173A  2F4C               	goto	l5288
  6289  173B  0AB2               	incf	___fldiv@b^(0+128),f
  6290  173C  1903               	skipnz
  6291  173D  0AB3               	incf	(___fldiv@b+1)^(0+128),f
  6292  173E  1903               	skipnz
  6293  173F  0AB4               	incf	(___fldiv@b+2)^(0+128),f
  6294  1740  1903               	skipnz
  6295  1741  0AB5               	incf	(___fldiv@b+3)^(0+128),f
  6296  1742  1C35               	btfss	(___fldiv@b+3)^(0+128),0
  6297  1743  2F4C               	goto	l5288
  6298  1744  0D35               	rlf	(___fldiv@b+3)^(0+128),w
  6299  1745  0CB5               	rrf	(___fldiv@b+3)^(0+128),f
  6300  1746  0CB4               	rrf	(___fldiv@b+2)^(0+128),f
  6301  1747  0CB3               	rrf	(___fldiv@b+1)^(0+128),f
  6302  1748  0CB2               	rrf	___fldiv@b^(0+128),f
  6303  1749  0ABF               	incf	___fldiv@new_exp^(0+128),f
  6304  174A  1903               	skipnz
  6305  174B  0AC0               	incf	(___fldiv@new_exp+1)^(0+128),f
  6306  174C                     l5288:	
  6307  174C  0840               	movf	(___fldiv@new_exp+1)^(0+128),w
  6308  174D  3A80               	xorlw	128
  6309  174E  00FF               	movwf	127
  6310  174F  3080               	movlw	128
  6311  1750  027F               	subwf	127,w
  6312  1751  1D03               	skipz
  6313  1752  2F55               	goto	u5085
  6314  1753  30FF               	movlw	255
  6315  1754  023F               	subwf	___fldiv@new_exp^(0+128),w
  6316  1755                     u5085:	
  6317  1755  1C03               	skipc
  6318  1756  2F60               	goto	l5294
  6319  1757  30FF               	movlw	255
  6320  1758  1683               	bsf	3,5	;RP0=1, select bank1
  6321  1759  1303               	bcf	3,6	;RP1=0, select bank1
  6322  175A  00BF               	movwf	___fldiv@new_exp^(0+128)
  6323  175B  01C0               	clrf	(___fldiv@new_exp+1)^(0+128)
  6324  175C  01B2               	clrf	___fldiv@b^(0+128)
  6325  175D  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6326  175E  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6327  175F  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6328  1760                     l5294:	
  6329  1760  1683               	bsf	3,5	;RP0=1, select bank1
  6330  1761  1303               	bcf	3,6	;RP1=0, select bank1
  6331  1762  0840               	movf	(___fldiv@new_exp+1)^(0+128),w
  6332  1763  3A80               	xorlw	128
  6333  1764  00FF               	movwf	127
  6334  1765  3080               	movlw	128
  6335  1766  027F               	subwf	127,w
  6336  1767  1D03               	skipz
  6337  1768  2F6B               	goto	u5095
  6338  1769  3001               	movlw	1
  6339  176A  023F               	subwf	___fldiv@new_exp^(0+128),w
  6340  176B                     u5095:	
  6341  176B  1803               	skipnc
  6342  176C  2F76               	goto	l5300
  6343  176D  1683               	bsf	3,5	;RP0=1, select bank1
  6344  176E  1303               	bcf	3,6	;RP1=0, select bank1
  6345  176F  01BF               	clrf	___fldiv@new_exp^(0+128)
  6346  1770  01C0               	clrf	(___fldiv@new_exp+1)^(0+128)
  6347  1771  01B2               	clrf	___fldiv@b^(0+128)
  6348  1772  01B3               	clrf	(___fldiv@b+1)^(0+128)
  6349  1773  01B4               	clrf	(___fldiv@b+2)^(0+128)
  6350  1774  01B5               	clrf	(___fldiv@b+3)^(0+128)
  6351  1775  01BE               	clrf	___fldiv@sign^(0+128)
  6352  1776                     l5300:	
  6353  1776  1683               	bsf	3,5	;RP0=1, select bank1
  6354  1777  1303               	bcf	3,6	;RP1=0, select bank1
  6355  1778  083F               	movf	___fldiv@new_exp^(0+128),w
  6356  1779  00C5               	movwf	___fldiv@bexp^(0+128)
  6357  177A  1C45               	btfss	___fldiv@bexp^(0+128),0
  6358  177B  2F7E               	goto	l1405
  6359  177C  17B4               	bsf	(___fldiv@b^(0+128)+2),7
  6360  177D  2F7F               	goto	l5306
  6361  177E                     l1405:	
  6362  177E  13B4               	bcf	(___fldiv@b^(0+128)+2),7
  6363  177F                     l5306:	
  6364  177F  1003               	clrc
  6365  1780  0C45               	rrf	___fldiv@bexp^(0+128),w
  6366  1781  00B5               	movwf	(___fldiv@b^(0+128)+3)
  6367  1782  2EA1               	goto	L3
  6368  1783                     __end_of___fldiv:	
  6369  1783                     __ptext23:	
  6370 ;; *************** function ___fltol *****************
  6371 ;; Defined at:
  6372 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fltol.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;  f1              4    4[BANK3 ] unsigned char 
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;  exp1            1   13[BANK3 ] unsigned char 
  6377 ;;  sign1           1   12[BANK3 ] unsigned char 
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  4    4[BANK3 ] long 
  6380 ;; Registers used:
  6381 ;;		wreg, status,2, status,0
  6382 ;; Tracked objects:
  6383 ;;		On entry : 300/300
  6384 ;;		On exit  : 300/300
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6387 ;;      Params:         0       0       0       4       0
  6388 ;;      Locals:         0       0       0       2       0
  6389 ;;      Temps:          0       0       0       4       0
  6390 ;;      Totals:         0       0       0      10       0
  6391 ;;Total ram usage:       10 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:   10
  6394 ;; This function calls:
  6395 ;;		Nothing
  6396 ;; This function is called by:
  6397 ;;		_CCP_PWM_PERIOD_LOAD
  6398 ;;		_CCP1_PWM_DUTY_CYCLE_LOAD
  6399 ;;		_CCP2_PWM_DUTY_CYCLE_LOAD
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           
  6404                           ;psect for function ___fltol
  6405  1783                     ___fltol:	
  6406                           
  6407                           ;incstack = 0
  6408 ;; hardware stack exceeded
  6409                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  6410  1783  1003               	clrc
  6411  1784  0D58               	rlf	(___fltol@f1+2)^(0+384),w
  6412  1785  0D59               	rlf	(___fltol@f1+3)^(0+384),w
  6413  1786  00DF               	movwf	___fltol@exp1^(0+384)
  6414  1787  085F               	movf	___fltol@exp1^(0+384),w
  6415  1788  1D03               	btfss	3,2
  6416  1789  2F8F               	goto	l4960
  6417  178A                     l4958:	
  6418  178A  01D6               	clrf	?___fltol^(0+384)
  6419  178B  01D7               	clrf	(?___fltol+1)^(0+384)
  6420  178C  01D8               	clrf	(?___fltol+2)^(0+384)
  6421  178D  01D9               	clrf	(?___fltol+3)^(0+384)
  6422  178E  0008               	return
  6423  178F                     l4960:	
  6424  178F  0856               	movf	___fltol@f1^(0+384),w
  6425  1790  00DA               	movwf	??___fltol^(0+384)
  6426  1791  0857               	movf	(___fltol@f1+1)^(0+384),w
  6427  1792  00DB               	movwf	(??___fltol^(0+384)+1)
  6428  1793  0858               	movf	(___fltol@f1+2)^(0+384),w
  6429  1794  00DC               	movwf	(??___fltol^(0+384)+2)
  6430  1795  0859               	movf	(___fltol@f1+3)^(0+384),w
  6431  1796  00DD               	movwf	(??___fltol^(0+384)+3)
  6432  1797  301F               	movlw	31
  6433  1798                     u4395:	
  6434  1798  1003               	clrc
  6435  1799  0CDD               	rrf	(??___fltol^(0+384)+3),f
  6436  179A  0CDC               	rrf	(??___fltol^(0+384)+2),f
  6437  179B  0CDB               	rrf	(??___fltol^(0+384)+1),f
  6438  179C  0CDA               	rrf	??___fltol^(0+384),f
  6439  179D  3EFF               	addlw	-1
  6440  179E  1D03               	skipz
  6441  179F  2F98               	goto	u4395
  6442  17A0  085A               	movf	??___fltol^(0+384),w
  6443  17A1  00DE               	movwf	___fltol@sign1^(0+384)
  6444  17A2  3096               	movlw	150
  6445  17A3  17D8               	bsf	(___fltol@f1^(0+384)+2),7
  6446  17A4  01D9               	clrf	(___fltol@f1+3)^(0+384)
  6447  17A5  02DF               	subwf	___fltol@exp1^(0+384),f
  6448  17A6  1FDF               	btfss	___fltol@exp1^(0+384),7
  6449  17A7  2FB5               	goto	l4978
  6450  17A8  085F               	movf	___fltol@exp1^(0+384),w
  6451  17A9  3A80               	xorlw	128
  6452  17AA  3E97               	addlw	151
  6453  17AB  1C03               	btfss	3,0
  6454  17AC  2F8A               	goto	l4958
  6455  17AD                     l4974:	
  6456  17AD  1003               	clrc
  6457  17AE  0CD9               	rrf	(___fltol@f1+3)^(0+384),f
  6458  17AF  0CD8               	rrf	(___fltol@f1+2)^(0+384),f
  6459  17B0  0CD7               	rrf	(___fltol@f1+1)^(0+384),f
  6460  17B1  0CD6               	rrf	___fltol@f1^(0+384),f
  6461  17B2  0FDF               	incfsz	___fltol@exp1^(0+384),f
  6462  17B3  2FAD               	goto	l4974
  6463  17B4  2FC3               	goto	l4986
  6464  17B5                     l4978:	
  6465  17B5  3020               	movlw	32
  6466  17B6  025F               	subwf	___fltol@exp1^(0+384),w
  6467  17B7  1803               	btfsc	3,0
  6468  17B8  2F8A               	goto	l4958
  6469  17B9                     l4984:	
  6470  17B9  085F               	movf	___fltol@exp1^(0+384),w
  6471  17BA  1903               	btfsc	3,2
  6472  17BB  2FC3               	goto	l4986
  6473  17BC  1003               	clrc
  6474  17BD  0DD6               	rlf	___fltol@f1^(0+384),f
  6475  17BE  0DD7               	rlf	(___fltol@f1+1)^(0+384),f
  6476  17BF  0DD8               	rlf	(___fltol@f1+2)^(0+384),f
  6477  17C0  0DD9               	rlf	(___fltol@f1+3)^(0+384),f
  6478  17C1  03DF               	decf	___fltol@exp1^(0+384),f
  6479  17C2  2FB9               	goto	l4984
  6480  17C3                     l4986:	
  6481  17C3  085E               	movf	___fltol@sign1^(0+384),w
  6482  17C4  1903               	btfsc	3,2
  6483  17C5  0008               	return
  6484  17C6  09D6               	comf	___fltol@f1^(0+384),f
  6485  17C7  09D7               	comf	(___fltol@f1+1)^(0+384),f
  6486  17C8  09D8               	comf	(___fltol@f1+2)^(0+384),f
  6487  17C9  09D9               	comf	(___fltol@f1+3)^(0+384),f
  6488  17CA  0AD6               	incf	___fltol@f1^(0+384),f
  6489  17CB  1903               	skipnz
  6490  17CC  0AD7               	incf	(___fltol@f1+1)^(0+384),f
  6491  17CD  1903               	skipnz
  6492  17CE  0AD8               	incf	(___fltol@f1+2)^(0+384),f
  6493  17CF  1903               	skipnz
  6494  17D0  0AD9               	incf	(___fltol@f1+3)^(0+384),f
  6495  17D1  0008               	return
  6496  17D2                     __end_of___fltol:	
  6497  17D2                     __ptext27:	
  6498 ;; *************** function _CCP2_INIT *****************
  6499 ;; Defined at:
  6500 ;;		line 59 in file "CCP.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;		None
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;		None
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  1    wreg      void 
  6507 ;; Registers used:
  6508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6509 ;; Tracked objects:
  6510 ;;		On entry : 300/300
  6511 ;;		On exit  : 300/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6514 ;;      Params:         0       0       0       0       0
  6515 ;;      Locals:         0       0       0       0       0
  6516 ;;      Temps:          0       0       0       0       0
  6517 ;;      Totals:         0       0       0       0       0
  6518 ;;Total ram usage:        0 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; Hardware stack levels required when called:   12
  6521 ;; This function calls:
  6522 ;;		_GPIO_PIN_INIT
  6523 ;;		_TIMER2_INIT
  6524 ;;		_TIMER2_START
  6525 ;; This function is called by:
  6526 ;;		_HEATER_INIT
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           
  6531                           ;psect for function _CCP2_INIT
  6532  17D2                     _CCP2_INIT:	
  6533                           
  6534                           ;CCP.c: 74:  {;CCP.c: 75:   TIMER2_INIT();
  6535                           
  6536                           ;incstack = 0
  6537 ;; hardware stack exceeded
  6538                           ; Regs used in _CCP2_INIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6539  17D2  27E4  160A  118A   	fcall	_TIMER2_INIT
  6540                           
  6541                           ;CCP.c: 76:         TIMER2_START();
  6542  17D5  27F2               	fcall	_TIMER2_START
  6543                           
  6544                           ;CCP.c: 77:   GPIO_PIN_INIT( (0x0007), GPIO_PIN_1, GPIO_PIN_OUT );
  6545  17D6  1683               	bsf	3,5	;RP0=1, select bank1
  6546  17D7  3007               	movlw	7
  6547  17D8  01A3               	clrf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128)
  6548  17D9  0AA3               	incf	GPIO_PIN_INIT@GPIO_PIN_NO^(0+128),f
  6549  17DA  01A4               	clrf	GPIO_PIN_INIT@GPIO_DIRECTION^(0+128)
  6550  17DB  120A  118A  2549   	fcall	_GPIO_PIN_INIT
  6551                           
  6552                           ;CCP.c: 78:  };CCP.c: 90:  (CCP2CONbits.CCP2M = 12 ) ;
  6553  17DE  1283               	bcf	3,5	;RP0=0, select bank0
  6554  17DF  081D               	movf	29,w	;volatile
  6555  17E0  39F0               	andlw	-16
  6556  17E1  380C               	iorlw	12
  6557  17E2  009D               	movwf	29	;volatile
  6558  17E3  0008               	return
  6559  17E4                     __end_of_CCP2_INIT:	
  6560  17E4                     __ptext29:	
  6561 ;; *************** function _TIMER2_INIT *****************
  6562 ;; Defined at:
  6563 ;;		line 32 in file "TIMR2.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;		None
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;		None
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  1    wreg      void 
  6570 ;; Registers used:
  6571 ;;		wreg, status,2, status,0, pclath, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : 300/300
  6574 ;;		On exit  : 300/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6577 ;;      Params:         0       0       0       0       0
  6578 ;;      Locals:         0       0       0       0       0
  6579 ;;      Temps:          0       0       0       0       0
  6580 ;;      Totals:         0       0       0       0       0
  6581 ;;Total ram usage:        0 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:   11
  6584 ;; This function calls:
  6585 ;;		_TIMER2_STOP
  6586 ;; This function is called by:
  6587 ;;		_CCP1_INIT
  6588 ;;		_CCP2_INIT
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           
  6593                           ;psect for function _TIMER2_INIT
  6594  17E4                     _TIMER2_INIT:	
  6595                           
  6596                           ;TIMR2.c: 35:  ( T2CONbits.T2CKPS = TIMER2_PRE_CLK_16 );
  6597                           
  6598                           ;incstack = 0
  6599 ;; hardware stack exceeded
  6600                           ; Regs used in _TIMER2_INIT: [wreg+status,2+status,0+pclath+cstack]
  6601  17E4  1283               	bcf	3,5	;RP0=0, select bank0
  6602  17E5  1303               	bcf	3,6	;RP1=0, select bank0
  6603  17E6  0812               	movf	18,w	;volatile
  6604  17E7  39FC               	andlw	-4
  6605  17E8  3802               	iorlw	2
  6606  17E9  0092               	movwf	18	;volatile
  6607                           
  6608                           ;TIMR2.c: 37:  (T2CONbits.TOUTPS = TIMER2_POST_CLK_16 );
  6609  17EA  3078               	movlw	120
  6610  17EB  0492               	iorwf	18,f	;volatile
  6611                           
  6612                           ;TIMR2.c: 39:  ( TMR2IE = TIMER2_POLLING_BASED );
  6613  17EC  1683               	bsf	3,5	;RP0=1, select bank1
  6614  17ED  108C               	bcf	12,1	;volatile
  6615                           
  6616                           ;TIMR2.c: 41:  (TMR2 = ((256) - ((0) * ((double) (8 * 1000) / ( 4 * 256 ) ) )) );
  6617  17EE  3000               	movlw	0
  6618  17EF  1283               	bcf	3,5	;RP0=0, select bank0
  6619  17F0  0191               	clrf	17	;volatile
  6620                           
  6621                           ;TIMR2.c: 42:     TIMER2_STOP();
  6622  17F1  2FF4               	ljmp	l4554
  6623  17F2                     __end_of_TIMER2_INIT:	
  6624  17F2                     __ptext28:	
  6625 ;; *************** function _TIMER2_START *****************
  6626 ;; Defined at:
  6627 ;;		line 54 in file "TIMR2.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;		None
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;		None
  6632 ;; Return value:  Size  Location     Type
  6633 ;;                  1    wreg      void 
  6634 ;; Registers used:
  6635 ;;		None
  6636 ;; Tracked objects:
  6637 ;;		On entry : 300/0
  6638 ;;		On exit  : 300/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6641 ;;      Params:         0       0       0       0       0
  6642 ;;      Locals:         0       0       0       0       0
  6643 ;;      Temps:          0       0       0       0       0
  6644 ;;      Totals:         0       0       0       0       0
  6645 ;;Total ram usage:        0 bytes
  6646 ;; Hardware stack levels used:    1
  6647 ;; Hardware stack levels required when called:   10
  6648 ;; This function calls:
  6649 ;;		Nothing
  6650 ;; This function is called by:
  6651 ;;		_CCP1_INIT
  6652 ;;		_CCP2_INIT
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           
  6657                           ;psect for function _TIMER2_START
  6658  17F2                     _TIMER2_START:	
  6659                           
  6660                           ;TIMR2.c: 56:     ( TMR2ON = GPIO_PIN_ON );
  6661                           
  6662                           ;incstack = 0
  6663 ;; hardware stack exceeded
  6664                           ; Regs used in _TIMER2_START: []
  6665  17F2  1512               	bsf	18,2	;volatile
  6666  17F3  0008               	return
  6667  17F4                     __end_of_TIMER2_START:	
  6668  17F4                     __ptext30:	
  6669 ;; *************** function _TIMER2_STOP *****************
  6670 ;; Defined at:
  6671 ;;		line 58 in file "TIMR2.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;		None
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;		None
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  1    wreg      void 
  6678 ;; Registers used:
  6679 ;;		None
  6680 ;; Tracked objects:
  6681 ;;		On entry : 300/0
  6682 ;;		On exit  : 300/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6685 ;;      Params:         0       0       0       0       0
  6686 ;;      Locals:         0       0       0       0       0
  6687 ;;      Temps:          0       0       0       0       0
  6688 ;;      Totals:         0       0       0       0       0
  6689 ;;Total ram usage:        0 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:   10
  6692 ;; This function calls:
  6693 ;;		Nothing
  6694 ;; This function is called by:
  6695 ;;		_TIMER2_INIT
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           
  6700                           ;psect for function _TIMER2_STOP
  6701  17F4                     _TIMER2_STOP:	
  6702  17F4                     l4554:	
  6703                           ;incstack = 0
  6704 ;; hardware stack exceeded
  6705                           ; Regs used in _TIMER2_STOP: []
  6706                           
  6707                           
  6708                           ;TIMR2.c: 60:     ( TMR2ON = GPIO_PIN_OFF );
  6709  17F4  1112               	bcf	18,2	;volatile
  6710  17F5  0008               	return
  6711  17F6                     __end_of_TIMER2_STOP:	
  6712  17F6                     __ptext18:	
  6713 ;; *************** function _HEATER_SET_STATE *****************
  6714 ;; Defined at:
  6715 ;;		line 71 in file "HEATER.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;  HEATER_STATE    1    wreg     unsigned char 
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;  HEATER_STATE    1    0[BANK1 ] unsigned char 
  6720 ;; Return value:  Size  Location     Type
  6721 ;;                  1    wreg      void 
  6722 ;; Registers used:
  6723 ;;		wreg
  6724 ;; Tracked objects:
  6725 ;;		On entry : 300/0
  6726 ;;		On exit  : 300/300
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6729 ;;      Params:         0       0       0       0       0
  6730 ;;      Locals:         0       0       1       0       0
  6731 ;;      Temps:          0       0       0       0       0
  6732 ;;      Totals:         0       0       1       0       0
  6733 ;;Total ram usage:        1 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; Hardware stack levels required when called:   10
  6736 ;; This function calls:
  6737 ;;		Nothing
  6738 ;; This function is called by:
  6739 ;;		_HEATER_INIT
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           
  6744                           ;psect for function _HEATER_SET_STATE
  6745  17F6                     _HEATER_SET_STATE:	
  6746                           
  6747                           ;incstack = 0
  6748 ;; hardware stack exceeded
  6749                           ; Regs used in _HEATER_SET_STATE: [wreg]
  6750                           ;HEATER_SET_STATE@HEATER_STATE stored from wreg
  6751  17F6  1683               	bsf	3,5	;RP0=1, select bank1
  6752  17F7  00A0               	movwf	HEATER_SET_STATE@HEATER_STATE^(0+128)
  6753                           
  6754                           ;HEATER.c: 71: void HEATER_SET_STATE (tHEATER_STATE HEATER_STATE);HEATER.c: 72: {;HEATER
      +                          .c: 73:     DESIRED_HEAT = HEATER_STATE ;
  6755  17F8  1703               	bsf	3,6	;RP1=1, select bank3
  6756  17F9  00EB               	movwf	_DESIRED_HEAT^(0+384)
  6757  17FA  0008               	return
  6758  17FB                     __end_of_HEATER_SET_STATE:	
  6759  17FB                     __ptext8:	
  6760 ;; *************** function _MOTOR_SET_STATE *****************
  6761 ;; Defined at:
  6762 ;;		line 71 in file "MOTOR.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  MOTOR_STATE     1    wreg     unsigned char 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  MOTOR_STATE     1    0[BANK1 ] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  1    wreg      void 
  6769 ;; Registers used:
  6770 ;;		wreg
  6771 ;; Tracked objects:
  6772 ;;		On entry : 300/0
  6773 ;;		On exit  : 300/300
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6776 ;;      Params:         0       0       0       0       0
  6777 ;;      Locals:         0       0       1       0       0
  6778 ;;      Temps:          0       0       0       0       0
  6779 ;;      Totals:         0       0       1       0       0
  6780 ;;Total ram usage:        1 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:   10
  6783 ;; This function calls:
  6784 ;;		Nothing
  6785 ;; This function is called by:
  6786 ;;		_MOTOR_INIT
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           
  6791                           ;psect for function _MOTOR_SET_STATE
  6792  17FB                     _MOTOR_SET_STATE:	
  6793                           
  6794                           ;incstack = 0
  6795 ;; hardware stack exceeded
  6796                           ; Regs used in _MOTOR_SET_STATE: [wreg]
  6797                           ;MOTOR_SET_STATE@MOTOR_STATE stored from wreg
  6798  17FB  1683               	bsf	3,5	;RP0=1, select bank1
  6799  17FC  00A0               	movwf	MOTOR_SET_STATE@MOTOR_STATE^(0+128)
  6800                           
  6801                           ;MOTOR.c: 71: void MOTOR_SET_STATE (tMOTOR_STATE MOTOR_STATE);MOTOR.c: 72: {;MOTOR.c: 73
      +                          :     DESIRED_SPEED = MOTOR_STATE ;
  6802  17FD  1703               	bsf	3,6	;RP1=1, select bank3
  6803  17FE  00EC               	movwf	_DESIRED_SPEED^(0+384)
  6804  17FF  0008               	return
  6805  1800                     __end_of_MOTOR_SET_STATE:	
  6806                           
  6807                           	psect	text32
  6808  1D44                     __ptext32:	
  6809 ;; *************** function _ENABLE_INTERUPT *****************
  6810 ;; Defined at:
  6811 ;;		line 21 in file "util.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;		None
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;		None
  6816 ;; Return value:  Size  Location     Type
  6817 ;;                  1    wreg      void 
  6818 ;; Registers used:
  6819 ;;		None
  6820 ;; Tracked objects:
  6821 ;;		On entry : B00/B00
  6822 ;;		On exit  : B00/B00
  6823 ;;		Unchanged: B00/0
  6824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6825 ;;      Params:         0       0       0       0       0
  6826 ;;      Locals:         0       0       0       0       0
  6827 ;;      Temps:          0       0       0       0       0
  6828 ;;      Totals:         0       0       0       0       0
  6829 ;;Total ram usage:        0 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:   10
  6832 ;; This function calls:
  6833 ;;		Nothing
  6834 ;; This function is called by:
  6835 ;;		_main
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           
  6840                           ;psect for function _ENABLE_INTERUPT
  6841  1D44                     _ENABLE_INTERUPT:	
  6842                           
  6843                           ;util.c: 23:     PEIE=1 ;
  6844                           
  6845                           ;incstack = 0
  6846 ;; hardware stack exceeded
  6847                           ; Regs used in _ENABLE_INTERUPT: []
  6848  1D44  170B               	bsf	11,6	;volatile
  6849                           
  6850                           ;util.c: 24:     GIE=1;
  6851  1D45  178B               	bsf	11,7	;volatile
  6852  1D46  0008               	return
  6853  1D47                     __end_of_ENABLE_INTERUPT:	
  6854                           
  6855                           	psect	text33
  6856  1D6D                     __ptext33:	
  6857 ;; *************** function _CONTROL_INIT *****************
  6858 ;; Defined at:
  6859 ;;		line 65 in file "CONTROL.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;		None
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;  count           1    0[BANK1 ] unsigned char 
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      void 
  6866 ;; Registers used:
  6867 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6868 ;; Tracked objects:
  6869 ;;		On entry : B00/B00
  6870 ;;		On exit  : B00/B00
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6873 ;;      Params:         0       0       0       0       0
  6874 ;;      Locals:         0       0       1       0       0
  6875 ;;      Temps:          0       0       0       0       0
  6876 ;;      Totals:         0       0       1       0       0
  6877 ;;Total ram usage:        1 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; Hardware stack levels required when called:   10
  6880 ;; This function calls:
  6881 ;;		Nothing
  6882 ;; This function is called by:
  6883 ;;		_main
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           
  6888                           ;psect for function _CONTROL_INIT
  6889  1D6D                     _CONTROL_INIT:	
  6890                           
  6891                           ;CONTROL.c: 67:     tbyte count = 0 ;
  6892                           
  6893                           ;incstack = 0
  6894 ;; hardware stack exceeded
  6895                           ; Regs used in _CONTROL_INIT: [wreg-fsr0h+status,2+status,0]
  6896  1D6D  1303               	bcf	3,6	;RP1=0, select bank1
  6897  1D6E  01A0               	clrf	CONTROL_INIT@count^(0+128)
  6898  1D6F                     l6496:	
  6899                           
  6900                           ;CONTROL.c: 69:     {;CONTROL.c: 70:         HANDLERS_STATES[count] = FIRST_TIME;
  6901  1D6F  0820               	movf	CONTROL_INIT@count^(0+128),w
  6902  1D70  3E90               	addlw	(low (_HANDLERS_STATES| (0+256)))& (0+255)
  6903  1D71  0084               	movwf	4
  6904  1D72  3005               	movlw	5
  6905  1D73  0180               	clrf	0
  6906                           
  6907                           ;CONTROL.c: 71:     }
  6908  1D74  0AA0               	incf	CONTROL_INIT@count^(0+128),f
  6909  1D75  0220               	subwf	CONTROL_INIT@count^(0+128),w
  6910  1D76  1C03               	skipc
  6911  1D77  2D6F               	goto	l6496
  6912                           
  6913                           ;CONTROL.c: 72:     CONTROL_CURRENT_STATE = SET_TIME ;
  6914  1D78  1283               	bcf	3,5	;RP0=0, select bank0
  6915  1D79  301E               	movlw	30
  6916  1D7A  01EE               	clrf	_CONTROL_CURRENT_STATE
  6917                           
  6918                           ;CONTROL.c: 73:     SETTED_TIME.HOURS = 0;
  6919  1D7B  01ED               	clrf	_SETTED_TIME+2
  6920                           
  6921                           ;CONTROL.c: 74:     SETTED_TIME.MINUTES = 0;
  6922  1D7C  01EC               	clrf	_SETTED_TIME+1
  6923                           
  6924                           ;CONTROL.c: 75:     SETTED_TIME.SECONDS = 0;
  6925  1D7D  01EB               	clrf	_SETTED_TIME
  6926                           
  6927                           ;CONTROL.c: 76:     MOTOR_WORK_STATE = 30 ;
  6928  1D7E  1683               	bsf	3,5	;RP0=1, select bank3
  6929  1D7F  1703               	bsf	3,6	;RP1=1, select bank3
  6930  1D80  00A9               	movwf	_MOTOR_WORK_STATE^(0+384)
  6931                           
  6932                           ;CONTROL.c: 77:     HEATER_WORK_STATE = 166 ;
  6933  1D81  30A6               	movlw	166
  6934  1D82  00A8               	movwf	_HEATER_WORK_STATE^(0+384)
  6935  1D83  0008               	return
  6936  1D84                     __end_of_CONTROL_INIT:	
  6937                           
  6938                           	psect	text34
  6939  080C                     __ptext34:	
  6940 ;; *************** function _SYS_UPDATE *****************
  6941 ;; Defined at:
  6942 ;;		line 33 in file "MICROWAVE.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;		None
  6945 ;; Auto vars:     Size  Location     Type
  6946 ;;		None
  6947 ;; Return value:  Size  Location     Type
  6948 ;;                  1    wreg      void 
  6949 ;; Registers used:
  6950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/0
  6953 ;;		On exit  : 300/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6956 ;;      Params:         0       0       0       0       0
  6957 ;;      Locals:         0       0       0       0       0
  6958 ;;      Temps:          0       4       0       0       0
  6959 ;;      Totals:         0       4       0       0       0
  6960 ;;Total ram usage:        4 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    9
  6963 ;; This function calls:
  6964 ;;		_CONTROL_UPDATE
  6965 ;;		_HEATER_UPDATE
  6966 ;;		_KEYPAD_UPDATE
  6967 ;;		_MOTOR_UPDATE
  6968 ;;		_SWs_UPDATE
  6969 ;;		_TIMER0_UPDATE
  6970 ;;		_TIME_UPDATE
  6971 ;; This function is called by:
  6972 ;;		Interrupt level 1
  6973 ;; This function uses a non-reentrant model
  6974 ;;
  6975                           
  6976                           
  6977                           ;psect for function _SYS_UPDATE
  6978  080C                     _SYS_UPDATE:	
  6979                           
  6980                           ;MICROWAVE.c: 35:     if (( TMR0IF ))
  6981  080C  1D0B               	btfss	11,2	;volatile
  6982  080D  2825               	goto	i1l934
  6983                           
  6984                           ;MICROWAVE.c: 36:     {;MICROWAVE.c: 37:         TIMER0_UPDATE();
  6985  080E  27FA               	fcall	_TIMER0_UPDATE
  6986                           
  6987                           ;MICROWAVE.c: 38:         TIME_UPDATE();
  6988  080F  160A  158A  2614  120A  158A  	fcall	_TIME_UPDATE
  6989                           
  6990                           ;MICROWAVE.c: 39:         HEATER_UPDATE();
  6991  0814  160A  158A  2584  120A  158A  	fcall	_HEATER_UPDATE
  6992                           
  6993                           ;MICROWAVE.c: 40:         MOTOR_UPDATE();
  6994  0819  160A  158A  25A6  120A  158A  	fcall	_MOTOR_UPDATE
  6995                           
  6996                           ;MICROWAVE.c: 41:         SWs_UPDATE();
  6997  081E  236D  120A  158A   	fcall	_SWs_UPDATE
  6998                           
  6999                           ;MICROWAVE.c: 42:         KEYPAD_UPDATE();
  7000  0821  2545  120A  158A   	fcall	_KEYPAD_UPDATE
  7001                           
  7002                           ;MICROWAVE.c: 43:         CONTROL_UPDATE ();
  7003  0824  2032               	fcall	_CONTROL_UPDATE
  7004  0825                     i1l934:	
  7005  0825  1283               	bcf	3,5	;RP0=0, select bank0
  7006  0826  1303               	bcf	3,6	;RP1=0, select bank0
  7007  0827  086A               	movf	??_SYS_UPDATE+3,w
  7008  0828  00FF               	movwf	127
  7009  0829  0869               	movf	??_SYS_UPDATE+2,w
  7010  082A  008A               	movwf	10
  7011  082B  0868               	movf	??_SYS_UPDATE+1,w
  7012  082C  0084               	movwf	4
  7013  082D  0E67               	swapf	??_SYS_UPDATE^0,w
  7014  082E  0083               	movwf	3
  7015  082F  0EFE               	swapf	126,f
  7016  0830  0E7E               	swapf	126,w
  7017  0831  0009               	retfie
  7018  0832                     __end_of_SYS_UPDATE:	
  7019  0832                     __ptext49:	
  7020 ;; *************** function _CONTROL_UPDATE *****************
  7021 ;; Defined at:
  7022 ;;		line 80 in file "CONTROL.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;		None
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;		None
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  1    wreg      void 
  7029 ;; Registers used:
  7030 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 300/300
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7036 ;;      Params:         0       0       0       0       0
  7037 ;;      Locals:         0       0       0       0       0
  7038 ;;      Temps:          0       2       0       0       0
  7039 ;;      Totals:         0       2       0       0       0
  7040 ;;Total ram usage:        2 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:    8
  7043 ;; This function calls:
  7044 ;;		_DEFAULT_HANDLER
  7045 ;;		_FINISH_HANDLER
  7046 ;;		_HEATING_HANDLER
  7047 ;;		_KEYPAD_GET_PRESSED_KEY
  7048 ;;		_SET_HEATING_HANDLER
  7049 ;;		_SET_ROTOR_PWR_HANDLER
  7050 ;;		_SET_TIME_HANDLER
  7051 ;; This function is called by:
  7052 ;;		_SYS_UPDATE
  7053 ;; This function uses a non-reentrant model
  7054 ;;
  7055                           
  7056                           
  7057                           ;psect for function _CONTROL_UPDATE
  7058  0832                     _CONTROL_UPDATE:	
  7059                           
  7060                           ;CONTROL.c: 82:     static tbyte control_shift_counter = 0;;CONTROL.c: 83:     if (contr
      +                          ol_shift_counter >= 5)
  7061                           
  7062                           ;incstack = 0
  7063 ;; hardware stack exceeded
  7064                           ; Regs used in _CONTROL_UPDATE: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7065  0832  3005               	movlw	5
  7066  0833  0227               	subwf	CONTROL_UPDATE@control_shift_counter^(0+384),w
  7067                           
  7068                           ;CONTROL.c: 84:     {;CONTROL.c: 85:         static tbyte control_timer_counter = 0;;CON
      +                          TROL.c: 86:         control_timer_counter += (5);
  7069  0834  3005               	movlw	5
  7070  0835  1C03               	skipc
  7071  0836  2877               	goto	L11
  7072  0837  07A6               	addwf	CONTROL_UPDATE@control_timer_counter^(0+384),f
  7073                           
  7074                           ;CONTROL.c: 87:         if (control_timer_counter >= 20)
  7075  0838  3014               	movlw	20
  7076  0839  0226               	subwf	CONTROL_UPDATE@control_timer_counter^(0+384),w
  7077  083A  1C03               	skipc
  7078  083B  0008               	return
  7079                           
  7080                           ;CONTROL.c: 88:         {;CONTROL.c: 89:             control_timer_counter = 0;
  7081  083C  01A6               	clrf	CONTROL_UPDATE@control_timer_counter^(0+384)
  7082                           
  7083                           ;CONTROL.c: 90:             PRESSED_KEY = KEYPAD_GET_PRESSED_KEY() ;
  7084  083D  27AF  120A  158A   	fcall	_KEYPAD_GET_PRESSED_KEY
  7085  0840  0871               	movf	?_KEYPAD_GET_PRESSED_KEY+1,w
  7086  0841  009F               	movwf	(_PRESSED_KEY+1)^(0+384)
  7087  0842  0870               	movf	?_KEYPAD_GET_PRESSED_KEY,w
  7088  0843  009E               	movwf	_PRESSED_KEY^(0+384)
  7089                           
  7090                           ;CONTROL.c: 91:             switch ( CONTROL_CURRENT_STATE )
  7091  0844  285F               	goto	i1l6530
  7092  0845                     i1l6518:	
  7093                           
  7094                           ;CONTROL.c: 94:                     SET_TIME_HANDLER();
  7095  0845  160A  158A  26FF  120A  158A  	fcall	_SET_TIME_HANDLER
  7096                           
  7097                           ;CONTROL.c: 95:                 break;
  7098  084A  2876               	goto	i1l6532
  7099  084B                     i1l6520:	
  7100                           
  7101                           ;CONTROL.c: 97:                     SET_HEATING_HANDLER();
  7102  084B  160A  158A  25CA  120A  158A  	fcall	_SET_HEATING_HANDLER
  7103                           
  7104                           ;CONTROL.c: 98:                 break;
  7105  0850  2876               	goto	i1l6532
  7106  0851                     i1l6522:	
  7107                           
  7108                           ;CONTROL.c: 100:                     SET_ROTOR_PWR_HANDLER();
  7109  0851  160A  158A  25EF  120A  158A  	fcall	_SET_ROTOR_PWR_HANDLER
  7110                           
  7111                           ;CONTROL.c: 101:                 break;
  7112  0856  2876               	goto	i1l6532
  7113  0857                     i1l6524:	
  7114                           
  7115                           ;CONTROL.c: 103:                     HEATING_HANDLER();
  7116  0857  21B4  120A  158A   	fcall	_HEATING_HANDLER
  7117                           
  7118                           ;CONTROL.c: 104:                 break;
  7119  085A  2876               	goto	i1l6532
  7120  085B                     i1l6526:	
  7121                           
  7122                           ;CONTROL.c: 106:                     FINISH_HANDLER();
  7123  085B  27BA  120A  158A   	fcall	_FINISH_HANDLER
  7124                           
  7125                           ;CONTROL.c: 107:                 break;
  7126  085E  2876               	goto	i1l6532
  7127  085F                     i1l6530:	
  7128  085F  1283               	bcf	3,5	;RP0=0, select bank0
  7129  0860  1303               	bcf	3,6	;RP1=0, select bank0
  7130  0861  086E               	movf	_CONTROL_CURRENT_STATE,w
  7131  0862  00B7               	movwf	??_CONTROL_UPDATE
  7132  0863  01B8               	clrf	??_CONTROL_UPDATE+1
  7133                           
  7134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7135                           ; Switch size 1, requested type "speed"
  7136                           ; Number of cases is 1, Range of values is 0 to 0
  7137                           ; switch strategies available:
  7138                           ; Name         Instructions Cycles
  7139                           ; simple_byte            4     3 (average)
  7140                           ; direct_byte           11     8 (fixed)
  7141                           ; jumptable            260     6 (fixed)
  7142                           ;	Chosen strategy is simple_byte
  7143  0864  0838               	movf	??_CONTROL_UPDATE+1,w
  7144  0865  3A00               	xorlw	0	; case 0
  7145  0866  1903               	skipnz
  7146  0867  2869               	goto	i1l6906
  7147  0868  2876               	goto	i1l6532
  7148  0869                     i1l6906:	
  7149                           
  7150                           ; Switch size 1, requested type "speed"
  7151                           ; Number of cases is 5, Range of values is 0 to 4
  7152                           ; switch strategies available:
  7153                           ; Name         Instructions Cycles
  7154                           ; direct_byte           23     8 (fixed)
  7155                           ; simple_byte           16     9 (average)
  7156                           ; jumptable            260     6 (fixed)
  7157                           ;	Chosen strategy is direct_byte
  7158  0869  0837               	movf	??_CONTROL_UPDATE,w
  7159  086A  0084               	movwf	4
  7160  086B  3005               	movlw	5
  7161  086C  0204               	subwf	4,w
  7162  086D  1803               	skipnc
  7163  086E  2876               	goto	i1l6532
  7164  086F  3007               	movlw	high i1S6908
  7165  0870  008A               	movwf	10
  7166  0871  1003               	clrc
  7167  0872  0D04               	rlf	4,w
  7168  0873  0704               	addwf	4,w
  7169  0874  3EF1               	addlw	low i1S6908
  7170  0875  0082               	movwf	2
  7171  0876                     i1l6532:	
  7172                           
  7173                           ;CONTROL.c: 112:             DEFAULT_HANDLER();
  7174  0876  2962               	ljmp	i1l6026
  7175  0877                     L11:	
  7176                           ;CONTROL.c: 116:     {;CONTROL.c: 117:      control_shift_counter += (5);
  7177                           
  7178  0877  07A7               	addwf	CONTROL_UPDATE@control_shift_counter^(0+384),f
  7179  0878  0008               	return
  7180  0879                     __end_of_CONTROL_UPDATE:	
  7181  0879                     __ptext73:	
  7182 ;; *************** function _DISP_UPDATE_TIME *****************
  7183 ;; Defined at:
  7184 ;;		line 33 in file "Display.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;  time            3   15[BANK0 ] struct .
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;		None
  7189 ;; Return value:  Size  Location     Type
  7190 ;;                  1    wreg      void 
  7191 ;; Registers used:
  7192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7193 ;; Tracked objects:
  7194 ;;		On entry : 300/0
  7195 ;;		On exit  : 300/300
  7196 ;;		Unchanged: 0/0
  7197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7198 ;;      Params:         0       3       0       0       0
  7199 ;;      Locals:         0       0       0       0       0
  7200 ;;      Temps:          0       0       0       0       0
  7201 ;;      Totals:         0       3       0       0       0
  7202 ;;Total ram usage:        3 bytes
  7203 ;; Hardware stack levels used:    1
  7204 ;; Hardware stack levels required when called:    5
  7205 ;; This function calls:
  7206 ;;		_UPDATE_LCD_HOURS
  7207 ;;		_UPDATE_LCD_MINUTES
  7208 ;;		_UPDATE_LCD_SECONDS
  7209 ;; This function is called by:
  7210 ;;		_HEATING_HANDLER
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           
  7215                           ;psect for function _DISP_UPDATE_TIME
  7216  0879                     _DISP_UPDATE_TIME:	
  7217                           
  7218                           ;Display.c: 33: void DISP_UPDATE_TIME (tTIME time);Display.c: 34: {;Display.c: 36:      
      +                          if ( time.SECONDS != last_time.SECONDS )
  7219                           
  7220                           ;incstack = 0
  7221 ;; hardware stack exceeded
  7222                           ; Regs used in _DISP_UPDATE_TIME: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7223  0879  082F               	movf	DISP_UPDATE_TIME@time,w
  7224  087A  1683               	bsf	3,5	;RP0=1, select bank3
  7225  087B  1703               	bsf	3,6	;RP1=1, select bank3
  7226  087C  0618               	xorwf	_last_time^(0+384),w
  7227  087D  1903               	skipnz
  7228  087E  289B               	goto	i1l4798
  7229                           
  7230                           ;Display.c: 37:  {;Display.c: 39:   UPDATE_LCD_SECONDS( time.SECONDS);
  7231  087F  1283               	bcf	3,5	;RP0=0, select bank0
  7232  0880  1303               	bcf	3,6	;RP1=0, select bank0
  7233  0881  082F               	movf	DISP_UPDATE_TIME@time,w
  7234  0882  2507  120A  158A   	fcall	_UPDATE_LCD_SECONDS
  7235                           
  7236                           ;Display.c: 40:   if (time.MINUTES != last_time.MINUTES )
  7237  0885  0830               	movf	DISP_UPDATE_TIME@time+1,w
  7238  0886  1683               	bsf	3,5	;RP0=1, select bank3
  7239  0887  1703               	bsf	3,6	;RP1=1, select bank3
  7240  0888  0619               	xorwf	(_last_time^(0+384)+1),w
  7241  0889  1903               	skipnz
  7242  088A  289B               	goto	i1l4798
  7243                           
  7244                           ;Display.c: 41:   {;Display.c: 43:    UPDATE_LCD_MINUTES(time.MINUTES);
  7245  088B  1283               	bcf	3,5	;RP0=0, select bank0
  7246  088C  1303               	bcf	3,6	;RP1=0, select bank0
  7247  088D  0830               	movf	DISP_UPDATE_TIME@time+1,w
  7248  088E  24BE  120A  158A   	fcall	_UPDATE_LCD_MINUTES
  7249                           
  7250                           ;Display.c: 44:    if (time.HOURS != last_time.HOURS )
  7251  0891  0831               	movf	DISP_UPDATE_TIME@time+2,w
  7252  0892  1683               	bsf	3,5	;RP0=1, select bank3
  7253  0893  1703               	bsf	3,6	;RP1=1, select bank3
  7254  0894  061A               	xorwf	(_last_time^(0+384)+2),w
  7255  0895  1903               	skipnz
  7256  0896  289B               	goto	i1l4798
  7257                           
  7258                           ;Display.c: 45:    {;Display.c: 47:     UPDATE_LCD_HOURS(time.HOURS);
  7259  0897  1283               	bcf	3,5	;RP0=0, select bank0
  7260  0898  1303               	bcf	3,6	;RP1=0, select bank0
  7261  0899  0831               	movf	DISP_UPDATE_TIME@time+2,w
  7262  089A  25DD               	fcall	_UPDATE_LCD_HOURS
  7263  089B                     i1l4798:	
  7264                           
  7265                           ;Display.c: 51:  last_time = time ;
  7266  089B  1283               	bcf	3,5	;RP0=0, select bank0
  7267  089C  1303               	bcf	3,6	;RP1=0, select bank0
  7268  089D  082F               	movf	DISP_UPDATE_TIME@time,w
  7269  089E  1683               	bsf	3,5	;RP0=1, select bank3
  7270  089F  1703               	bsf	3,6	;RP1=1, select bank3
  7271  08A0  0098               	movwf	_last_time^(0+384)
  7272  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  7273  08A2  1303               	bcf	3,6	;RP1=0, select bank0
  7274  08A3  0830               	movf	DISP_UPDATE_TIME@time+1,w
  7275  08A4  1683               	bsf	3,5	;RP0=1, select bank3
  7276  08A5  1703               	bsf	3,6	;RP1=1, select bank3
  7277  08A6  0099               	movwf	(_last_time+1)^(0+384)
  7278  08A7  1283               	bcf	3,5	;RP0=0, select bank0
  7279  08A8  1303               	bcf	3,6	;RP1=0, select bank0
  7280  08A9  0831               	movf	DISP_UPDATE_TIME@time+2,w
  7281  08AA  1683               	bsf	3,5	;RP0=1, select bank3
  7282  08AB  1703               	bsf	3,6	;RP1=1, select bank3
  7283  08AC  009A               	movwf	(_last_time+2)^(0+384)
  7284  08AD  0008               	return
  7285  08AE                     __end_of_DISP_UPDATE_TIME:	
  7286  08AE                     __ptext61:	
  7287 ;; *************** function _SET_HEATING_HANDLER_ON_WORK *****************
  7288 ;; Defined at:
  7289 ;;		line 349 in file "CONTROL.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;		None
  7292 ;; Auto vars:     Size  Location     Type
  7293 ;;		None
  7294 ;; Return value:  Size  Location     Type
  7295 ;;                  1    wreg      void 
  7296 ;; Registers used:
  7297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7298 ;; Tracked objects:
  7299 ;;		On entry : 300/0
  7300 ;;		On exit  : 0/0
  7301 ;;		Unchanged: 0/0
  7302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7303 ;;      Params:         0       0       0       0       0
  7304 ;;      Locals:         0       0       0       0       0
  7305 ;;      Temps:          0       2       0       0       0
  7306 ;;      Totals:         0       2       0       0       0
  7307 ;;Total ram usage:        2 bytes
  7308 ;; Hardware stack levels used:    1
  7309 ;; Hardware stack levels required when called:    4
  7310 ;; This function calls:
  7311 ;;		_START_BLINKING_AT
  7312 ;;		_STOP_BLINKING
  7313 ;; This function is called by:
  7314 ;;		_SET_HEATING_HANDLER
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           
  7319                           ;psect for function _SET_HEATING_HANDLER_ON_WORK
  7320  08AE                     _SET_HEATING_HANDLER_ON_WORK:	
  7321  08AE                     i1l4856:	
  7322                           ;incstack = 0
  7323 ;; hardware stack exceeded
  7324                           ; Regs used in _SET_HEATING_HANDLER_ON_WORK: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
  7325                           
  7326                           
  7327                           ;CONTROL.c: 351:             switch (HEATER_WORK_STATE)
  7328  08AE  28BE               	goto	i1l4866
  7329  08AF                     i1l4858:	
  7330                           
  7331                           ;CONTROL.c: 354:                     START_BLINKING_AT((11));
  7332  08AF  300B               	movlw	11
  7333  08B0  2159  120A  158A   	fcall	_START_BLINKING_AT
  7334                           
  7335                           ;CONTROL.c: 355:                 break;
  7336  08B3  28D5               	goto	i1l4868
  7337  08B4                     i1l4860:	
  7338                           
  7339                           ;CONTROL.c: 357:                     START_BLINKING_AT((13));
  7340  08B4  300D               	movlw	13
  7341  08B5  2159  120A  158A   	fcall	_START_BLINKING_AT
  7342                           
  7343                           ;CONTROL.c: 358:                 break;
  7344  08B8  28D5               	goto	i1l4868
  7345  08B9                     i1l4862:	
  7346                           
  7347                           ;CONTROL.c: 360:                     START_BLINKING_AT((15));
  7348  08B9  300F               	movlw	15
  7349  08BA  2159  120A  158A   	fcall	_START_BLINKING_AT
  7350                           
  7351                           ;CONTROL.c: 361:                 break;
  7352  08BD  28D5               	goto	i1l4868
  7353  08BE                     i1l4866:	
  7354  08BE  1683               	bsf	3,5	;RP0=1, select bank3
  7355  08BF  1703               	bsf	3,6	;RP1=1, select bank3
  7356  08C0  0828               	movf	_HEATER_WORK_STATE^(0+384),w
  7357  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  7358  08C2  1303               	bcf	3,6	;RP1=0, select bank0
  7359  08C3  00A6               	movwf	??_SET_HEATING_HANDLER_ON_WORK
  7360  08C4  01A7               	clrf	??_SET_HEATING_HANDLER_ON_WORK+1
  7361                           
  7362                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7363                           ; Switch size 1, requested type "speed"
  7364                           ; Number of cases is 1, Range of values is 0 to 0
  7365                           ; switch strategies available:
  7366                           ; Name         Instructions Cycles
  7367                           ; simple_byte            4     3 (average)
  7368                           ; direct_byte           11     8 (fixed)
  7369                           ; jumptable            260     6 (fixed)
  7370                           ;	Chosen strategy is simple_byte
  7371  08C5  0827               	movf	??_SET_HEATING_HANDLER_ON_WORK+1,w
  7372  08C6  3A00               	xorlw	0	; case 0
  7373  08C7  1903               	skipnz
  7374  08C8  28CA               	goto	i1l6922
  7375  08C9  28D5               	goto	i1l4868
  7376  08CA                     i1l6922:	
  7377                           
  7378                           ; Switch size 1, requested type "speed"
  7379                           ; Number of cases is 3, Range of values is 45 to 166
  7380                           ; switch strategies available:
  7381                           ; Name         Instructions Cycles
  7382                           ; simple_byte           10     6 (average)
  7383                           ; jumptable            263     9 (fixed)
  7384                           ;	Chosen strategy is simple_byte
  7385  08CA  0826               	movf	??_SET_HEATING_HANDLER_ON_WORK,w
  7386  08CB  3A2D               	xorlw	45	; case 45
  7387  08CC  1903               	skipnz
  7388  08CD  28AF               	goto	i1l4858
  7389  08CE  3A77               	xorlw	119	; case 90
  7390  08CF  1903               	skipnz
  7391  08D0  28B4               	goto	i1l4860
  7392  08D1  3AFC               	xorlw	252	; case 166
  7393  08D2  1903               	skipnz
  7394  08D3  28B9               	goto	i1l4862
  7395  08D4  28D5               	goto	i1l4868
  7396  08D5                     i1l4868:	
  7397                           
  7398                           ;CONTROL.c: 366:             if ( PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )
  7399  08D5  1683               	bsf	3,5	;RP0=1, select bank3
  7400  08D6  1703               	bsf	3,6	;RP1=1, select bank3
  7401  08D7  0B1F               	decfsz	(_PRESSED_KEY^(0+384)+1),w
  7402  08D8  0008               	return
  7403                           
  7404                           ;CONTROL.c: 367:             {;CONTROL.c: 368:                     if (PRESSED_KEY.KEYPA
      +                          D_NO == KEY_1)
  7405  08D9  081E               	movf	_PRESSED_KEY^(0+384),w
  7406  08DA  1D03               	btfss	3,2
  7407  08DB  28DF               	goto	i1l4874
  7408                           
  7409                           ;CONTROL.c: 369:                     {;CONTROL.c: 370:                       HEATER_WORK
      +                          _STATE = 45 ;
  7410  08DC  302D               	movlw	45
  7411  08DD  00A8               	movwf	_HEATER_WORK_STATE^(0+384)
  7412                           
  7413                           ;CONTROL.c: 371:                     }
  7414  08DE  0008               	return
  7415  08DF                     i1l4874:	
  7416  08DF  0B1E               	decfsz	_PRESSED_KEY^(0+384),w
  7417  08E0  28E4               	goto	i1l4878
  7418                           
  7419                           ;CONTROL.c: 373:                     {;CONTROL.c: 374:                       HEATER_WORK
      +                          _STATE = 90 ;
  7420  08E1  305A               	movlw	90
  7421  08E2  00A8               	movwf	_HEATER_WORK_STATE^(0+384)
  7422                           
  7423                           ;CONTROL.c: 375:                     }
  7424  08E3  0008               	return
  7425  08E4                     i1l4878:	
  7426  08E4  3002               	movlw	2
  7427  08E5  061E               	xorwf	_PRESSED_KEY^(0+384),w
  7428  08E6  1D03               	btfss	3,2
  7429  08E7  28EB               	goto	i1l4882
  7430                           
  7431                           ;CONTROL.c: 377:                     {;CONTROL.c: 378:                       HEATER_WORK
      +                          _STATE = 166 ;
  7432  08E8  30A6               	movlw	166
  7433  08E9  00A8               	movwf	_HEATER_WORK_STATE^(0+384)
  7434                           
  7435                           ;CONTROL.c: 379:                     }
  7436  08EA  0008               	return
  7437  08EB                     i1l4882:	
  7438  08EB  300B               	movlw	11
  7439  08EC  061E               	xorwf	_PRESSED_KEY^(0+384),w
  7440  08ED  1D03               	btfss	3,2
  7441  08EE  28F7               	goto	i1l4890
  7442                           
  7443                           ;CONTROL.c: 381:                     {;CONTROL.c: 382:                        CONTROL_CU
      +                          RRENT_STATE = SET_ROTOR_PWR;
  7444  08EF  3002               	movlw	2
  7445  08F0  1283               	bcf	3,5	;RP0=0, select bank0
  7446  08F1  1303               	bcf	3,6	;RP1=0, select bank0
  7447  08F2  00EE               	movwf	_CONTROL_CURRENT_STATE
  7448  08F3                     L22:	
  7449                           
  7450                           ;CONTROL.c: 383:                        HANDLERS_STATES[SET_HEATING] = FIRST_TIME ;
  7451  08F3  1683               	bsf	3,5	;RP0=1, select bank3
  7452  08F4  1703               	bsf	3,6	;RP1=1, select bank3
  7453  08F5  0191               	clrf	(_HANDLERS_STATES^(0+384)+1)
  7454                           
  7455                           ;CONTROL.c: 384:                        STOP_BLINKING();
  7456  08F6  2CB2               	ljmp	i1l4570
  7457  08F7                     i1l4890:	
  7458                           ;CONTROL.c: 385:                     }
  7459                           
  7460  08F7  3009               	movlw	9
  7461  08F8  061E               	xorwf	_PRESSED_KEY^(0+384),w
  7462  08F9  1D03               	btfss	3,2
  7463  08FA  0008               	return
  7464                           
  7465                           ;CONTROL.c: 387:                     {;CONTROL.c: 388:                        CONTROL_CU
      +                          RRENT_STATE = SET_TIME;
  7466  08FB  1283               	bcf	3,5	;RP0=0, select bank0
  7467  08FC  1303               	bcf	3,6	;RP1=0, select bank0
  7468  08FD  01EE               	clrf	_CONTROL_CURRENT_STATE
  7469  08FE  28F3               	goto	L22
  7470  08FF                     __end_of_SET_HEATING_HANDLER_ON_WORK:	
  7471                           ;CONTROL.c: 389:                         HANDLERS_STATES[SET_HEATING] = FIRST_TIME ;
  7472                           
  7473  08FF                     __ptext57:	
  7474 ;; *************** function _SET_ROTOR_PWR_HANDLER_ON_WORK *****************
  7475 ;; Defined at:
  7476 ;;		line 400 in file "CONTROL.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;		None
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;  PRESSED_KEY     2    8[BANK0 ] struct .
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  1    wreg      void 
  7483 ;; Registers used:
  7484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7485 ;; Tracked objects:
  7486 ;;		On entry : 300/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7490 ;;      Params:         0       0       0       0       0
  7491 ;;      Locals:         0       2       0       0       0
  7492 ;;      Temps:          0       2       0       0       0
  7493 ;;      Totals:         0       4       0       0       0
  7494 ;;Total ram usage:        4 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:    4
  7497 ;; This function calls:
  7498 ;;		_KEYPAD_GET_PRESSED_KEY
  7499 ;;		_START_BLINKING_AT
  7500 ;;		_STOP_BLINKING
  7501 ;; This function is called by:
  7502 ;;		_SET_ROTOR_PWR_HANDLER
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           
  7507                           ;psect for function _SET_ROTOR_PWR_HANDLER_ON_WORK
  7508  08FF                     _SET_ROTOR_PWR_HANDLER_ON_WORK:	
  7509  08FF                     i1l4900:	
  7510                           ;incstack = 0
  7511 ;; hardware stack exceeded
  7512                           ; Regs used in _SET_ROTOR_PWR_HANDLER_ON_WORK: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  7513                           
  7514                           
  7515                           ;CONTROL.c: 402:     switch (MOTOR_WORK_STATE)
  7516  08FF  290F               	goto	i1l4910
  7517  0900                     i1l4902:	
  7518                           
  7519                           ;CONTROL.c: 405:                     START_BLINKING_AT((11));
  7520  0900  300B               	movlw	11
  7521  0901  2159  120A  158A   	fcall	_START_BLINKING_AT
  7522                           
  7523                           ;CONTROL.c: 406:                 break;
  7524  0904  2926               	goto	i1l4912
  7525  0905                     i1l4904:	
  7526                           
  7527                           ;CONTROL.c: 408:                     START_BLINKING_AT((13));
  7528  0905  300D               	movlw	13
  7529  0906  2159  120A  158A   	fcall	_START_BLINKING_AT
  7530                           
  7531                           ;CONTROL.c: 409:                 break;
  7532  0909  2926               	goto	i1l4912
  7533  090A                     i1l4906:	
  7534                           
  7535                           ;CONTROL.c: 411:                     START_BLINKING_AT((15));
  7536  090A  300F               	movlw	15
  7537  090B  2159  120A  158A   	fcall	_START_BLINKING_AT
  7538                           
  7539                           ;CONTROL.c: 412:                 break;
  7540  090E  2926               	goto	i1l4912
  7541  090F                     i1l4910:	
  7542  090F  1683               	bsf	3,5	;RP0=1, select bank3
  7543  0910  1703               	bsf	3,6	;RP1=1, select bank3
  7544  0911  0829               	movf	_MOTOR_WORK_STATE^(0+384),w
  7545  0912  1283               	bcf	3,5	;RP0=0, select bank0
  7546  0913  1303               	bcf	3,6	;RP1=0, select bank0
  7547  0914  00A6               	movwf	??_SET_ROTOR_PWR_HANDLER_ON_WORK
  7548  0915  01A7               	clrf	??_SET_ROTOR_PWR_HANDLER_ON_WORK+1
  7549                           
  7550                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7551                           ; Switch size 1, requested type "speed"
  7552                           ; Number of cases is 1, Range of values is 0 to 0
  7553                           ; switch strategies available:
  7554                           ; Name         Instructions Cycles
  7555                           ; simple_byte            4     3 (average)
  7556                           ; direct_byte           11     8 (fixed)
  7557                           ; jumptable            260     6 (fixed)
  7558                           ;	Chosen strategy is simple_byte
  7559  0916  0827               	movf	??_SET_ROTOR_PWR_HANDLER_ON_WORK+1,w
  7560  0917  3A00               	xorlw	0	; case 0
  7561  0918  1903               	skipnz
  7562  0919  291B               	goto	i1l6918
  7563  091A  2926               	goto	i1l4912
  7564  091B                     i1l6918:	
  7565                           
  7566                           ; Switch size 1, requested type "speed"
  7567                           ; Number of cases is 3, Range of values is 30 to 100
  7568                           ; switch strategies available:
  7569                           ; Name         Instructions Cycles
  7570                           ; simple_byte           10     6 (average)
  7571                           ; direct_byte          224    11 (fixed)
  7572                           ; jumptable            263     9 (fixed)
  7573                           ;	Chosen strategy is simple_byte
  7574  091B  0826               	movf	??_SET_ROTOR_PWR_HANDLER_ON_WORK,w
  7575  091C  3A1E               	xorlw	30	; case 30
  7576  091D  1903               	skipnz
  7577  091E  2900               	goto	i1l4902
  7578  091F  3A2C               	xorlw	44	; case 50
  7579  0920  1903               	skipnz
  7580  0921  2905               	goto	i1l4904
  7581  0922  3A56               	xorlw	86	; case 100
  7582  0923  1903               	skipnz
  7583  0924  290A               	goto	i1l4906
  7584  0925  2926               	goto	i1l4912
  7585  0926                     i1l4912:	
  7586                           
  7587                           ;CONTROL.c: 417:               tKEYPAD_PRESSED PRESSED_KEY = KEYPAD_GET_PRESSED_KEY();
  7588  0926  27AF  120A  158A   	fcall	_KEYPAD_GET_PRESSED_KEY
  7589  0929  0871               	movf	?_KEYPAD_GET_PRESSED_KEY+1,w
  7590  092A  1283               	bcf	3,5	;RP0=0, select bank0
  7591  092B  1303               	bcf	3,6	;RP1=0, select bank0
  7592  092C  00A9               	movwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY+1
  7593  092D  0870               	movf	?_KEYPAD_GET_PRESSED_KEY,w
  7594  092E  00A8               	movwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY
  7595                           
  7596                           ;CONTROL.c: 418:             if ( PRESSED_KEY.KEYPAD_STATUS == KEY_PRE_PRESSED )
  7597  092F  0B29               	decfsz	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY+1,w
  7598  0930  0008               	return
  7599                           
  7600                           ;CONTROL.c: 419:             {;CONTROL.c: 420:                     if (PRESSED_KEY.KEYPA
      +                          D_NO == KEY_1)
  7601  0931  0828               	movf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7602  0932  1D03               	btfss	3,2
  7603  0933  2939               	goto	i1l4920
  7604                           
  7605                           ;CONTROL.c: 421:                     {;CONTROL.c: 422:                       MOTOR_WORK_
      +                          STATE = 30 ;
  7606  0934  301E               	movlw	30
  7607  0935  1683               	bsf	3,5	;RP0=1, select bank3
  7608  0936  1703               	bsf	3,6	;RP1=1, select bank3
  7609  0937  00A9               	movwf	_MOTOR_WORK_STATE^(0+384)
  7610                           
  7611                           ;CONTROL.c: 423:                     }
  7612  0938  0008               	return
  7613  0939                     i1l4920:	
  7614  0939  0B28               	decfsz	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7615  093A  2940               	goto	i1l4924
  7616                           
  7617                           ;CONTROL.c: 425:                     {;CONTROL.c: 426:                       MOTOR_WORK_
      +                          STATE = 50 ;
  7618  093B  3032               	movlw	50
  7619  093C  1683               	bsf	3,5	;RP0=1, select bank3
  7620  093D  1703               	bsf	3,6	;RP1=1, select bank3
  7621  093E  00A9               	movwf	_MOTOR_WORK_STATE^(0+384)
  7622                           
  7623                           ;CONTROL.c: 427:                     }
  7624  093F  0008               	return
  7625  0940                     i1l4924:	
  7626  0940  3002               	movlw	2
  7627  0941  0628               	xorwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7628  0942  1D03               	btfss	3,2
  7629  0943  2949               	goto	i1l4928
  7630                           
  7631                           ;CONTROL.c: 429:                     {;CONTROL.c: 430:                       MOTOR_WORK_
      +                          STATE = 100 ;
  7632  0944  3064               	movlw	100
  7633  0945  1683               	bsf	3,5	;RP0=1, select bank3
  7634  0946  1703               	bsf	3,6	;RP1=1, select bank3
  7635  0947  00A9               	movwf	_MOTOR_WORK_STATE^(0+384)
  7636                           
  7637                           ;CONTROL.c: 431:                     }
  7638  0948  0008               	return
  7639  0949                     i1l4928:	
  7640  0949  300B               	movlw	11
  7641  094A  0628               	xorwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7642  094B  1D03               	btfss	3,2
  7643  094C  2952               	goto	i1l4934
  7644                           
  7645                           ;CONTROL.c: 433:                     {;CONTROL.c: 434:                        CONTROL_CU
      +                          RRENT_STATE =SET_TIME ;
  7646  094D  01EE               	clrf	_CONTROL_CURRENT_STATE
  7647  094E                     L21:	
  7648                           
  7649                           ;CONTROL.c: 435:                        HANDLERS_STATES[SET_ROTOR_PWR] = FIRST_TIME ;
  7650  094E  1683               	bsf	3,5	;RP0=1, select bank3
  7651  094F  1703               	bsf	3,6	;RP1=1, select bank3
  7652  0950  0192               	clrf	(_HANDLERS_STATES^(0+384)+2)
  7653                           
  7654                           ;CONTROL.c: 436:                        STOP_BLINKING();
  7655  0951  2CB2               	ljmp	i1l4570
  7656  0952                     i1l4934:	
  7657                           ;CONTROL.c: 437:                     }
  7658                           
  7659  0952  3009               	movlw	9
  7660  0953  0628               	xorwf	SET_ROTOR_PWR_HANDLER_ON_WORK@PRESSED_KEY,w
  7661  0954  1D03               	btfss	3,2
  7662  0955  0008               	return
  7663                           
  7664                           ;CONTROL.c: 439:                     {;CONTROL.c: 440:                        CONTROL_CU
      +                          RRENT_STATE = SET_HEATING;
  7665  0956  01EE               	clrf	_CONTROL_CURRENT_STATE
  7666  0957  0AEE               	incf	_CONTROL_CURRENT_STATE,f
  7667  0958  294E               	goto	L21
  7668  0959                     __end_of_SET_ROTOR_PWR_HANDLER_ON_WORK:	
  7669                           ;CONTROL.c: 441:                        HANDLERS_STATES[SET_ROTOR_PWR] = FIRST_TIME ;
  7670                           
  7671  0959                     __ptext62:	
  7672 ;; *************** function _START_BLINKING_AT *****************
  7673 ;; Defined at:
  7674 ;;		line 110 in file "LCD.c"
  7675 ;; Parameters:    Size  Location     Type
  7676 ;;  BLINKED         1    wreg     unsigned char 
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;  BLINKED         1    5[BANK0 ] unsigned char 
  7679 ;; Return value:  Size  Location     Type
  7680 ;;                  1    wreg      void 
  7681 ;; Registers used:
  7682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7683 ;; Tracked objects:
  7684 ;;		On entry : 300/0
  7685 ;;		On exit  : 0/0
  7686 ;;		Unchanged: 0/0
  7687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7688 ;;      Params:         0       0       0       0       0
  7689 ;;      Locals:         0       1       0       0       0
  7690 ;;      Temps:          0       0       0       0       0
  7691 ;;      Totals:         0       1       0       0       0
  7692 ;;Total ram usage:        1 bytes
  7693 ;; Hardware stack levels used:    1
  7694 ;; Hardware stack levels required when called:    3
  7695 ;; This function calls:
  7696 ;;		_LCD_SET_CURSOR
  7697 ;;		i1_LCD_SND_COMMAND
  7698 ;; This function is called by:
  7699 ;;		_SET_HEATING_HANDLER_ON_WORK
  7700 ;;		_SET_ROTOR_PWR_HANDLER_ON_WORK
  7701 ;;		_GOTO_NEXT_DIGIT
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           
  7706                           ;psect for function _START_BLINKING_AT
  7707  0959                     _START_BLINKING_AT:	
  7708                           
  7709                           ;incstack = 0
  7710 ;; hardware stack exceeded
  7711                           ; Regs used in _START_BLINKING_AT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7712                           ;START_BLINKING_AT@BLINKED stored from wreg
  7713  0959  00A5               	movwf	START_BLINKING_AT@BLINKED
  7714                           
  7715                           ;LCD.c: 110: void START_BLINKING_AT (tbyte BLINKED);LCD.c: 111: {;LCD.c: 112:     LCD_SE
      +                          T_CURSOR(0 , BLINKED );
  7716  095A  00A1               	movwf	LCD_SET_CURSOR@row
  7717  095B  3000               	movlw	0
  7718  095C  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
  7719                           
  7720                           ;LCD.c: 114:     LCD_SND_COMMAND(0x0F);
  7721  095F  300F               	movlw	15
  7722  0960  270E               	fcall	i1_LCD_SND_COMMAND
  7723  0961  0008               	return
  7724  0962                     __end_of_START_BLINKING_AT:	
  7725  0962                     __ptext75:	
  7726 ;; *************** function _DEFAULT_HANDLER *****************
  7727 ;; Defined at:
  7728 ;;		line 291 in file "CONTROL.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;		None
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;		None
  7733 ;; Return value:  Size  Location     Type
  7734 ;;                  1    wreg      void 
  7735 ;; Registers used:
  7736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7737 ;; Tracked objects:
  7738 ;;		On entry : 0/0
  7739 ;;		On exit  : 0/0
  7740 ;;		Unchanged: 0/0
  7741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7742 ;;      Params:         0       0       0       0       0
  7743 ;;      Locals:         0       0       0       0       0
  7744 ;;      Temps:          0       0       0       0       0
  7745 ;;      Totals:         0       0       0       0       0
  7746 ;;Total ram usage:        0 bytes
  7747 ;; Hardware stack levels used:    1
  7748 ;; Hardware stack levels required when called:    6
  7749 ;; This function calls:
  7750 ;;		_DISP_SHOW_TIME_AT
  7751 ;;		_DISP_STATMENT
  7752 ;;		_STOP_BLINKING
  7753 ;;		_SW_GET_STATE
  7754 ;; This function is called by:
  7755 ;;		_CONTROL_UPDATE
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           
  7760                           ;psect for function _DEFAULT_HANDLER
  7761  0962                     _DEFAULT_HANDLER:	
  7762  0962                     i1l6026:	
  7763                           ;incstack = 0
  7764 ;; hardware stack exceeded
  7765                           ; Regs used in _DEFAULT_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7766                           
  7767                           
  7768                           ;CONTROL.c: 293:  if(( CONTROL_CURRENT_STATE != HEATING )&( CONTROL_CURRENT_STATE != FIN
      +                          ISH ))
  7769  0962  3003               	movlw	3
  7770  0963  1283               	bcf	3,5	;RP0=0, select bank0
  7771  0964  1303               	bcf	3,6	;RP1=0, select bank0
  7772  0965  066E               	xorwf	_CONTROL_CURRENT_STATE,w
  7773  0966  1903               	btfsc	3,2
  7774  0967  0008               	return
  7775  0968  3004               	movlw	4
  7776  0969  066E               	xorwf	_CONTROL_CURRENT_STATE,w
  7777  096A  1903               	btfsc	3,2
  7778  096B  0008               	return
  7779                           
  7780                           ;CONTROL.c: 294:  {;CONTROL.c: 296:     if ( SW_GET_STATE(START) == SW_PRE_PRESSED )
  7781  096C  3000               	movlw	0
  7782  096D  2256  120A  158A   	fcall	_SW_GET_STATE
  7783  0970  3A01               	xorlw	1
  7784  0971  1D03               	skipz
  7785  0972  0008               	return
  7786                           
  7787                           ;CONTROL.c: 297:     {;CONTROL.c: 299:         if ((SETTED_TIME.HOURS == 0)&
  7788  0973  1283               	bcf	3,5	;RP0=0, select bank0
  7789  0974  1303               	bcf	3,6	;RP1=0, select bank0
  7790  0975  086D               	movf	_SETTED_TIME+2,w
  7791  0976  1D03               	btfss	3,2
  7792  0977  2999               	goto	i1l6050
  7793  0978  086C               	movf	_SETTED_TIME+1,w
  7794  0979  1D03               	btfss	3,2
  7795  097A  2999               	goto	i1l6050
  7796  097B  086B               	movf	_SETTED_TIME,w
  7797  097C  1D03               	btfss	3,2
  7798  097D  2999               	goto	i1l6050
  7799                           
  7800                           ;CONTROL.c: 302:             {;CONTROL.c: 304:                 if (CONTROL_CURRENT_STATE
      +                           != SET_TIME)
  7801  097E  086E               	movf	_CONTROL_CURRENT_STATE,w
  7802  097F  1903               	btfsc	3,2
  7803  0980  2994               	goto	i1l6046
  7804                           
  7805                           ;CONTROL.c: 305:                {;CONTROL.c: 306:                     DISP_SHOW_TIME_AT(
      +                          SETTED_TIME);
  7806  0981  086B               	movf	_SETTED_TIME,w
  7807  0982  00AF               	movwf	DISP_SHOW_TIME_AT@START_TIME
  7808  0983  086C               	movf	_SETTED_TIME+1,w
  7809  0984  00B0               	movwf	DISP_SHOW_TIME_AT@START_TIME+1
  7810  0985  086D               	movf	_SETTED_TIME+2,w
  7811  0986  00B1               	movwf	DISP_SHOW_TIME_AT@START_TIME+2
  7812  0987  24A5  120A  158A   	fcall	_DISP_SHOW_TIME_AT
  7813                           
  7814                           ;CONTROL.c: 307:                     DISP_STATMENT("< SET TIME !!! >");
  7815  098A  3023               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  7816  098B  2280               	fcall	_DISP_STATMENT
  7817                           
  7818                           ;CONTROL.c: 308:                     HANDLERS_STATES[SET_TIME] = ON_WORK;
  7819  098C  1683               	bsf	3,5	;RP0=1, select bank3
  7820  098D  1703               	bsf	3,6	;RP1=1, select bank3
  7821  098E  0190               	clrf	_HANDLERS_STATES^(0+384)
  7822  098F  0A90               	incf	_HANDLERS_STATES^(0+384),f
  7823                           
  7824                           ;CONTROL.c: 309:                     CONTROL_CURRENT_STATE = SET_TIME;
  7825  0990  1283               	bcf	3,5	;RP0=0, select bank0
  7826  0991  1303               	bcf	3,6	;RP1=0, select bank0
  7827  0992  01EE               	clrf	_CONTROL_CURRENT_STATE
  7828                           
  7829                           ;CONTROL.c: 310:                 }
  7830  0993  0008               	return
  7831  0994                     i1l6046:	
  7832                           
  7833                           ;CONTROL.c: 312:                 {;CONTROL.c: 314:                     DISP_STATMENT("< 
      +                          SET TIME !!! >");
  7834  0994  3023               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  7835  0995  2280               	fcall	_DISP_STATMENT
  7836                           
  7837                           ;CONTROL.c: 315:                     CURRENT_DIGIT = (6);
  7838  0996  3006               	movlw	6
  7839  0997  00EF               	movwf	_CURRENT_DIGIT
  7840  0998  0008               	return
  7841  0999                     i1l6050:	
  7842                           
  7843                           ;CONTROL.c: 319:         {;CONTROL.c: 321:             if (SW_GET_STATE(FOOD_SENSOR) != 
      +                          SW_RELEASED )
  7844  0999  3002               	movlw	2
  7845  099A  2256  120A  158A   	fcall	_SW_GET_STATE
  7846  099D  3A02               	xorlw	2
  7847  099E  1903               	skipnz
  7848  099F  29A2               	goto	i1l6054
  7849                           
  7850                           ;CONTROL.c: 322:             {;CONTROL.c: 323:                 DISP_STATMENT("< PUT FOOD
      +                           IN !>");
  7851  09A0  3034               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  7852  09A1  2A80               	ljmp	_DISP_STATMENT
  7853  09A2                     i1l6054:	
  7854                           ;CONTROL.c: 324:             }
  7855                           
  7856                           
  7857                           ;CONTROL.c: 326:             {;CONTROL.c: 328:                 if(SW_GET_STATE(DOOR_SENS
      +                          OR) != SW_RELEASED )
  7858  09A2  3003               	movlw	3
  7859  09A3  2256  120A  158A   	fcall	_SW_GET_STATE
  7860  09A6  3A02               	xorlw	2
  7861  09A7  1903               	skipnz
  7862  09A8  29AB               	goto	i1l6058
  7863                           
  7864                           ;CONTROL.c: 329:                 {;CONTROL.c: 330:                     DISP_STATMENT("< 
      +                          CLOSE DOOR !!>");
  7865  09A9  3056               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  7866  09AA  2A80               	ljmp	_DISP_STATMENT
  7867  09AB                     i1l6058:	
  7868                           ;CONTROL.c: 331:                 }
  7869                           
  7870                           
  7871                           ;CONTROL.c: 333:                 {;CONTROL.c: 335:                     HANDLERS_STATES[C
      +                          ONTROL_CURRENT_STATE] = FIRST_TIME;
  7872  09AB  1283               	bcf	3,5	;RP0=0, select bank0
  7873  09AC  1303               	bcf	3,6	;RP1=0, select bank0
  7874  09AD  086E               	movf	_CONTROL_CURRENT_STATE,w
  7875  09AE  3E90               	addlw	(low (_HANDLERS_STATES| (0+256)))& (0+255)
  7876  09AF  0084               	movwf	4
  7877  09B0  3003               	movlw	3
  7878  09B1  0180               	clrf	0
  7879                           
  7880                           ;CONTROL.c: 336:                     CONTROL_CURRENT_STATE = HEATING;
  7881  09B2  00EE               	movwf	_CONTROL_CURRENT_STATE
  7882                           
  7883                           ;CONTROL.c: 337:                     STOP_BLINKING();
  7884  09B3  2CB2               	ljmp	i1l4570
  7885  09B4                     __end_of_DEFAULT_HANDLER:	
  7886  09B4                     __ptext64:	
  7887 ;; *************** function _HEATING_HANDLER *****************
  7888 ;; Defined at:
  7889 ;;		line 185 in file "CONTROL.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;		None
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;  current_time    3   20[BANK0 ] struct .
  7894 ;; Return value:  Size  Location     Type
  7895 ;;                  1    wreg      void 
  7896 ;; Registers used:
  7897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7898 ;; Tracked objects:
  7899 ;;		On entry : 0/0
  7900 ;;		On exit  : 0/0
  7901 ;;		Unchanged: 0/0
  7902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7903 ;;      Params:         0       0       0       0       0
  7904 ;;      Locals:         0       3       0       0       0
  7905 ;;      Temps:          0       2       0       0       0
  7906 ;;      Totals:         0       5       0       0       0
  7907 ;;Total ram usage:        5 bytes
  7908 ;; Hardware stack levels used:    1
  7909 ;; Hardware stack levels required when called:    6
  7910 ;; This function calls:
  7911 ;;		_DISP_SHOW_TIME_AT
  7912 ;;		_DISP_STATMENT
  7913 ;;		_DISP_UPDATE_TIME
  7914 ;;		_LED_SET_STATE
  7915 ;;		_STOP_BLINKING
  7916 ;;		_STOP_HEATING
  7917 ;;		_SW_GET_STATE
  7918 ;;		_TIME_GET
  7919 ;;		_TIME_START_AT
  7920 ;;		i1_HEATER_SET_STATE
  7921 ;;		i1_MOTOR_SET_STATE
  7922 ;; This function is called by:
  7923 ;;		_CONTROL_UPDATE
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927                           
  7928                           ;psect for function _HEATING_HANDLER
  7929  09B4                     _HEATING_HANDLER:	
  7930                           
  7931                           ;CONTROL.c: 187:     tTIME current_time = TIME_GET();
  7932                           
  7933                           ;incstack = 0
  7934 ;; hardware stack exceeded
  7935                           ; Regs used in _HEATING_HANDLER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7936  09B4  24B5  120A  158A   	fcall	_TIME_GET
  7937  09B7  0870               	movf	?_TIME_GET,w
  7938  09B8  1283               	bcf	3,5	;RP0=0, select bank0
  7939  09B9  1303               	bcf	3,6	;RP1=0, select bank0
  7940  09BA  00B4               	movwf	HEATING_HANDLER@current_time
  7941  09BB  0871               	movf	?_TIME_GET+1,w
  7942  09BC  00B5               	movwf	HEATING_HANDLER@current_time+1
  7943  09BD  0872               	movf	?_TIME_GET+2,w
  7944  09BE  00B6               	movwf	HEATING_HANDLER@current_time+2
  7945                           
  7946                           ;CONTROL.c: 247:                 }
  7947                           
  7948                           ;CONTROL.c: 241:                        }
  7949                           
  7950                           ;CONTROL.c: 188:     switch (HANDLERS_STATES[HEATING])
  7951  09BF  1683               	bsf	3,5	;RP0=1, select bank3
  7952  09C0  1703               	bsf	3,6	;RP1=1, select bank3
  7953  09C1  0813               	movf	(_HANDLERS_STATES^(0+384)+3),w
  7954  09C2  1283               	bcf	3,5	;RP0=0, select bank0
  7955  09C3  1303               	bcf	3,6	;RP1=0, select bank0
  7956  09C4  00B2               	movwf	??_HEATING_HANDLER
  7957  09C5  01B3               	clrf	??_HEATING_HANDLER+1
  7958                           
  7959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7960                           ; Switch size 1, requested type "speed"
  7961                           ; Number of cases is 1, Range of values is 0 to 0
  7962                           ; switch strategies available:
  7963                           ; Name         Instructions Cycles
  7964                           ; simple_byte            4     3 (average)
  7965                           ; direct_byte           11     8 (fixed)
  7966                           ; jumptable            260     6 (fixed)
  7967                           ;	Chosen strategy is simple_byte
  7968  09C6  0833               	movf	??_HEATING_HANDLER+1,w
  7969  09C7  3A00               	xorlw	0	; case 0
  7970  09C8  1903               	skipnz
  7971  09C9  2A4D               	goto	i1l6924
  7972  09CA  2A55               	goto	i1l756
  7973  09CB                     i1l5938:	
  7974                           
  7975                           ;CONTROL.c: 191:             STOP_BLINKING();
  7976  09CB  24B2  120A  158A   	fcall	_STOP_BLINKING
  7977                           
  7978                           ;CONTROL.c: 192:             MOTOR_SET_STATE(MOTOR_WORK_STATE );
  7979  09CE  1683               	bsf	3,5	;RP0=1, select bank3
  7980  09CF  1703               	bsf	3,6	;RP1=1, select bank3
  7981  09D0  0829               	movf	_MOTOR_WORK_STATE^(0+384),w
  7982  09D1  24A0  120A  158A   	fcall	i1_MOTOR_SET_STATE
  7983                           
  7984                           ;CONTROL.c: 193:             HEATER_SET_STATE(HEATER_WORK_STATE);
  7985  09D4  0828               	movf	_HEATER_WORK_STATE^(0+384),w
  7986  09D5  249D  120A  158A   	fcall	i1_HEATER_SET_STATE
  7987                           
  7988                           ;CONTROL.c: 194:             LED_SET_STATE(LAMP , LED_ON);
  7989  09D8  1283               	bcf	3,5	;RP0=0, select bank0
  7990  09D9  1303               	bcf	3,6	;RP1=0, select bank0
  7991  09DA  3000               	movlw	0
  7992  09DB  01A0               	clrf	LED_SET_STATE@LED_STATE
  7993  09DC  0AA0               	incf	LED_SET_STATE@LED_STATE,f
  7994  09DD  2291  120A  158A   	fcall	_LED_SET_STATE
  7995                           
  7996                           ;CONTROL.c: 195:             TIME_START_AT (SETTED_TIME.SECONDS ,SETTED_TIME.MINUTES , S
      +                          ETTED_TIME.HOURS , DECREMENTAL_TO_O );
  7997  09E0  086C               	movf	_SETTED_TIME+1,w
  7998  09E1  00F0               	movwf	TIME_START_AT@START_MINUTES
  7999  09E2  086D               	movf	_SETTED_TIME+2,w
  8000  09E3  00F1               	movwf	TIME_START_AT@START_HOURS
  8001  09E4  01F2               	clrf	TIME_START_AT@COUNTING_TYPE
  8002  09E5  086B               	movf	_SETTED_TIME,w
  8003  09E6  252A  120A  158A   	fcall	_TIME_START_AT
  8004                           
  8005                           ;CONTROL.c: 196:             DISP_SHOW_TIME_AT( SETTED_TIME );
  8006  09E9  1283               	bcf	3,5	;RP0=0, select bank0
  8007  09EA  1303               	bcf	3,6	;RP1=0, select bank0
  8008  09EB  086B               	movf	_SETTED_TIME,w
  8009  09EC  00AF               	movwf	DISP_SHOW_TIME_AT@START_TIME
  8010  09ED  086C               	movf	_SETTED_TIME+1,w
  8011  09EE  00B0               	movwf	DISP_SHOW_TIME_AT@START_TIME+1
  8012  09EF  086D               	movf	_SETTED_TIME+2,w
  8013  09F0  00B1               	movwf	DISP_SHOW_TIME_AT@START_TIME+2
  8014  09F1  24A5               	fcall	_DISP_SHOW_TIME_AT
  8015                           
  8016                           ;CONTROL.c: 197:             HANDLERS_STATES[HEATING] = ON_WORK ;
  8017  09F2  1683               	bsf	3,5	;RP0=1, select bank3
  8018  09F3  1703               	bsf	3,6	;RP1=1, select bank3
  8019  09F4  0193               	clrf	(_HANDLERS_STATES^(0+384)+3)
  8020  09F5  0A93               	incf	(_HANDLERS_STATES^(0+384)+3),f
  8021                           
  8022                           ;CONTROL.c: 198:         break;
  8023  09F6  0008               	return
  8024  09F7                     i1l5950:	
  8025                           
  8026                           ;CONTROL.c: 201:             DISP_UPDATE_TIME(current_time);
  8027  09F7  0834               	movf	HEATING_HANDLER@current_time,w
  8028  09F8  00AF               	movwf	DISP_UPDATE_TIME@time
  8029  09F9  0835               	movf	HEATING_HANDLER@current_time+1,w
  8030  09FA  00B0               	movwf	DISP_UPDATE_TIME@time+1
  8031  09FB  0836               	movf	HEATING_HANDLER@current_time+2,w
  8032  09FC  00B1               	movwf	DISP_UPDATE_TIME@time+2
  8033  09FD  2079  120A  158A   	fcall	_DISP_UPDATE_TIME
  8034                           
  8035                           ;CONTROL.c: 203:             if ((current_time.HOURS == 0)&
  8036  0A00  1283               	bcf	3,5	;RP0=0, select bank0
  8037  0A01  1303               	bcf	3,6	;RP1=0, select bank0
  8038  0A02  0836               	movf	HEATING_HANDLER@current_time+2,w
  8039  0A03  1D03               	btfss	3,2
  8040  0A04  2A14               	goto	i1l5964
  8041  0A05  0835               	movf	HEATING_HANDLER@current_time+1,w
  8042  0A06  1D03               	btfss	3,2
  8043  0A07  2A14               	goto	i1l5964
  8044  0A08  0834               	movf	HEATING_HANDLER@current_time,w
  8045  0A09  1D03               	btfss	3,2
  8046  0A0A  2A14               	goto	i1l5964
  8047                           
  8048                           ;CONTROL.c: 206:             {;CONTROL.c: 207:                 STOP_HEATING();
  8049  0A0B  2261               	fcall	_STOP_HEATING
  8050                           
  8051                           ;CONTROL.c: 208:                 CONTROL_CURRENT_STATE = FINISH;
  8052  0A0C  3004               	movlw	4
  8053  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
  8054  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
  8055  0A0F  00EE               	movwf	_CONTROL_CURRENT_STATE
  8056                           
  8057                           ;CONTROL.c: 209:                 HANDLERS_STATES[HEATING] = FIRST_TIME ;
  8058  0A10  1683               	bsf	3,5	;RP0=1, select bank3
  8059  0A11  1703               	bsf	3,6	;RP1=1, select bank3
  8060  0A12  0193               	clrf	(_HANDLERS_STATES^(0+384)+3)
  8061                           
  8062                           ;CONTROL.c: 210:             }
  8063  0A13  0008               	return
  8064  0A14                     i1l5964:	
  8065                           
  8066                           ;CONTROL.c: 212:             {;CONTROL.c: 213:                 if (SW_GET_STATE(FOOD_SEN
      +                          SOR) != SW_RELEASED )
  8067  0A14  3002               	movlw	2
  8068  0A15  2256  120A  158A   	fcall	_SW_GET_STATE
  8069  0A18  3A02               	xorlw	2
  8070  0A19  1903               	skipnz
  8071  0A1A  2A27               	goto	i1l5974
  8072                           
  8073                           ;CONTROL.c: 214:                 {;CONTROL.c: 216:                     STOP_HEATING();
  8074  0A1B  2261  120A  158A   	fcall	_STOP_HEATING
  8075                           
  8076                           ;CONTROL.c: 217:                     CONTROL_CURRENT_STATE = SET_TIME;
  8077  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  8078  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  8079  0A20  01EE               	clrf	_CONTROL_CURRENT_STATE
  8080                           
  8081                           ;CONTROL.c: 218:                     HANDLERS_STATES[SET_TIME] = ON_WORK;
  8082  0A21  1683               	bsf	3,5	;RP0=1, select bank3
  8083  0A22  1703               	bsf	3,6	;RP1=1, select bank3
  8084  0A23  3045               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  8085  0A24  0190               	clrf	_HANDLERS_STATES^(0+384)
  8086  0A25  0A90               	incf	_HANDLERS_STATES^(0+384),f
  8087                           
  8088                           ;CONTROL.c: 219:                     DISP_STATMENT("< CHECK FOOD !!>");
  8089  0A26  2A80               	ljmp	_DISP_STATMENT
  8090  0A27                     i1l5974:	
  8091                           ;CONTROL.c: 220:                 }
  8092                           
  8093                           
  8094                           ;CONTROL.c: 222:                 {;CONTROL.c: 223:                     if(SW_GET_STATE(D
      +                          OOR_SENSOR) != SW_RELEASED )
  8095  0A27  3003               	movlw	3
  8096  0A28  2256  120A  158A   	fcall	_SW_GET_STATE
  8097  0A2B  3A02               	xorlw	2
  8098  0A2C  1903               	skipnz
  8099  0A2D  2A3A               	goto	i1l5984
  8100                           
  8101                           ;CONTROL.c: 224:                     {;CONTROL.c: 226:                         STOP_HEAT
      +                          ING();
  8102  0A2E  2261  120A  158A   	fcall	_STOP_HEATING
  8103                           
  8104                           ;CONTROL.c: 227:                         CONTROL_CURRENT_STATE = SET_TIME;
  8105  0A31  1283               	bcf	3,5	;RP0=0, select bank0
  8106  0A32  1303               	bcf	3,6	;RP1=0, select bank0
  8107  0A33  01EE               	clrf	_CONTROL_CURRENT_STATE
  8108                           
  8109                           ;CONTROL.c: 228:                         HANDLERS_STATES[SET_TIME] = ON_WORK;
  8110  0A34  1683               	bsf	3,5	;RP0=1, select bank3
  8111  0A35  1703               	bsf	3,6	;RP1=1, select bank3
  8112  0A36  3056               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  8113  0A37  0190               	clrf	_HANDLERS_STATES^(0+384)
  8114  0A38  0A90               	incf	_HANDLERS_STATES^(0+384),f
  8115                           
  8116                           ;CONTROL.c: 229:                         DISP_STATMENT("< CLOSE DOOR !!>");
  8117  0A39  2A80               	ljmp	_DISP_STATMENT
  8118  0A3A                     i1l5984:	
  8119                           ;CONTROL.c: 231:                     }
  8120                           
  8121                           
  8122                           ;CONTROL.c: 233:                     {;CONTROL.c: 234:                        if(SW_GET_
      +                          STATE(Cancel) == SW_PRE_PRESSED )
  8123  0A3A  3001               	movlw	1
  8124  0A3B  2256  120A  158A   	fcall	_SW_GET_STATE
  8125  0A3E  3A01               	xorlw	1
  8126  0A3F  1D03               	skipz
  8127  0A40  0008               	return
  8128                           
  8129                           ;CONTROL.c: 235:                        {;CONTROL.c: 237:                          STOP_
      +                          HEATING();
  8130  0A41  2261  120A  158A   	fcall	_STOP_HEATING
  8131                           
  8132                           ;CONTROL.c: 238:                          CONTROL_CURRENT_STATE = SET_TIME;
  8133  0A44  1283               	bcf	3,5	;RP0=0, select bank0
  8134  0A45  1303               	bcf	3,6	;RP1=0, select bank0
  8135  0A46  01EE               	clrf	_CONTROL_CURRENT_STATE
  8136                           
  8137                           ;CONTROL.c: 239:                          HANDLERS_STATES[SET_TIME] = ON_WORK;
  8138  0A47  1683               	bsf	3,5	;RP0=1, select bank3
  8139  0A48  1703               	bsf	3,6	;RP1=1, select bank3
  8140  0A49  3001               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  8141  0A4A  0190               	clrf	_HANDLERS_STATES^(0+384)
  8142  0A4B  0A90               	incf	_HANDLERS_STATES^(0+384),f
  8143                           
  8144                           ;CONTROL.c: 240:                          DISP_STATMENT("< CANCELLED !! >");
  8145  0A4C  2A80               	ljmp	_DISP_STATMENT
  8146  0A4D                     i1l6924:	
  8147                           
  8148                           ; Switch size 1, requested type "speed"
  8149                           ; Number of cases is 2, Range of values is 0 to 1
  8150                           ; switch strategies available:
  8151                           ; Name         Instructions Cycles
  8152                           ; simple_byte            7     4 (average)
  8153                           ; direct_byte           14     8 (fixed)
  8154                           ; jumptable            260     6 (fixed)
  8155                           ;	Chosen strategy is simple_byte
  8156  0A4D  0832               	movf	??_HEATING_HANDLER,w
  8157  0A4E  3A00               	xorlw	0	; case 0
  8158  0A4F  1903               	skipnz
  8159  0A50  29CB               	goto	i1l5938
  8160  0A51  3A01               	xorlw	1	; case 1
  8161  0A52  1903               	skipnz
  8162  0A53  29F7               	goto	i1l5950
  8163  0A54  2A55               	goto	i1l756
  8164  0A55                     i1l756:	
  8165  0A55  0008               	return
  8166  0A56                     __end_of_HEATING_HANDLER:	
  8167  0A56                     __ptext76:	
  8168 ;; *************** function _SW_GET_STATE *****************
  8169 ;; Defined at:
  8170 ;;		line 124 in file "SW.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;  SW_NO           1    wreg     enum E5
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;  SW_NO           1    3[COMMON] enum E5
  8175 ;;  ret             1    4[COMMON] enum E908
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  1    wreg      enum E908
  8178 ;; Registers used:
  8179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/300
  8182 ;;		On exit  : 800/800
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8185 ;;      Params:         0       0       0       0       0
  8186 ;;      Locals:         2       0       0       0       0
  8187 ;;      Temps:          0       0       0       0       0
  8188 ;;      Totals:         2       0       0       0       0
  8189 ;;Total ram usage:        2 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; Hardware stack levels required when called:    1
  8192 ;; This function calls:
  8193 ;;		i1___bmul
  8194 ;; This function is called by:
  8195 ;;		_HEATING_HANDLER
  8196 ;;		_FINISH_HANDLER
  8197 ;;		_DEFAULT_HANDLER
  8198 ;;		_SET_TIME_HANDLER_ON_WORK
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           
  8203                           ;psect for function _SW_GET_STATE
  8204  0A56                     _SW_GET_STATE:	
  8205                           
  8206                           ;incstack = 0
  8207 ;; hardware stack exceeded
  8208                           ; Regs used in _SW_GET_STATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8209                           ;SW_GET_STATE@SW_NO stored from wreg
  8210  0A56  00F3               	movwf	SW_GET_STATE@SW_NO
  8211                           
  8212                           ;SW.c: 124: tSW_STATE SW_GET_STATE (tSW SW_NO);SW.c: 125: {;SW.c: 126:  tSW_STATE ret ;;
      +                          SW.c: 127:  ret = SWs[SW_NO].SW_STATE ;
  8213  0A57  3005               	movlw	5
  8214  0A58  00F0               	movwf	i1___bmul@multiplicand
  8215  0A59  0873               	movf	SW_GET_STATE@SW_NO,w
  8216  0A5A  2473               	fcall	i1___bmul
  8217  0A5B  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  8218  0A5C  0084               	movwf	4
  8219  0A5D  1783               	bsf	3,7	;select IRP bank3
  8220  0A5E  0800               	movf	0,w
  8221  0A5F  00F4               	movwf	SW_GET_STATE@ret
  8222                           
  8223                           ;SW.c: 128:  return ret ;
  8224  0A60  0008               	return
  8225  0A61                     __end_of_SW_GET_STATE:	
  8226  0A61                     __ptext67:	
  8227 ;; *************** function _STOP_HEATING *****************
  8228 ;; Defined at:
  8229 ;;		line 643 in file "CONTROL.c"
  8230 ;; Parameters:    Size  Location     Type
  8231 ;;		None
  8232 ;; Auto vars:     Size  Location     Type
  8233 ;;		None
  8234 ;; Return value:  Size  Location     Type
  8235 ;;                  1    wreg      void 
  8236 ;; Registers used:
  8237 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8238 ;; Tracked objects:
  8239 ;;		On entry : 0/0
  8240 ;;		On exit  : 300/300
  8241 ;;		Unchanged: 0/0
  8242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8243 ;;      Params:         0       0       0       0       0
  8244 ;;      Locals:         0       0       0       0       0
  8245 ;;      Temps:          0       0       0       0       0
  8246 ;;      Totals:         0       0       0       0       0
  8247 ;;Total ram usage:        0 bytes
  8248 ;; Hardware stack levels used:    1
  8249 ;; Hardware stack levels required when called:    2
  8250 ;; This function calls:
  8251 ;;		_LED_SET_STATE
  8252 ;;		_TIME_GET
  8253 ;;		_TIME_STOP
  8254 ;;		i1_HEATER_SET_STATE
  8255 ;;		i1_MOTOR_SET_STATE
  8256 ;; This function is called by:
  8257 ;;		_HEATING_HANDLER
  8258 ;; This function uses a non-reentrant model
  8259 ;;
  8260                           
  8261                           
  8262                           ;psect for function _STOP_HEATING
  8263  0A61                     _STOP_HEATING:	
  8264                           
  8265                           ;CONTROL.c: 646:     MOTOR_SET_STATE( 0 );
  8266                           
  8267                           ;incstack = 0
  8268 ;; hardware stack exceeded
  8269                           ; Regs used in _STOP_HEATING: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8270  0A61  3000               	movlw	0
  8271  0A62  24A0  120A  158A   	fcall	i1_MOTOR_SET_STATE
  8272                           
  8273                           ;CONTROL.c: 648:     HEATER_SET_STATE(0);
  8274  0A65  3000               	movlw	0
  8275  0A66  249D  120A  158A   	fcall	i1_HEATER_SET_STATE
  8276                           
  8277                           ;CONTROL.c: 650:     LED_SET_STATE(LAMP , LED_OFF);
  8278  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  8279  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  8280  0A6B  3000               	movlw	0
  8281  0A6C  01A0               	clrf	LED_SET_STATE@LED_STATE
  8282  0A6D  2291  120A  158A   	fcall	_LED_SET_STATE
  8283                           
  8284                           ;CONTROL.c: 652:     TIME_STOP();
  8285  0A70  2526  120A  158A   	fcall	_TIME_STOP
  8286                           
  8287                           ;CONTROL.c: 654:     SETTED_TIME = TIME_GET();
  8288  0A73  24B5               	fcall	_TIME_GET
  8289  0A74  0870               	movf	?_TIME_GET,w
  8290  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  8291  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  8292  0A77  00EB               	movwf	_SETTED_TIME
  8293  0A78  0871               	movf	?_TIME_GET+1,w
  8294  0A79  00EC               	movwf	_SETTED_TIME+1
  8295  0A7A  0872               	movf	?_TIME_GET+2,w
  8296  0A7B  00ED               	movwf	_SETTED_TIME+2
  8297                           
  8298                           ;CONTROL.c: 659:     HANDLERS_STATES[HEATING] = FIRST_TIME ;
  8299  0A7C  1683               	bsf	3,5	;RP0=1, select bank3
  8300  0A7D  1703               	bsf	3,6	;RP1=1, select bank3
  8301  0A7E  0193               	clrf	(_HANDLERS_STATES^(0+384)+3)
  8302  0A7F  0008               	return
  8303  0A80                     __end_of_STOP_HEATING:	
  8304  0A80                     __ptext79:	
  8305 ;; *************** function _DISP_STATMENT *****************
  8306 ;; Defined at:
  8307 ;;		line 92 in file "Display.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;  statment        1    wreg     PTR unsigned char 
  8310 ;;		 -> STR_17(17), STR_16(17), STR_15(17), STR_14(17), 
  8311 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;  statment        1    5[BANK0 ] PTR unsigned char 
  8314 ;;		 -> STR_17(17), STR_16(17), STR_15(17), STR_14(17), 
  8315 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  8316 ;; Return value:  Size  Location     Type
  8317 ;;                  1    wreg      void 
  8318 ;; Registers used:
  8319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8320 ;; Tracked objects:
  8321 ;;		On entry : 0/B00
  8322 ;;		On exit  : 300/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8325 ;;      Params:         0       0       0       0       0
  8326 ;;      Locals:         0       1       0       0       0
  8327 ;;      Temps:          0       0       0       0       0
  8328 ;;      Totals:         0       1       0       0       0
  8329 ;;Total ram usage:        1 bytes
  8330 ;; Hardware stack levels used:    1
  8331 ;; Hardware stack levels required when called:    3
  8332 ;; This function calls:
  8333 ;;		_LCD_SEND_A_STRING
  8334 ;;		_LCD_SET_CURSOR
  8335 ;; This function is called by:
  8336 ;;		_HEATING_HANDLER
  8337 ;;		_FINISH_HANDLER
  8338 ;;		_DEFAULT_HANDLER
  8339 ;; This function uses a non-reentrant model
  8340 ;;
  8341                           
  8342                           
  8343                           ;psect for function _DISP_STATMENT
  8344  0A80                     _DISP_STATMENT:	
  8345                           
  8346                           ;incstack = 0
  8347 ;; hardware stack exceeded
  8348                           ; Regs used in _DISP_STATMENT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8349                           ;DISP_STATMENT@statment stored from wreg
  8350  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  8351  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  8352  0A82  00A5               	movwf	DISP_STATMENT@statment
  8353  0A83  3001               	movlw	1
  8354                           
  8355                           ;Display.c: 92: void DISP_STATMENT (tbyte * statment);Display.c: 93: {;Display.c: 94:   
      +                          LCD_SET_CURSOR(1,0);
  8356  0A84  01A1               	clrf	LCD_SET_CURSOR@row
  8357  0A85  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
  8358                           
  8359                           ;Display.c: 95:  LCD_SEND_A_STRING(statment);
  8360  0A88  1283               	bcf	3,5	;RP0=0, select bank0
  8361  0A89  1303               	bcf	3,6	;RP1=0, select bank0
  8362  0A8A  0825               	movf	DISP_STATMENT@statment,w
  8363  0A8B  00A1               	movwf	LCD_SEND_A_STRING@string
  8364  0A8C  3000               	movlw	0
  8365  0A8D  1D03               	btfss	3,2
  8366  0A8E  3080               	movlw	128
  8367  0A8F  00A2               	movwf	LCD_SEND_A_STRING@string+1
  8368  0A90  2E86               	ljmp	i1l4318
  8369  0A91                     __end_of_DISP_STATMENT:	
  8370  0A91                     __ptext72:	
  8371 ;; *************** function _LED_SET_STATE *****************
  8372 ;; Defined at:
  8373 ;;		line 52 in file "LED.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;  LED_NO          1    wreg     enum E2
  8376 ;;  LED_STATE       1    0[BANK0 ] enum E908
  8377 ;; Auto vars:     Size  Location     Type
  8378 ;;  LED_NO          1    2[BANK0 ] enum E2
  8379 ;;  ret             1    0        enum E861
  8380 ;; Return value:  Size  Location     Type
  8381 ;;                  1    wreg      enum E861
  8382 ;; Registers used:
  8383 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8384 ;; Tracked objects:
  8385 ;;		On entry : 300/0
  8386 ;;		On exit  : B00/800
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8389 ;;      Params:         0       1       0       0       0
  8390 ;;      Locals:         0       2       0       0       0
  8391 ;;      Temps:          0       0       0       0       0
  8392 ;;      Totals:         0       3       0       0       0
  8393 ;;Total ram usage:        3 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; Hardware stack levels required when called:    1
  8396 ;; This function calls:
  8397 ;;		i1_GPIO_PIN_SET_STATE
  8398 ;;		i1___bmul
  8399 ;; This function is called by:
  8400 ;;		_HEATING_HANDLER
  8401 ;;		_STOP_HEATING
  8402 ;; This function uses a non-reentrant model
  8403 ;;
  8404                           
  8405                           
  8406                           ;psect for function _LED_SET_STATE
  8407  0A91                     _LED_SET_STATE:	
  8408                           
  8409                           ;incstack = 0
  8410 ;; hardware stack exceeded
  8411                           ; Regs used in _LED_SET_STATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8412                           ;LED_SET_STATE@LED_NO stored from wreg
  8413  0A91  00A2               	movwf	LED_SET_STATE@LED_NO
  8414                           
  8415                           ;LED.c: 56:  GPIO_PIN_SET_STATE(LEDs[LED_NO].LED_PORT, LEDs[LED_NO].LED_PIN , LED_STATE)
      +                          ;
  8416  0A92  3003               	movlw	3
  8417  0A93  00F0               	movwf	i1___bmul@multiplicand
  8418  0A94  0822               	movf	LED_SET_STATE@LED_NO,w
  8419  0A95  2473  120A  158A   	fcall	i1___bmul
  8420  0A98  3ED0               	addlw	(low ((_LEDs| (0+256)+1)))& (0+255)
  8421  0A99  0084               	movwf	4
  8422  0A9A  1783               	bsf	3,7	;select IRP bank3
  8423  0A9B  0800               	movf	0,w
  8424  0A9C  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
  8425  0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  8426  0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  8427  0A9F  0820               	movf	LED_SET_STATE@LED_STATE,w
  8428  0AA0  00F4               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
  8429  0AA1  3003               	movlw	3
  8430  0AA2  00F0               	movwf	i1___bmul@multiplicand
  8431  0AA3  0822               	movf	LED_SET_STATE@LED_NO,w
  8432  0AA4  2473  120A  158A   	fcall	i1___bmul
  8433  0AA7  3ECF               	addlw	(low (_LEDs| (0+256)))& (0+255)
  8434  0AA8  0084               	movwf	4
  8435  0AA9  1783               	bsf	3,7	;select IRP bank3
  8436  0AAA  0800               	movf	0,w
  8437  0AAB  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
  8438                           
  8439                           ;LED.c: 57:  LEDs[LED_NO].LED_STATE = LED_STATE ;
  8440  0AAE  3003               	movlw	3
  8441  0AAF  00F0               	movwf	i1___bmul@multiplicand
  8442  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  8443  0AB1  1303               	bcf	3,6	;RP1=0, select bank0
  8444  0AB2  0822               	movf	LED_SET_STATE@LED_NO,w
  8445  0AB3  2473               	fcall	i1___bmul
  8446  0AB4  3ED1               	addlw	(low ((_LEDs| (0+256)+2)))& (0+255)
  8447  0AB5  0084               	movwf	4
  8448  0AB6  1283               	bcf	3,5	;RP0=0, select bank0
  8449  0AB7  1303               	bcf	3,6	;RP1=0, select bank0
  8450  0AB8  0820               	movf	LED_SET_STATE@LED_STATE,w
  8451  0AB9  1783               	bsf	3,7	;select IRP bank3
  8452  0ABA  0080               	movwf	0
  8453  0ABB  0008               	return
  8454  0ABC                     __end_of_LED_SET_STATE:	
  8455  0ABC                     __ptext52:	
  8456 ;; *************** function _INCREMENT_THIS *****************
  8457 ;; Defined at:
  8458 ;;		line 598 in file "CONTROL.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;  KEY             1    wreg     unsigned char 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  KEY             1   18[BANK0 ] unsigned char 
  8463 ;; Return value:  Size  Location     Type
  8464 ;;                  1    wreg      void 
  8465 ;; Registers used:
  8466 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8467 ;; Tracked objects:
  8468 ;;		On entry : 300/300
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8472 ;;      Params:         0       0       0       0       0
  8473 ;;      Locals:         0       1       0       0       0
  8474 ;;      Temps:          0       2       0       0       0
  8475 ;;      Totals:         0       3       0       0       0
  8476 ;;Total ram usage:        3 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:    5
  8479 ;; This function calls:
  8480 ;;		_DISP_UPDATE_TIME_UNIT_AT
  8481 ;;		_GOTO_NEXT_DIGIT
  8482 ;;		_LCD_SET_CURSOR
  8483 ;;		___lbmod
  8484 ;;		i1___bmul
  8485 ;; This function is called by:
  8486 ;;		_SET_TIME_HANDLER_ON_WORK
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           
  8491                           ;psect for function _INCREMENT_THIS
  8492  0ABC                     _INCREMENT_THIS:	
  8493                           
  8494                           ;incstack = 0
  8495 ;; hardware stack exceeded
  8496                           ; Regs used in _INCREMENT_THIS: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8497                           ;INCREMENT_THIS@KEY stored from wreg
  8498  0ABC  1283               	bcf	3,5	;RP0=0, select bank0
  8499  0ABD  1303               	bcf	3,6	;RP1=0, select bank0
  8500  0ABE  00B2               	movwf	INCREMENT_THIS@KEY
  8501                           
  8502                           ;CONTROL.c: 598: static void INCREMENT_THIS (tbyte KEY);CONTROL.c: 599: {;CONTROL.c: 601
      +                          :     if (KEY == KEY_0 )
  8503  0ABF  3A0A               	xorlw	10
  8504  0AC0  1D03               	btfss	3,2
  8505  0AC1  2B22               	goto	i1l4636
  8506                           
  8507                           ;CONTROL.c: 602:     {;CONTROL.c: 603:         KEY = -1;
  8508  0AC2  30FF               	movlw	255
  8509  0AC3  00B2               	movwf	INCREMENT_THIS@KEY
  8510  0AC4  2B22               	goto	i1l4636
  8511  0AC5                     i1l4622:	
  8512                           
  8513                           ;CONTROL.c: 608:            SETTED_TIME.HOURS = ((SETTED_TIME.HOURS % 10 ) + ((KEY +1 )*
      +                          10)) ;
  8514  0AC5  300A               	movlw	10
  8515  0AC6  00F0               	movwf	___lbmod@divisor
  8516  0AC7  086D               	movf	_SETTED_TIME+2,w
  8517  0AC8  2351  120A  158A   	fcall	___lbmod
  8518  0ACB  00B0               	movwf	??_INCREMENT_THIS
  8519  0ACC  300A               	movlw	10
  8520  0ACD  00F0               	movwf	i1___bmul@multiplicand
  8521  0ACE  0832               	movf	INCREMENT_THIS@KEY,w
  8522  0ACF  2473  120A  158A   	fcall	i1___bmul
  8523  0AD2  1283               	bcf	3,5	;RP0=0, select bank0
  8524  0AD3  1303               	bcf	3,6	;RP1=0, select bank0
  8525  0AD4  0730               	addwf	??_INCREMENT_THIS,w
  8526  0AD5  3E0A               	addlw	10
  8527  0AD6  2AE2               	goto	L12
  8528  0AD7                     i1l4624:	
  8529                           ;CONTROL.c: 609:         break;
  8530                           
  8531                           
  8532                           ;CONTROL.c: 611:            SETTED_TIME.HOURS = ((SETTED_TIME.HOURS - (SETTED_TIME.HOURS
      +                           % 10 )) + (KEY +1 )) ;
  8533  0AD7  300A               	movlw	10
  8534  0AD8  00F0               	movwf	___lbmod@divisor
  8535  0AD9  086D               	movf	_SETTED_TIME+2,w
  8536  0ADA  2351  120A  158A   	fcall	___lbmod
  8537  0ADD  026D               	subwf	_SETTED_TIME+2,w
  8538  0ADE  00B0               	movwf	??_INCREMENT_THIS
  8539  0ADF  0832               	movf	INCREMENT_THIS@KEY,w
  8540  0AE0  0730               	addwf	??_INCREMENT_THIS,w
  8541  0AE1  3E01               	addlw	1
  8542  0AE2                     L12:	
  8543  0AE2  00ED               	movwf	_SETTED_TIME+2
  8544                           
  8545                           ;CONTROL.c: 612:         break;
  8546  0AE3  2B3E               	goto	i1l4638
  8547  0AE4                     i1l4626:	
  8548                           
  8549                           ;CONTROL.c: 614:            SETTED_TIME.MINUTES = ((SETTED_TIME.MINUTES % 10) + ((KEY +1
      +                           )*10)) ;
  8550  0AE4  300A               	movlw	10
  8551  0AE5  00F0               	movwf	___lbmod@divisor
  8552  0AE6  086C               	movf	_SETTED_TIME+1,w
  8553  0AE7  2351  120A  158A   	fcall	___lbmod
  8554  0AEA  00B0               	movwf	??_INCREMENT_THIS
  8555  0AEB  300A               	movlw	10
  8556  0AEC  00F0               	movwf	i1___bmul@multiplicand
  8557  0AED  0832               	movf	INCREMENT_THIS@KEY,w
  8558  0AEE  2473  120A  158A   	fcall	i1___bmul
  8559  0AF1  1283               	bcf	3,5	;RP0=0, select bank0
  8560  0AF2  1303               	bcf	3,6	;RP1=0, select bank0
  8561  0AF3  0730               	addwf	??_INCREMENT_THIS,w
  8562  0AF4  3E0A               	addlw	10
  8563  0AF5  2B01               	goto	L13
  8564  0AF6                     i1l4628:	
  8565                           ;CONTROL.c: 615:         break;
  8566                           
  8567                           
  8568                           ;CONTROL.c: 617:            SETTED_TIME.MINUTES = ((SETTED_TIME.MINUTES - (SETTED_TIME.M
      +                          INUTES % 10 )) + (KEY +1 )) ;
  8569  0AF6  300A               	movlw	10
  8570  0AF7  00F0               	movwf	___lbmod@divisor
  8571  0AF8  086C               	movf	_SETTED_TIME+1,w
  8572  0AF9  2351  120A  158A   	fcall	___lbmod
  8573  0AFC  026C               	subwf	_SETTED_TIME+1,w
  8574  0AFD  00B0               	movwf	??_INCREMENT_THIS
  8575  0AFE  0832               	movf	INCREMENT_THIS@KEY,w
  8576  0AFF  0730               	addwf	??_INCREMENT_THIS,w
  8577  0B00  3E01               	addlw	1
  8578  0B01                     L13:	
  8579  0B01  00EC               	movwf	_SETTED_TIME+1
  8580                           
  8581                           ;CONTROL.c: 618:         break;
  8582  0B02  2B3E               	goto	i1l4638
  8583  0B03                     i1l4630:	
  8584                           
  8585                           ;CONTROL.c: 620:            SETTED_TIME.SECONDS = ((SETTED_TIME.SECONDS % 10 ) + ((KEY +
      +                          1 )*10)) ;
  8586  0B03  300A               	movlw	10
  8587  0B04  00F0               	movwf	___lbmod@divisor
  8588  0B05  086B               	movf	_SETTED_TIME,w
  8589  0B06  2351  120A  158A   	fcall	___lbmod
  8590  0B09  00B0               	movwf	??_INCREMENT_THIS
  8591  0B0A  300A               	movlw	10
  8592  0B0B  00F0               	movwf	i1___bmul@multiplicand
  8593  0B0C  0832               	movf	INCREMENT_THIS@KEY,w
  8594  0B0D  2473  120A  158A   	fcall	i1___bmul
  8595  0B10  1283               	bcf	3,5	;RP0=0, select bank0
  8596  0B11  1303               	bcf	3,6	;RP1=0, select bank0
  8597  0B12  0730               	addwf	??_INCREMENT_THIS,w
  8598  0B13  3E0A               	addlw	10
  8599  0B14  2B20               	goto	L14
  8600  0B15                     i1l4632:	
  8601                           ;CONTROL.c: 621:         break;
  8602                           
  8603                           
  8604                           ;CONTROL.c: 623:            SETTED_TIME.SECONDS = ((SETTED_TIME.SECONDS - (SETTED_TIME.S
      +                          ECONDS % 10 )) + (KEY +1 )) ;
  8605  0B15  300A               	movlw	10
  8606  0B16  00F0               	movwf	___lbmod@divisor
  8607  0B17  086B               	movf	_SETTED_TIME,w
  8608  0B18  2351  120A  158A   	fcall	___lbmod
  8609  0B1B  026B               	subwf	_SETTED_TIME,w
  8610  0B1C  00B0               	movwf	??_INCREMENT_THIS
  8611  0B1D  0832               	movf	INCREMENT_THIS@KEY,w
  8612  0B1E  0730               	addwf	??_INCREMENT_THIS,w
  8613  0B1F  3E01               	addlw	1
  8614  0B20                     L14:	
  8615  0B20  00EB               	movwf	_SETTED_TIME
  8616                           
  8617                           ;CONTROL.c: 624:         break;
  8618  0B21  2B3E               	goto	i1l4638
  8619  0B22                     i1l4636:	
  8620  0B22  086F               	movf	_CURRENT_DIGIT,w
  8621  0B23  00B0               	movwf	??_INCREMENT_THIS
  8622  0B24  01B1               	clrf	??_INCREMENT_THIS+1
  8623                           
  8624                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8625                           ; Switch size 1, requested type "speed"
  8626                           ; Number of cases is 1, Range of values is 0 to 0
  8627                           ; switch strategies available:
  8628                           ; Name         Instructions Cycles
  8629                           ; simple_byte            4     3 (average)
  8630                           ; direct_byte           11     8 (fixed)
  8631                           ; jumptable            260     6 (fixed)
  8632                           ;	Chosen strategy is simple_byte
  8633  0B25  0831               	movf	??_INCREMENT_THIS+1,w
  8634  0B26  3A00               	xorlw	0	; case 0
  8635  0B27  1903               	skipnz
  8636  0B28  2B2A               	goto	i1l6912
  8637  0B29  2B3E               	goto	i1l4638
  8638  0B2A                     i1l6912:	
  8639                           
  8640                           ; Switch size 1, requested type "speed"
  8641                           ; Number of cases is 6, Range of values is 6 to 13
  8642                           ; switch strategies available:
  8643                           ; Name         Instructions Cycles
  8644                           ; simple_byte           19    10 (average)
  8645                           ; direct_byte           35    11 (fixed)
  8646                           ; jumptable            263     9 (fixed)
  8647                           ;	Chosen strategy is simple_byte
  8648  0B2A  0830               	movf	??_INCREMENT_THIS,w
  8649  0B2B  3A06               	xorlw	6	; case 6
  8650  0B2C  1903               	skipnz
  8651  0B2D  2AC5               	goto	i1l4622
  8652  0B2E  3A01               	xorlw	1	; case 7
  8653  0B2F  1903               	skipnz
  8654  0B30  2AD7               	goto	i1l4624
  8655  0B31  3A0E               	xorlw	14	; case 9
  8656  0B32  1903               	skipnz
  8657  0B33  2AE4               	goto	i1l4626
  8658  0B34  3A03               	xorlw	3	; case 10
  8659  0B35  1903               	skipnz
  8660  0B36  2AF6               	goto	i1l4628
  8661  0B37  3A06               	xorlw	6	; case 12
  8662  0B38  1903               	skipnz
  8663  0B39  2B03               	goto	i1l4630
  8664  0B3A  3A01               	xorlw	1	; case 13
  8665  0B3B  1903               	skipnz
  8666  0B3C  2B15               	goto	i1l4632
  8667  0B3D  2B3E               	goto	i1l4638
  8668  0B3E                     i1l4638:	
  8669                           
  8670                           ;CONTROL.c: 630:    DISP_UPDATE_TIME_UNIT_AT (CURRENT_DIGIT ,(KEY +1 ));
  8671  0B3E  0832               	movf	INCREMENT_THIS@KEY,w
  8672  0B3F  3E01               	addlw	1
  8673  0B40  00AE               	movwf	DISP_UPDATE_TIME_UNIT_AT@NUMBER
  8674  0B41  086F               	movf	_CURRENT_DIGIT,w
  8675  0B42  2536  120A  158A   	fcall	_DISP_UPDATE_TIME_UNIT_AT
  8676                           
  8677                           ;CONTROL.c: 632:    if (CURRENT_DIGIT == (13))
  8678  0B45  300D               	movlw	13
  8679  0B46  066F               	xorwf	_CURRENT_DIGIT,w
  8680  0B47  1D03               	btfss	3,2
  8681  0B48  2B4D               	goto	i1l4644
  8682                           
  8683                           ;CONTROL.c: 633:    {;CONTROL.c: 634:         LCD_SET_CURSOR(0 , (13));
  8684  0B49  300D               	movlw	13
  8685  0B4A  00A1               	movwf	LCD_SET_CURSOR@row
  8686  0B4B  3000               	movlw	0
  8687  0B4C  2EA4               	ljmp	_LCD_SET_CURSOR
  8688  0B4D                     i1l4644:	
  8689                           ;CONTROL.c: 635:    }
  8690                           
  8691                           
  8692                           ;CONTROL.c: 637:    {;CONTROL.c: 638:         GOTO_NEXT_DIGIT(KEY_RIGHRT);
  8693  0B4D  300B               	movlw	11
  8694  0B4E  160A  158A  2F5F   	ljmp	_GOTO_NEXT_DIGIT
  8695  0B51                     __end_of_INCREMENT_THIS:	
  8696  0B51                     __ptext53:	
  8697 ;; *************** function ___lbmod *****************
  8698 ;; Defined at:
  8699 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbmod.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;  dividend        1    wreg     unsigned char 
  8702 ;;  divisor         1    0[COMMON] unsigned char 
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;  dividend        1    2[COMMON] unsigned char 
  8705 ;;  rem             1    4[COMMON] unsigned char 
  8706 ;;  counter         1    3[COMMON] unsigned char 
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  1    wreg      unsigned char 
  8709 ;; Registers used:
  8710 ;;		wreg, status,2, status,0
  8711 ;; Tracked objects:
  8712 ;;		On entry : 300/0
  8713 ;;		On exit  : 300/0
  8714 ;;		Unchanged: 300/0
  8715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8716 ;;      Params:         1       0       0       0       0
  8717 ;;      Locals:         3       0       0       0       0
  8718 ;;      Temps:          1       0       0       0       0
  8719 ;;      Totals:         5       0       0       0       0
  8720 ;;Total ram usage:        5 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; This function calls:
  8723 ;;		Nothing
  8724 ;; This function is called by:
  8725 ;;		_INCREMENT_THIS
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           
  8730                           ;psect for function ___lbmod
  8731  0B51                     ___lbmod:	
  8732                           
  8733                           ;incstack = 0
  8734 ;; hardware stack exceeded
  8735                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  8736                           ;___lbmod@dividend stored from wreg
  8737  0B51  00F2               	movwf	___lbmod@dividend
  8738  0B52  3008               	movlw	8
  8739  0B53  00F3               	movwf	___lbmod@counter
  8740  0B54  01F4               	clrf	___lbmod@rem
  8741  0B55                     i1l4488:	
  8742  0B55  0872               	movf	___lbmod@dividend,w
  8743  0B56  00F1               	movwf	??___lbmod
  8744  0B57  3007               	movlw	7
  8745  0B58  1003               	clrc
  8746  0B59                     L15:	
  8747  0B59  0CF1               	rrf	??___lbmod,f
  8748  0B5A  3EFF               	addlw	-1
  8749  0B5B  1003               	clrc
  8750  0B5C  1D03               	skipz
  8751  0B5D  2B59               	goto	L15
  8752  0B5E  0D74               	rlf	___lbmod@rem,w
  8753  0B5F  0471               	iorwf	??___lbmod,w
  8754  0B60  00F4               	movwf	___lbmod@rem
  8755  0B61  1003               	clrc
  8756  0B62  0DF2               	rlf	___lbmod@dividend,f
  8757  0B63  0870               	movf	___lbmod@divisor,w
  8758  0B64  0274               	subwf	___lbmod@rem,w
  8759  0B65  1C03               	skipc
  8760  0B66  2B69               	goto	i1l4496
  8761  0B67  0870               	movf	___lbmod@divisor,w
  8762  0B68  02F4               	subwf	___lbmod@rem,f
  8763  0B69                     i1l4496:	
  8764  0B69  0BF3               	decfsz	___lbmod@counter,f
  8765  0B6A  2B55               	goto	i1l4488
  8766  0B6B  0874               	movf	___lbmod@rem,w
  8767  0B6C  0008               	return
  8768  0B6D                     __end_of___lbmod:	
  8769  0B6D                     __ptext37:	
  8770 ;; *************** function _SWs_UPDATE *****************
  8771 ;; Defined at:
  8772 ;;		line 31 in file "SW.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;		None
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;  sw_counter      1    2[BANK0 ] unsigned char 
  8777 ;;  samples_coun    1    1[BANK0 ] unsigned char 
  8778 ;;  ret             1    0        enum E861
  8779 ;; Return value:  Size  Location     Type
  8780 ;;                  1    wreg      enum E861
  8781 ;; Registers used:
  8782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8783 ;; Tracked objects:
  8784 ;;		On entry : 0/300
  8785 ;;		On exit  : 0/0
  8786 ;;		Unchanged: 0/0
  8787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8788 ;;      Params:         0       0       0       0       0
  8789 ;;      Locals:         0       3       0       0       0
  8790 ;;      Temps:          3       0       0       0       0
  8791 ;;      Totals:         3       3       0       0       0
  8792 ;;Total ram usage:        6 bytes
  8793 ;; Hardware stack levels used:    1
  8794 ;; Hardware stack levels required when called:    1
  8795 ;; This function calls:
  8796 ;;		_GPIO_PIN_GET_STATE
  8797 ;;		i1___bmul
  8798 ;; This function is called by:
  8799 ;;		_SYS_UPDATE
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           
  8804                           ;psect for function _SWs_UPDATE
  8805  0B6D                     _SWs_UPDATE:	
  8806                           
  8807                           ;SW.c: 34:  static tbyte SW_timer_counter = 0;;SW.c: 35:  SW_timer_counter += (5);
  8808                           
  8809                           ;incstack = 0
  8810                           ; Regs used in _SWs_UPDATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8811  0B6D  3005               	movlw	5
  8812  0B6E  1683               	bsf	3,5	;RP0=1, select bank3
  8813  0B6F  1703               	bsf	3,6	;RP1=1, select bank3
  8814  0B70  07B1               	addwf	SWs_UPDATE@SW_timer_counter^(0+384),f
  8815                           
  8816                           ;SW.c: 37:  if (SW_timer_counter >= (20))
  8817  0B71  3014               	movlw	20
  8818  0B72  0231               	subwf	SWs_UPDATE@SW_timer_counter^(0+384),w
  8819  0B73  1C03               	skipc
  8820  0B74  0008               	return
  8821                           
  8822                           ;SW.c: 38:  {;SW.c: 39:   tbyte sw_counter ;;SW.c: 40:   tbyte samples_counter ;;SW.c: 4
      +                          1:   SW_timer_counter = 0;
  8823  0B75  01B1               	clrf	SWs_UPDATE@SW_timer_counter^(0+384)
  8824                           
  8825                           ;SW.c: 43:   for (sw_counter = 0 ; sw_counter < 4 ; sw_counter++)
  8826  0B76  1283               	bcf	3,5	;RP0=0, select bank0
  8827  0B77  1303               	bcf	3,6	;RP1=0, select bank0
  8828  0B78  01A2               	clrf	SWs_UPDATE@sw_counter
  8829  0B79                     i1l296:	
  8830                           
  8831                           ;SW.c: 44:   {;SW.c: 45:    for (samples_counter = 2 -1 ; samples_counter > 0 ; samples_
      +                          counter--)
  8832  0B79  01A1               	clrf	SWs_UPDATE@samples_counter
  8833  0B7A  0AA1               	incf	SWs_UPDATE@samples_counter,f
  8834  0B7B                     i1l6168:	
  8835                           
  8836                           ;SW.c: 46:    {;SW.c: 48:     SWs[sw_counter].SW_SAMPLES[samples_counter] = SWs[sw_count
      +                          er].SW_SAMPLES[samples_counter -1 ] ;
  8837  0B7B  3005               	movlw	5
  8838  0B7C  00F0               	movwf	i1___bmul@multiplicand
  8839  0B7D  0822               	movf	SWs_UPDATE@sw_counter,w
  8840  0B7E  2473  120A  158A   	fcall	i1___bmul
  8841  0B81  3EB3               	addlw	(low ((_SWs| (0+256)+1)))& (0+255)
  8842  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  8843  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  8844  0B84  0721               	addwf	SWs_UPDATE@samples_counter,w
  8845  0B85  00FA               	movwf	??_SWs_UPDATE
  8846  0B86  0084               	movwf	4
  8847  0B87  1783               	bsf	3,7	;select IRP bank3
  8848  0B88  0800               	movf	0,w
  8849  0B89  00FB               	movwf	??_SWs_UPDATE+1
  8850  0B8A  3005               	movlw	5
  8851  0B8B  00F0               	movwf	i1___bmul@multiplicand
  8852  0B8C  0822               	movf	SWs_UPDATE@sw_counter,w
  8853  0B8D  2473  120A  158A   	fcall	i1___bmul
  8854  0B90  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  8855  0B91  1283               	bcf	3,5	;RP0=0, select bank0
  8856  0B92  1303               	bcf	3,6	;RP1=0, select bank0
  8857  0B93  0721               	addwf	SWs_UPDATE@samples_counter,w
  8858  0B94  00FC               	movwf	??_SWs_UPDATE+2
  8859  0B95  0084               	movwf	4
  8860  0B96  087B               	movf	??_SWs_UPDATE+1,w
  8861  0B97  1783               	bsf	3,7	;select IRP bank3
  8862  0B98  0080               	movwf	0
  8863                           
  8864                           ;SW.c: 49:    }
  8865  0B99  0BA1               	decfsz	SWs_UPDATE@samples_counter,f
  8866  0B9A  2B7B               	goto	i1l6168
  8867                           
  8868                           ;SW.c: 51:    SWs[sw_counter].SW_SAMPLES[0] = GPIO_PIN_GET_STATE( SWs[sw_counter].SW_POR
      +                          T ,SWs[sw_counter].SW_PIN );
  8869  0B9B  3005               	movlw	5
  8870  0B9C  00F0               	movwf	i1___bmul@multiplicand
  8871  0B9D  0822               	movf	SWs_UPDATE@sw_counter,w
  8872  0B9E  2473  120A  158A   	fcall	i1___bmul
  8873  0BA1  3EB3               	addlw	(low ((_SWs| (0+256)+1)))& (0+255)
  8874  0BA2  0084               	movwf	4
  8875  0BA3  1783               	bsf	3,7	;select IRP bank3
  8876  0BA4  0800               	movf	0,w
  8877  0BA5  00F3               	movwf	GPIO_PIN_GET_STATE@GPIO_PIN_NO
  8878  0BA6  3005               	movlw	5
  8879  0BA7  00F0               	movwf	i1___bmul@multiplicand
  8880  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
  8881  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
  8882  0BAA  0822               	movf	SWs_UPDATE@sw_counter,w
  8883  0BAB  2473  120A  158A   	fcall	i1___bmul
  8884  0BAE  3EB2               	addlw	(low (_SWs| (0+256)))& (0+255)
  8885  0BAF  0084               	movwf	4
  8886  0BB0  1783               	bsf	3,7	;select IRP bank3
  8887  0BB1  0800               	movf	0,w
  8888  0BB2  2778  120A  158A   	fcall	_GPIO_PIN_GET_STATE
  8889  0BB5  00FA               	movwf	??_SWs_UPDATE
  8890  0BB6  3005               	movlw	5
  8891  0BB7  00F0               	movwf	i1___bmul@multiplicand
  8892  0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  8893  0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  8894  0BBA  0822               	movf	SWs_UPDATE@sw_counter,w
  8895  0BBB  2473  120A  158A   	fcall	i1___bmul
  8896  0BBE  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  8897  0BBF  0084               	movwf	4
  8898  0BC0  087A               	movf	??_SWs_UPDATE,w
  8899  0BC1  1783               	bsf	3,7	;select IRP bank3
  8900  0BC2  0080               	movwf	0
  8901                           
  8902                           ;SW.c: 54:    switch(SWs[sw_counter].SW_STATE)
  8903  0BC3  2C4A               	goto	i1l6198
  8904  0BC4                     i1l6176:	
  8905                           
  8906                           ;SW.c: 57:      if ((SWs[sw_counter].SW_SAMPLES[0] == (0)) &&
  8907  0BC4  3005               	movlw	5
  8908  0BC5  00F0               	movwf	i1___bmul@multiplicand
  8909  0BC6  1283               	bcf	3,5	;RP0=0, select bank0
  8910  0BC7  1303               	bcf	3,6	;RP1=0, select bank0
  8911  0BC8  0822               	movf	SWs_UPDATE@sw_counter,w
  8912  0BC9  2473  120A  158A   	fcall	i1___bmul
  8913  0BCC  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  8914  0BCD  0084               	movwf	4
  8915  0BCE  1783               	bsf	3,7	;select IRP bank3
  8916  0BCF  0800               	movf	0,w
  8917  0BD0  1D03               	btfss	3,2
  8918  0BD1  2C6B               	goto	i1l6200
  8919  0BD2  3005               	movlw	5
  8920  0BD3  00F0               	movwf	i1___bmul@multiplicand
  8921  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  8922  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  8923  0BD6  0822               	movf	SWs_UPDATE@sw_counter,w
  8924  0BD7  2473  120A  158A   	fcall	i1___bmul
  8925  0BDA  3EB5               	addlw	(low ((_SWs| (0+256)+3)))& (0+255)
  8926  0BDB  0084               	movwf	4
  8927  0BDC  1783               	bsf	3,7	;select IRP bank3
  8928  0BDD  0800               	movf	0,w
  8929  0BDE  1D03               	btfss	3,2
  8930  0BDF  2C6B               	goto	i1l6200
  8931                           
  8932                           ;SW.c: 59:      {;SW.c: 60:       SWs[sw_counter].SW_STATE = SW_PRE_PRESSED;
  8933  0BE0  3005               	movlw	5
  8934  0BE1  00F0               	movwf	i1___bmul@multiplicand
  8935  0BE2  1283               	bcf	3,5	;RP0=0, select bank0
  8936  0BE3  1303               	bcf	3,6	;RP1=0, select bank0
  8937  0BE4  0822               	movf	SWs_UPDATE@sw_counter,w
  8938  0BE5  2473  120A  158A   	fcall	i1___bmul
  8939  0BE8  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  8940  0BE9  0084               	movwf	4
  8941  0BEA  1783               	bsf	3,7	;select IRP bank3
  8942  0BEB  0180               	clrf	0
  8943  0BEC  0A80               	incf	0,f
  8944                           
  8945                           ;SW.c: 61:      }
  8946  0BED  2C6B               	goto	i1l6200
  8947  0BEE                     i1l6182:	
  8948                           
  8949                           ;SW.c: 69:      if (SWs[sw_counter].SW_SAMPLES[0] == (0))
  8950  0BEE  3005               	movlw	5
  8951  0BEF  00F0               	movwf	i1___bmul@multiplicand
  8952  0BF0  1283               	bcf	3,5	;RP0=0, select bank0
  8953  0BF1  1303               	bcf	3,6	;RP1=0, select bank0
  8954  0BF2  0822               	movf	SWs_UPDATE@sw_counter,w
  8955  0BF3  2473  120A  158A   	fcall	i1___bmul
  8956  0BF6  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  8957  0BF7  0084               	movwf	4
  8958  0BF8  1783               	bsf	3,7	;select IRP bank3
  8959  0BF9  0800               	movf	0,w
  8960  0BFA  1D03               	btfss	3,2
  8961  0BFB  2C6B               	goto	i1l6200
  8962                           
  8963                           ;SW.c: 70:      {;SW.c: 71:       SWs[sw_counter].SW_STATE = SW_PRESSED;
  8964  0BFC  3005               	movlw	5
  8965  0BFD  00F0               	movwf	i1___bmul@multiplicand
  8966  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  8967  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  8968  0C00  0822               	movf	SWs_UPDATE@sw_counter,w
  8969  0C01  2473  120A  158A   	fcall	i1___bmul
  8970  0C04  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  8971  0C05  0084               	movwf	4
  8972  0C06  1783               	bsf	3,7	;select IRP bank3
  8973  0C07  0180               	clrf	0
  8974                           
  8975                           ;SW.c: 72:      }
  8976  0C08  2C6B               	goto	i1l6200
  8977  0C09                     i1l6186:	
  8978                           
  8979                           ;SW.c: 80:      if ((SWs[sw_counter].SW_SAMPLES[0] == (1)) &&
  8980  0C09  3005               	movlw	5
  8981  0C0A  00F0               	movwf	i1___bmul@multiplicand
  8982  0C0B  1283               	bcf	3,5	;RP0=0, select bank0
  8983  0C0C  1303               	bcf	3,6	;RP1=0, select bank0
  8984  0C0D  0822               	movf	SWs_UPDATE@sw_counter,w
  8985  0C0E  2473  120A  158A   	fcall	i1___bmul
  8986  0C11  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  8987  0C12  0084               	movwf	4
  8988  0C13  1783               	bsf	3,7	;select IRP bank3
  8989  0C14  0B00               	decfsz	0,w
  8990  0C15  2C6B               	goto	i1l6200
  8991  0C16  3005               	movlw	5
  8992  0C17  00F0               	movwf	i1___bmul@multiplicand
  8993  0C18  1283               	bcf	3,5	;RP0=0, select bank0
  8994  0C19  1303               	bcf	3,6	;RP1=0, select bank0
  8995  0C1A  0822               	movf	SWs_UPDATE@sw_counter,w
  8996  0C1B  2473  120A  158A   	fcall	i1___bmul
  8997  0C1E  3EB5               	addlw	(low ((_SWs| (0+256)+3)))& (0+255)
  8998  0C1F  0084               	movwf	4
  8999  0C20  1783               	bsf	3,7	;select IRP bank3
  9000  0C21  0B00               	decfsz	0,w
  9001  0C22  2C6B               	goto	i1l6200
  9002                           
  9003                           ;SW.c: 82:      {;SW.c: 83:       SWs[sw_counter].SW_STATE = SW_PRE_RELEASED;
  9004  0C23  3005               	movlw	5
  9005  0C24  00F0               	movwf	i1___bmul@multiplicand
  9006  0C25  1283               	bcf	3,5	;RP0=0, select bank0
  9007  0C26  1303               	bcf	3,6	;RP1=0, select bank0
  9008  0C27  0822               	movf	SWs_UPDATE@sw_counter,w
  9009  0C28  2473  120A  158A   	fcall	i1___bmul
  9010  0C2B  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  9011  0C2C  0084               	movwf	4
  9012  0C2D  3003               	movlw	3
  9013  0C2E  2C47               	goto	L4
  9014  0C2F                     i1l6192:	
  9015                           ;SW.c: 84:      }
  9016                           
  9017                           
  9018                           ;SW.c: 92:      if (SWs[sw_counter].SW_SAMPLES[0] == (1))
  9019  0C2F  3005               	movlw	5
  9020  0C30  00F0               	movwf	i1___bmul@multiplicand
  9021  0C31  1283               	bcf	3,5	;RP0=0, select bank0
  9022  0C32  1303               	bcf	3,6	;RP1=0, select bank0
  9023  0C33  0822               	movf	SWs_UPDATE@sw_counter,w
  9024  0C34  2473  120A  158A   	fcall	i1___bmul
  9025  0C37  3EB4               	addlw	(low ((_SWs| (0+256)+2)))& (0+255)
  9026  0C38  0084               	movwf	4
  9027  0C39  1783               	bsf	3,7	;select IRP bank3
  9028  0C3A  0B00               	decfsz	0,w
  9029  0C3B  2C6B               	goto	i1l6200
  9030                           
  9031                           ;SW.c: 93:      {;SW.c: 94:       SWs[sw_counter].SW_STATE = SW_RELEASED;
  9032  0C3C  3005               	movlw	5
  9033  0C3D  00F0               	movwf	i1___bmul@multiplicand
  9034  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  9035  0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  9036  0C40  0822               	movf	SWs_UPDATE@sw_counter,w
  9037  0C41  2473  120A  158A   	fcall	i1___bmul
  9038  0C44  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  9039  0C45  0084               	movwf	4
  9040  0C46  3002               	movlw	2
  9041  0C47                     L4:	
  9042  0C47  1783               	bsf	3,7	;select IRP bank3
  9043  0C48  0080               	movwf	0
  9044                           
  9045                           ;SW.c: 95:      }
  9046  0C49  2C6B               	goto	i1l6200
  9047  0C4A                     i1l6198:	
  9048  0C4A  3005               	movlw	5
  9049  0C4B  00F0               	movwf	i1___bmul@multiplicand
  9050  0C4C  1283               	bcf	3,5	;RP0=0, select bank0
  9051  0C4D  1303               	bcf	3,6	;RP1=0, select bank0
  9052  0C4E  0822               	movf	SWs_UPDATE@sw_counter,w
  9053  0C4F  2473  120A  158A   	fcall	i1___bmul
  9054  0C52  3EB6               	addlw	(low ((_SWs| (0+256)+4)))& (0+255)
  9055  0C53  0084               	movwf	4
  9056  0C54  1783               	bsf	3,7	;select IRP bank3
  9057  0C55  0800               	movf	0,w
  9058  0C56  00FA               	movwf	??_SWs_UPDATE
  9059  0C57  01FB               	clrf	??_SWs_UPDATE+1
  9060                           
  9061                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9062                           ; Switch size 1, requested type "speed"
  9063                           ; Number of cases is 1, Range of values is 0 to 0
  9064                           ; switch strategies available:
  9065                           ; Name         Instructions Cycles
  9066                           ; simple_byte            4     3 (average)
  9067                           ; direct_byte           11     8 (fixed)
  9068                           ; jumptable            260     6 (fixed)
  9069                           ;	Chosen strategy is simple_byte
  9070  0C58  087B               	movf	??_SWs_UPDATE+1,w
  9071  0C59  3A00               	xorlw	0	; case 0
  9072  0C5A  1903               	skipnz
  9073  0C5B  2C5D               	goto	i1l6904
  9074  0C5C  2C6B               	goto	i1l6200
  9075  0C5D                     i1l6904:	
  9076                           
  9077                           ; Switch size 1, requested type "speed"
  9078                           ; Number of cases is 4, Range of values is 0 to 3
  9079                           ; switch strategies available:
  9080                           ; Name         Instructions Cycles
  9081                           ; simple_byte           13     7 (average)
  9082                           ; direct_byte           20     8 (fixed)
  9083                           ; jumptable            260     6 (fixed)
  9084                           ;	Chosen strategy is simple_byte
  9085  0C5D  087A               	movf	??_SWs_UPDATE,w
  9086  0C5E  3A00               	xorlw	0	; case 0
  9087  0C5F  1903               	skipnz
  9088  0C60  2C09               	goto	i1l6186
  9089  0C61  3A01               	xorlw	1	; case 1
  9090  0C62  1903               	skipnz
  9091  0C63  2BEE               	goto	i1l6182
  9092  0C64  3A03               	xorlw	3	; case 2
  9093  0C65  1903               	skipnz
  9094  0C66  2BC4               	goto	i1l6176
  9095  0C67  3A01               	xorlw	1	; case 3
  9096  0C68  1903               	skipnz
  9097  0C69  2C2F               	goto	i1l6192
  9098  0C6A  2C6B               	goto	i1l6200
  9099  0C6B                     i1l6200:	
  9100                           
  9101                           ;SW.c: 106:   }
  9102  0C6B  1283               	bcf	3,5	;RP0=0, select bank0
  9103  0C6C  1303               	bcf	3,6	;RP1=0, select bank0
  9104  0C6D  3004               	movlw	4
  9105  0C6E  0AA2               	incf	SWs_UPDATE@sw_counter,f
  9106  0C6F  0222               	subwf	SWs_UPDATE@sw_counter,w
  9107  0C70  1803               	btfsc	3,0
  9108  0C71  0008               	return
  9109  0C72  2B79               	goto	i1l296
  9110  0C73                     __end_of_SWs_UPDATE:	
  9111  0C73                     __ptext77:	
  9112 ;; *************** function i1___bmul *****************
  9113 ;; Defined at:
  9114 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  9115 ;; Parameters:    Size  Location     Type
  9116 ;;  multiplier      1    wreg     unsigned char 
  9117 ;;  multiplicand    1    0[COMMON] unsigned char 
  9118 ;; Auto vars:     Size  Location     Type
  9119 ;;  multiplier      1    1[COMMON] unsigned char 
  9120 ;;  __bmul          1    2[COMMON] unsigned char 
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  1    wreg      unsigned char 
  9123 ;; Registers used:
  9124 ;;		wreg, status,2, status,0
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9130 ;;      Params:         1       0       0       0       0
  9131 ;;      Locals:         2       0       0       0       0
  9132 ;;      Temps:          0       0       0       0       0
  9133 ;;      Totals:         3       0       0       0       0
  9134 ;;Total ram usage:        3 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; This function calls:
  9137 ;;		Nothing
  9138 ;; This function is called by:
  9139 ;;		_SWs_UPDATE
  9140 ;;		_SW_GET_STATE
  9141 ;;		_LED_SET_STATE
  9142 ;;		_INCREMENT_THIS
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           
  9147                           ;psect for function i1___bmul
  9148  0C73                     i1___bmul:	
  9149                           
  9150                           ;incstack = 0
  9151                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  9152                           ;i1___bmul@multiplier stored from wreg
  9153  0C73  00F1               	movwf	i1___bmul@multiplier
  9154  0C74  01F2               	clrf	i1___bmul@product
  9155  0C75  0870               	movf	i1___bmul@multiplicand,w
  9156  0C76  1871               	btfsc	i1___bmul@multiplier,0
  9157  0C77  07F2               	addwf	i1___bmul@product,f
  9158  0C78  1003               	clrc
  9159  0C79  0DF0               	rlf	i1___bmul@multiplicand,f
  9160  0C7A  0870               	movf	i1___bmul@multiplicand,w
  9161  0C7B  18F1               	btfsc	i1___bmul@multiplier,1
  9162  0C7C  07F2               	addwf	i1___bmul@product,f
  9163  0C7D  1003               	clrc
  9164  0C7E  0DF0               	rlf	i1___bmul@multiplicand,f
  9165  0C7F  0870               	movf	i1___bmul@multiplicand,w
  9166  0C80  1971               	btfsc	i1___bmul@multiplier,2
  9167  0C81  07F2               	addwf	i1___bmul@product,f
  9168  0C82  1003               	clrc
  9169  0C83  0DF0               	rlf	i1___bmul@multiplicand,f
  9170  0C84  0870               	movf	i1___bmul@multiplicand,w
  9171  0C85  19F1               	btfsc	i1___bmul@multiplier,3
  9172  0C86  07F2               	addwf	i1___bmul@product,f
  9173  0C87  1003               	clrc
  9174  0C88  0DF0               	rlf	i1___bmul@multiplicand,f
  9175  0C89  0870               	movf	i1___bmul@multiplicand,w
  9176  0C8A  1A71               	btfsc	i1___bmul@multiplier,4
  9177  0C8B  07F2               	addwf	i1___bmul@product,f
  9178  0C8C  1003               	clrc
  9179  0C8D  0DF0               	rlf	i1___bmul@multiplicand,f
  9180  0C8E  0870               	movf	i1___bmul@multiplicand,w
  9181  0C8F  1AF1               	btfsc	i1___bmul@multiplier,5
  9182  0C90  07F2               	addwf	i1___bmul@product,f
  9183  0C91  1003               	clrc
  9184  0C92  0DF0               	rlf	i1___bmul@multiplicand,f
  9185  0C93  0870               	movf	i1___bmul@multiplicand,w
  9186  0C94  1B71               	btfsc	i1___bmul@multiplier,6
  9187  0C95  07F2               	addwf	i1___bmul@product,f
  9188  0C96  1003               	clrc
  9189  0C97  0DF0               	rlf	i1___bmul@multiplicand,f
  9190  0C98  0870               	movf	i1___bmul@multiplicand,w
  9191  0C99  1BF1               	btfsc	i1___bmul@multiplier,7
  9192  0C9A  07F2               	addwf	i1___bmul@product,f
  9193  0C9B  0872               	movf	i1___bmul@product,w
  9194  0C9C  0008               	return
  9195  0C9D                     __end_ofi1___bmul:	
  9196  0C9D                     __ptext69:	
  9197 ;; *************** function i1_HEATER_SET_STATE *****************
  9198 ;; Defined at:
  9199 ;;		line 71 in file "HEATER.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;  HEATER_STATE    1    wreg     unsigned char 
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  HEATER_STATE    1    0[COMMON] unsigned char 
  9204 ;; Return value:  Size  Location     Type
  9205 ;;                  1    wreg      void 
  9206 ;; Registers used:
  9207 ;;		wreg
  9208 ;; Tracked objects:
  9209 ;;		On entry : 300/300
  9210 ;;		On exit  : 300/300
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9213 ;;      Params:         0       0       0       0       0
  9214 ;;      Locals:         1       0       0       0       0
  9215 ;;      Temps:          0       0       0       0       0
  9216 ;;      Totals:         1       0       0       0       0
  9217 ;;Total ram usage:        1 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; This function calls:
  9220 ;;		Nothing
  9221 ;; This function is called by:
  9222 ;;		_HEATING_HANDLER
  9223 ;;		_STOP_HEATING
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           
  9228                           ;psect for function i1_HEATER_SET_STATE
  9229  0C9D                     i1_HEATER_SET_STATE:	
  9230                           
  9231                           ;incstack = 0
  9232                           ; Regs used in i1_HEATER_SET_STATE: [wreg]
  9233                           ;i1HEATER_SET_STATE@HEATER_STATE stored from wreg
  9234  0C9D  00F0               	movwf	i1HEATER_SET_STATE@HEATER_STATE
  9235                           
  9236                           ;HEATER.c: 71: void HEATER_SET_STATE (tHEATER_STATE HEATER_STATE);HEATER.c: 72: {;HEATER
      +                          .c: 73:     DESIRED_HEAT = HEATER_STATE ;
  9237  0C9E  00EB               	movwf	_DESIRED_HEAT^(0+384)
  9238  0C9F  0008               	return
  9239  0CA0                     __end_ofi1_HEATER_SET_STATE:	
  9240  0CA0                     __ptext68:	
  9241 ;; *************** function i1_MOTOR_SET_STATE *****************
  9242 ;; Defined at:
  9243 ;;		line 71 in file "MOTOR.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;  MOTOR_STATE     1    wreg     unsigned char 
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;  MOTOR_STATE     1    0[COMMON] unsigned char 
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  1    wreg      void 
  9250 ;; Registers used:
  9251 ;;		wreg
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/300
  9254 ;;		On exit  : 300/300
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9257 ;;      Params:         0       0       0       0       0
  9258 ;;      Locals:         1       0       0       0       0
  9259 ;;      Temps:          0       0       0       0       0
  9260 ;;      Totals:         1       0       0       0       0
  9261 ;;Total ram usage:        1 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; This function calls:
  9264 ;;		Nothing
  9265 ;; This function is called by:
  9266 ;;		_HEATING_HANDLER
  9267 ;;		_STOP_HEATING
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           
  9272                           ;psect for function i1_MOTOR_SET_STATE
  9273  0CA0                     i1_MOTOR_SET_STATE:	
  9274                           
  9275                           ;incstack = 0
  9276                           ; Regs used in i1_MOTOR_SET_STATE: [wreg]
  9277                           ;i1MOTOR_SET_STATE@MOTOR_STATE stored from wreg
  9278  0CA0  00F0               	movwf	i1MOTOR_SET_STATE@MOTOR_STATE
  9279                           
  9280                           ;MOTOR.c: 71: void MOTOR_SET_STATE (tMOTOR_STATE MOTOR_STATE);MOTOR.c: 72: {;MOTOR.c: 73
      +                          :     DESIRED_SPEED = MOTOR_STATE ;
  9281  0CA1  1683               	bsf	3,5	;RP0=1, select bank3
  9282  0CA2  1703               	bsf	3,6	;RP1=1, select bank3
  9283  0CA3  00EC               	movwf	_DESIRED_SPEED^(0+384)
  9284  0CA4  0008               	return
  9285  0CA5                     __end_ofi1_MOTOR_SET_STATE:	
  9286  0CA5                     __ptext80:	
  9287 ;; *************** function _DISP_SHOW_TIME_AT *****************
  9288 ;; Defined at:
  9289 ;;		line 59 in file "Display.c"
  9290 ;; Parameters:    Size  Location     Type
  9291 ;;  START_TIME      3   15[BANK0 ] struct .
  9292 ;; Auto vars:     Size  Location     Type
  9293 ;;		None
  9294 ;; Return value:  Size  Location     Type
  9295 ;;                  1    wreg      void 
  9296 ;; Registers used:
  9297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9298 ;; Tracked objects:
  9299 ;;		On entry : 300/0
  9300 ;;		On exit  : 300/0
  9301 ;;		Unchanged: 0/0
  9302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9303 ;;      Params:         0       3       0       0       0
  9304 ;;      Locals:         0       0       0       0       0
  9305 ;;      Temps:          0       0       0       0       0
  9306 ;;      Totals:         0       3       0       0       0
  9307 ;;Total ram usage:        3 bytes
  9308 ;; Hardware stack levels used:    1
  9309 ;; Hardware stack levels required when called:    5
  9310 ;; This function calls:
  9311 ;;		_DISP_SHOW_TIME
  9312 ;;		_UPDATE_LCD_HOURS
  9313 ;;		_UPDATE_LCD_MINUTES
  9314 ;;		_UPDATE_LCD_SECONDS
  9315 ;; This function is called by:
  9316 ;;		_SET_TIME_HANDLER
  9317 ;;		_HEATING_HANDLER
  9318 ;;		_DEFAULT_HANDLER
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           
  9323                           ;psect for function _DISP_SHOW_TIME_AT
  9324  0CA5                     _DISP_SHOW_TIME_AT:	
  9325                           
  9326                           ;Display.c: 59:  void DISP_SHOW_TIME_AT( tTIME START_TIME);Display.c: 60:  {;Display.c: 
      +                          62:      DISP_SHOW_TIME();
  9327                           
  9328                           ;incstack = 0
  9329 ;; hardware stack exceeded
  9330                           ; Regs used in _DISP_SHOW_TIME_AT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9331  0CA5  2658  120A  158A   	fcall	_DISP_SHOW_TIME
  9332                           
  9333                           ;Display.c: 63:       UPDATE_LCD_SECONDS(START_TIME.SECONDS);
  9334  0CA8  082F               	movf	DISP_SHOW_TIME_AT@START_TIME,w
  9335  0CA9  2507  120A  158A   	fcall	_UPDATE_LCD_SECONDS
  9336                           
  9337                           ;Display.c: 64:       UPDATE_LCD_MINUTES(START_TIME.MINUTES);
  9338  0CAC  0830               	movf	DISP_SHOW_TIME_AT@START_TIME+1,w
  9339  0CAD  24BE  120A  158A   	fcall	_UPDATE_LCD_MINUTES
  9340                           
  9341                           ;Display.c: 65:       UPDATE_LCD_HOURS(START_TIME.HOURS);
  9342  0CB0  0831               	movf	DISP_SHOW_TIME_AT@START_TIME+2,w
  9343  0CB1  2DDD               	ljmp	_UPDATE_LCD_HOURS
  9344  0CB2                     __end_of_DISP_SHOW_TIME_AT:	
  9345  0CB2                     __ptext78:	
  9346 ;; *************** function _STOP_BLINKING *****************
  9347 ;; Defined at:
  9348 ;;		line 118 in file "LCD.c"
  9349 ;; Parameters:    Size  Location     Type
  9350 ;;		None
  9351 ;; Auto vars:     Size  Location     Type
  9352 ;;		None
  9353 ;; Return value:  Size  Location     Type
  9354 ;;                  1    wreg      void 
  9355 ;; Registers used:
  9356 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9362 ;;      Params:         0       0       0       0       0
  9363 ;;      Locals:         0       0       0       0       0
  9364 ;;      Temps:          0       0       0       0       0
  9365 ;;      Totals:         0       0       0       0       0
  9366 ;;Total ram usage:        0 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:    2
  9369 ;; This function calls:
  9370 ;;		i1_LCD_SND_COMMAND
  9371 ;; This function is called by:
  9372 ;;		_SET_TIME_HANDLER
  9373 ;;		_SET_HEATING_HANDLER
  9374 ;;		_SET_ROTOR_PWR_HANDLER
  9375 ;;		_HEATING_HANDLER
  9376 ;;		_DEFAULT_HANDLER
  9377 ;;		_SET_HEATING_HANDLER_ON_WORK
  9378 ;;		_SET_ROTOR_PWR_HANDLER_ON_WORK
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           
  9383                           ;psect for function _STOP_BLINKING
  9384  0CB2                     _STOP_BLINKING:	
  9385  0CB2                     i1l4570:	
  9386                           ;incstack = 0
  9387 ;; hardware stack exceeded
  9388                           ; Regs used in _STOP_BLINKING: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9389                           
  9390                           
  9391                           ;LCD.c: 121:  LCD_SND_COMMAND(0x0C);
  9392  0CB2  300C               	movlw	12
  9393  0CB3  270E               	fcall	i1_LCD_SND_COMMAND
  9394  0CB4  0008               	return
  9395  0CB5                     __end_of_STOP_BLINKING:	
  9396  0CB5                     __ptext71:	
  9397 ;; *************** function _TIME_GET *****************
  9398 ;; Defined at:
  9399 ;;		line 131 in file "TIME.c"
  9400 ;; Parameters:    Size  Location     Type
  9401 ;;		None
  9402 ;; Auto vars:     Size  Location     Type
  9403 ;;		None
  9404 ;; Return value:  Size  Location     Type
  9405 ;;                  3    0[COMMON] struct .
  9406 ;; Registers used:
  9407 ;;		wreg
  9408 ;; Tracked objects:
  9409 ;;		On entry : 0/0
  9410 ;;		On exit  : 300/300
  9411 ;;		Unchanged: 0/0
  9412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9413 ;;      Params:         3       0       0       0       0
  9414 ;;      Locals:         0       0       0       0       0
  9415 ;;      Temps:          0       0       0       0       0
  9416 ;;      Totals:         3       0       0       0       0
  9417 ;;Total ram usage:        3 bytes
  9418 ;; Hardware stack levels used:    1
  9419 ;; This function calls:
  9420 ;;		Nothing
  9421 ;; This function is called by:
  9422 ;;		_HEATING_HANDLER
  9423 ;;		_STOP_HEATING
  9424 ;; This function uses a non-reentrant model
  9425 ;;
  9426                           
  9427                           
  9428                           ;psect for function _TIME_GET
  9429  0CB5                     _TIME_GET:	
  9430                           
  9431                           ;TIME.c: 133:     return CURRENT_TIME;
  9432                           
  9433                           ;incstack = 0
  9434                           ; Regs used in _TIME_GET: [wreg]
  9435  0CB5  1683               	bsf	3,5	;RP0=1, select bank3
  9436  0CB6  1703               	bsf	3,6	;RP1=1, select bank3
  9437  0CB7  0815               	movf	_CURRENT_TIME^(0+384),w
  9438  0CB8  00F0               	movwf	?_TIME_GET
  9439  0CB9  0816               	movf	(_CURRENT_TIME+1)^(0+384),w
  9440  0CBA  00F1               	movwf	?_TIME_GET+1
  9441  0CBB  0817               	movf	(_CURRENT_TIME+2)^(0+384),w
  9442  0CBC  00F2               	movwf	?_TIME_GET+2
  9443  0CBD  0008               	return
  9444  0CBE                     __end_of_TIME_GET:	
  9445  0CBE                     __ptext82:	
  9446 ;; *************** function _UPDATE_LCD_MINUTES *****************
  9447 ;; Defined at:
  9448 ;;		line 120 in file "Display.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;  MINUTES         1    wreg     unsigned char 
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;  MINUTES         1   14[BANK0 ] unsigned char 
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  1    wreg      void 
  9455 ;; Registers used:
  9456 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 300/0
  9459 ;;		On exit  : 300/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9462 ;;      Params:         0       0       0       0       0
  9463 ;;      Locals:         0       1       0       0       0
  9464 ;;      Temps:          0       0       0       0       0
  9465 ;;      Totals:         0       1       0       0       0
  9466 ;;Total ram usage:        1 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    4
  9469 ;; This function calls:
  9470 ;;		_LCD_SEND_A_NUMBER
  9471 ;;		_LCD_SET_CURSOR
  9472 ;;		___lbdiv
  9473 ;; This function is called by:
  9474 ;;		_DISP_UPDATE_TIME
  9475 ;;		_DISP_SHOW_TIME_AT
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           
  9480                           ;psect for function _UPDATE_LCD_MINUTES
  9481  0CBE                     _UPDATE_LCD_MINUTES:	
  9482                           
  9483                           ;incstack = 0
  9484 ;; hardware stack exceeded
  9485                           ; Regs used in _UPDATE_LCD_MINUTES: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9486                           ;UPDATE_LCD_MINUTES@MINUTES stored from wreg
  9487  0CBE  00AE               	movwf	UPDATE_LCD_MINUTES@MINUTES
  9488                           
  9489                           ;Display.c: 120:  static void UPDATE_LCD_MINUTES(tbyte MINUTES);Display.c: 121:  {;Displ
      +                          ay.c: 123:   LCD_SET_CURSOR(0,(9));
  9490  0CBF  3009               	movlw	9
  9491  0CC0  00A1               	movwf	LCD_SET_CURSOR@row
  9492  0CC1  3000               	movlw	0
  9493  0CC2  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
  9494                           
  9495                           ;Display.c: 124:   if (MINUTES / 10 != 0)
  9496  0CC5  300A               	movlw	10
  9497  0CC6  00F0               	movwf	___lbdiv@divisor
  9498  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  9499  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  9500  0CC9  082E               	movf	UPDATE_LCD_MINUTES@MINUTES,w
  9501  0CCA  24EC  120A  158A   	fcall	___lbdiv
  9502  0CCD  3A00               	xorlw	0
  9503  0CCE  1903               	skipnz
  9504  0CCF  2CD4               	goto	i1l4590
  9505                           
  9506                           ;Display.c: 125:   {;Display.c: 126:    LCD_SEND_A_NUMBER(MINUTES);
  9507  0CD0  082E               	movf	UPDATE_LCD_MINUTES@MINUTES,w
  9508  0CD1  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9509  0CD2  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9510  0CD3  2CDD               	ljmp	i1l4360
  9511  0CD4                     i1l4590:	
  9512                           ;Display.c: 127:   }
  9513                           
  9514                           
  9515                           ;Display.c: 129:   {;Display.c: 130:    LCD_SEND_A_NUMBER(0);
  9516  0CD4  01A8               	clrf	LCD_SEND_A_NUMBER@x
  9517  0CD5  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9518  0CD6  24DD  120A  158A   	fcall	_LCD_SEND_A_NUMBER
  9519                           
  9520                           ;Display.c: 131:    LCD_SEND_A_NUMBER(MINUTES);
  9521  0CD9  082E               	movf	UPDATE_LCD_MINUTES@MINUTES,w
  9522  0CDA  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9523  0CDB  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9524  0CDC  2CDD               	ljmp	i1l4360
  9525  0CDD                     __end_of_UPDATE_LCD_MINUTES:	
  9526  0CDD                     __ptext85:	
  9527 ;; *************** function _LCD_SEND_A_NUMBER *****************
  9528 ;; Defined at:
  9529 ;;		line 69 in file "LCD.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;  x               2    8[BANK0 ] unsigned int 
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;  string          4   10[BANK0 ] unsigned char [4]
  9534 ;; Return value:  Size  Location     Type
  9535 ;;                  1    wreg      void 
  9536 ;; Registers used:
  9537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9538 ;; Tracked objects:
  9539 ;;		On entry : 300/0
  9540 ;;		On exit  : 300/0
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9543 ;;      Params:         0       2       0       0       0
  9544 ;;      Locals:         0       4       0       0       0
  9545 ;;      Temps:          0       0       0       0       0
  9546 ;;      Totals:         0       6       0       0       0
  9547 ;;Total ram usage:        6 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    3
  9550 ;; This function calls:
  9551 ;;		_LCD_SEND_A_STRING
  9552 ;;		_itoa
  9553 ;; This function is called by:
  9554 ;;		_DISP_UPDATE_TIME_UNIT_AT
  9555 ;;		_UPDATE_LCD_SECONDS
  9556 ;;		_UPDATE_LCD_MINUTES
  9557 ;;		_UPDATE_LCD_HOURS
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           
  9562                           ;psect for function _LCD_SEND_A_NUMBER
  9563  0CDD                     _LCD_SEND_A_NUMBER:	
  9564  0CDD                     i1l4360:	
  9565                           ;incstack = 0
  9566 ;; hardware stack exceeded
  9567                           ; Regs used in _LCD_SEND_A_NUMBER: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9568                           
  9569                           
  9570                           ;LCD.c: 69: void LCD_SEND_A_NUMBER (tWORD x);LCD.c: 70: {;LCD.c: 71:  char string[4];;LC
      +                          D.c: 73:  itoa (string , x ,10);
  9571  0CDD  0829               	movf	LCD_SEND_A_NUMBER@x+1,w
  9572  0CDE  00A5               	movwf	itoa@val+1
  9573  0CDF  0828               	movf	LCD_SEND_A_NUMBER@x,w
  9574  0CE0  00A4               	movwf	itoa@val
  9575  0CE1  300A               	movlw	10
  9576  0CE2  00A6               	movwf	itoa@base
  9577  0CE3  302A               	movlw	(low (LCD_SEND_A_NUMBER@string| 0))& (0+255)
  9578  0CE4  01A7               	clrf	itoa@base+1
  9579  0CE5  2795  120A  158A   	fcall	_itoa
  9580                           
  9581                           ;LCD.c: 74:  LCD_SEND_A_STRING(string);
  9582  0CE8  302A               	movlw	(low (LCD_SEND_A_NUMBER@string| 0))& (0+255)
  9583  0CE9  00A1               	movwf	LCD_SEND_A_STRING@string
  9584  0CEA  01A2               	clrf	LCD_SEND_A_STRING@string+1
  9585  0CEB  2E86               	ljmp	i1l4318
  9586  0CEC                     __end_of_LCD_SEND_A_NUMBER:	
  9587  0CEC                     __ptext84:	
  9588 ;; *************** function ___lbdiv *****************
  9589 ;; Defined at:
  9590 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lbdiv.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;  dividend        1    wreg     unsigned char 
  9593 ;;  divisor         1    0[COMMON] unsigned char 
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;  dividend        1    1[COMMON] unsigned char 
  9596 ;;  quotient        1    3[COMMON] unsigned char 
  9597 ;;  counter         1    2[COMMON] unsigned char 
  9598 ;; Return value:  Size  Location     Type
  9599 ;;                  1    wreg      unsigned char 
  9600 ;; Registers used:
  9601 ;;		wreg, status,2, status,0
  9602 ;; Tracked objects:
  9603 ;;		On entry : 300/0
  9604 ;;		On exit  : 300/0
  9605 ;;		Unchanged: 300/0
  9606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9607 ;;      Params:         1       0       0       0       0
  9608 ;;      Locals:         3       0       0       0       0
  9609 ;;      Temps:          0       0       0       0       0
  9610 ;;      Totals:         4       0       0       0       0
  9611 ;;Total ram usage:        4 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; This function calls:
  9614 ;;		Nothing
  9615 ;; This function is called by:
  9616 ;;		_UPDATE_LCD_SECONDS
  9617 ;;		_UPDATE_LCD_MINUTES
  9618 ;;		_UPDATE_LCD_HOURS
  9619 ;; This function uses a non-reentrant model
  9620 ;;
  9621                           
  9622                           
  9623                           ;psect for function ___lbdiv
  9624  0CEC                     ___lbdiv:	
  9625                           
  9626                           ;incstack = 0
  9627 ;; hardware stack exceeded
  9628                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  9629                           ;___lbdiv@dividend stored from wreg
  9630  0CEC  00F1               	movwf	___lbdiv@dividend
  9631  0CED  01F3               	clrf	___lbdiv@quotient
  9632  0CEE  0870               	movf	___lbdiv@divisor,w
  9633  0CEF  1903               	btfsc	3,2
  9634  0CF0  2D05               	goto	i1l4480
  9635  0CF1  01F2               	clrf	___lbdiv@counter
  9636  0CF2                     i1l4466:	
  9637  0CF2  0AF2               	incf	___lbdiv@counter,f
  9638  0CF3  1BF0               	btfsc	___lbdiv@divisor,7
  9639  0CF4  2CF8               	goto	i1l1236
  9640  0CF5  1003               	clrc
  9641  0CF6  0DF0               	rlf	___lbdiv@divisor,f
  9642  0CF7  2CF2               	goto	i1l4466
  9643  0CF8                     i1l1236:	
  9644  0CF8  1003               	clrc
  9645  0CF9  0DF3               	rlf	___lbdiv@quotient,f
  9646  0CFA  0870               	movf	___lbdiv@divisor,w
  9647  0CFB  0271               	subwf	___lbdiv@dividend,w
  9648  0CFC  1C03               	skipc
  9649  0CFD  2D02               	goto	L23
  9650  0CFE  0870               	movf	___lbdiv@divisor,w
  9651  0CFF  02F1               	subwf	___lbdiv@dividend,f
  9652  0D00  1473               	bsf	___lbdiv@quotient,0
  9653  0D01  1003               	clrc
  9654  0D02                     L23:	
  9655  0D02  0CF0               	rrf	___lbdiv@divisor,f
  9656  0D03  0BF2               	decfsz	___lbdiv@counter,f
  9657  0D04  2CF8               	goto	i1l1236
  9658  0D05                     i1l4480:	
  9659  0D05  0873               	movf	___lbdiv@quotient,w
  9660  0D06  0008               	return
  9661  0D07                     __end_of___lbdiv:	
  9662  0D07                     __ptext81:	
  9663 ;; *************** function _UPDATE_LCD_SECONDS *****************
  9664 ;; Defined at:
  9665 ;;		line 106 in file "Display.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;  SECONDS         1    wreg     unsigned char 
  9668 ;; Auto vars:     Size  Location     Type
  9669 ;;  SECONDS         1   14[BANK0 ] unsigned char 
  9670 ;; Return value:  Size  Location     Type
  9671 ;;                  1    wreg      void 
  9672 ;; Registers used:
  9673 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9674 ;; Tracked objects:
  9675 ;;		On entry : 300/0
  9676 ;;		On exit  : 300/0
  9677 ;;		Unchanged: 0/0
  9678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9679 ;;      Params:         0       0       0       0       0
  9680 ;;      Locals:         0       1       0       0       0
  9681 ;;      Temps:          0       0       0       0       0
  9682 ;;      Totals:         0       1       0       0       0
  9683 ;;Total ram usage:        1 bytes
  9684 ;; Hardware stack levels used:    1
  9685 ;; Hardware stack levels required when called:    4
  9686 ;; This function calls:
  9687 ;;		_LCD_SEND_A_NUMBER
  9688 ;;		_LCD_SET_CURSOR
  9689 ;;		___lbdiv
  9690 ;; This function is called by:
  9691 ;;		_DISP_UPDATE_TIME
  9692 ;;		_DISP_SHOW_TIME_AT
  9693 ;; This function uses a non-reentrant model
  9694 ;;
  9695                           
  9696                           
  9697                           ;psect for function _UPDATE_LCD_SECONDS
  9698  0D07                     _UPDATE_LCD_SECONDS:	
  9699                           
  9700                           ;incstack = 0
  9701 ;; hardware stack exceeded
  9702                           ; Regs used in _UPDATE_LCD_SECONDS: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9703                           ;UPDATE_LCD_SECONDS@SECONDS stored from wreg
  9704  0D07  00AE               	movwf	UPDATE_LCD_SECONDS@SECONDS
  9705                           
  9706                           ;Display.c: 106: static void UPDATE_LCD_SECONDS(tbyte SECONDS);Display.c: 107:  {;Displa
      +                          y.c: 109:   LCD_SET_CURSOR(0,(12));
  9707  0D08  300C               	movlw	12
  9708  0D09  00A1               	movwf	LCD_SET_CURSOR@row
  9709  0D0A  3000               	movlw	0
  9710  0D0B  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
  9711                           
  9712                           ;Display.c: 110:   if (SECONDS / 10 != 0)
  9713  0D0E  300A               	movlw	10
  9714  0D0F  00F0               	movwf	___lbdiv@divisor
  9715  0D10  1283               	bcf	3,5	;RP0=0, select bank0
  9716  0D11  1303               	bcf	3,6	;RP1=0, select bank0
  9717  0D12  082E               	movf	UPDATE_LCD_SECONDS@SECONDS,w
  9718  0D13  24EC  120A  158A   	fcall	___lbdiv
  9719  0D16  3A00               	xorlw	0
  9720  0D17  1903               	skipnz
  9721  0D18  2D1D               	goto	i1l4582
  9722                           
  9723                           ;Display.c: 111:   {;Display.c: 112:             LCD_SEND_A_NUMBER(SECONDS);
  9724  0D19  082E               	movf	UPDATE_LCD_SECONDS@SECONDS,w
  9725  0D1A  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9726  0D1B  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9727  0D1C  2CDD               	ljmp	i1l4360
  9728  0D1D                     i1l4582:	
  9729                           ;Display.c: 113:   }
  9730                           
  9731                           
  9732                           ;Display.c: 115:   {;Display.c: 116:             LCD_SEND_A_NUMBER(0);
  9733  0D1D  01A8               	clrf	LCD_SEND_A_NUMBER@x
  9734  0D1E  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9735  0D1F  24DD  120A  158A   	fcall	_LCD_SEND_A_NUMBER
  9736                           
  9737                           ;Display.c: 117:             LCD_SEND_A_NUMBER(SECONDS);
  9738  0D22  082E               	movf	UPDATE_LCD_SECONDS@SECONDS,w
  9739  0D23  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9740  0D24  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9741  0D25  2CDD               	ljmp	i1l4360
  9742  0D26                     __end_of_UPDATE_LCD_SECONDS:	
  9743  0D26                     __ptext70:	
  9744 ;; *************** function _TIME_STOP *****************
  9745 ;; Defined at:
  9746 ;;		line 48 in file "TIME.c"
  9747 ;; Parameters:    Size  Location     Type
  9748 ;;		None
  9749 ;; Auto vars:     Size  Location     Type
  9750 ;;		None
  9751 ;; Return value:  Size  Location     Type
  9752 ;;                  1    wreg      void 
  9753 ;; Registers used:
  9754 ;;		status,2
  9755 ;; Tracked objects:
  9756 ;;		On entry : B00/800
  9757 ;;		On exit  : B00/B00
  9758 ;;		Unchanged: 800/0
  9759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9760 ;;      Params:         0       0       0       0       0
  9761 ;;      Locals:         0       0       0       0       0
  9762 ;;      Temps:          0       0       0       0       0
  9763 ;;      Totals:         0       0       0       0       0
  9764 ;;Total ram usage:        0 bytes
  9765 ;; Hardware stack levels used:    1
  9766 ;; This function calls:
  9767 ;;		Nothing
  9768 ;; This function is called by:
  9769 ;;		_STOP_HEATING
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           
  9774                           ;psect for function _TIME_STOP
  9775  0D26                     _TIME_STOP:	
  9776                           
  9777                           ;TIME.c: 50:     COUNT_DECISION = NO;
  9778                           
  9779                           ;incstack = 0
  9780 ;; hardware stack exceeded
  9781                           ; Regs used in _TIME_STOP: [status,2]
  9782  0D26  1683               	bsf	3,5	;RP0=1, select bank3
  9783  0D27  1703               	bsf	3,6	;RP1=1, select bank3
  9784  0D28  01AB               	clrf	_COUNT_DECISION^(0+384)
  9785  0D29  0008               	return
  9786  0D2A                     __end_of_TIME_STOP:	
  9787  0D2A                     __ptext65:	
  9788 ;; *************** function _TIME_START_AT *****************
  9789 ;; Defined at:
  9790 ;;		line 136 in file "TIME.c"
  9791 ;; Parameters:    Size  Location     Type
  9792 ;;  START_SECOND    1    wreg     unsigned char 
  9793 ;;  START_MINUTE    1    0[COMMON] unsigned char 
  9794 ;;  START_HOURS     1    1[COMMON] unsigned char 
  9795 ;;  COUNTING_TYP    1    2[COMMON] enum E870
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;  START_SECOND    1    3[COMMON] unsigned char 
  9798 ;; Return value:  Size  Location     Type
  9799 ;;                  1    wreg      void 
  9800 ;; Registers used:
  9801 ;;		wreg, status,2, status,0, pclath, cstack
  9802 ;; Tracked objects:
  9803 ;;		On entry : B00/800
  9804 ;;		On exit  : B00/B00
  9805 ;;		Unchanged: 800/0
  9806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9807 ;;      Params:         3       0       0       0       0
  9808 ;;      Locals:         1       0       0       0       0
  9809 ;;      Temps:          0       0       0       0       0
  9810 ;;      Totals:         4       0       0       0       0
  9811 ;;Total ram usage:        4 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; Hardware stack levels required when called:    1
  9814 ;; This function calls:
  9815 ;;		_TIME_CONTINUE
  9816 ;; This function is called by:
  9817 ;;		_HEATING_HANDLER
  9818 ;; This function uses a non-reentrant model
  9819 ;;
  9820                           
  9821                           
  9822                           ;psect for function _TIME_START_AT
  9823  0D2A                     _TIME_START_AT:	
  9824                           
  9825                           ;incstack = 0
  9826 ;; hardware stack exceeded
  9827                           ; Regs used in _TIME_START_AT: [wreg+status,2+status,0+pclath+cstack]
  9828                           ;TIME_START_AT@START_SECONDS stored from wreg
  9829  0D2A  00F3               	movwf	TIME_START_AT@START_SECONDS
  9830                           
  9831                           ;TIME.c: 136: void TIME_START_AT (tbyte START_SECONDS , tbyte START_MINUTES , tbyte STAR
      +                          T_HOURS ,tTIME_type COUNTING_TYPE );TIME.c: 137: {;TIME.c: 138:     TICK_COUNTER = 0;
  9832  0D2B  1683               	bsf	3,5	;RP0=1, select bank3
  9833  0D2C  1703               	bsf	3,6	;RP1=1, select bank3
  9834  0D2D  01A0               	clrf	_TICK_COUNTER^(0+384)
  9835  0D2E  01A1               	clrf	(_TICK_COUNTER+1)^(0+384)
  9836                           
  9837                           ;TIME.c: 139:     CURRENT_TIME.SECONDS = START_SECONDS;
  9838  0D2F  0873               	movf	TIME_START_AT@START_SECONDS,w
  9839  0D30  0095               	movwf	_CURRENT_TIME^(0+384)
  9840                           
  9841                           ;TIME.c: 140:     CURRENT_TIME.MINUTES = START_MINUTES;
  9842  0D31  0870               	movf	TIME_START_AT@START_MINUTES,w
  9843  0D32  0096               	movwf	(_CURRENT_TIME^(0+384)+1)
  9844                           
  9845                           ;TIME.c: 141:     CURRENT_TIME.HOURS = START_HOURS;
  9846  0D33  0871               	movf	TIME_START_AT@START_HOURS,w
  9847  0D34  0097               	movwf	(_CURRENT_TIME^(0+384)+2)
  9848                           
  9849                           ;TIME.c: 143:     TIME_CONTINUE();
  9850  0D35  2D42               	ljmp	i1l4610
  9851  0D36                     __end_of_TIME_START_AT:	
  9852  0D36                     __ptext55:	
  9853 ;; *************** function _DISP_UPDATE_TIME_UNIT_AT *****************
  9854 ;; Defined at:
  9855 ;;		line 53 in file "Display.c"
  9856 ;; Parameters:    Size  Location     Type
  9857 ;;  UNIT            1    wreg     unsigned char 
  9858 ;;  NUMBER          1   14[BANK0 ] unsigned char 
  9859 ;; Auto vars:     Size  Location     Type
  9860 ;;  UNIT            1   15[BANK0 ] unsigned char 
  9861 ;; Return value:  Size  Location     Type
  9862 ;;                  1    wreg      void 
  9863 ;; Registers used:
  9864 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9865 ;; Tracked objects:
  9866 ;;		On entry : 300/0
  9867 ;;		On exit  : 300/0
  9868 ;;		Unchanged: 0/0
  9869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9870 ;;      Params:         0       1       0       0       0
  9871 ;;      Locals:         0       1       0       0       0
  9872 ;;      Temps:          0       0       0       0       0
  9873 ;;      Totals:         0       2       0       0       0
  9874 ;;Total ram usage:        2 bytes
  9875 ;; Hardware stack levels used:    1
  9876 ;; Hardware stack levels required when called:    4
  9877 ;; This function calls:
  9878 ;;		_LCD_SEND_A_NUMBER
  9879 ;;		_LCD_SET_CURSOR
  9880 ;; This function is called by:
  9881 ;;		_INCREMENT_THIS
  9882 ;; This function uses a non-reentrant model
  9883 ;;
  9884                           
  9885                           
  9886                           ;psect for function _DISP_UPDATE_TIME_UNIT_AT
  9887  0D36                     _DISP_UPDATE_TIME_UNIT_AT:	
  9888                           
  9889                           ;incstack = 0
  9890 ;; hardware stack exceeded
  9891                           ; Regs used in _DISP_UPDATE_TIME_UNIT_AT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
  9892                           ;DISP_UPDATE_TIME_UNIT_AT@UNIT stored from wreg
  9893  0D36  00AF               	movwf	DISP_UPDATE_TIME_UNIT_AT@UNIT
  9894                           
  9895                           ;Display.c: 53: void DISP_UPDATE_TIME_UNIT_AT(tbyte UNIT , tbyte NUMBER );Display.c: 54:
      +                               {;Display.c: 55:   LCD_SET_CURSOR(0,UNIT);
  9896  0D37  00A1               	movwf	LCD_SET_CURSOR@row
  9897  0D38  3000               	movlw	0
  9898  0D39  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
  9899                           
  9900                           ;Display.c: 56:         LCD_SEND_A_NUMBER(NUMBER);
  9901  0D3C  1283               	bcf	3,5	;RP0=0, select bank0
  9902  0D3D  1303               	bcf	3,6	;RP1=0, select bank0
  9903  0D3E  082E               	movf	DISP_UPDATE_TIME_UNIT_AT@NUMBER,w
  9904  0D3F  00A8               	movwf	LCD_SEND_A_NUMBER@x
  9905  0D40  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
  9906  0D41  2CDD               	ljmp	i1l4360
  9907  0D42                     __end_of_DISP_UPDATE_TIME_UNIT_AT:	
  9908  0D42                     __ptext66:	
  9909 ;; *************** function _TIME_CONTINUE *****************
  9910 ;; Defined at:
  9911 ;;		line 42 in file "TIME.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;		None
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;		None
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      void 
  9918 ;; Registers used:
  9919 ;;		None
  9920 ;; Tracked objects:
  9921 ;;		On entry : B00/B00
  9922 ;;		On exit  : B00/B00
  9923 ;;		Unchanged: 800/0
  9924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9925 ;;      Params:         0       0       0       0       0
  9926 ;;      Locals:         0       0       0       0       0
  9927 ;;      Temps:          0       0       0       0       0
  9928 ;;      Totals:         0       0       0       0       0
  9929 ;;Total ram usage:        0 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; This function calls:
  9932 ;;		Nothing
  9933 ;; This function is called by:
  9934 ;;		_TIME_START_AT
  9935 ;; This function uses a non-reentrant model
  9936 ;;
  9937                           
  9938                           
  9939                           ;psect for function _TIME_CONTINUE
  9940  0D42                     _TIME_CONTINUE:	
  9941  0D42                     i1l4610:	
  9942                           ;incstack = 0
  9943 ;; hardware stack exceeded
  9944                           ; Regs used in _TIME_CONTINUE: []
  9945                           
  9946                           
  9947                           ;TIME.c: 44:     COUNT_DECISION = YES;
  9948  0D42  01AB               	clrf	_COUNT_DECISION^(0+384)
  9949  0D43  0AAB               	incf	_COUNT_DECISION^(0+384),f
  9950  0D44  0008               	return
  9951  0D45                     __end_of_TIME_CONTINUE:	
  9952  0D45                     __ptext40:	
  9953 ;; *************** function _KEYPAD_UPDATE *****************
  9954 ;; Defined at:
  9955 ;;		line 30 in file "Keypad.c"
  9956 ;; Parameters:    Size  Location     Type
  9957 ;;		None
  9958 ;; Auto vars:     Size  Location     Type
  9959 ;;  COL_counter     1    4[BANK0 ] unsigned char 
  9960 ;;  ROW_counter     1    3[BANK0 ] unsigned char 
  9961 ;;  KEYPAD_count    1    2[BANK0 ] unsigned char 
  9962 ;;  KEY_STATE       1    1[BANK0 ] enum E883
  9963 ;; Return value:  Size  Location     Type
  9964 ;;                  1    wreg      void 
  9965 ;; Registers used:
  9966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9967 ;; Tracked objects:
  9968 ;;		On entry : 0/300
  9969 ;;		On exit  : 300/300
  9970 ;;		Unchanged: 0/0
  9971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9972 ;;      Params:         0       0       0       0       0
  9973 ;;      Locals:         0       4       0       0       0
  9974 ;;      Temps:          0       1       0       0       0
  9975 ;;      Totals:         0       5       0       0       0
  9976 ;;Total ram usage:        5 bytes
  9977 ;; Hardware stack levels used:    1
  9978 ;; Hardware stack levels required when called:    1
  9979 ;; This function calls:
  9980 ;;		_GPIO_PIN_GET_STATE
  9981 ;;		i1_GPIO_PIN_SET_STATE
  9982 ;; This function is called by:
  9983 ;;		_SYS_UPDATE
  9984 ;; This function uses a non-reentrant model
  9985 ;;
  9986                           
  9987                           
  9988                           ;psect for function _KEYPAD_UPDATE
  9989  0D45                     _KEYPAD_UPDATE:	
  9990                           
  9991                           ;Keypad.c: 32:  static tbyte KEYPAD_TICK_counter = 0;;Keypad.c: 33:  KEYPAD_TICK_counter
      +                           += (5);
  9992                           
  9993                           ;incstack = 0
  9994                           ; Regs used in _KEYPAD_UPDATE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9995  0D45  3005               	movlw	5
  9996  0D46  1683               	bsf	3,5	;RP0=1, select bank3
  9997  0D47  1703               	bsf	3,6	;RP1=1, select bank3
  9998  0D48  07B0               	addwf	KEYPAD_UPDATE@KEYPAD_TICK_counter^(0+384),f
  9999                           
 10000                           ;Keypad.c: 35:  if (KEYPAD_TICK_counter > (10))
 10001  0D49  300B               	movlw	11
 10002  0D4A  0230               	subwf	KEYPAD_UPDATE@KEYPAD_TICK_counter^(0+384),w
 10003  0D4B  1C03               	skipc
 10004  0D4C  0008               	return
 10005  0D4D  3002               	movlw	2
 10006                           
 10007                           ;Keypad.c: 41:   KEYPAD_TICK_counter = 0;
 10008  0D4E  01B0               	clrf	KEYPAD_UPDATE@KEYPAD_TICK_counter^(0+384)
 10009                           
 10010                           ;Keypad.c: 43:   for (KEYPAD_counter = 3 -1 ; KEYPAD_counter > 0 ; KEYPAD_counter-- )
 10011  0D4F  1283               	bcf	3,5	;RP0=0, select bank0
 10012  0D50  1303               	bcf	3,6	;RP1=0, select bank0
 10013  0D51  00A2               	movwf	KEYPAD_UPDATE@KEYPAD_counter
 10014  0D52                     i1l6302:	
 10015                           
 10016                           ;Keypad.c: 44:   {;Keypad.c: 45:    keypad_sapmles[KEYPAD_counter]=keypad_sapmles[KEYPAD
      +                          _counter-1];
 10017  0D52  0822               	movf	KEYPAD_UPDATE@KEYPAD_counter,w
 10018  0D53  3E9A               	addlw	(low ((_keypad_sapmles| (0+256)+255)))& (0+255)
 10019  0D54  0084               	movwf	4
 10020  0D55  1783               	bsf	3,7	;select IRP bank3
 10021  0D56  0800               	movf	0,w
 10022  0D57  00A0               	movwf	??_KEYPAD_UPDATE
 10023  0D58  0822               	movf	KEYPAD_UPDATE@KEYPAD_counter,w
 10024  0D59  3E9B               	addlw	(low (_keypad_sapmles| (0+256)))& (0+255)
 10025  0D5A  0084               	movwf	4
 10026  0D5B  0820               	movf	??_KEYPAD_UPDATE,w
 10027  0D5C  0080               	movwf	0
 10028                           
 10029                           ;Keypad.c: 46:   }
 10030  0D5D  0BA2               	decfsz	KEYPAD_UPDATE@KEYPAD_counter,f
 10031  0D5E  2D52               	goto	i1l6302
 10032                           
 10033                           ;Keypad.c: 47:   keypad_sapmles[0] = NO_KEY;
 10034  0D5F  300C               	movlw	12
 10035  0D60  1683               	bsf	3,5	;RP0=1, select bank3
 10036  0D61  1703               	bsf	3,6	;RP1=1, select bank3
 10037  0D62  009B               	movwf	_keypad_sapmles^(0+384)
 10038                           
 10039                           ;Keypad.c: 48:   for (ROW_counter = 0 ; ROW_counter <4 ; ROW_counter++)
 10040  0D63  1283               	bcf	3,5	;RP0=0, select bank0
 10041  0D64  1303               	bcf	3,6	;RP1=0, select bank0
 10042  0D65  01A3               	clrf	KEYPAD_UPDATE@ROW_counter
 10043  0D66                     i1l6316:	
 10044                           
 10045                           ;Keypad.c: 49:   {;Keypad.c: 50:    GPIO_PIN_SET_STATE(KEYPAD_info.KEYPAD_ROW_RORT , KEY
      +                          PAD_info.KEYPAD_ROW_PIN[ROW_counter] , GPIO_PIN_OFF);
 10046  0D66  0823               	movf	KEYPAD_UPDATE@ROW_counter,w
 10047  0D67  3EC8               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
 10048  0D68  0084               	movwf	4
 10049  0D69  1783               	bsf	3,7	;select IRP bank3
 10050  0D6A  0800               	movf	0,w
 10051  0D6B  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10052  0D6C  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10053  0D6D  1683               	bsf	3,5	;RP0=1, select bank3
 10054  0D6E  1703               	bsf	3,6	;RP1=1, select bank3
 10055  0D6F  0846               	movf	_KEYPAD_info^(0+384),w
 10056  0D70  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10057                           
 10058                           ;Keypad.c: 51:            for (COL_counter = 0 ; COL_counter <3 ; COL_counter++ )
 10059  0D73  1283               	bcf	3,5	;RP0=0, select bank0
 10060  0D74  1303               	bcf	3,6	;RP1=0, select bank0
 10061  0D75  01A4               	clrf	KEYPAD_UPDATE@COL_counter
 10062  0D76                     i1l6324:	
 10063  0D76  0824               	movf	KEYPAD_UPDATE@COL_counter,w
 10064  0D77  3ECC               	addlw	(low ((_KEYPAD_info| (0+256)+6)))& (0+255)
 10065  0D78  0084               	movwf	4
 10066  0D79  1783               	bsf	3,7	;select IRP bank3
 10067  0D7A  0800               	movf	0,w
 10068  0D7B  00F3               	movwf	GPIO_PIN_GET_STATE@GPIO_PIN_NO
 10069  0D7C  1683               	bsf	3,5	;RP0=1, select bank3
 10070  0D7D  1703               	bsf	3,6	;RP1=1, select bank3
 10071  0D7E  0847               	movf	(_KEYPAD_info^(0+384)+1),w
 10072  0D7F  2778  120A  158A   	fcall	_GPIO_PIN_GET_STATE
 10073                           
 10074                           ;Keypad.c: 54:    }
 10075  0D82  1283               	bcf	3,5	;RP0=0, select bank0
 10076  0D83  1303               	bcf	3,6	;RP1=0, select bank0
 10077  0D84  3003               	movlw	3
 10078  0D85  0AA4               	incf	KEYPAD_UPDATE@COL_counter,f
 10079  0D86  0224               	subwf	KEYPAD_UPDATE@COL_counter,w
 10080  0D87  1C03               	skipc
 10081  0D88  2D76               	goto	i1l6324
 10082                           
 10083                           ;Keypad.c: 55:    for (COL_counter = 0 ; COL_counter <3 ; COL_counter++ )
 10084  0D89  01A4               	clrf	KEYPAD_UPDATE@COL_counter
 10085  0D8A                     i1l6336:	
 10086                           
 10087                           ;Keypad.c: 56:    {;Keypad.c: 57:     KEY_STATE = GPIO_PIN_GET_STATE(KEYPAD_info.KEYPAD_
      +                          COL_PORT , KEYPAD_info.KEYPAD_COL_PIN[COL_counter]);
 10088  0D8A  0824               	movf	KEYPAD_UPDATE@COL_counter,w
 10089  0D8B  3ECC               	addlw	(low ((_KEYPAD_info| (0+256)+6)))& (0+255)
 10090  0D8C  0084               	movwf	4
 10091  0D8D  1783               	bsf	3,7	;select IRP bank3
 10092  0D8E  0800               	movf	0,w
 10093  0D8F  00F3               	movwf	GPIO_PIN_GET_STATE@GPIO_PIN_NO
 10094  0D90  1683               	bsf	3,5	;RP0=1, select bank3
 10095  0D91  1703               	bsf	3,6	;RP1=1, select bank3
 10096  0D92  0847               	movf	(_KEYPAD_info^(0+384)+1),w
 10097  0D93  2778  120A  158A   	fcall	_GPIO_PIN_GET_STATE
 10098  0D96  1283               	bcf	3,5	;RP0=0, select bank0
 10099  0D97  1303               	bcf	3,6	;RP1=0, select bank0
 10100  0D98  00A1               	movwf	KEYPAD_UPDATE@KEY_STATE
 10101                           
 10102                           ;Keypad.c: 58:     if ( KEY_STATE == (0) )
 10103  0D99  0821               	movf	KEYPAD_UPDATE@KEY_STATE,w
 10104  0D9A  1D03               	btfss	3,2
 10105  0D9B  2DA3               	goto	i1l6342
 10106                           
 10107                           ;Keypad.c: 59:     {;Keypad.c: 60:      keypad_sapmles[0]=( ROW_counter * 3 + COL_counte
      +                          r );
 10108  0D9C  0823               	movf	KEYPAD_UPDATE@ROW_counter,w
 10109  0D9D  0723               	addwf	KEYPAD_UPDATE@ROW_counter,w
 10110  0D9E  0723               	addwf	KEYPAD_UPDATE@ROW_counter,w
 10111  0D9F  0724               	addwf	KEYPAD_UPDATE@COL_counter,w
 10112  0DA0  1683               	bsf	3,5	;RP0=1, select bank3
 10113  0DA1  1703               	bsf	3,6	;RP1=1, select bank3
 10114  0DA2  009B               	movwf	_keypad_sapmles^(0+384)
 10115  0DA3                     i1l6342:	
 10116                           
 10117                           ;Keypad.c: 62:    }
 10118  0DA3  1283               	bcf	3,5	;RP0=0, select bank0
 10119  0DA4  1303               	bcf	3,6	;RP1=0, select bank0
 10120  0DA5  3003               	movlw	3
 10121  0DA6  0AA4               	incf	KEYPAD_UPDATE@COL_counter,f
 10122  0DA7  0224               	subwf	KEYPAD_UPDATE@COL_counter,w
 10123  0DA8  1C03               	skipc
 10124  0DA9  2D8A               	goto	i1l6336
 10125                           
 10126                           ;Keypad.c: 63:    GPIO_PIN_SET_STATE(KEYPAD_info.KEYPAD_ROW_RORT , KEYPAD_info.KEYPAD_RO
      +                          W_PIN[ROW_counter] , GPIO_PIN_ON);
 10127  0DAA  0823               	movf	KEYPAD_UPDATE@ROW_counter,w
 10128  0DAB  3EC8               	addlw	(low ((_KEYPAD_info| (0+256)+2)))& (0+255)
 10129  0DAC  0084               	movwf	4
 10130  0DAD  1783               	bsf	3,7	;select IRP bank3
 10131  0DAE  0800               	movf	0,w
 10132  0DAF  00F3               	movwf	i1GPIO_PIN_SET_STATE@GPIO_PIN_NO
 10133  0DB0  01F4               	clrf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE
 10134  0DB1  0AF4               	incf	i1GPIO_PIN_SET_STATE@GPIO_PIN_STATE,f
 10135  0DB2  1683               	bsf	3,5	;RP0=1, select bank3
 10136  0DB3  1703               	bsf	3,6	;RP1=1, select bank3
 10137  0DB4  0846               	movf	_KEYPAD_info^(0+384),w
 10138  0DB5  2745  120A  158A   	fcall	i1_GPIO_PIN_SET_STATE
 10139                           
 10140                           ;Keypad.c: 64:   }
 10141  0DB8  1283               	bcf	3,5	;RP0=0, select bank0
 10142  0DB9  1303               	bcf	3,6	;RP1=0, select bank0
 10143  0DBA  3004               	movlw	4
 10144  0DBB  0AA3               	incf	KEYPAD_UPDATE@ROW_counter,f
 10145  0DBC  0223               	subwf	KEYPAD_UPDATE@ROW_counter,w
 10146  0DBD  1C03               	skipc
 10147  0DBE  2D66               	goto	i1l6316
 10148                           
 10149                           ;Keypad.c: 65:   if ((keypad_sapmles[0] == keypad_sapmles[1])&(keypad_sapmles[0] != keyp
      +                          ad_sapmles[2]) )
 10150  0DBF  1683               	bsf	3,5	;RP0=1, select bank3
 10151  0DC0  1703               	bsf	3,6	;RP1=1, select bank3
 10152  0DC1  081C               	movf	(_keypad_sapmles^(0+384)+1),w
 10153  0DC2  061B               	xorwf	_keypad_sapmles^(0+384),w
 10154  0DC3  1D03               	skipz
 10155  0DC4  2DCE               	goto	i1l6358
 10156  0DC5  081D               	movf	(_keypad_sapmles^(0+384)+2),w
 10157  0DC6  061B               	xorwf	_keypad_sapmles^(0+384),w
 10158  0DC7  1903               	skipnz
 10159  0DC8  2DCE               	goto	i1l6358
 10160                           
 10161                           ;Keypad.c: 66:   {;Keypad.c: 67:    LAST_PRESSED_KEY.KEYPAD_NO = keypad_sapmles[0];
 10162  0DC9  081B               	movf	_keypad_sapmles^(0+384),w
 10163  0DCA  00A2               	movwf	_LAST_PRESSED_KEY^(0+384)
 10164                           
 10165                           ;Keypad.c: 68:    LAST_PRESSED_KEY.KEYPAD_STATUS = KEY_PRE_PRESSED;
 10166  0DCB  01A3               	clrf	(_LAST_PRESSED_KEY^(0+384)+1)
 10167  0DCC  0AA3               	incf	(_LAST_PRESSED_KEY^(0+384)+1),f
 10168                           
 10169                           ;Keypad.c: 69:   }
 10170  0DCD  0008               	return
 10171  0DCE                     i1l6358:	
 10172  0DCE  081C               	movf	(_keypad_sapmles^(0+384)+1),w
 10173  0DCF  061B               	xorwf	_keypad_sapmles^(0+384),w
 10174  0DD0  1D03               	skipz
 10175  0DD1  2DDA               	goto	i1l6366
 10176  0DD2  081D               	movf	(_keypad_sapmles^(0+384)+2),w
 10177  0DD3  061B               	xorwf	_keypad_sapmles^(0+384),w
 10178  0DD4  1D03               	skipz
 10179  0DD5  2DDA               	goto	i1l6366
 10180                           
 10181                           ;Keypad.c: 71:   {;Keypad.c: 72:    LAST_PRESSED_KEY.KEYPAD_NO = keypad_sapmles[0];
 10182  0DD6  081B               	movf	_keypad_sapmles^(0+384),w
 10183  0DD7  00A2               	movwf	_LAST_PRESSED_KEY^(0+384)
 10184                           
 10185                           ;Keypad.c: 73:    LAST_PRESSED_KEY.KEYPAD_STATUS = KEY_PRESSED;
 10186  0DD8  01A3               	clrf	(_LAST_PRESSED_KEY^(0+384)+1)
 10187                           
 10188                           ;Keypad.c: 74:   }
 10189  0DD9  0008               	return
 10190  0DDA                     i1l6366:	
 10191                           
 10192                           ;Keypad.c: 76:   {;Keypad.c: 77:    LAST_PRESSED_KEY.KEYPAD_NO = NO_KEY;
 10193  0DDA  300C               	movlw	12
 10194  0DDB  00A2               	movwf	_LAST_PRESSED_KEY^(0+384)
 10195  0DDC  0008               	return
 10196  0DDD                     __end_of_KEYPAD_UPDATE:	
 10197  0DDD                     __ptext83:	
 10198 ;; *************** function _UPDATE_LCD_HOURS *****************
 10199 ;; Defined at:
 10200 ;;		line 134 in file "Display.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;  HOURS           1    wreg     unsigned char 
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;  HOURS           1   14[BANK0 ] unsigned char 
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  1    wreg      void 
 10207 ;; Registers used:
 10208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10209 ;; Tracked objects:
 10210 ;;		On entry : 300/0
 10211 ;;		On exit  : 300/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10214 ;;      Params:         0       0       0       0       0
 10215 ;;      Locals:         0       1       0       0       0
 10216 ;;      Temps:          0       0       0       0       0
 10217 ;;      Totals:         0       1       0       0       0
 10218 ;;Total ram usage:        1 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    4
 10221 ;; This function calls:
 10222 ;;		_LCD_SEND_A_NUMBER
 10223 ;;		_LCD_SET_CURSOR
 10224 ;;		___lbdiv
 10225 ;; This function is called by:
 10226 ;;		_DISP_UPDATE_TIME
 10227 ;;		_DISP_SHOW_TIME_AT
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           
 10232                           ;psect for function _UPDATE_LCD_HOURS
 10233  0DDD                     _UPDATE_LCD_HOURS:	
 10234                           
 10235                           ;incstack = 0
 10236 ;; hardware stack exceeded
 10237                           ; Regs used in _UPDATE_LCD_HOURS: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10238                           ;UPDATE_LCD_HOURS@HOURS stored from wreg
 10239  0DDD  00AE               	movwf	UPDATE_LCD_HOURS@HOURS
 10240                           
 10241                           ;Display.c: 134:  static void UPDATE_LCD_HOURS(tbyte HOURS);Display.c: 135:  {;Display.c
      +                          : 137:   LCD_SET_CURSOR(0,(6));
 10242  0DDE  3006               	movlw	6
 10243  0DDF  00A1               	movwf	LCD_SET_CURSOR@row
 10244  0DE0  3000               	movlw	0
 10245  0DE1  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10246                           
 10247                           ;Display.c: 138:   if (HOURS / 10 != 0)
 10248  0DE4  300A               	movlw	10
 10249  0DE5  00F0               	movwf	___lbdiv@divisor
 10250  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
 10251  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
 10252  0DE8  082E               	movf	UPDATE_LCD_HOURS@HOURS,w
 10253  0DE9  24EC  120A  158A   	fcall	___lbdiv
 10254  0DEC  3A00               	xorlw	0
 10255  0DED  1903               	skipnz
 10256  0DEE  2DF3               	goto	i1l4598
 10257                           
 10258                           ;Display.c: 139:   {;Display.c: 140:    LCD_SEND_A_NUMBER(HOURS);
 10259  0DEF  082E               	movf	UPDATE_LCD_HOURS@HOURS,w
 10260  0DF0  00A8               	movwf	LCD_SEND_A_NUMBER@x
 10261  0DF1  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
 10262  0DF2  2CDD               	ljmp	i1l4360
 10263  0DF3                     i1l4598:	
 10264                           ;Display.c: 141:   }
 10265                           
 10266                           
 10267                           ;Display.c: 143:   {;Display.c: 144:    LCD_SEND_A_NUMBER(0);
 10268  0DF3  01A8               	clrf	LCD_SEND_A_NUMBER@x
 10269  0DF4  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
 10270  0DF5  24DD  120A  158A   	fcall	_LCD_SEND_A_NUMBER
 10271                           
 10272                           ;Display.c: 145:    LCD_SEND_A_NUMBER(HOURS);
 10273  0DF8  082E               	movf	UPDATE_LCD_HOURS@HOURS,w
 10274  0DF9  00A8               	movwf	LCD_SEND_A_NUMBER@x
 10275  0DFA  01A9               	clrf	LCD_SEND_A_NUMBER@x+1
 10276  0DFB  2CDD               	ljmp	i1l4360
 10277  0DFC                     __end_of_UPDATE_LCD_HOURS:	
 10278  0DFC                     __ptext59:	
 10279 ;; *************** function _DISP_MOTOR_DATA *****************
 10280 ;; Defined at:
 10281 ;;		line 80 in file "Display.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;		None
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;		None
 10286 ;; Return value:  Size  Location     Type
 10287 ;;                  1    wreg      void 
 10288 ;; Registers used:
 10289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10290 ;; Tracked objects:
 10291 ;;		On entry : 0/0
 10292 ;;		On exit  : 300/0
 10293 ;;		Unchanged: 0/0
 10294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10295 ;;      Params:         0       0       0       0       0
 10296 ;;      Locals:         0       0       0       0       0
 10297 ;;      Temps:          0       0       0       0       0
 10298 ;;      Totals:         0       0       0       0       0
 10299 ;;Total ram usage:        0 bytes
 10300 ;; Hardware stack levels used:    1
 10301 ;; Hardware stack levels required when called:    3
 10302 ;; This function calls:
 10303 ;;		_LCD_CLEAR
 10304 ;;		_LCD_SEND_A_STRING
 10305 ;;		_LCD_SET_CURSOR
 10306 ;; This function is called by:
 10307 ;;		_SET_ROTOR_PWR_HANDLER
 10308 ;; This function uses a non-reentrant model
 10309 ;;
 10310                           
 10311                           
 10312                           ;psect for function _DISP_MOTOR_DATA
 10313  0DFC                     _DISP_MOTOR_DATA:	
 10314                           
 10315                           ;Display.c: 83:  LCD_CLEAR();
 10316                           
 10317                           ;incstack = 0
 10318 ;; hardware stack exceeded
 10319                           ; Regs used in _DISP_MOTOR_DATA: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10320  0DFC  26CD  120A  158A   	fcall	_LCD_CLEAR
 10321                           
 10322                           ;Display.c: 84:  LCD_SET_CURSOR(0,0);
 10323  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
 10324  0E00  1303               	bcf	3,6	;RP1=0, select bank0
 10325  0E01  3000               	movlw	0
 10326  0E02  01A1               	clrf	LCD_SET_CURSOR@row
 10327  0E03  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10328                           
 10329                           ;Display.c: 85:  LCD_SEND_A_STRING("MOTOR PWR: 1 2 3");
 10330  0E06  3089               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
 10331  0E07  1283               	bcf	3,5	;RP0=0, select bank0
 10332  0E08  1303               	bcf	3,6	;RP1=0, select bank0
 10333  0E09  00A1               	movwf	LCD_SEND_A_STRING@string
 10334  0E0A  3080               	movlw	128
 10335  0E0B  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10336  0E0C  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10337  0E0F  3001               	movlw	1
 10338                           
 10339                           ;Display.c: 86:  LCD_SET_CURSOR(1,0);
 10340  0E10  01A1               	clrf	LCD_SET_CURSOR@row
 10341  0E11  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10342                           
 10343                           ;Display.c: 87:  LCD_SEND_A_STRING("<");
 10344  0E14  309A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
 10345  0E15  1283               	bcf	3,5	;RP0=0, select bank0
 10346  0E16  1303               	bcf	3,6	;RP1=0, select bank0
 10347  0E17  00A1               	movwf	LCD_SEND_A_STRING@string
 10348  0E18  3080               	movlw	128
 10349  0E19  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10350  0E1A  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10351                           
 10352                           ;Display.c: 88:  LCD_SET_CURSOR(1,15);
 10353  0E1D  300F               	movlw	15
 10354  0E1E  00A1               	movwf	LCD_SET_CURSOR@row
 10355  0E1F  3001               	movlw	1
 10356  0E20  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10357                           
 10358                           ;Display.c: 89:  LCD_SEND_A_STRING(">");
 10359  0E23  3010               	movlw	(low (((STR_12+15)-__stringbase)| (0+32768)))& (0+255)
 10360  0E24  1283               	bcf	3,5	;RP0=0, select bank0
 10361  0E25  1303               	bcf	3,6	;RP1=0, select bank0
 10362  0E26  00A1               	movwf	LCD_SEND_A_STRING@string
 10363  0E27  3080               	movlw	128
 10364  0E28  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10365  0E29  2E86               	ljmp	i1l4318
 10366  0E2A                     __end_of_DISP_MOTOR_DATA:	
 10367  0E2A                     __ptext63:	
 10368 ;; *************** function _DISP_HEATER_DATA *****************
 10369 ;; Defined at:
 10370 ;;		line 68 in file "Display.c"
 10371 ;; Parameters:    Size  Location     Type
 10372 ;;		None
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;		None
 10375 ;; Return value:  Size  Location     Type
 10376 ;;                  1    wreg      void 
 10377 ;; Registers used:
 10378 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10379 ;; Tracked objects:
 10380 ;;		On entry : 0/0
 10381 ;;		On exit  : 300/0
 10382 ;;		Unchanged: 0/0
 10383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10384 ;;      Params:         0       0       0       0       0
 10385 ;;      Locals:         0       0       0       0       0
 10386 ;;      Temps:          0       0       0       0       0
 10387 ;;      Totals:         0       0       0       0       0
 10388 ;;Total ram usage:        0 bytes
 10389 ;; Hardware stack levels used:    1
 10390 ;; Hardware stack levels required when called:    3
 10391 ;; This function calls:
 10392 ;;		_LCD_CLEAR
 10393 ;;		_LCD_SEND_A_STRING
 10394 ;;		_LCD_SET_CURSOR
 10395 ;; This function is called by:
 10396 ;;		_SET_HEATING_HANDLER
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           
 10401                           ;psect for function _DISP_HEATER_DATA
 10402  0E2A                     _DISP_HEATER_DATA:	
 10403                           
 10404                           ;Display.c: 71:  LCD_CLEAR();
 10405                           
 10406                           ;incstack = 0
 10407 ;; hardware stack exceeded
 10408                           ; Regs used in _DISP_HEATER_DATA: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10409  0E2A  26CD  120A  158A   	fcall	_LCD_CLEAR
 10410                           
 10411                           ;Display.c: 72:  LCD_SET_CURSOR(0,0);
 10412  0E2D  1283               	bcf	3,5	;RP0=0, select bank0
 10413  0E2E  1303               	bcf	3,6	;RP1=0, select bank0
 10414  0E2F  3000               	movlw	0
 10415  0E30  01A1               	clrf	LCD_SET_CURSOR@row
 10416  0E31  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10417                           
 10418                           ;Display.c: 73:  LCD_SEND_A_STRING(" HEAT LVL: 1 2 3");
 10419  0E34  3078               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
 10420  0E35  1283               	bcf	3,5	;RP0=0, select bank0
 10421  0E36  1303               	bcf	3,6	;RP1=0, select bank0
 10422  0E37  00A1               	movwf	LCD_SEND_A_STRING@string
 10423  0E38  3080               	movlw	128
 10424  0E39  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10425  0E3A  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10426  0E3D  3001               	movlw	1
 10427                           
 10428                           ;Display.c: 74:  LCD_SET_CURSOR(1,0);
 10429  0E3E  01A1               	clrf	LCD_SET_CURSOR@row
 10430  0E3F  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10431                           
 10432                           ;Display.c: 75:  LCD_SEND_A_STRING("<");
 10433  0E42  309A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
 10434  0E43  1283               	bcf	3,5	;RP0=0, select bank0
 10435  0E44  1303               	bcf	3,6	;RP1=0, select bank0
 10436  0E45  00A1               	movwf	LCD_SEND_A_STRING@string
 10437  0E46  3080               	movlw	128
 10438  0E47  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10439  0E48  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10440                           
 10441                           ;Display.c: 76:  LCD_SET_CURSOR(1,15);
 10442  0E4B  300F               	movlw	15
 10443  0E4C  00A1               	movwf	LCD_SET_CURSOR@row
 10444  0E4D  3001               	movlw	1
 10445  0E4E  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10446                           
 10447                           ;Display.c: 77:  LCD_SEND_A_STRING(">");
 10448  0E51  3010               	movlw	(low (((STR_12+15)-__stringbase)| (0+32768)))& (0+255)
 10449  0E52  1283               	bcf	3,5	;RP0=0, select bank0
 10450  0E53  1303               	bcf	3,6	;RP1=0, select bank0
 10451  0E54  00A1               	movwf	LCD_SEND_A_STRING@string
 10452  0E55  3080               	movlw	128
 10453  0E56  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10454  0E57  2E86               	ljmp	i1l4318
 10455  0E58                     __end_of_DISP_HEATER_DATA:	
 10456  0E58                     __ptext90:	
 10457 ;; *************** function _DISP_SHOW_TIME *****************
 10458 ;; Defined at:
 10459 ;;		line 150 in file "Display.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;		None
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;		None
 10464 ;; Return value:  Size  Location     Type
 10465 ;;                  1    wreg      void 
 10466 ;; Registers used:
 10467 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10468 ;; Tracked objects:
 10469 ;;		On entry : 300/0
 10470 ;;		On exit  : 300/0
 10471 ;;		Unchanged: 0/0
 10472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10473 ;;      Params:         0       0       0       0       0
 10474 ;;      Locals:         0       0       0       0       0
 10475 ;;      Temps:          0       0       0       0       0
 10476 ;;      Totals:         0       0       0       0       0
 10477 ;;Total ram usage:        0 bytes
 10478 ;; Hardware stack levels used:    1
 10479 ;; Hardware stack levels required when called:    3
 10480 ;; This function calls:
 10481 ;;		_LCD_CLEAR
 10482 ;;		_LCD_SEND_A_STRING
 10483 ;;		_LCD_SET_CURSOR
 10484 ;; This function is called by:
 10485 ;;		_DISP_SHOW_TIME_AT
 10486 ;; This function uses a non-reentrant model
 10487 ;;
 10488                           
 10489                           
 10490                           ;psect for function _DISP_SHOW_TIME
 10491  0E58                     _DISP_SHOW_TIME:	
 10492                           
 10493                           ;Display.c: 153:  LCD_CLEAR();
 10494                           
 10495                           ;incstack = 0
 10496 ;; hardware stack exceeded
 10497                           ; Regs used in _DISP_SHOW_TIME: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10498  0E58  26CD  120A  158A   	fcall	_LCD_CLEAR
 10499                           
 10500                           ;Display.c: 154:  LCD_SET_CURSOR(0,0);
 10501  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
 10502  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
 10503  0E5D  3000               	movlw	0
 10504  0E5E  01A1               	clrf	LCD_SET_CURSOR@row
 10505  0E5F  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10506                           
 10507                           ;Display.c: 155:  LCD_SEND_A_STRING(" TIME:00:00:00  ");
 10508  0E62  3067               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
 10509  0E63  1283               	bcf	3,5	;RP0=0, select bank0
 10510  0E64  1303               	bcf	3,6	;RP1=0, select bank0
 10511  0E65  00A1               	movwf	LCD_SEND_A_STRING@string
 10512  0E66  3080               	movlw	128
 10513  0E67  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10514  0E68  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10515  0E6B  3001               	movlw	1
 10516                           
 10517                           ;Display.c: 156:  LCD_SET_CURSOR(1,0);
 10518  0E6C  01A1               	clrf	LCD_SET_CURSOR@row
 10519  0E6D  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10520                           
 10521                           ;Display.c: 157:  LCD_SEND_A_STRING("<");
 10522  0E70  309A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
 10523  0E71  1283               	bcf	3,5	;RP0=0, select bank0
 10524  0E72  1303               	bcf	3,6	;RP1=0, select bank0
 10525  0E73  00A1               	movwf	LCD_SEND_A_STRING@string
 10526  0E74  3080               	movlw	128
 10527  0E75  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10528  0E76  2686  120A  158A   	fcall	_LCD_SEND_A_STRING
 10529                           
 10530                           ;Display.c: 158:  LCD_SET_CURSOR(1,15);
 10531  0E79  300F               	movlw	15
 10532  0E7A  00A1               	movwf	LCD_SET_CURSOR@row
 10533  0E7B  3001               	movlw	1
 10534  0E7C  26A4  120A  158A   	fcall	_LCD_SET_CURSOR
 10535                           
 10536                           ;Display.c: 159:  LCD_SEND_A_STRING(">");
 10537  0E7F  3010               	movlw	(low (((STR_12+15)-__stringbase)| (0+32768)))& (0+255)
 10538  0E80  1283               	bcf	3,5	;RP0=0, select bank0
 10539  0E81  1303               	bcf	3,6	;RP1=0, select bank0
 10540  0E82  00A1               	movwf	LCD_SEND_A_STRING@string
 10541  0E83  3080               	movlw	128
 10542  0E84  00A2               	movwf	LCD_SEND_A_STRING@string+1
 10543  0E85  2E86               	ljmp	i1l4318
 10544  0E86                     __end_of_DISP_SHOW_TIME:	
 10545  0E86                     __ptext92:	
 10546 ;; *************** function _LCD_SEND_A_STRING *****************
 10547 ;; Defined at:
 10548 ;;		line 61 in file "LCD.c"
 10549 ;; Parameters:    Size  Location     Type
 10550 ;;  string          2    1[BANK0 ] PTR unsigned char 
 10551 ;;		 -> STR_17(17), STR_16(17), STR_15(17), STR_14(17), 
 10552 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
 10553 ;;		 -> STR_9(2), STR_8(2), STR_7(17), STR_6(2), 
 10554 ;;		 -> STR_5(2), STR_4(17), STR_3(2), STR_2(2), 
 10555 ;;		 -> STR_1(17), LCD_SEND_A_NUMBER@string(4), 
 10556 ;; Auto vars:     Size  Location     Type
 10557 ;;		None
 10558 ;; Return value:  Size  Location     Type
 10559 ;;                  1    wreg      void 
 10560 ;; Registers used:
 10561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10562 ;; Tracked objects:
 10563 ;;		On entry : 300/0
 10564 ;;		On exit  : 300/0
 10565 ;;		Unchanged: 0/0
 10566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10567 ;;      Params:         0       2       0       0       0
 10568 ;;      Locals:         0       0       0       0       0
 10569 ;;      Temps:          0       0       0       0       0
 10570 ;;      Totals:         0       2       0       0       0
 10571 ;;Total ram usage:        2 bytes
 10572 ;; Hardware stack levels used:    1
 10573 ;; Hardware stack levels required when called:    2
 10574 ;; This function calls:
 10575 ;;		_LCD_SEND_CHARACTER
 10576 ;; This function is called by:
 10577 ;;		_LCD_SEND_A_NUMBER
 10578 ;;		_DISP_HEATER_DATA
 10579 ;;		_DISP_MOTOR_DATA
 10580 ;;		_DISP_STATMENT
 10581 ;;		_DISP_SHOW_TIME
 10582 ;; This function uses a non-reentrant model
 10583 ;;
 10584                           
 10585                           
 10586                           ;psect for function _LCD_SEND_A_STRING
 10587  0E86                     _LCD_SEND_A_STRING:	
 10588  0E86                     i1l4318:	
 10589                           ;incstack = 0
 10590 ;; hardware stack exceeded
 10591                           ; Regs used in _LCD_SEND_A_STRING: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10592                           
 10593  0E86                     i1l4324:	
 10594                           ;LCD.c: 61: void LCD_SEND_A_STRING ( tbyte *string);LCD.c: 62: {;LCD.c: 63:  while (*str
      +                          ing != 0){
 10595                           
 10596                           
 10597                           ;LCD.c: 63:  while (*string != 0){
 10598  0E86  0822               	movf	LCD_SEND_A_STRING@string+1,w
 10599  0E87  00FF               	movwf	127
 10600  0E88  0821               	movf	LCD_SEND_A_STRING@string,w
 10601  0E89  0084               	movwf	4
 10602  0E8A  120A  118A  270E  120A  158A  	fcall	stringtab
 10603  0E8F  3A00               	xorlw	0
 10604  0E90  1903               	btfsc	3,2
 10605  0E91  0008               	return
 10606                           
 10607                           ;LCD.c: 64:   LCD_SEND_CHARACTER(*string++);
 10608  0E92  0822               	movf	LCD_SEND_A_STRING@string+1,w
 10609  0E93  00FF               	movwf	127
 10610  0E94  0821               	movf	LCD_SEND_A_STRING@string,w
 10611  0E95  0084               	movwf	4
 10612  0E96  120A  118A  270E  120A  158A  	fcall	stringtab
 10613  0E9B  26D8  120A  158A   	fcall	_LCD_SEND_CHARACTER
 10614  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
 10615  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
 10616  0EA0  0AA1               	incf	LCD_SEND_A_STRING@string,f
 10617  0EA1  1903               	skipnz
 10618  0EA2  0AA2               	incf	LCD_SEND_A_STRING@string+1,f
 10619  0EA3  2E86               	goto	i1l4324
 10620  0EA4                     __end_of_LCD_SEND_A_STRING:	
 10621  0EA4                     __ptext91:	
 10622 ;; *************** function _LCD_SET_CURSOR *****************
 10623 ;; Defined at:
 10624 ;;		line 78 in file "LCD.c"
 10625 ;; Parameters:    Size  Location     Type
 10626 ;;  coloum          1    wreg     unsigned char 
 10627 ;;  row             1    1[BANK0 ] unsigned char 
 10628 ;; Auto vars:     Size  Location     Type
 10629 ;;  coloum          1    4[BANK0 ] unsigned char 
 10630 ;; Return value:  Size  Location     Type
 10631 ;;                  1    wreg      void 
 10632 ;; Registers used:
 10633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10634 ;; Tracked objects:
 10635 ;;		On entry : 300/0
 10636 ;;		On exit  : 0/0
 10637 ;;		Unchanged: 0/0
 10638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10639 ;;      Params:         0       1       0       0       0
 10640 ;;      Locals:         0       1       0       0       0
 10641 ;;      Temps:          0       2       0       0       0
 10642 ;;      Totals:         0       4       0       0       0
 10643 ;;Total ram usage:        4 bytes
 10644 ;; Hardware stack levels used:    1
 10645 ;; Hardware stack levels required when called:    2
 10646 ;; This function calls:
 10647 ;;		i1_LCD_SND_COMMAND
 10648 ;; This function is called by:
 10649 ;;		_START_BLINKING_AT
 10650 ;;		_DISP_UPDATE_TIME_UNIT_AT
 10651 ;;		_DISP_HEATER_DATA
 10652 ;;		_DISP_MOTOR_DATA
 10653 ;;		_DISP_STATMENT
 10654 ;;		_UPDATE_LCD_SECONDS
 10655 ;;		_UPDATE_LCD_MINUTES
 10656 ;;		_UPDATE_LCD_HOURS
 10657 ;;		_DISP_SHOW_TIME
 10658 ;;		_INCREMENT_THIS
 10659 ;; This function uses a non-reentrant model
 10660 ;;
 10661                           
 10662                           
 10663                           ;psect for function _LCD_SET_CURSOR
 10664  0EA4                     _LCD_SET_CURSOR:	
 10665                           
 10666                           ;incstack = 0
 10667 ;; hardware stack exceeded
 10668                           ; Regs used in _LCD_SET_CURSOR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10669                           ;LCD_SET_CURSOR@coloum stored from wreg
 10670  0EA4  00A4               	movwf	LCD_SET_CURSOR@coloum
 10671                           
 10672                           ;LCD.c: 78: void LCD_SET_CURSOR (tbyte coloum , tbyte row);LCD.c: 79: {;LCD.c: 80:  swit
      +                          ch (coloum)
 10673  0EA5  2EB6               	goto	i1l4352
 10674  0EA6                     i1l4342:	
 10675                           
 10676                           ;LCD.c: 84:   LCD_SND_COMMAND((0x80+row));
 10677  0EA6  0821               	movf	LCD_SET_CURSOR@row,w
 10678  0EA7  3E80               	addlw	128
 10679  0EA8  270E               	fcall	i1_LCD_SND_COMMAND
 10680                           
 10681                           ;LCD.c: 85:   break;
 10682  0EA9  0008               	return
 10683  0EAA                     i1l4344:	
 10684                           
 10685                           ;LCD.c: 88:   LCD_SND_COMMAND((0xC0+row));
 10686  0EAA  0821               	movf	LCD_SET_CURSOR@row,w
 10687  0EAB  3EC0               	addlw	192
 10688  0EAC  270E               	fcall	i1_LCD_SND_COMMAND
 10689                           
 10690                           ;LCD.c: 89:   break;
 10691  0EAD  0008               	return
 10692  0EAE                     i1l4346:	
 10693                           
 10694                           ;LCD.c: 91:   LCD_SND_COMMAND((0x94+row));
 10695  0EAE  0821               	movf	LCD_SET_CURSOR@row,w
 10696  0EAF  3E94               	addlw	148
 10697  0EB0  270E               	fcall	i1_LCD_SND_COMMAND
 10698                           
 10699                           ;LCD.c: 92:   break;
 10700  0EB1  0008               	return
 10701  0EB2                     i1l4348:	
 10702                           
 10703                           ;LCD.c: 94:   LCD_SND_COMMAND((0xD4+row));
 10704  0EB2  0821               	movf	LCD_SET_CURSOR@row,w
 10705  0EB3  3ED4               	addlw	212
 10706  0EB4  270E               	fcall	i1_LCD_SND_COMMAND
 10707                           
 10708                           ;LCD.c: 95:   break;
 10709  0EB5  0008               	return
 10710  0EB6                     i1l4352:	
 10711  0EB6  0824               	movf	LCD_SET_CURSOR@coloum,w
 10712  0EB7  00A2               	movwf	??_LCD_SET_CURSOR
 10713  0EB8  01A3               	clrf	??_LCD_SET_CURSOR+1
 10714                           
 10715                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10716                           ; Switch size 1, requested type "speed"
 10717                           ; Number of cases is 1, Range of values is 0 to 0
 10718                           ; switch strategies available:
 10719                           ; Name         Instructions Cycles
 10720                           ; simple_byte            4     3 (average)
 10721                           ; direct_byte           11     8 (fixed)
 10722                           ; jumptable            260     6 (fixed)
 10723                           ;	Chosen strategy is simple_byte
 10724  0EB9  0823               	movf	??_LCD_SET_CURSOR+1,w
 10725  0EBA  3A00               	xorlw	0	; case 0
 10726  0EBB  1903               	skipnz
 10727  0EBC  2EBE               	goto	i1l6928
 10728  0EBD  2ECC               	goto	i1l387
 10729  0EBE                     i1l6928:	
 10730                           
 10731                           ; Switch size 1, requested type "speed"
 10732                           ; Number of cases is 4, Range of values is 0 to 3
 10733                           ; switch strategies available:
 10734                           ; Name         Instructions Cycles
 10735                           ; simple_byte           13     7 (average)
 10736                           ; direct_byte           20     8 (fixed)
 10737                           ; jumptable            260     6 (fixed)
 10738                           ;	Chosen strategy is simple_byte
 10739  0EBE  0822               	movf	??_LCD_SET_CURSOR,w
 10740  0EBF  3A00               	xorlw	0	; case 0
 10741  0EC0  1903               	skipnz
 10742  0EC1  2EA6               	goto	i1l4342
 10743  0EC2  3A01               	xorlw	1	; case 1
 1